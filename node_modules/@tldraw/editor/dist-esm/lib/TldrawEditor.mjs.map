{
  "version": 3,
  "sources": ["../../src/lib/TldrawEditor.tsx"],
  "sourcesContent": ["import { Store, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStore } from '@tldraw/tlschema'\nimport { RecursivePartial, Required, annotateError } from '@tldraw/utils'\nimport React, {\n\tmemo,\n\tuseCallback,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseState,\n\tuseSyncExternalStore,\n} from 'react'\nimport { TLEditorAssetUrls, useDefaultEditorAssetsWithOverrides } from './assetUrls'\nimport { DefaultErrorFallback } from './components/DefaultErrorFallback'\nimport { OptionalErrorBoundary } from './components/ErrorBoundary'\nimport { TLUser, createTLUser } from './config/createTLUser'\nimport { AnyTLShapeInfo } from './config/defineShape'\nimport { Editor } from './editor/Editor'\nimport { TLStateNodeConstructor } from './editor/tools/StateNode'\nimport { ContainerProvider, useContainer } from './hooks/useContainer'\nimport { useCursor } from './hooks/useCursor'\nimport { useDarkMode } from './hooks/useDarkMode'\nimport { EditorContext } from './hooks/useEditor'\nimport {\n\tEditorComponentsProvider,\n\tTLEditorComponents,\n\tuseEditorComponents,\n} from './hooks/useEditorComponents'\nimport { useEvent } from './hooks/useEvent'\nimport { useForceUpdate } from './hooks/useForceUpdate'\nimport { useLocalStore } from './hooks/useLocalStore'\nimport { usePreloadAssets } from './hooks/usePreloadAssets'\nimport { useSafariFocusOutFix } from './hooks/useSafariFocusOutFix'\nimport { useZoomCss } from './hooks/useZoomCss'\nimport { TLStoreWithStatus } from './utils/sync/StoreWithStatus'\n\n/** @public */\nexport type TldrawEditorProps = {\n\tchildren?: any\n\t/** An array of shape utils to use in the editor. */\n\tshapes?: readonly AnyTLShapeInfo[]\n\t/** An array of tools to use in the editor. */\n\ttools?: readonly TLStateNodeConstructor[]\n\t/** Urls for where to find fonts and other assets. */\n\tassetUrls?: RecursivePartial<TLEditorAssetUrls>\n\t/** Whether to automatically focus the editor when it mounts. */\n\tautoFocus?: boolean\n\t/** Overrides for the tldraw user interface components. */\n\tcomponents?: Partial<TLEditorComponents>\n\t/**\n\t * Called when the editor has mounted.\n\t * @example\n\t * ```ts\n\t * function TldrawEditor() {\n\t * \treturn <Editor onMount={(editor) => editor.selectAll()} />\n\t * }\n\t * ```\n\t * @param editor - The editor instance.\n\t */\n\tonMount?: (editor: Editor) => (() => void) | undefined | void\n} & (\n\t| {\n\t\t\t/**\n\t\t\t * The Store instance to use for keeping the editor's data. This may be prepopulated, e.g. by loading\n\t\t\t * from a server or database.\n\t\t\t */\n\t\t\tstore: TLStore | TLStoreWithStatus\n\t  }\n\t| {\n\t\t\tstore?: undefined\n\t\t\t/**\n\t\t\t * The editor's initial data.\n\t\t\t */\n\t\t\tinitialData?: StoreSnapshot<TLRecord>\n\t\t\t/**\n\t\t\t * The id under which to sync and persist the editor's data. If none is given tldraw will not sync or persist\n\t\t\t * the editor's data.\n\t\t\t */\n\t\t\tpersistenceKey?: string\n\t\t\t/**\n\t\t\t * When tldraw reloads a document from local persistence, it will try to bring back the\n\t\t\t * editor UI state (e.g. camera position, which shapes are selected). It does this using a sessionId,\n\t\t\t * which by default is unique per browser tab. If you wish to have more fine-grained\n\t\t\t * control over this behavior, you can provide your own sessionId.\n\t\t\t *\n\t\t\t * If it can't find saved UI state for the given sessionId, it will use the most recently saved\n\t\t\t * UI state for the given persistenceKey if available.\n\t\t\t */\n\t\t\tsessionId?: string\n\t\t\t/**\n\t\t\t * The default initial document name. e.g. 'Untitled Document'\n\t\t\t */\n\t\t\tdefaultName?: string\n\t  }\n)\n\ndeclare global {\n\tinterface Window {\n\t\ttldrawReady: boolean\n\t}\n}\n\nconst EMPTY_SHAPES_ARRAY = [] as const\nconst EMPTY_TOOLS_ARRAY = [] as const\n\n/** @public */\nexport const TldrawEditor = memo(function TldrawEditor({\n\tstore,\n\tcomponents,\n\t...rest\n}: TldrawEditorProps) {\n\tconst [container, setContainer] = React.useState<HTMLDivElement | null>(null)\n\tconst user = useMemo(() => createTLUser(), [])\n\n\tconst ErrorFallback =\n\t\tcomponents?.ErrorFallback === undefined ? DefaultErrorFallback : components?.ErrorFallback\n\n\t// apply defaults. if you're using the bare @tldraw/editor package, we\n\t// default these to the \"tldraw zero\" configuration. We have different\n\t// defaults applied in @tldraw/tldraw.\n\tconst withDefaults = {\n\t\t...rest,\n\t\tshapes: rest.shapes ?? EMPTY_SHAPES_ARRAY,\n\t\ttools: rest.tools ?? EMPTY_TOOLS_ARRAY,\n\t}\n\n\treturn (\n\t\t<div ref={setContainer} draggable={false} className=\"tl-container tl-theme__light\" tabIndex={0}>\n\t\t\t<OptionalErrorBoundary\n\t\t\t\tfallback={ErrorFallback ? (error) => <ErrorFallback error={error} /> : null}\n\t\t\t\tonError={(error) => annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })}\n\t\t\t>\n\t\t\t\t{container && (\n\t\t\t\t\t<ContainerProvider container={container}>\n\t\t\t\t\t\t<EditorComponentsProvider overrides={components}>\n\t\t\t\t\t\t\t{store ? (\n\t\t\t\t\t\t\t\tstore instanceof Store ? (\n\t\t\t\t\t\t\t\t\t// Store is ready to go, whether externally synced or not\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithReadyStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t// Store is a synced store, so handle syncing stages internally\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithLoadingStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t// We have no store (it's undefined) so create one and possibly sync it\n\t\t\t\t\t\t\t\t<TldrawEditorWithOwnStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</EditorComponentsProvider>\n\t\t\t\t\t</ContainerProvider>\n\t\t\t\t)}\n\t\t\t</OptionalErrorBoundary>\n\t\t</div>\n\t)\n})\n\nfunction TldrawEditorWithOwnStore(\n\tprops: Required<TldrawEditorProps & { store: undefined; user: TLUser }, 'shapes' | 'tools'>\n) {\n\tconst { defaultName, initialData, shapes, persistenceKey, sessionId, user } = props\n\n\tconst syncedStore = useLocalStore({\n\t\tshapes,\n\t\tinitialData,\n\t\tpersistenceKey,\n\t\tsessionId,\n\t\tdefaultName,\n\t})\n\n\treturn <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />\n}\n\nconst TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({\n\tstore,\n\tuser,\n\t...rest\n}: Required<TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser }, 'shapes' | 'tools'>) {\n\tconst container = useContainer()\n\n\tuseLayoutEffect(() => {\n\t\tif (user.userPreferences.value.isDarkMode) {\n\t\t\tcontainer.classList.remove('tl-theme__light')\n\t\t\tcontainer.classList.add('tl-theme__dark')\n\t\t}\n\t}, [container, user.userPreferences.value.isDarkMode])\n\n\tswitch (store.status) {\n\t\tcase 'error': {\n\t\t\t// for error handling, we fall back to the default error boundary.\n\t\t\t// if users want to handle this error differently, they can render\n\t\t\t// their own error screen before the TldrawEditor component\n\t\t\tthrow store.error\n\t\t}\n\t\tcase 'loading': {\n\t\t\treturn <LoadingScreen>Connecting...</LoadingScreen>\n\t\t}\n\t\tcase 'not-synced': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-local': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-remote': {\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />\n})\n\nfunction TldrawEditorWithReadyStore({\n\tonMount,\n\tchildren,\n\tstore,\n\ttools,\n\tshapes,\n\tautoFocus,\n\tuser,\n\tassetUrls,\n}: Required<\n\tTldrawEditorProps & {\n\t\tstore: TLStore\n\t\tuser: TLUser\n\t},\n\t'shapes' | 'tools'\n>) {\n\tconst { ErrorFallback } = useEditorComponents()\n\tconst container = useContainer()\n\tconst [editor, setEditor] = useState<Editor | null>(null)\n\n\tuseLayoutEffect(() => {\n\t\tconst editor = new Editor({\n\t\t\tstore,\n\t\t\tshapes,\n\t\t\ttools,\n\t\t\tgetContainer: () => container,\n\t\t\tuser,\n\t\t})\n\t\t;(window as any).app = editor\n\t\t;(window as any).editor = editor\n\t\tsetEditor(editor)\n\n\t\treturn () => {\n\t\t\teditor.dispose()\n\t\t}\n\t}, [container, shapes, tools, store, user])\n\n\tReact.useLayoutEffect(() => {\n\t\tif (editor && autoFocus) editor.focus()\n\t}, [editor, autoFocus])\n\n\tconst onMountEvent = useEvent((editor: Editor) => {\n\t\tconst teardown = onMount?.(editor)\n\t\teditor.emit('mount')\n\t\twindow.tldrawReady = true\n\t\treturn teardown\n\t})\n\n\tReact.useLayoutEffect(() => {\n\t\tif (editor) return onMountEvent?.(editor)\n\t}, [editor, onMountEvent])\n\n\tconst crashingError = useSyncExternalStore(\n\t\tuseCallback(\n\t\t\t(onStoreChange) => {\n\t\t\t\tif (editor) {\n\t\t\t\t\teditor.on('crash', onStoreChange)\n\t\t\t\t\treturn () => editor.off('crash', onStoreChange)\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t},\n\t\t\t[editor]\n\t\t),\n\t\t() => editor?.crashingError ?? null\n\t)\n\n\tconst assets = useDefaultEditorAssetsWithOverrides(assetUrls)\n\tconst { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets)\n\n\tif (preloadingError) {\n\t\treturn <ErrorScreen>Could not load assets. Please refresh the page.</ErrorScreen>\n\t}\n\n\tif (!preloadingComplete) {\n\t\treturn <LoadingScreen>Loading assets...</LoadingScreen>\n\t}\n\n\tif (!editor) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t// the top-level tldraw component also renders an error boundary almost\n\t\t// identical to this one. the reason we have two is because this one has\n\t\t// access to `App`, which means that here we can enrich errors with data\n\t\t// from app for reporting, and also still attempt to render the user's\n\t\t// document in the event of an error to reassure them that their work is\n\t\t// not lost.\n\t\t<OptionalErrorBoundary\n\t\t\tfallback={ErrorFallback ? (error) => <ErrorFallback error={error} editor={editor} /> : null}\n\t\t\tonError={(error) =>\n\t\t\t\teditor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })\n\t\t\t}\n\t\t>\n\t\t\t{crashingError ? (\n\t\t\t\t<Crash crashingError={crashingError} />\n\t\t\t) : (\n\t\t\t\t<EditorContext.Provider value={editor}>\n\t\t\t\t\t<Layout>{children}</Layout>\n\t\t\t\t</EditorContext.Provider>\n\t\t\t)}\n\t\t</OptionalErrorBoundary>\n\t)\n}\n\nfunction Layout({ children }: { children: any }) {\n\tuseZoomCss()\n\tuseCursor()\n\tuseDarkMode()\n\tuseSafariFocusOutFix()\n\tuseForceUpdate()\n\n\treturn children\n}\n\nfunction Crash({ crashingError }: { crashingError: unknown }): null {\n\tthrow crashingError\n}\n\n/** @public */\nexport function LoadingScreen({ children }: { children: any }) {\n\tconst { Spinner } = useEditorComponents()\n\n\treturn (\n\t\t<div className=\"tl-loading\">\n\t\t\t{Spinner ? <Spinner /> : null}\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\n/** @public */\nexport function ErrorScreen({ children }: { children: any }) {\n\treturn <div className=\"tl-loading\">{children}</div>\n}\n"],
  "mappings": "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",
  "names": ["TldrawEditor", "editor"]
}
