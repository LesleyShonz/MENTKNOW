{"ast":null,"code":"import { intersectCircleCircle, PI, TAU, Vec2d } from \"@tldraw/primitives\";\nfunction getArrowPoints(info, side, strokeWidth) {\n  var PT = side === \"end\" ? info.end.point : info.start.point;\n  var PB = side === \"end\" ? info.start.point : info.end.point;\n  var compareLength = info.isStraight ? Vec2d.Dist(PB, PT) : Math.abs(info.bodyArc.length);\n  var length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);\n  var P0;\n  if (info.isStraight) {\n    P0 = Vec2d.Nudge(PT, PB, length);\n  } else {\n    var ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius);\n    P0 = side === \"end\" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];\n  }\n  return {\n    point: PT,\n    int: P0\n  };\n}\nfunction getArrowhead(_ref) {\n  var point = _ref.point,\n    int = _ref.int;\n  var PL = Vec2d.RotWith(int, point, PI / 6);\n  var PR = Vec2d.RotWith(int, point, -PI / 6);\n  return \"M \".concat(PL.x, \" \").concat(PL.y, \" L \").concat(point.x, \" \").concat(point.y, \" L \").concat(PR.x, \" \").concat(PR.y);\n}\nfunction getTriangleHead(_ref2) {\n  var point = _ref2.point,\n    int = _ref2.int;\n  var PL = Vec2d.RotWith(int, point, PI / 6);\n  var PR = Vec2d.RotWith(int, point, -PI / 6);\n  return \"M \".concat(PL.x, \" \").concat(PL.y, \" L \").concat(point.x, \" \").concat(point.y, \" L \").concat(PR.x, \" \").concat(PR.y, \" Z\");\n}\nfunction getInvertedTriangleHead(_ref3) {\n  var point = _ref3.point,\n    int = _ref3.int;\n  var d = Vec2d.Sub(int, point).div(2);\n  var PL = Vec2d.Add(point, Vec2d.Rot(d, TAU));\n  var PR = Vec2d.Sub(point, Vec2d.Rot(d, TAU));\n  return \"M \".concat(PL.x, \" \").concat(PL.y, \" L \").concat(int.x, \" \").concat(int.y, \" L \").concat(PR.x, \" \").concat(PR.y, \" Z\");\n}\nfunction getDotHead(_ref4) {\n  var point = _ref4.point,\n    int = _ref4.int;\n  var A = Vec2d.Lrp(point, int, 0.45);\n  var r = Vec2d.Dist(A, point);\n  return \"M \".concat(A.x - r, \",\").concat(A.y, \"\\n  a \").concat(r, \",\").concat(r, \" 0 1,0 \").concat(r * 2, \",0\\n  a \").concat(r, \",\").concat(r, \" 0 1,0 -\").concat(r * 2, \",0 \");\n}\nfunction getDiamondHead(_ref5) {\n  var point = _ref5.point,\n    int = _ref5.int;\n  var PB = Vec2d.Lrp(point, int, 0.75);\n  var PL = Vec2d.RotWith(PB, point, PI / 4);\n  var PR = Vec2d.RotWith(PB, point, -PI / 4);\n  var PQ = Vec2d.Lrp(PL, PR, 0.5);\n  PQ.add(Vec2d.Sub(PQ, point));\n  return \"M \".concat(PQ.x, \" \").concat(PQ.y, \" L \").concat(PL.x, \" \").concat(PL.y, \" \").concat(point.x, \" \").concat(point.y, \" L \").concat(PR.x, \" \").concat(PR.y, \" Z\");\n}\nfunction getSquareHead(_ref6) {\n  var int = _ref6.int,\n    point = _ref6.point;\n  var PB = Vec2d.Lrp(point, int, 0.85);\n  var d = Vec2d.Sub(PB, point).div(2);\n  var PL1 = Vec2d.Add(point, Vec2d.Rot(d, TAU));\n  var PR1 = Vec2d.Sub(point, Vec2d.Rot(d, TAU));\n  var PL2 = Vec2d.Add(PB, Vec2d.Rot(d, TAU));\n  var PR2 = Vec2d.Sub(PB, Vec2d.Rot(d, TAU));\n  return \"M \".concat(PL1.x, \" \").concat(PL1.y, \" L \").concat(PL2.x, \" \").concat(PL2.y, \" L \").concat(PR2.x, \" \").concat(PR2.y, \" L \").concat(PR1.x, \" \").concat(PR1.y, \" Z\");\n}\nfunction getBarHead(_ref7) {\n  var int = _ref7.int,\n    point = _ref7.point;\n  var d = Vec2d.Sub(int, point).div(2);\n  var PL = Vec2d.Add(point, Vec2d.Rot(d, TAU));\n  var PR = Vec2d.Sub(point, Vec2d.Rot(d, TAU));\n  return \"M \".concat(PL.x, \" \").concat(PL.y, \" L \").concat(PR.x, \" \").concat(PR.y);\n}\nfunction getPipeHead() {\n  return \"\";\n}\nfunction getArrowheadPathForType(info, side, strokeWidth) {\n  var type = side === \"end\" ? info.end.arrowhead : info.start.arrowhead;\n  if (type === \"none\") return;\n  var points = getArrowPoints(info, side, strokeWidth);\n  if (!points) return;\n  switch (type) {\n    case \"bar\":\n      return getBarHead(points);\n    case \"square\":\n      return getSquareHead(points);\n    case \"diamond\":\n      return getDiamondHead(points);\n    case \"dot\":\n      return getDotHead(points);\n    case \"inverted\":\n      return getInvertedTriangleHead(points);\n    case \"arrow\":\n      return getArrowhead(points);\n    case \"triangle\":\n      return getTriangleHead(points);\n  }\n  return \"\";\n}\nexport { getArrowhead, getArrowheadPathForType, getBarHead, getDiamondHead, getDotHead, getInvertedTriangleHead, getPipeHead, getSquareHead, getTriangleHead };","map":{"version":3,"names":["intersectCircleCircle","PI","TAU","Vec2d","getArrowPoints","info","side","strokeWidth","PT","end","point","start","PB","compareLength","isStraight","Dist","Math","abs","bodyArc","length","max","min","P0","Nudge","ints","handleArc","center","radius","sweepFlag","int","getArrowhead","_ref","PL","RotWith","PR","concat","x","y","getTriangleHead","_ref2","getInvertedTriangleHead","_ref3","d","Sub","div","Add","Rot","getDotHead","_ref4","A","Lrp","r","getDiamondHead","_ref5","PQ","add","getSquareHead","_ref6","PL1","PR1","PL2","PR2","getBarHead","_ref7","getPipeHead","getArrowheadPathForType","type","arrowhead","points"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/arrow/arrow/arrowheads.ts"],"sourcesContent":["import { intersectCircleCircle, PI, TAU, Vec2d, VecLike } from '@tldraw/primitives'\nimport { ArrowInfo } from './arrow-types'\n\ntype TLArrowPointsInfo = {\n\tpoint: VecLike\n\tint: VecLike\n}\n\nfunction getArrowPoints(\n\tinfo: ArrowInfo,\n\tside: 'start' | 'end',\n\tstrokeWidth: number\n): TLArrowPointsInfo {\n\tconst PT = side === 'end' ? info.end.point : info.start.point\n\tconst PB = side === 'end' ? info.start.point : info.end.point\n\n\tconst compareLength = info.isStraight ? Vec2d.Dist(PB, PT) : Math.abs(info.bodyArc.length) // todo: arc length for curved arrows\n\n\tconst length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth)\n\n\tlet P0: VecLike\n\n\tif (info.isStraight) {\n\t\tP0 = Vec2d.Nudge(PT, PB, length)\n\t} else {\n\t\tconst ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius)\n\t\tP0 =\n\t\t\tside === 'end'\n\t\t\t\t? info.handleArc.sweepFlag\n\t\t\t\t\t? ints[0]\n\t\t\t\t\t: ints[1]\n\t\t\t\t: info.handleArc.sweepFlag\n\t\t\t\t? ints[1]\n\t\t\t\t: ints[0]\n\t}\n\n\treturn {\n\t\tpoint: PT,\n\t\tint: P0,\n\t}\n}\n\nexport function getArrowhead({ point, int }: TLArrowPointsInfo) {\n\tconst PL = Vec2d.RotWith(int, point, PI / 6)\n\tconst PR = Vec2d.RotWith(int, point, -PI / 6)\n\n\treturn `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y}`\n}\n\nexport function getTriangleHead({ point, int }: TLArrowPointsInfo) {\n\tconst PL = Vec2d.RotWith(int, point, PI / 6)\n\tconst PR = Vec2d.RotWith(int, point, -PI / 6)\n\n\treturn `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`\n}\n\nexport function getInvertedTriangleHead({ point, int }: TLArrowPointsInfo) {\n\tconst d = Vec2d.Sub(int, point).div(2)\n\tconst PL = Vec2d.Add(point, Vec2d.Rot(d, TAU))\n\tconst PR = Vec2d.Sub(point, Vec2d.Rot(d, TAU))\n\n\treturn `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`\n}\n\nexport function getDotHead({ point, int }: TLArrowPointsInfo) {\n\tconst A = Vec2d.Lrp(point, int, 0.45)\n\tconst r = Vec2d.Dist(A, point)\n\n\treturn `M ${A.x - r},${A.y}\n  a ${r},${r} 0 1,0 ${r * 2},0\n  a ${r},${r} 0 1,0 -${r * 2},0 `\n}\n\nexport function getDiamondHead({ point, int }: TLArrowPointsInfo) {\n\tconst PB = Vec2d.Lrp(point, int, 0.75)\n\tconst PL = Vec2d.RotWith(PB, point, PI / 4)\n\tconst PR = Vec2d.RotWith(PB, point, -PI / 4)\n\n\tconst PQ = Vec2d.Lrp(PL, PR, 0.5)\n\tPQ.add(Vec2d.Sub(PQ, point))\n\n\treturn `M ${PQ.x} ${PQ.y} L ${PL.x} ${PL.y} ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`\n}\n\nexport function getSquareHead({ int, point }: TLArrowPointsInfo) {\n\tconst PB = Vec2d.Lrp(point, int, 0.85)\n\tconst d = Vec2d.Sub(PB, point).div(2)\n\tconst PL1 = Vec2d.Add(point, Vec2d.Rot(d, TAU))\n\tconst PR1 = Vec2d.Sub(point, Vec2d.Rot(d, TAU))\n\tconst PL2 = Vec2d.Add(PB, Vec2d.Rot(d, TAU))\n\tconst PR2 = Vec2d.Sub(PB, Vec2d.Rot(d, TAU))\n\n\treturn `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`\n}\n\nexport function getBarHead({ int, point }: TLArrowPointsInfo) {\n\tconst d = Vec2d.Sub(int, point).div(2)\n\n\tconst PL = Vec2d.Add(point, Vec2d.Rot(d, TAU))\n\tconst PR = Vec2d.Sub(point, Vec2d.Rot(d, TAU))\n\n\treturn `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`\n}\n\nexport function getPipeHead() {\n\treturn ''\n}\n\nexport function getArrowheadPathForType(\n\tinfo: ArrowInfo,\n\tside: 'start' | 'end',\n\tstrokeWidth: number\n): string | undefined {\n\tconst type = side === 'end' ? info.end.arrowhead : info.start.arrowhead\n\tif (type === 'none') return\n\n\tconst points = getArrowPoints(info, side, strokeWidth)\n\tif (!points) return\n\n\tswitch (type) {\n\t\tcase 'bar':\n\t\t\treturn getBarHead(points)\n\t\tcase 'square':\n\t\t\treturn getSquareHead(points)\n\t\tcase 'diamond':\n\t\t\treturn getDiamondHead(points)\n\t\tcase 'dot':\n\t\t\treturn getDotHead(points)\n\t\tcase 'inverted':\n\t\t\treturn getInvertedTriangleHead(points)\n\t\tcase 'arrow':\n\t\t\treturn getArrowhead(points)\n\t\tcase 'triangle':\n\t\t\treturn getTriangleHead(points)\n\t}\n\n\treturn ''\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}