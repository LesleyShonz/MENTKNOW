{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { deleteDB } from \"idb\";\nimport { getAllIndexDbNames } from \"./indexedDb.mjs\";\nfunction hardReset() {\n  return _hardReset.apply(this, arguments);\n}\nfunction _hardReset() {\n  _hardReset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _ref,\n      _ref$shouldReload,\n      shouldReload,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$shouldReload = _ref.shouldReload, shouldReload = _ref$shouldReload === void 0 ? true : _ref$shouldReload;\n          sessionStorage.clear();\n          _context.next = 4;\n          return Promise.all(getAllIndexDbNames().map(function (db) {\n            return deleteDB(db);\n          }));\n        case 4:\n          localStorage.clear();\n          if (shouldReload) {\n            window.location.reload();\n          }\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _hardReset.apply(this, arguments);\n}\nif (typeof window !== \"undefined\") {\n  if (process.env.NODE_ENV === \"development\") {\n    ;\n    window.hardReset = hardReset;\n  }\n  ;\n  window.__tldraw__hardReset = hardReset;\n}\nexport { hardReset };","map":{"version":3,"names":["deleteDB","getAllIndexDbNames","hardReset","_hardReset","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","_ref$shouldReload","shouldReload","_args","wrap","_callee$","_context","prev","next","length","undefined","sessionStorage","clear","Promise","all","map","db","localStorage","window","location","reload","stop","process","env","NODE_ENV","__tldraw__hardReset"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/sync/hardReset.ts"],"sourcesContent":["import { deleteDB } from 'idb'\nimport { getAllIndexDbNames } from './indexedDb'\n\n/**\n * Clear the database of all data associated with tldraw.\n *\n * @public */\nexport async function hardReset({ shouldReload = true } = {}) {\n\tsessionStorage.clear()\n\n\tawait Promise.all(getAllIndexDbNames().map((db) => deleteDB(db)))\n\n\tlocalStorage.clear()\n\tif (shouldReload) {\n\t\twindow.location.reload()\n\t}\n}\n\nif (typeof window !== 'undefined') {\n\tif (process.env.NODE_ENV === 'development') {\n\t\t;(window as any).hardReset = hardReset\n\t}\n\t// window.__tldraw__hardReset is used to inject the logic into the tldraw library\n\t;(window as any).__tldraw__hardReset = hardReset\n}\n"],"mappings":";;AAAA,SAASA,QAAA,QAAgB;AACzB,SAASC,kBAAA,QAA0B;AAAA,SAMbC,UAAA;EAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,WAAA;EAAAA,UAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAtB,SAAAC,QAAA;IAAA,IAAAC,IAAA;MAAAC,iBAAA;MAAAC,YAAA;MAAAC,KAAA,GAAAR,SAAA;IAAA,OAAAE,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAR,IAAA,GAAAG,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAA0D,CAAC,GAAAF,iBAAA,GAAAD,IAAA,CAAzBE,YAAA,EAAAA,YAAA,GAAAD,iBAAA,cAAe,OAAAA,iBAAA;UAChDU,cAAA,CAAeC,KAAA,CAAM;UAAAN,QAAA,CAAAE,IAAA;UAAA,OAEfK,OAAA,CAAQC,GAAA,CAAIvB,kBAAA,CAAmB,EAAEwB,GAAA,CAAI,UAACC,EAAA;YAAA,OAAO1B,QAAA,CAAS0B,EAAE,CAAC;UAAA,EAAC;QAAA;UAEhEC,YAAA,CAAaL,KAAA,CAAM;UACnB,IAAIV,YAAA,EAAc;YACjBgB,MAAA,CAAOC,QAAA,CAASC,MAAA,CAAO;UACxB;QAAA;QAAA;UAAA,OAAAd,QAAA,CAAAe,IAAA;MAAA;IAAA,GAAAtB,OAAA;EAAA,CACD;EAAA,OAAAN,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEA,IAAI,OAAOuB,MAAA,KAAW,aAAa;EAClC,IAAII,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eAAe;IAC3C;IAAEN,MAAA,CAAe1B,SAAA,GAAYA,SAAA;EAC9B;EAEA;EAAE0B,MAAA,CAAeO,mBAAA,GAAsBjC,SAAA;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}