"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LineSegment2d_exports = {};
__export(LineSegment2d_exports, {
  LineSegment2d: () => LineSegment2d
});
module.exports = __toCommonJS(LineSegment2d_exports);
var import_BaseSegment2d = require("./BaseSegment2d");
var import_Box2d = require("./Box2d");
var import_Vec2d = require("./Vec2d");
class LineSegment2d extends import_BaseSegment2d.BaseSegment2d {
  constructor(a, b, p = 2) {
    super({ a, b, p });
    this.a = a;
    this.b = b;
    this.values.p = Math.max(10, Math.ceil(this.length / 20));
  }
  get length() {
    return import_Vec2d.Vec2d.Dist(this.a, this.b);
  }
  get tangent() {
    return import_Vec2d.Vec2d.Tan(this.a, this.b);
  }
  get angle() {
    return import_Vec2d.Vec2d.Angle(this.a, this.b);
  }
  get bounds() {
    return import_Box2d.Box2d.FromPoints([this.a, this.b]);
  }
  getX(t) {
    const { a, b } = this.values;
    return a.x + (b.x - a.x) * t;
  }
  getY(t) {
    const { a, b } = this.values;
    return a.y + (b.y - a.y) * t;
  }
  getPoint(t) {
    const { a, b } = this.values;
    if (t <= 0)
      return import_Vec2d.Vec2d.From(a);
    if (t >= 1)
      return import_Vec2d.Vec2d.From(b);
    return import_Vec2d.Vec2d.Lrp(a, b, t);
  }
  getPath(head = true) {
    const { a, b } = this.values;
    if (import_Vec2d.Vec2d.Equals(a, b))
      return "";
    return head ? `M${a.x},${a.y}L${b.x},${b.y}` : `${b.x},${b.y}`;
  }
  getNormal() {
    const { a, b } = this.values;
    return import_Vec2d.Vec2d.Sub(a, b).per().uni().toFixed();
  }
  /**
   * Get the closest point on the segment to an arbitrary point.
   *
   * @param point - The arbitrary point.
   * @public
   */
  getClosestPointTo(point) {
    const { a, b } = this.values;
    const closestPoint = import_Vec2d.Vec2d.NearestPointOnLineSegment(a, b, point);
    const closestDistance = closestPoint.dist(point);
    return { point: closestPoint, distance: closestDistance };
  }
  static Length(A) {
    return import_Vec2d.Vec2d.Dist(A.a, A.b);
  }
  static Tangent(A) {
    return import_Vec2d.Vec2d.Tan(A.a, A.b);
  }
  static Angle(A) {
    return import_Vec2d.Vec2d.Angle(A.a, A.b);
  }
}
//# sourceMappingURL=LineSegment2d.js.map
