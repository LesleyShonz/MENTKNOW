{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { useEditor } from \"@tldraw/editor\";\nimport { compact } from \"@tldraw/utils\";\nimport React, { useMemo } from \"react\";\nimport { track } from \"signia-react\";\nimport { KeyboardShortcutsDialog } from \"../components/KeyboardShortcutsDialog.mjs\";\nimport { menuCustom, menuGroup, menuItem } from \"./menuHelpers.mjs\";\nimport { useActions } from \"./useActions.mjs\";\nimport { useDialogs } from \"./useDialogsProvider.mjs\";\nimport { useLanguages } from \"./useTranslation/useLanguages.mjs\";\nvar HelpMenuSchemaContext = React.createContext({});\nvar HelpMenuSchemaProvider = track(function HelpMenuSchemaProvider2(_ref) {\n  var overrides = _ref.overrides,\n    children = _ref.children;\n  var editor = useEditor();\n  var actions = useActions();\n  var selectedCount = editor.selectedIds.length;\n  var oneSelected = selectedCount > 0;\n  var twoSelected = selectedCount > 1;\n  var threeSelected = selectedCount > 2;\n  var _useLanguages = useLanguages(),\n    languages = _useLanguages.languages,\n    currentLanguage = _useLanguages.currentLanguage;\n  var _useDialogs = useDialogs(),\n    addDialog = _useDialogs.addDialog;\n  var helpTLUiMenuSchema = useMemo(function () {\n    var helpTLUiMenuSchema2 = compact([menuGroup(\"top\", menuCustom(\"LANGUAGE_MENU\", {\n      readonlyOk: true\n    }), menuItem({\n      id: \"keyboard-shortcuts\",\n      label: \"help-menu.keyboard-shortcuts\",\n      readonlyOk: true,\n      onSelect: function onSelect() {\n        addDialog({\n          component: KeyboardShortcutsDialog\n        });\n      }\n    }))]);\n    if (overrides) {\n      return overrides(editor, helpTLUiMenuSchema2, {\n        actions: actions,\n        currentLanguage: currentLanguage,\n        languages: languages,\n        oneSelected: oneSelected,\n        twoSelected: twoSelected,\n        threeSelected: threeSelected\n      });\n    }\n    return helpTLUiMenuSchema2;\n  }, [editor, overrides, languages, actions, oneSelected, twoSelected, threeSelected, currentLanguage, addDialog]);\n  return /* @__PURE__ */jsx(HelpMenuSchemaContext.Provider, {\n    value: helpTLUiMenuSchema,\n    children: children\n  });\n});\nfunction useHelpMenuSchema() {\n  var ctx = React.useContext(HelpMenuSchemaContext);\n  if (!ctx) {\n    throw new Error(\"useHelpMenuSchema must be used inside of a helpTLUiMenuSchemaProvider.\");\n  }\n  return ctx;\n}\nexport { HelpMenuSchemaContext, HelpMenuSchemaProvider, useHelpMenuSchema };","map":{"version":3,"names":["jsx","useEditor","compact","React","useMemo","track","KeyboardShortcutsDialog","menuCustom","menuGroup","menuItem","useActions","useDialogs","useLanguages","HelpMenuSchemaContext","createContext","HelpMenuSchemaProvider","HelpMenuSchemaProvider2","_ref","overrides","children","editor","actions","selectedCount","selectedIds","length","oneSelected","twoSelected","threeSelected","_useLanguages","languages","currentLanguage","_useDialogs","addDialog","helpTLUiMenuSchema","helpTLUiMenuSchema2","readonlyOk","id","label","onSelect","component","Provider","value","useHelpMenuSchema","ctx","useContext","Error"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/useHelpMenuSchema.tsx"],"sourcesContent":["import { Editor, TLLanguage, useEditor } from '@tldraw/editor'\nimport { compact } from '@tldraw/utils'\nimport React, { useMemo } from 'react'\nimport { track } from 'signia-react'\nimport { KeyboardShortcutsDialog } from '../components/KeyboardShortcutsDialog'\nimport { TLUiMenuSchema, menuCustom, menuGroup, menuItem } from './menuHelpers'\nimport { useActions } from './useActions'\nimport { useDialogs } from './useDialogsProvider'\nimport { useLanguages } from './useTranslation/useLanguages'\n\n/** @public */\nexport type TLUiHelpMenuSchemaContextType = TLUiMenuSchema\n\n/** @internal */\nexport const HelpMenuSchemaContext = React.createContext({} as TLUiHelpMenuSchemaContextType)\n\n/** @public */\nexport type TLUiHelpMenuSchemaProviderProps = {\n\toverrides?: (\n\t\teditor: Editor,\n\t\tschema: TLUiHelpMenuSchemaContextType,\n\t\thelpers: {\n\t\t\tactions: ReturnType<typeof useActions>\n\t\t\tlanguages: readonly TLLanguage[]\n\t\t\tcurrentLanguage: string\n\t\t\toneSelected: boolean\n\t\t\ttwoSelected: boolean\n\t\t\tthreeSelected: boolean\n\t\t}\n\t) => TLUiHelpMenuSchemaContextType\n\tchildren: any\n}\n\n/** @internal */\nexport const HelpMenuSchemaProvider = track(function HelpMenuSchemaProvider({\n\toverrides,\n\tchildren,\n}: TLUiHelpMenuSchemaProviderProps) {\n\tconst editor = useEditor()\n\tconst actions = useActions()\n\n\tconst selectedCount = editor.selectedIds.length\n\n\tconst oneSelected = selectedCount > 0\n\tconst twoSelected = selectedCount > 1\n\tconst threeSelected = selectedCount > 2\n\n\tconst { languages, currentLanguage } = useLanguages()\n\tconst { addDialog } = useDialogs()\n\n\tconst helpTLUiMenuSchema = useMemo<TLUiMenuSchema>(() => {\n\t\tconst helpTLUiMenuSchema = compact([\n\t\t\tmenuGroup(\n\t\t\t\t'top',\n\t\t\t\tmenuCustom('LANGUAGE_MENU', { readonlyOk: true }),\n\t\t\t\tmenuItem({\n\t\t\t\t\tid: 'keyboard-shortcuts',\n\t\t\t\t\tlabel: 'help-menu.keyboard-shortcuts',\n\t\t\t\t\treadonlyOk: true,\n\t\t\t\t\tonSelect() {\n\t\t\t\t\t\taddDialog({ component: KeyboardShortcutsDialog })\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t),\n\t\t])\n\n\t\tif (overrides) {\n\t\t\treturn overrides(editor, helpTLUiMenuSchema, {\n\t\t\t\tactions,\n\t\t\t\tcurrentLanguage,\n\t\t\t\tlanguages,\n\t\t\t\toneSelected,\n\t\t\t\ttwoSelected,\n\t\t\t\tthreeSelected,\n\t\t\t})\n\t\t}\n\n\t\treturn helpTLUiMenuSchema\n\t}, [\n\t\teditor,\n\t\toverrides,\n\t\tlanguages,\n\t\tactions,\n\t\toneSelected,\n\t\ttwoSelected,\n\t\tthreeSelected,\n\t\tcurrentLanguage,\n\t\taddDialog,\n\t])\n\n\treturn (\n\t\t<HelpMenuSchemaContext.Provider value={helpTLUiMenuSchema}>\n\t\t\t{children}\n\t\t</HelpMenuSchemaContext.Provider>\n\t)\n})\n\n/** @public */\nexport function useHelpMenuSchema(): TLUiMenuSchema {\n\tconst ctx = React.useContext(HelpMenuSchemaContext)\n\n\tif (!ctx) {\n\t\tthrow new Error('useHelpMenuSchema must be used inside of a helpTLUiMenuSchemaProvider.')\n\t}\n\n\treturn ctx\n}\n"],"mappings":"AA2FE,SAAAA,GAAA;AA3FF,SAA6BC,SAAA,QAAiB;AAC9C,SAASC,OAAA,QAAe;AACxB,OAAOC,KAAA,IAASC,OAAA,QAAe;AAC/B,SAASC,KAAA,QAAa;AACtB,SAASC,uBAAA,QAA+B;AACxC,SAAyBC,UAAA,EAAYC,SAAA,EAAWC,QAAA,QAAgB;AAChE,SAASC,UAAA,QAAkB;AAC3B,SAASC,UAAA,QAAkB;AAC3B,SAASC,YAAA,QAAoB;AAMtB,IAAMC,qBAAA,GAAwBV,KAAA,CAAMW,aAAA,CAAc,CAAC,CAAkC;AAoBrF,IAAMC,sBAAA,GAAyBV,KAAA,CAAM,SAASW,wBAAAC,IAAA,EAGjB;EAAA,IAFnCC,SAAA,GAAAD,IAAA,CAAAC,SAAA;IACAC,QAAA,GAAAF,IAAA,CAAAE,QAAA;EAEA,IAAMC,MAAA,GAASnB,SAAA,CAAU;EACzB,IAAMoB,OAAA,GAAUX,UAAA,CAAW;EAE3B,IAAMY,aAAA,GAAgBF,MAAA,CAAOG,WAAA,CAAYC,MAAA;EAEzC,IAAMC,WAAA,GAAcH,aAAA,GAAgB;EACpC,IAAMI,WAAA,GAAcJ,aAAA,GAAgB;EACpC,IAAMK,aAAA,GAAgBL,aAAA,GAAgB;EAEtC,IAAAM,aAAA,GAAuChB,YAAA,CAAa;IAA5CiB,SAAA,GAAAD,aAAA,CAAAC,SAAA;IAAWC,eAAA,GAAAF,aAAA,CAAAE,eAAA;EACnB,IAAAC,WAAA,GAAsBpB,UAAA,CAAW;IAAzBqB,SAAA,GAAAD,WAAA,CAAAC,SAAA;EAER,IAAMC,kBAAA,GAAqB7B,OAAA,CAAwB,YAAM;IACxD,IAAM8B,mBAAA,GAAqBhC,OAAA,CAAQ,CAClCM,SAAA,CACC,OACAD,UAAA,CAAW,iBAAiB;MAAE4B,UAAA,EAAY;IAAK,CAAC,GAChD1B,QAAA,CAAS;MACR2B,EAAA,EAAI;MACJC,KAAA,EAAO;MACPF,UAAA,EAAY;MACZG,QAAA,WAAAA,SAAA,EAAW;QACVN,SAAA,CAAU;UAAEO,SAAA,EAAWjC;QAAwB,CAAC;MACjD;IACD,CAAC,CACF,EACA;IAED,IAAIY,SAAA,EAAW;MACd,OAAOA,SAAA,CAAUE,MAAA,EAAQc,mBAAA,EAAoB;QAC5Cb,OAAA,EAAAA,OAAA;QACAS,eAAA,EAAAA,eAAA;QACAD,SAAA,EAAAA,SAAA;QACAJ,WAAA,EAAAA,WAAA;QACAC,WAAA,EAAAA,WAAA;QACAC,aAAA,EAAAA;MACD,CAAC;IACF;IAEA,OAAOO,mBAAA;EACR,GAAG,CACFd,MAAA,EACAF,SAAA,EACAW,SAAA,EACAR,OAAA,EACAI,WAAA,EACAC,WAAA,EACAC,aAAA,EACAG,eAAA,EACAE,SAAA,CACA;EAED,OACC,eAAAhC,GAAA,CAACa,qBAAA,CAAsB2B,QAAA,EAAtB;IAA+BC,KAAA,EAAOR,kBAAA;IACrCd,QAAA,EAAAA;EAAA,CACF;AAEF,CAAC;AAGM,SAASuB,kBAAA,EAAoC;EACnD,IAAMC,GAAA,GAAMxC,KAAA,CAAMyC,UAAA,CAAW/B,qBAAqB;EAElD,IAAI,CAAC8B,GAAA,EAAK;IACT,MAAM,IAAIE,KAAA,CAAM,wEAAwE;EACzF;EAEA,OAAOF,GAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}