{"ast":null,"code":"import { isPlainObject } from \"is-plain-object\";\nimport { nanoid } from \"nanoid\";\nfunction uniqueId() {\n  return nanoid();\n}\nvar serializableTypes = /* @__PURE__ */new Set([\"string\", \"number\", \"boolean\", \"undefined\"]);\nfunction isSerializable(value) {\n  if (serializableTypes.has(typeof value) || value === null) return true;\n  if (Array.isArray(value)) return value.every(isSerializable);\n  if (isPlainObject(value)) return Object.values(value).every(isSerializable);\n  return false;\n}\nfunction fileToBase64(file) {\n  return new Promise(function (resolve, reject) {\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function () {\n        return resolve(reader.result);\n      };\n      reader.onerror = function (error) {\n        return reject(error);\n      };\n      reader.onabort = function (error) {\n        return reject(error);\n      };\n    }\n  });\n}\nfunction getIncrementedName(name, others) {\n  var result = name;\n  var set = new Set(others);\n  while (set.has(result)) {\n    var _exec;\n    result = (_exec = /^.*(\\d+)$/.exec(result)) !== null && _exec !== void 0 && _exec[1] ? result.replace(/(\\d+)(?=\\D?)$/, function (m) {\n      return (+m + 1).toString();\n    }) : \"\".concat(result, \" 1\");\n  }\n  return result;\n}\nvar checkFlag = function checkFlag(flag) {\n  return typeof flag === \"boolean\" ? flag : flag === null || flag === void 0 ? void 0 : flag();\n};\nfunction snapToGrid(n, gridSize) {\n  return Math.round(n / gridSize) * gridSize;\n}\nvar VALID_URL_REGEX = new RegExp(/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i);\nfunction isValidUrl(url) {\n  return VALID_URL_REGEX.test(url);\n}\nexport { checkFlag, fileToBase64, getIncrementedName, isSerializable, isValidUrl, snapToGrid, uniqueId };","map":{"version":3,"names":["isPlainObject","nanoid","uniqueId","serializableTypes","Set","isSerializable","value","has","Array","isArray","every","Object","values","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","onabort","getIncrementedName","name","others","set","_exec","exec","replace","m","toString","concat","checkFlag","flag","snapToGrid","n","gridSize","Math","round","VALID_URL_REGEX","RegExp","isValidUrl","url","test"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/data.ts"],"sourcesContent":["import { isPlainObject } from 'is-plain-object'\nimport { nanoid } from 'nanoid'\n\n/**\n * Generate a unique id.\n *\n * @example\n *\n * ```ts\n * const id = uniqueId()\n * ```\n *\n * @public\n */\nexport function uniqueId() {\n\treturn nanoid()\n}\n\nconst serializableTypes = new Set(['string', 'number', 'boolean', 'undefined'])\n\n/**\n * Get whether a value is serializable.\n *\n * @example\n *\n * ```ts\n * const A = isSerializable(1) // true\n * const B = isSerializable('a') // true\n * const C = isSerializable(true) // true\n * const D = isSerializable(undefined) // false\n * ```\n *\n * @param value - The value to check.\n * @public\n */\nexport function isSerializable(value: any): boolean {\n\tif (serializableTypes.has(typeof value) || value === null) return true\n\tif (Array.isArray(value)) return value.every(isSerializable)\n\tif (isPlainObject(value)) return Object.values(value).every(isSerializable)\n\treturn false\n}\n\n/**\n * Convert a file to base64.\n *\n * @example\n *\n * ```ts\n * const A = fileToBase64('./test.png')\n * ```\n *\n * @param value - The file as a blob.\n * @public\n */\nexport function fileToBase64(file: Blob): Promise<string> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (file) {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.readAsDataURL(file)\n\t\t\treader.onload = () => resolve(reader.result as string)\n\t\t\treader.onerror = (error) => reject(error)\n\t\t\treader.onabort = (error) => reject(error)\n\t\t}\n\t})\n}\n\n/**\n * Get an incremented name (e.g. New page (2)) from a name (e.g. New page), based on an array of\n * existing names.\n *\n * @param name - The name to increment.\n * @param others - The array of existing names.\n * @public\n */\nexport function getIncrementedName(name: string, others: string[]) {\n\tlet result = name\n\tconst set = new Set(others)\n\n\twhile (set.has(result)) {\n\t\tresult = /^.*(\\d+)$/.exec(result)?.[1]\n\t\t\t? result.replace(/(\\d+)(?=\\D?)$/, (m) => {\n\t\t\t\t\treturn (+m + 1).toString()\n\t\t\t  })\n\t\t\t: `${result} 1`\n\t}\n\n\treturn result\n}\n\n/** @public */\nexport const checkFlag = (flag: boolean | (() => boolean) | undefined) =>\n\ttypeof flag === 'boolean' ? flag : flag?.()\n\n/** @public */\nexport function snapToGrid(n: number, gridSize: number) {\n\treturn Math.round(n / gridSize) * gridSize\n}\n\nconst VALID_URL_REGEX = new RegExp(\n\t/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n)\n\n/** @public */\nexport function isValidUrl(url: string) {\n\treturn VALID_URL_REGEX.test(url)\n}\n"],"mappings":"AAAA,SAASA,aAAA,QAAqB;AAC9B,SAASC,MAAA,QAAc;AAahB,SAASC,SAAA,EAAW;EAC1B,OAAOD,MAAA,CAAO;AACf;AAEA,IAAME,iBAAA,GAAoB,mBAAIC,GAAA,CAAI,CAAC,UAAU,UAAU,WAAW,WAAW,CAAC;AAiBvE,SAASC,eAAeC,KAAA,EAAqB;EACnD,IAAIH,iBAAA,CAAkBI,GAAA,CAAI,OAAOD,KAAK,KAAKA,KAAA,KAAU,MAAM,OAAO;EAClE,IAAIE,KAAA,CAAMC,OAAA,CAAQH,KAAK,GAAG,OAAOA,KAAA,CAAMI,KAAA,CAAML,cAAc;EAC3D,IAAIL,aAAA,CAAcM,KAAK,GAAG,OAAOK,MAAA,CAAOC,MAAA,CAAON,KAAK,EAAEI,KAAA,CAAML,cAAc;EAC1E,OAAO;AACR;AAcO,SAASQ,aAAaC,IAAA,EAA6B;EACzD,OAAO,IAAIC,OAAA,CAAQ,UAACC,OAAA,EAASC,MAAA,EAAW;IACvC,IAAIH,IAAA,EAAM;MACT,IAAMI,MAAA,GAAS,IAAIC,UAAA,CAAW;MAC9BD,MAAA,CAAOE,aAAA,CAAcN,IAAI;MACzBI,MAAA,CAAOG,MAAA,GAAS;QAAA,OAAML,OAAA,CAAQE,MAAA,CAAOI,MAAgB;MAAA;MACrDJ,MAAA,CAAOK,OAAA,GAAU,UAACC,KAAA;QAAA,OAAUP,MAAA,CAAOO,KAAK;MAAA;MACxCN,MAAA,CAAOO,OAAA,GAAU,UAACD,KAAA;QAAA,OAAUP,MAAA,CAAOO,KAAK;MAAA;IACzC;EACD,CAAC;AACF;AAUO,SAASE,mBAAmBC,IAAA,EAAcC,MAAA,EAAkB;EAClE,IAAIN,MAAA,GAASK,IAAA;EACb,IAAME,GAAA,GAAM,IAAIzB,GAAA,CAAIwB,MAAM;EAE1B,OAAOC,GAAA,CAAItB,GAAA,CAAIe,MAAM,GAAG;IAAA,IAAAQ,KAAA;IACvBR,MAAA,GAAS,CAAAQ,KAAA,eAAYC,IAAA,CAAKT,MAAM,eAAAQ,KAAA,eAAvBA,KAAA,CAA2B,CAAC,IAClCR,MAAA,CAAOU,OAAA,CAAQ,iBAAiB,UAACC,CAAA,EAAM;MACvC,QAAQ,CAACA,CAAA,GAAI,GAAGC,QAAA,CAAS;IACzB,CAAC,OAAAC,MAAA,CACEb,MAAA;EACP;EAEA,OAAOA,MAAA;AACR;AAGO,IAAMc,SAAA,GAAY,SAAZA,UAAaC,IAAA;EAAA,OACzB,OAAOA,IAAA,KAAS,YAAYA,IAAA,GAAOA,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAO;AAAA;AAGpC,SAASC,WAAWC,CAAA,EAAWC,QAAA,EAAkB;EACvD,OAAOC,IAAA,CAAKC,KAAA,CAAMH,CAAA,GAAIC,QAAQ,IAAIA,QAAA;AACnC;AAEA,IAAMG,eAAA,GAAkB,IAAIC,MAAA,CAC3B,wcACD;AAGO,SAASC,WAAWC,GAAA,EAAa;EACvC,OAAOH,eAAA,CAAgBI,IAAA,CAAKD,GAAG;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}