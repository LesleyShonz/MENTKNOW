{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Vec2d } from \"@tldraw/primitives\";\nimport { StateNode } from \"../../../../StateNode.mjs\";\nimport { getTranslateCroppedImageChange } from \"./crop_helpers.mjs\";\nvar Idle = /*#__PURE__*/function (_StateNode) {\n  _inherits(Idle, _StateNode);\n  var _super = _createSuper(Idle);\n  function Idle() {\n    var _this;\n    _classCallCheck(this, Idle);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function () {\n      _this.editor.setCursor({\n        type: \"default\"\n      });\n      var onlySelectedShape = _this.editor.onlySelectedShape;\n      _this.editor.on(\"change-history\", _this.cleanupCroppingState);\n      _this.editor.mark(\"crop\");\n      if (onlySelectedShape) {\n        _this.editor.setCroppingId(onlySelectedShape.id);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onExit\", function () {\n      _this.editor.setCursor({\n        type: \"default\"\n      });\n      _this.editor.off(\"change-history\", _this.cleanupCroppingState);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.editor.setCroppingId(null);\n      _this.editor.setSelectedTool(\"select.idle\", {});\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerDown\", function (info) {\n      if (_this.editor.isMenuOpen) return;\n      if (info.ctrlKey) {\n        _this.editor.setCroppingId(null);\n        _this.editor.setSelectedTool(\"select.brushing\", info);\n        return;\n      }\n      switch (info.target) {\n        case \"canvas\":\n          {\n            _this.cancel();\n            break;\n          }\n        case \"shape\":\n          {\n            if (info.shape.id === _this.editor.croppingId) {\n              _this.editor.setSelectedTool(\"select.crop.pointing_crop\", info);\n              return;\n            } else {\n              var _this$editor$getShape;\n              if ((_this$editor$getShape = _this.editor.getShapeUtil(info.shape)) !== null && _this$editor$getShape !== void 0 && _this$editor$getShape.canCrop(info.shape)) {\n                _this.editor.setCroppingId(info.shape.id);\n                _this.editor.setSelectedIds([info.shape.id]);\n                _this.editor.setSelectedTool(\"select.crop.pointing_crop\", info);\n              } else {\n                _this.cancel();\n              }\n            }\n            break;\n          }\n        case \"selection\":\n          {\n            switch (info.handle) {\n              case \"mobile_rotate\":\n              case \"top_left_rotate\":\n              case \"top_right_rotate\":\n              case \"bottom_left_rotate\":\n              case \"bottom_right_rotate\":\n                {\n                  _this.editor.setSelectedTool(\"select.pointing_rotate_handle\", _objectSpread(_objectSpread({}, info), {}, {\n                    onInteractionEnd: \"select.crop\"\n                  }));\n                  break;\n                }\n              case \"top\":\n              case \"right\":\n              case \"bottom\":\n              case \"left\":\n                {\n                  _this.editor.setSelectedTool(\"select.pointing_crop_handle\", _objectSpread(_objectSpread({}, info), {}, {\n                    onInteractionEnd: \"select.crop\"\n                  }));\n                  break;\n                }\n              case \"top_left\":\n              case \"top_right\":\n              case \"bottom_left\":\n              case \"bottom_right\":\n                {\n                  _this.editor.setSelectedTool(\"select.pointing_crop_handle\", _objectSpread(_objectSpread({}, info), {}, {\n                    onInteractionEnd: \"select.crop\"\n                  }));\n                  break;\n                }\n              default:\n                {\n                  _this.cancel();\n                }\n            }\n            break;\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDoubleClick\", function (info) {\n      if (info.phase !== \"up\") return;\n      if (!_this.editor.croppingId) return;\n      var shape = _this.editor.getShapeById(_this.editor.croppingId);\n      if (!shape) return;\n      var util = _this.editor.getShapeUtil(shape);\n      if (!util) return;\n      if (info.target === \"selection\") {\n        var _util$onDoubleClickEd;\n        (_util$onDoubleClickEd = util.onDoubleClickEdge) === null || _util$onDoubleClickEd === void 0 || _util$onDoubleClickEd.call(util, shape);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function () {\n      _this.nudgeCroppingImage(false);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyRepeat\", function () {\n      _this.nudgeCroppingImage(true);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function (info) {\n      switch (info.code) {\n        case \"Enter\":\n          {\n            _this.editor.setCroppingId(null);\n            _this.editor.setSelectedTool(\"select.idle\", {});\n            break;\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"cleanupCroppingState\", function () {\n      if (!_this.editor.croppingId) {\n        _this.editor.setSelectedTool(\"select.idle\", {});\n      }\n    });\n    return _this;\n  }\n  _createClass(Idle, [{\n    key: \"cancel\",\n    value: function cancel() {\n      this.editor.setCroppingId(null);\n      this.editor.setSelectedTool(\"select.idle\", {});\n    }\n  }, {\n    key: \"nudgeCroppingImage\",\n    value: function nudgeCroppingImage() {\n      var ephemeral = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var keys = this.editor.inputs.keys;\n      var shiftKey = keys.has(\"ShiftLeft\");\n      var delta = new Vec2d(0, 0);\n      if (keys.has(\"ArrowLeft\")) delta.x += 1;\n      if (keys.has(\"ArrowRight\")) delta.x -= 1;\n      if (keys.has(\"ArrowUp\")) delta.y += 1;\n      if (keys.has(\"ArrowDown\")) delta.y -= 1;\n      if (delta.equals(new Vec2d(0, 0))) return;\n      if (shiftKey) delta.mul(10);\n      var shape = this.editor.getShapeById(this.editor.croppingId);\n      if (!shape) return;\n      var partial = getTranslateCroppedImageChange(this.editor, shape, delta);\n      if (partial) {\n        if (!ephemeral) {\n          this.editor.mark(\"translate crop\");\n        }\n        this.editor.updateShapes([partial]);\n      }\n    }\n  }]);\n  return Idle;\n}(StateNode);\n_defineProperty(Idle, \"id\", \"idle\");\nexport { Idle };","map":{"version":3,"names":["Vec2d","StateNode","getTranslateCroppedImageChange","Idle","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","editor","setCursor","type","onlySelectedShape","on","cleanupCroppingState","mark","setCroppingId","id","off","setSelectedTool","info","isMenuOpen","ctrlKey","target","cancel","shape","croppingId","_this$editor$getShape","getShapeUtil","canCrop","setSelectedIds","handle","_objectSpread","onInteractionEnd","phase","getShapeById","util","_util$onDoubleClickEd","onDoubleClickEdge","nudgeCroppingImage","code","_createClass","key","value","ephemeral","undefined","keys","inputs","shiftKey","has","delta","x","y","equals","mul","partial","updateShapes"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/Crop/children/Idle.ts"],"sourcesContent":["import { Vec2d } from '@tldraw/primitives'\nimport { TLEventHandlers, TLExitEventHandler } from '../../../../../types/event-types'\nimport { StateNode } from '../../../../StateNode'\nimport { ShapeWithCrop, getTranslateCroppedImageChange } from './crop_helpers'\n\nexport class Idle extends StateNode {\n\tstatic override id = 'idle'\n\n\tonEnter = () => {\n\t\tthis.editor.setCursor({ type: 'default' })\n\n\t\tconst { onlySelectedShape } = this.editor\n\n\t\t// well this fucking sucks. what the fuck.\n\t\t// it's possible for a user to enter cropping, then undo\n\t\t// (which clears the cropping id) but still remain in this state.\n\t\tthis.editor.on('change-history', this.cleanupCroppingState)\n\n\t\tthis.editor.mark('crop')\n\n\t\tif (onlySelectedShape) {\n\t\t\tthis.editor.setCroppingId(onlySelectedShape.id)\n\t\t}\n\t}\n\n\tonExit: TLExitEventHandler = () => {\n\t\tthis.editor.setCursor({ type: 'default' })\n\n\t\tthis.editor.off('change-history', this.cleanupCroppingState)\n\t}\n\n\tonCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.editor.setCroppingId(null)\n\t\tthis.editor.setSelectedTool('select.idle', {})\n\t}\n\n\tonPointerDown: TLEventHandlers['onPointerDown'] = (info) => {\n\t\tif (this.editor.isMenuOpen) return\n\n\t\tif (info.ctrlKey) {\n\t\t\tthis.editor.setCroppingId(null)\n\t\t\tthis.editor.setSelectedTool('select.brushing', info)\n\t\t\treturn\n\t\t}\n\n\t\tswitch (info.target) {\n\t\t\tcase 'canvas': {\n\t\t\t\tthis.cancel()\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'shape': {\n\t\t\t\tif (info.shape.id === this.editor.croppingId) {\n\t\t\t\t\tthis.editor.setSelectedTool('select.crop.pointing_crop', info)\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\tif (this.editor.getShapeUtil(info.shape)?.canCrop(info.shape)) {\n\t\t\t\t\t\tthis.editor.setCroppingId(info.shape.id)\n\t\t\t\t\t\tthis.editor.setSelectedIds([info.shape.id])\n\t\t\t\t\t\tthis.editor.setSelectedTool('select.crop.pointing_crop', info)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.cancel()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'selection': {\n\t\t\t\tswitch (info.handle) {\n\t\t\t\t\tcase 'mobile_rotate':\n\t\t\t\t\tcase 'top_left_rotate':\n\t\t\t\t\tcase 'top_right_rotate':\n\t\t\t\t\tcase 'bottom_left_rotate':\n\t\t\t\t\tcase 'bottom_right_rotate': {\n\t\t\t\t\t\tthis.editor.setSelectedTool('select.pointing_rotate_handle', {\n\t\t\t\t\t\t\t...info,\n\t\t\t\t\t\t\tonInteractionEnd: 'select.crop',\n\t\t\t\t\t\t})\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase 'top':\n\t\t\t\t\tcase 'right':\n\t\t\t\t\tcase 'bottom':\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.editor.setSelectedTool('select.pointing_crop_handle', {\n\t\t\t\t\t\t\t...info,\n\t\t\t\t\t\t\tonInteractionEnd: 'select.crop',\n\t\t\t\t\t\t})\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase 'top_left':\n\t\t\t\t\tcase 'top_right':\n\t\t\t\t\tcase 'bottom_left':\n\t\t\t\t\tcase 'bottom_right': {\n\t\t\t\t\t\tthis.editor.setSelectedTool('select.pointing_crop_handle', {\n\t\t\t\t\t\t\t...info,\n\t\t\t\t\t\t\tonInteractionEnd: 'select.crop',\n\t\t\t\t\t\t})\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthis.cancel()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tonDoubleClick: TLEventHandlers['onDoubleClick'] = (info) => {\n\t\t// Without this, the double click's \"settle\" would trigger the reset\n\t\t// after the user double clicked the edge to begin cropping\n\t\tif (info.phase !== 'up') return\n\n\t\tif (!this.editor.croppingId) return\n\t\tconst shape = this.editor.getShapeById(this.editor.croppingId)\n\t\tif (!shape) return\n\n\t\tconst util = this.editor.getShapeUtil(shape)\n\t\tif (!util) return\n\n\t\tif (info.target === 'selection') {\n\t\t\tutil.onDoubleClickEdge?.(shape)\n\t\t}\n\t}\n\n\tonKeyDown: TLEventHandlers['onKeyDown'] = () => {\n\t\tthis.nudgeCroppingImage(false)\n\t}\n\n\tonKeyRepeat: TLEventHandlers['onKeyRepeat'] = () => {\n\t\tthis.nudgeCroppingImage(true)\n\t}\n\n\tonKeyUp: TLEventHandlers['onKeyUp'] = (info) => {\n\t\tswitch (info.code) {\n\t\t\tcase 'Enter': {\n\t\t\t\tthis.editor.setCroppingId(null)\n\t\t\t\tthis.editor.setSelectedTool('select.idle', {})\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate cancel() {\n\t\tthis.editor.setCroppingId(null)\n\t\tthis.editor.setSelectedTool('select.idle', {})\n\t}\n\n\tprivate cleanupCroppingState = () => {\n\t\tif (!this.editor.croppingId) {\n\t\t\tthis.editor.setSelectedTool('select.idle', {})\n\t\t}\n\t}\n\n\tprivate nudgeCroppingImage(ephemeral = false) {\n\t\tconst {\n\t\t\teditor: {\n\t\t\t\tinputs: { keys },\n\t\t\t},\n\t\t} = this\n\n\t\t// We want to use the \"actual\" shift key state,\n\t\t// not the one that's in the editor.inputs.shiftKey,\n\t\t// because that one uses a short timeout on release\n\t\tconst shiftKey = keys.has('ShiftLeft')\n\n\t\tconst delta = new Vec2d(0, 0)\n\n\t\tif (keys.has('ArrowLeft')) delta.x += 1\n\t\tif (keys.has('ArrowRight')) delta.x -= 1\n\t\tif (keys.has('ArrowUp')) delta.y += 1\n\t\tif (keys.has('ArrowDown')) delta.y -= 1\n\n\t\tif (delta.equals(new Vec2d(0, 0))) return\n\n\t\tif (shiftKey) delta.mul(10)\n\n\t\tconst shape = this.editor.getShapeById(this.editor.croppingId!) as ShapeWithCrop\n\t\tif (!shape) return\n\t\tconst partial = getTranslateCroppedImageChange(this.editor, shape, delta)\n\n\t\tif (partial) {\n\t\t\tif (!ephemeral) {\n\t\t\t\t// We don't want to create new marks if the user\n\t\t\t\t// is just holding down the arrow keys\n\t\t\t\tthis.editor.mark('translate crop')\n\t\t\t}\n\n\t\t\tthis.editor.updateShapes<ShapeWithCrop>([partial])\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}