{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _ref, _window$tabIdKey;\nimport { defineMigrations, migrate, squashRecordDiffs } from \"@tldraw/store\";\nimport { CameraRecordType, InstancePageStateRecordType, TLINSTANCE_ID, pageIdValidator, shapeIdValidator } from \"@tldraw/tlschema\";\nimport { objectMapFromEntries } from \"@tldraw/utils\";\nimport { T } from \"@tldraw/validate\";\nimport { computed, transact } from \"signia\";\nimport { uniqueId } from \"../utils/data.mjs\";\nvar tabIdKey = \"TLDRAW_TAB_ID_v2\";\nvar window = globalThis.window;\nfunction iOS() {\n  if (!window) return false;\n  return [\"iPad Simulator\", \"iPhone Simulator\", \"iPod Simulator\", \"iPad\", \"iPhone\", \"iPod\"].includes(window.navigator.platform) ||\n  // iPad on iOS 13 detection\n  window.navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nvar TAB_ID = (_ref = (_window$tabIdKey = window === null || window === void 0 ? void 0 : window[tabIdKey]) !== null && _window$tabIdKey !== void 0 ? _window$tabIdKey : window === null || window === void 0 ? void 0 : window.sessionStorage[tabIdKey]) !== null && _ref !== void 0 ? _ref : \"TLDRAW_INSTANCE_STATE_V1_\" + uniqueId();\nif (window) {\n  window[tabIdKey] = TAB_ID;\n  if (iOS()) {\n    window.sessionStorage[tabIdKey] = TAB_ID;\n  } else {\n    delete window.sessionStorage[tabIdKey];\n  }\n}\nwindow === null || window === void 0 || window.addEventListener(\"beforeunload\", function () {\n  window.sessionStorage[tabIdKey] = TAB_ID;\n});\nvar Versions = {\n  Initial: 0\n};\nvar CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Versions.Initial;\nvar sessionStateSnapshotValidator = T.object({\n  version: T.number,\n  currentPageId: pageIdValidator,\n  isFocusMode: T.boolean,\n  exportBackground: T.boolean,\n  isDebugMode: T.boolean,\n  isToolLocked: T.boolean,\n  isGridMode: T.boolean,\n  pageStates: T.arrayOf(T.object({\n    pageId: pageIdValidator,\n    camera: T.object({\n      x: T.number,\n      y: T.number,\n      z: T.number\n    }),\n    selectedIds: T.arrayOf(shapeIdValidator),\n    focusLayerId: shapeIdValidator.nullable()\n  }))\n});\nvar sessionStateSnapshotMigrations = defineMigrations({\n  currentVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION\n});\nfunction migrateAndValidateSessionStateSnapshot(state) {\n  if (!state || typeof state !== \"object\") {\n    console.warn(\"Invalid instance state\");\n    return null;\n  }\n  if (!(\"version\" in state) || typeof state.version !== \"number\") {\n    console.warn(\"No version in instance state\");\n    return null;\n  }\n  var result = migrate({\n    value: state,\n    fromVersion: state.version,\n    toVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n    migrations: sessionStateSnapshotMigrations\n  });\n  if (result.type === \"error\") {\n    console.warn(result.reason);\n    return null;\n  }\n  var value = _objectSpread(_objectSpread({}, result.value), {}, {\n    version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION\n  });\n  try {\n    sessionStateSnapshotValidator.validate(value);\n  } catch (e) {\n    console.warn(e);\n    return null;\n  }\n  return value;\n}\nfunction createSessionStateSnapshotSignal(store) {\n  var $allPageIds = store.query.ids(\"page\");\n  return computed(\"sessionStateSnapshot\", function () {\n    var instanceState = store.get(TLINSTANCE_ID);\n    if (!instanceState) return null;\n    var allPageIds = _toConsumableArray($allPageIds.value);\n    return {\n      version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n      currentPageId: instanceState.currentPageId,\n      exportBackground: instanceState.exportBackground,\n      isFocusMode: instanceState.isFocusMode,\n      isDebugMode: instanceState.isDebugMode,\n      isToolLocked: instanceState.isToolLocked,\n      isGridMode: instanceState.isGridMode,\n      pageStates: allPageIds.map(function (id) {\n        var _camera$x, _camera$y, _camera$z, _ps$selectedIds, _ps$focusLayerId;\n        var ps = store.get(InstancePageStateRecordType.createId(id));\n        var camera = store.get(CameraRecordType.createId(id));\n        return {\n          pageId: id,\n          camera: {\n            x: (_camera$x = camera === null || camera === void 0 ? void 0 : camera.x) !== null && _camera$x !== void 0 ? _camera$x : 0,\n            y: (_camera$y = camera === null || camera === void 0 ? void 0 : camera.y) !== null && _camera$y !== void 0 ? _camera$y : 0,\n            z: (_camera$z = camera === null || camera === void 0 ? void 0 : camera.z) !== null && _camera$z !== void 0 ? _camera$z : 1\n          },\n          selectedIds: (_ps$selectedIds = ps === null || ps === void 0 ? void 0 : ps.selectedIds) !== null && _ps$selectedIds !== void 0 ? _ps$selectedIds : [],\n          focusLayerId: (_ps$focusLayerId = ps === null || ps === void 0 ? void 0 : ps.focusLayerId) !== null && _ps$focusLayerId !== void 0 ? _ps$focusLayerId : null\n        };\n      })\n    };\n  });\n}\nfunction loadSessionStateSnapshotIntoStore(store, snapshot) {\n  var res = migrateAndValidateSessionStateSnapshot(snapshot);\n  if (!res) return;\n  var allPageStatesAndCameras = store.allRecords().filter(function (r) {\n    return r.typeName === \"instance_page_state\" || r.typeName === \"camera\";\n  });\n  var removeDiff = {\n    added: {},\n    updated: {},\n    removed: _objectSpread({}, objectMapFromEntries(allPageStatesAndCameras.map(function (r) {\n      return [r.id, r];\n    })))\n  };\n  if (store.has(TLINSTANCE_ID)) {\n    removeDiff.removed[TLINSTANCE_ID] = store.get(TLINSTANCE_ID);\n  }\n  var addDiff = {\n    removed: {},\n    updated: {},\n    added: _defineProperty({}, TLINSTANCE_ID, store.schema.types.instance.create({\n      id: TLINSTANCE_ID,\n      currentPageId: res.currentPageId,\n      isDebugMode: res.isDebugMode,\n      isFocusMode: res.isFocusMode,\n      isToolLocked: res.isToolLocked,\n      isGridMode: res.isGridMode,\n      exportBackground: res.exportBackground\n    }))\n  };\n  var _iterator = _createForOfIteratorHelper(res.pageStates),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ps = _step.value;\n      var cameraId = CameraRecordType.createId(ps.pageId);\n      var pageStateId = InstancePageStateRecordType.createId(ps.pageId);\n      addDiff.added[cameraId] = CameraRecordType.create({\n        id: CameraRecordType.createId(ps.pageId),\n        x: ps.camera.x,\n        y: ps.camera.y,\n        z: ps.camera.z\n      });\n      addDiff.added[pageStateId] = InstancePageStateRecordType.create({\n        id: InstancePageStateRecordType.createId(ps.pageId),\n        pageId: ps.pageId,\n        selectedIds: ps.selectedIds,\n        focusLayerId: ps.focusLayerId\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  transact(function () {\n    store.applyDiff(squashRecordDiffs([removeDiff, addDiff]));\n    store.ensureStoreIsUsable();\n  });\n}\nfunction extractSessionStateFromLegacySnapshot(store) {\n  var instanceRecords = [];\n  for (var _i = 0, _Object$values = Object.values(store); _i < _Object$values.length; _i++) {\n    var _record$typeName;\n    var record = _Object$values[_i];\n    if ((_record$typeName = record.typeName) !== null && _record$typeName !== void 0 && _record$typeName.match(/^(instance.*|pointer|camera)$/)) {\n      instanceRecords.push(record);\n    }\n  }\n  var oldInstance = instanceRecords.filter(function (r) {\n    return r.typeName === \"instance\" && r.id !== TLINSTANCE_ID;\n  })[0];\n  if (!oldInstance) return null;\n  var result = {\n    version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n    currentPageId: oldInstance.currentPageId,\n    exportBackground: !!oldInstance.exportBackground,\n    isFocusMode: !!oldInstance.isFocusMode,\n    isDebugMode: !!oldInstance.isDebugMode,\n    isToolLocked: !!oldInstance.isToolLocked,\n    isGridMode: false,\n    pageStates: instanceRecords.filter(function (r) {\n      return r.typeName === \"instance_page_state\" && r.instanceId === oldInstance.id;\n    }).map(function (ps) {\n      var _store$ps$cameraId;\n      var camera = (_store$ps$cameraId = store[ps.cameraId]) !== null && _store$ps$cameraId !== void 0 ? _store$ps$cameraId : {\n        x: 0,\n        y: 0,\n        z: 1\n      };\n      return {\n        pageId: ps.pageId,\n        camera: {\n          x: camera.x,\n          y: camera.y,\n          z: camera.z\n        },\n        selectedIds: ps.selectedIds,\n        focusLayerId: ps.focusLayerId\n      };\n    })\n  };\n  try {\n    sessionStateSnapshotValidator.validate(result);\n    return result;\n  } catch (e) {\n    return null;\n  }\n}\nexport { CURRENT_SESSION_STATE_SNAPSHOT_VERSION, TAB_ID, createSessionStateSnapshotSignal, extractSessionStateFromLegacySnapshot, loadSessionStateSnapshotIntoStore };","map":{"version":3,"names":["defineMigrations","migrate","squashRecordDiffs","CameraRecordType","InstancePageStateRecordType","TLINSTANCE_ID","pageIdValidator","shapeIdValidator","objectMapFromEntries","T","computed","transact","uniqueId","tabIdKey","window","globalThis","iOS","includes","navigator","platform","userAgent","document","TAB_ID","_ref","_window$tabIdKey","sessionStorage","addEventListener","Versions","Initial","CURRENT_SESSION_STATE_SNAPSHOT_VERSION","sessionStateSnapshotValidator","object","version","number","currentPageId","isFocusMode","boolean","exportBackground","isDebugMode","isToolLocked","isGridMode","pageStates","arrayOf","pageId","camera","x","y","z","selectedIds","focusLayerId","nullable","sessionStateSnapshotMigrations","currentVersion","migrateAndValidateSessionStateSnapshot","state","console","warn","result","value","fromVersion","toVersion","migrations","type","reason","_objectSpread","validate","e","createSessionStateSnapshotSignal","store","$allPageIds","query","ids","instanceState","get","allPageIds","_toConsumableArray","map","id","_camera$x","_camera$y","_camera$z","_ps$selectedIds","_ps$focusLayerId","ps","createId","loadSessionStateSnapshotIntoStore","snapshot","res","allPageStatesAndCameras","allRecords","filter","r","typeName","removeDiff","added","updated","removed","has","addDiff","_defineProperty","schema","types","instance","create","_iterator","_createForOfIteratorHelper","_step","s","n","done","cameraId","pageStateId","err","f","applyDiff","ensureStoreIsUsable","extractSessionStateFromLegacySnapshot","instanceRecords","_i","_Object$values","Object","values","length","_record$typeName","record","match","push","oldInstance","instanceId","_store$ps$cameraId"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/config/TLSessionStateSnapshot.ts"],"sourcesContent":["import {\n\tRecordsDiff,\n\tUnknownRecord,\n\tdefineMigrations,\n\tmigrate,\n\tsquashRecordDiffs,\n} from '@tldraw/store'\nimport {\n\tCameraRecordType,\n\tInstancePageStateRecordType,\n\tTLINSTANCE_ID,\n\tTLPageId,\n\tTLRecord,\n\tTLShapeId,\n\tTLStore,\n\tpageIdValidator,\n\tshapeIdValidator,\n} from '@tldraw/tlschema'\nimport { objectMapFromEntries } from '@tldraw/utils'\nimport { T } from '@tldraw/validate'\nimport { Signal, computed, transact } from 'signia'\nimport { uniqueId } from '../utils/data'\n\nconst tabIdKey = 'TLDRAW_TAB_ID_v2' as const\n\nconst window = globalThis.window as\n\t| {\n\t\t\tnavigator: Window['navigator']\n\t\t\tlocalStorage: Window['localStorage']\n\t\t\tsessionStorage: Window['sessionStorage']\n\t\t\taddEventListener: Window['addEventListener']\n\t\t\tTLDRAW_TAB_ID_v2?: string\n\t  }\n\t| undefined\n\n// https://stackoverflow.com/a/9039885\nfunction iOS() {\n\tif (!window) return false\n\treturn (\n\t\t['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(\n\t\t\twindow.navigator.platform\n\t\t) ||\n\t\t// iPad on iOS 13 detection\n\t\t(window.navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n\t)\n}\n\n/**\n * A string that is unique per browser tab\n * @public\n */\nexport const TAB_ID: string =\n\twindow?.[tabIdKey] ?? window?.sessionStorage[tabIdKey] ?? `TLDRAW_INSTANCE_STATE_V1_` + uniqueId()\nif (window) {\n\twindow[tabIdKey] = TAB_ID\n\tif (iOS()) {\n\t\t// iOS does not trigger beforeunload\n\t\t// so we need to keep the sessionStorage value around\n\t\t// and hope the user doesn't figure out a way to duplicate their tab\n\t\t// in which case they'll have two tabs with the same UI state.\n\t\t// It's not a big deal, but it's not ideal.\n\t\t// And anyway I can't see a way to duplicate a tab in iOS Safari.\n\t\twindow.sessionStorage[tabIdKey] = TAB_ID\n\t} else {\n\t\tdelete window.sessionStorage[tabIdKey]\n\t}\n}\n\nwindow?.addEventListener('beforeunload', () => {\n\twindow.sessionStorage[tabIdKey] = TAB_ID\n})\n\nconst Versions = {\n\tInitial: 0,\n} as const\n\nexport const CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Versions.Initial\n\n/**\n * The state of the editor instance, not including any document state.\n *\n * @public\n */\nexport interface TLSessionStateSnapshot {\n\tversion: number\n\tcurrentPageId: TLPageId\n\tisFocusMode: boolean\n\texportBackground: boolean\n\tisDebugMode: boolean\n\tisToolLocked: boolean\n\tisGridMode: boolean\n\tpageStates: Array<{\n\t\tpageId: TLPageId\n\t\tcamera: { x: number; y: number; z: number }\n\t\tselectedIds: TLShapeId[]\n\t\tfocusLayerId: TLShapeId | null\n\t}>\n}\n\nconst sessionStateSnapshotValidator: T.Validator<TLSessionStateSnapshot> = T.object({\n\tversion: T.number,\n\tcurrentPageId: pageIdValidator,\n\tisFocusMode: T.boolean,\n\texportBackground: T.boolean,\n\tisDebugMode: T.boolean,\n\tisToolLocked: T.boolean,\n\tisGridMode: T.boolean,\n\tpageStates: T.arrayOf(\n\t\tT.object({\n\t\t\tpageId: pageIdValidator,\n\t\t\tcamera: T.object({\n\t\t\t\tx: T.number,\n\t\t\t\ty: T.number,\n\t\t\t\tz: T.number,\n\t\t\t}),\n\t\t\tselectedIds: T.arrayOf(shapeIdValidator),\n\t\t\tfocusLayerId: shapeIdValidator.nullable(),\n\t\t})\n\t),\n})\n\nconst sessionStateSnapshotMigrations = defineMigrations({\n\tcurrentVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n})\n\nfunction migrateAndValidateSessionStateSnapshot(state: unknown): TLSessionStateSnapshot | null {\n\tif (!state || typeof state !== 'object') {\n\t\tconsole.warn('Invalid instance state')\n\t\treturn null\n\t}\n\tif (!('version' in state) || typeof state.version !== 'number') {\n\t\tconsole.warn('No version in instance state')\n\t\treturn null\n\t}\n\tconst result = migrate<TLSessionStateSnapshot>({\n\t\tvalue: state,\n\t\tfromVersion: state.version,\n\t\ttoVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n\t\tmigrations: sessionStateSnapshotMigrations,\n\t})\n\tif (result.type === 'error') {\n\t\tconsole.warn(result.reason)\n\t\treturn null\n\t}\n\n\tconst value = { ...result.value, version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION }\n\n\ttry {\n\t\tsessionStateSnapshotValidator.validate(value)\n\t} catch (e) {\n\t\tconsole.warn(e)\n\t\treturn null\n\t}\n\n\treturn value\n}\n\n/**\n * Creates a signal of the instance state for a given store.\n * @public\n * @param store - The store to create the instance state snapshot signal for\n * @returns\n */\nexport function createSessionStateSnapshotSignal(\n\tstore: TLStore\n): Signal<TLSessionStateSnapshot | null> {\n\tconst $allPageIds = store.query.ids('page')\n\n\treturn computed<TLSessionStateSnapshot | null>('sessionStateSnapshot', () => {\n\t\tconst instanceState = store.get(TLINSTANCE_ID)\n\t\tif (!instanceState) return null\n\n\t\tconst allPageIds = [...$allPageIds.value]\n\t\treturn {\n\t\t\tversion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n\t\t\tcurrentPageId: instanceState.currentPageId,\n\t\t\texportBackground: instanceState.exportBackground,\n\t\t\tisFocusMode: instanceState.isFocusMode,\n\t\t\tisDebugMode: instanceState.isDebugMode,\n\t\t\tisToolLocked: instanceState.isToolLocked,\n\t\t\tisGridMode: instanceState.isGridMode,\n\t\t\tpageStates: allPageIds.map((id) => {\n\t\t\t\tconst ps = store.get(InstancePageStateRecordType.createId(id))\n\t\t\t\tconst camera = store.get(CameraRecordType.createId(id))\n\t\t\t\treturn {\n\t\t\t\t\tpageId: id,\n\t\t\t\t\tcamera: {\n\t\t\t\t\t\tx: camera?.x ?? 0,\n\t\t\t\t\t\ty: camera?.y ?? 0,\n\t\t\t\t\t\tz: camera?.z ?? 1,\n\t\t\t\t\t},\n\t\t\t\t\tselectedIds: ps?.selectedIds ?? [],\n\t\t\t\t\tfocusLayerId: ps?.focusLayerId ?? null,\n\t\t\t\t} satisfies TLSessionStateSnapshot['pageStates'][0]\n\t\t\t}),\n\t\t} satisfies TLSessionStateSnapshot\n\t})\n}\n\n/**\n * Loads a snapshot of the editor's instance state into the store of a new editor instance.\n *\n * @public\n * @param store - The store to load the instance state into\n * @param snapshot - The instance state snapshot to load\n * @returns\n */\nexport function loadSessionStateSnapshotIntoStore(\n\tstore: TLStore,\n\tsnapshot: TLSessionStateSnapshot\n) {\n\tconst res = migrateAndValidateSessionStateSnapshot(snapshot)\n\tif (!res) return\n\n\t// remove all page states and cameras and the instance state\n\tconst allPageStatesAndCameras = store\n\t\t.allRecords()\n\t\t.filter((r) => r.typeName === 'instance_page_state' || r.typeName === 'camera')\n\n\tconst removeDiff: RecordsDiff<TLRecord> = {\n\t\tadded: {},\n\t\tupdated: {},\n\t\tremoved: {\n\t\t\t...objectMapFromEntries(allPageStatesAndCameras.map((r) => [r.id, r])),\n\t\t},\n\t}\n\tif (store.has(TLINSTANCE_ID)) {\n\t\tremoveDiff.removed[TLINSTANCE_ID] = store.get(TLINSTANCE_ID)!\n\t}\n\n\tconst addDiff: RecordsDiff<TLRecord> = {\n\t\tremoved: {},\n\t\tupdated: {},\n\t\tadded: {\n\t\t\t[TLINSTANCE_ID]: store.schema.types.instance.create({\n\t\t\t\tid: TLINSTANCE_ID,\n\t\t\t\tcurrentPageId: res.currentPageId,\n\t\t\t\tisDebugMode: res.isDebugMode,\n\t\t\t\tisFocusMode: res.isFocusMode,\n\t\t\t\tisToolLocked: res.isToolLocked,\n\t\t\t\tisGridMode: res.isGridMode,\n\t\t\t\texportBackground: res.exportBackground,\n\t\t\t}),\n\t\t},\n\t}\n\n\t// replace them with new ones\n\tfor (const ps of res.pageStates) {\n\t\tconst cameraId = CameraRecordType.createId(ps.pageId)\n\t\tconst pageStateId = InstancePageStateRecordType.createId(ps.pageId)\n\t\taddDiff.added[cameraId] = CameraRecordType.create({\n\t\t\tid: CameraRecordType.createId(ps.pageId),\n\t\t\tx: ps.camera.x,\n\t\t\ty: ps.camera.y,\n\t\t\tz: ps.camera.z,\n\t\t})\n\t\taddDiff.added[pageStateId] = InstancePageStateRecordType.create({\n\t\t\tid: InstancePageStateRecordType.createId(ps.pageId),\n\t\t\tpageId: ps.pageId,\n\t\t\tselectedIds: ps.selectedIds,\n\t\t\tfocusLayerId: ps.focusLayerId,\n\t\t})\n\t}\n\n\ttransact(() => {\n\t\tstore.applyDiff(squashRecordDiffs([removeDiff, addDiff]))\n\t\tstore.ensureStoreIsUsable()\n\t})\n}\n\n/**\n * @internal\n */\nexport function extractSessionStateFromLegacySnapshot(\n\tstore: Record<string, UnknownRecord>\n): TLSessionStateSnapshot | null {\n\tconst instanceRecords = []\n\tfor (const record of Object.values(store)) {\n\t\tif (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {\n\t\t\tinstanceRecords.push(record)\n\t\t}\n\t}\n\n\t// for scratch documents, we need to extract the most recently-used instance and it's associated page states\n\t// but oops we don't have the concept of \"most recently-used\" so we'll just take the first one\n\tconst oldInstance = instanceRecords.filter(\n\t\t(r) => r.typeName === 'instance' && r.id !== TLINSTANCE_ID\n\t)[0] as any\n\tif (!oldInstance) return null\n\n\tconst result: TLSessionStateSnapshot = {\n\t\tversion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,\n\t\tcurrentPageId: oldInstance.currentPageId,\n\t\texportBackground: !!oldInstance.exportBackground,\n\t\tisFocusMode: !!oldInstance.isFocusMode,\n\t\tisDebugMode: !!oldInstance.isDebugMode,\n\t\tisToolLocked: !!oldInstance.isToolLocked,\n\t\tisGridMode: false,\n\t\tpageStates: instanceRecords\n\t\t\t.filter((r: any) => r.typeName === 'instance_page_state' && r.instanceId === oldInstance.id)\n\t\t\t.map((ps: any): TLSessionStateSnapshot['pageStates'][0] => {\n\t\t\t\tconst camera = (store[ps.cameraId] as any) ?? { x: 0, y: 0, z: 1 }\n\t\t\t\treturn {\n\t\t\t\t\tpageId: ps.pageId,\n\t\t\t\t\tcamera: {\n\t\t\t\t\t\tx: camera.x,\n\t\t\t\t\t\ty: camera.y,\n\t\t\t\t\t\tz: camera.z,\n\t\t\t\t\t},\n\t\t\t\t\tselectedIds: ps.selectedIds,\n\t\t\t\t\tfocusLayerId: ps.focusLayerId,\n\t\t\t\t}\n\t\t\t}),\n\t}\n\n\ttry {\n\t\tsessionStateSnapshotValidator.validate(result)\n\t\treturn result\n\t} catch (e) {\n\t\treturn null\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}