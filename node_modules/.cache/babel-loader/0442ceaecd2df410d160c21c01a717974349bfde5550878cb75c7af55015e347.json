{"ast":null,"code":"import { getPerfectDashProps } from \"../../shared/getPerfectDashProps.mjs\";\nimport { getLineDrawPath } from \"./getLinePath.mjs\";\nfunction getDrawLineShapeSvg(_ref) {\n  var shape = _ref.shape,\n    strokeWidth = _ref.strokeWidth,\n    spline = _ref.spline,\n    color = _ref.color;\n  var pfPath = getLineDrawPath(shape, spline, strokeWidth);\n  var p = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  p.setAttribute(\"stroke-width\", \"0\");\n  p.setAttribute(\"stroke\", \"none\");\n  p.setAttribute(\"fill\", color);\n  p.setAttribute(\"d\", pfPath);\n  return p;\n}\nfunction getDashedLineShapeSvg(_ref2) {\n  var dash = _ref2.dash,\n    strokeWidth = _ref2.strokeWidth,\n    spline = _ref2.spline,\n    color = _ref2.color;\n  var segments = spline.segments;\n  var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  g.setAttribute(\"stroke\", color);\n  g.setAttribute(\"stroke-width\", strokeWidth.toString());\n  segments.forEach(function (segment, i) {\n    var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    var _getPerfectDashProps = getPerfectDashProps(segment.length, strokeWidth, {\n        style: dash,\n        start: i > 0 ? \"outset\" : \"none\",\n        end: i < segments.length - 1 ? \"outset\" : \"none\"\n      }),\n      strokeDasharray = _getPerfectDashProps.strokeDasharray,\n      strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n    path.setAttribute(\"stroke-dasharray\", strokeDasharray.toString());\n    path.setAttribute(\"stroke-dashoffset\", strokeDashoffset.toString());\n    path.setAttribute(\"d\", segment.path);\n    path.setAttribute(\"fill\", \"none\");\n    g.appendChild(path);\n  });\n  return g;\n}\nfunction getSolidLineShapeSvg(_ref3) {\n  var strokeWidth = _ref3.strokeWidth,\n    spline = _ref3.spline,\n    color = _ref3.color;\n  var path = spline.path;\n  var p = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  p.setAttribute(\"stroke-width\", strokeWidth.toString());\n  p.setAttribute(\"stroke\", color);\n  p.setAttribute(\"fill\", \"none\");\n  p.setAttribute(\"d\", path);\n  return p;\n}\nfunction getLineSvg(shape, spline, color, strokeWidth) {\n  switch (shape.props.dash) {\n    case \"draw\":\n      return getDrawLineShapeSvg({\n        shape: shape,\n        strokeWidth: strokeWidth,\n        spline: spline,\n        color: color\n      });\n    case \"solid\":\n      return getSolidLineShapeSvg({\n        strokeWidth: strokeWidth,\n        spline: spline,\n        color: color\n      });\n    default:\n      return getDashedLineShapeSvg({\n        strokeWidth: strokeWidth,\n        spline: spline,\n        dash: shape.props.dash,\n        color: color\n      });\n  }\n}\nexport { getDashedLineShapeSvg, getDrawLineShapeSvg, getLineSvg, getSolidLineShapeSvg };","map":{"version":3,"names":["getPerfectDashProps","getLineDrawPath","getDrawLineShapeSvg","_ref","shape","strokeWidth","spline","color","pfPath","p","document","createElementNS","setAttribute","getDashedLineShapeSvg","_ref2","dash","segments","g","toString","forEach","segment","i","path","_getPerfectDashProps","length","style","start","end","strokeDasharray","strokeDashoffset","appendChild","getSolidLineShapeSvg","_ref3","getLineSvg","props"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/line/components/getLineSvg.ts"],"sourcesContent":["import { CubicSpline2d, Polyline2d } from '@tldraw/primitives'\nimport { TLDefaultDashStyle, TLLineShape } from '@tldraw/tlschema'\nimport { getPerfectDashProps } from '../../shared/getPerfectDashProps'\nimport { getLineDrawPath } from './getLinePath'\n\nexport function getDrawLineShapeSvg({\n\tshape,\n\tstrokeWidth,\n\tspline,\n\tcolor,\n}: {\n\tshape: TLLineShape\n\tstrokeWidth: number\n\tspline: CubicSpline2d | Polyline2d\n\tcolor: string\n}) {\n\tconst pfPath = getLineDrawPath(shape, spline, strokeWidth)\n\n\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tp.setAttribute('stroke-width', '0')\n\tp.setAttribute('stroke', 'none')\n\tp.setAttribute('fill', color)\n\tp.setAttribute('d', pfPath)\n\n\treturn p\n}\n\nexport function getDashedLineShapeSvg({\n\tdash,\n\tstrokeWidth,\n\tspline,\n\tcolor,\n}: {\n\tdash: TLDefaultDashStyle\n\tstrokeWidth: number\n\tspline: CubicSpline2d | Polyline2d\n\tcolor: string\n}) {\n\tconst { segments } = spline\n\n\tconst g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\tg.setAttribute('stroke', color)\n\tg.setAttribute('stroke-width', strokeWidth.toString())\n\n\tsegments.forEach((segment, i) => {\n\t\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(segment.length, strokeWidth, {\n\t\t\tstyle: dash,\n\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\tend: i < segments.length - 1 ? 'outset' : 'none',\n\t\t})\n\n\t\tpath.setAttribute('stroke-dasharray', strokeDasharray.toString())\n\t\tpath.setAttribute('stroke-dashoffset', strokeDashoffset.toString())\n\t\tpath.setAttribute('d', segment.path)\n\t\tpath.setAttribute('fill', 'none')\n\t\tg.appendChild(path)\n\t})\n\n\treturn g\n}\n\nexport function getSolidLineShapeSvg({\n\tstrokeWidth,\n\tspline,\n\tcolor,\n}: {\n\tstrokeWidth: number\n\tspline: CubicSpline2d | Polyline2d\n\tcolor: string\n}) {\n\tconst { path } = spline\n\n\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tp.setAttribute('stroke-width', strokeWidth.toString())\n\tp.setAttribute('stroke', color)\n\tp.setAttribute('fill', 'none')\n\tp.setAttribute('d', path)\n\n\treturn p\n}\n\nexport function getLineSvg(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tcolor: string,\n\tstrokeWidth: number\n) {\n\tswitch (shape.props.dash) {\n\t\tcase 'draw':\n\t\t\treturn getDrawLineShapeSvg({\n\t\t\t\tshape,\n\t\t\t\tstrokeWidth,\n\t\t\t\tspline,\n\t\t\t\tcolor,\n\t\t\t})\n\n\t\tcase 'solid':\n\t\t\treturn getSolidLineShapeSvg({\n\t\t\t\tstrokeWidth,\n\t\t\t\tspline,\n\t\t\t\tcolor,\n\t\t\t})\n\t\tdefault:\n\t\t\treturn getDashedLineShapeSvg({\n\t\t\t\tstrokeWidth,\n\t\t\t\tspline,\n\t\t\t\tdash: shape.props.dash,\n\t\t\t\tcolor,\n\t\t\t})\n\t}\n}\n"],"mappings":"AAEA,SAASA,mBAAA,QAA2B;AACpC,SAASC,eAAA,QAAuB;AAEzB,SAASC,oBAAAC,IAAA,EAUb;EAAA,IATFC,KAAA,GAAAD,IAAA,CAAAC,KAAA;IACAC,WAAA,GAAAF,IAAA,CAAAE,WAAA;IACAC,MAAA,GAAAH,IAAA,CAAAG,MAAA;IACAC,KAAA,GAAAJ,IAAA,CAAAI,KAAA;EAOA,IAAMC,MAAA,GAASP,eAAA,CAAgBG,KAAA,EAAOE,MAAA,EAAQD,WAAW;EAEzD,IAAMI,CAAA,GAAIC,QAAA,CAASC,eAAA,CAAgB,8BAA8B,MAAM;EACvEF,CAAA,CAAEG,YAAA,CAAa,gBAAgB,GAAG;EAClCH,CAAA,CAAEG,YAAA,CAAa,UAAU,MAAM;EAC/BH,CAAA,CAAEG,YAAA,CAAa,QAAQL,KAAK;EAC5BE,CAAA,CAAEG,YAAA,CAAa,KAAKJ,MAAM;EAE1B,OAAOC,CAAA;AACR;AAEO,SAASI,sBAAAC,KAAA,EAUb;EAAA,IATFC,IAAA,GAAAD,KAAA,CAAAC,IAAA;IACAV,WAAA,GAAAS,KAAA,CAAAT,WAAA;IACAC,MAAA,GAAAQ,KAAA,CAAAR,MAAA;IACAC,KAAA,GAAAO,KAAA,CAAAP,KAAA;EAOA,IAAQS,QAAA,GAAaV,MAAA,CAAbU,QAAA;EAER,IAAMC,CAAA,GAAIP,QAAA,CAASC,eAAA,CAAgB,8BAA8B,GAAG;EACpEM,CAAA,CAAEL,YAAA,CAAa,UAAUL,KAAK;EAC9BU,CAAA,CAAEL,YAAA,CAAa,gBAAgBP,WAAA,CAAYa,QAAA,CAAS,CAAC;EAErDF,QAAA,CAASG,OAAA,CAAQ,UAACC,OAAA,EAASC,CAAA,EAAM;IAChC,IAAMC,IAAA,GAAOZ,QAAA,CAASC,eAAA,CAAgB,8BAA8B,MAAM;IAC1E,IAAAY,oBAAA,GAA8CvB,mBAAA,CAAoBoB,OAAA,CAAQI,MAAA,EAAQnB,WAAA,EAAa;QAC9FoB,KAAA,EAAOV,IAAA;QACPW,KAAA,EAAOL,CAAA,GAAI,IAAI,WAAW;QAC1BM,GAAA,EAAKN,CAAA,GAAIL,QAAA,CAASQ,MAAA,GAAS,IAAI,WAAW;MAC3C,CAAC;MAJOI,eAAA,GAAAL,oBAAA,CAAAK,eAAA;MAAiBC,gBAAA,GAAAN,oBAAA,CAAAM,gBAAA;IAMzBP,IAAA,CAAKV,YAAA,CAAa,oBAAoBgB,eAAA,CAAgBV,QAAA,CAAS,CAAC;IAChEI,IAAA,CAAKV,YAAA,CAAa,qBAAqBiB,gBAAA,CAAiBX,QAAA,CAAS,CAAC;IAClEI,IAAA,CAAKV,YAAA,CAAa,KAAKQ,OAAA,CAAQE,IAAI;IACnCA,IAAA,CAAKV,YAAA,CAAa,QAAQ,MAAM;IAChCK,CAAA,CAAEa,WAAA,CAAYR,IAAI;EACnB,CAAC;EAED,OAAOL,CAAA;AACR;AAEO,SAASc,qBAAAC,KAAA,EAQb;EAAA,IAPF3B,WAAA,GAAA2B,KAAA,CAAA3B,WAAA;IACAC,MAAA,GAAA0B,KAAA,CAAA1B,MAAA;IACAC,KAAA,GAAAyB,KAAA,CAAAzB,KAAA;EAMA,IAAQe,IAAA,GAAShB,MAAA,CAATgB,IAAA;EAER,IAAMb,CAAA,GAAIC,QAAA,CAASC,eAAA,CAAgB,8BAA8B,MAAM;EACvEF,CAAA,CAAEG,YAAA,CAAa,gBAAgBP,WAAA,CAAYa,QAAA,CAAS,CAAC;EACrDT,CAAA,CAAEG,YAAA,CAAa,UAAUL,KAAK;EAC9BE,CAAA,CAAEG,YAAA,CAAa,QAAQ,MAAM;EAC7BH,CAAA,CAAEG,YAAA,CAAa,KAAKU,IAAI;EAExB,OAAOb,CAAA;AACR;AAEO,SAASwB,WACf7B,KAAA,EACAE,MAAA,EACAC,KAAA,EACAF,WAAA,EACC;EACD,QAAQD,KAAA,CAAM8B,KAAA,CAAMnB,IAAA;IACnB,KAAK;MACJ,OAAOb,mBAAA,CAAoB;QAC1BE,KAAA,EAAAA,KAAA;QACAC,WAAA,EAAAA,WAAA;QACAC,MAAA,EAAAA,MAAA;QACAC,KAAA,EAAAA;MACD,CAAC;IAEF,KAAK;MACJ,OAAOwB,oBAAA,CAAqB;QAC3B1B,WAAA,EAAAA,WAAA;QACAC,MAAA,EAAAA,MAAA;QACAC,KAAA,EAAAA;MACD,CAAC;IACF;MACC,OAAOM,qBAAA,CAAsB;QAC5BR,WAAA,EAAAA,WAAA;QACAC,MAAA,EAAAA,MAAA;QACAS,IAAA,EAAMX,KAAA,CAAM8B,KAAA,CAAMnB,IAAA;QAClBR,KAAA,EAAAA;MACD,CAAC;EACH;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}