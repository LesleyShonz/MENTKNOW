function defaultEmptyAs(str, dflt) {
  if (str.match(/^\s*$/)) {
    return dflt;
  }
  return str;
}
async function blobAsString(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.addEventListener("loadend", () => {
      const text = reader.result;
      resolve(text);
    });
    reader.addEventListener("error", () => {
      reject(reader.error);
    });
    reader.readAsText(blob);
  });
}
async function dataTransferItemAsString(item) {
  return new Promise((resolve) => {
    item.getAsString((text) => {
      resolve(text);
    });
  });
}
function correctSpacesToNbsp(input) {
  return input.replace(/\s/g, "\xA0");
}
export {
  blobAsString,
  correctSpacesToNbsp,
  dataTransferItemAsString,
  defaultEmptyAs
};
//# sourceMappingURL=string.mjs.map
