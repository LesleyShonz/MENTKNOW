{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { StoreSchema } from \"@tldraw/store\";\nimport { objectMapValues } from \"@tldraw/utils\";\nimport { createIntegrityChecker, onValidationFailure } from \"./TLStore.mjs\";\nimport { AssetRecordType } from \"./records/TLAsset.mjs\";\nimport { CameraRecordType } from \"./records/TLCamera.mjs\";\nimport { DocumentRecordType } from \"./records/TLDocument.mjs\";\nimport { createInstanceRecordType } from \"./records/TLInstance.mjs\";\nimport { PageRecordType } from \"./records/TLPage.mjs\";\nimport { InstancePageStateRecordType } from \"./records/TLPageState.mjs\";\nimport { PointerRecordType } from \"./records/TLPointer.mjs\";\nimport { InstancePresenceRecordType } from \"./records/TLPresence.mjs\";\nimport { createShapeRecordType, getShapePropKeysByStyle } from \"./records/TLShape.mjs\";\nimport { storeMigrations } from \"./store-migrations.mjs\";\nfunction createTLSchema(_ref) {\n  var shapes = _ref.shapes;\n  var stylesById = /* @__PURE__ */new Map();\n  var _iterator = _createForOfIteratorHelper(objectMapValues(shapes)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _shape$props;\n      var shape = _step.value;\n      var _iterator2 = _createForOfIteratorHelper(getShapePropKeysByStyle((_shape$props = shape.props) !== null && _shape$props !== void 0 ? _shape$props : {}).keys()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var style = _step2.value;\n          if (stylesById.has(style.id) && stylesById.get(style.id) !== style) {\n            throw new Error(\"Multiple StyleProp instances with the same id: \".concat(style.id));\n          }\n          stylesById.set(style.id, style);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var ShapeRecordType = createShapeRecordType(shapes);\n  var InstanceRecordType = createInstanceRecordType(stylesById);\n  return StoreSchema.create({\n    asset: AssetRecordType,\n    camera: CameraRecordType,\n    document: DocumentRecordType,\n    instance: InstanceRecordType,\n    instance_page_state: InstancePageStateRecordType,\n    page: PageRecordType,\n    shape: ShapeRecordType,\n    instance_presence: InstancePresenceRecordType,\n    pointer: PointerRecordType\n  }, {\n    snapshotMigrations: storeMigrations,\n    onValidationFailure: onValidationFailure,\n    createIntegrityChecker: createIntegrityChecker\n  });\n}\nexport { createTLSchema };","map":{"version":3,"names":["StoreSchema","objectMapValues","createIntegrityChecker","onValidationFailure","AssetRecordType","CameraRecordType","DocumentRecordType","createInstanceRecordType","PageRecordType","InstancePageStateRecordType","PointerRecordType","InstancePresenceRecordType","createShapeRecordType","getShapePropKeysByStyle","storeMigrations","createTLSchema","_ref","shapes","stylesById","Map","_iterator","_createForOfIteratorHelper","_step","s","n","done","_shape$props","shape","value","_iterator2","props","keys","_step2","style","has","id","get","Error","concat","set","err","e","f","ShapeRecordType","InstanceRecordType","create","asset","camera","document","instance","instance_page_state","page","instance_presence","pointer","snapshotMigrations"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/createTLSchema.ts"],"sourcesContent":["import { Migrations, StoreSchema } from '@tldraw/store'\nimport { objectMapValues } from '@tldraw/utils'\nimport { TLStoreProps, createIntegrityChecker, onValidationFailure } from './TLStore'\nimport { AssetRecordType } from './records/TLAsset'\nimport { CameraRecordType } from './records/TLCamera'\nimport { DocumentRecordType } from './records/TLDocument'\nimport { createInstanceRecordType } from './records/TLInstance'\nimport { PageRecordType } from './records/TLPage'\nimport { InstancePageStateRecordType } from './records/TLPageState'\nimport { PointerRecordType } from './records/TLPointer'\nimport { InstancePresenceRecordType } from './records/TLPresence'\nimport { TLRecord } from './records/TLRecord'\nimport { createShapeRecordType, getShapePropKeysByStyle } from './records/TLShape'\nimport { storeMigrations } from './store-migrations'\nimport { StyleProp } from './styles/StyleProp'\n\n/** @public */\nexport type SchemaShapeInfo = {\n\tmigrations?: Migrations\n\tprops?: Record<string, { validate: (prop: any) => any }>\n}\n\n/** @public */\nexport type TLSchema = StoreSchema<TLRecord, TLStoreProps>\n\n/**\n * Create a TLSchema with custom shapes. Custom shapes cannot override default shapes.\n *\n * @param opts - Options\n *\n * @public */\nexport function createTLSchema({ shapes }: { shapes: Record<string, SchemaShapeInfo> }): TLSchema {\n\tconst stylesById = new Map<string, StyleProp<unknown>>()\n\tfor (const shape of objectMapValues(shapes)) {\n\t\tfor (const style of getShapePropKeysByStyle(shape.props ?? {}).keys()) {\n\t\t\tif (stylesById.has(style.id) && stylesById.get(style.id) !== style) {\n\t\t\t\tthrow new Error(`Multiple StyleProp instances with the same id: ${style.id}`)\n\t\t\t}\n\t\t\tstylesById.set(style.id, style)\n\t\t}\n\t}\n\n\tconst ShapeRecordType = createShapeRecordType(shapes)\n\tconst InstanceRecordType = createInstanceRecordType(stylesById)\n\n\treturn StoreSchema.create(\n\t\t{\n\t\t\tasset: AssetRecordType,\n\t\t\tcamera: CameraRecordType,\n\t\t\tdocument: DocumentRecordType,\n\t\t\tinstance: InstanceRecordType,\n\t\t\tinstance_page_state: InstancePageStateRecordType,\n\t\t\tpage: PageRecordType,\n\t\t\tshape: ShapeRecordType,\n\t\t\tinstance_presence: InstancePresenceRecordType,\n\t\t\tpointer: PointerRecordType,\n\t\t},\n\t\t{\n\t\t\tsnapshotMigrations: storeMigrations,\n\t\t\tonValidationFailure,\n\t\t\tcreateIntegrityChecker: createIntegrityChecker,\n\t\t}\n\t)\n}\n"],"mappings":";AAAA,SAAqBA,WAAA,QAAmB;AACxC,SAASC,eAAA,QAAuB;AAChC,SAAuBC,sBAAA,EAAwBC,mBAAA,QAA2B;AAC1E,SAASC,eAAA,QAAuB;AAChC,SAASC,gBAAA,QAAwB;AACjC,SAASC,kBAAA,QAA0B;AACnC,SAASC,wBAAA,QAAgC;AACzC,SAASC,cAAA,QAAsB;AAC/B,SAASC,2BAAA,QAAmC;AAC5C,SAASC,iBAAA,QAAyB;AAClC,SAASC,0BAAA,QAAkC;AAE3C,SAASC,qBAAA,EAAuBC,uBAAA,QAA+B;AAC/D,SAASC,eAAA,QAAuB;AAkBzB,SAASC,eAAAC,IAAA,EAAkF;EAAA,IAAjEC,MAAA,GAAAD,IAAA,CAAAC,MAAA;EAChC,IAAMC,UAAA,GAAa,mBAAIC,GAAA,CAAgC;EAAA,IAAAC,SAAA,GAAAC,0BAAA,CACnCpB,eAAA,CAAgBgB,MAAM;IAAAK,KAAA;EAAA;IAA1C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA6C;MAAA,IAAAC,YAAA;MAAA,IAAlCC,KAAA,GAAAL,KAAA,CAAAM,KAAA;MAAA,IAAAC,UAAA,GAAAR,0BAAA,CACUR,uBAAA,EAAAa,YAAA,GAAwBC,KAAA,CAAMG,KAAA,cAAAJ,YAAA,cAAAA,YAAA,GAAS,CAAC,CAAC,EAAEK,IAAA,CAAK;QAAAC,MAAA;MAAA;QAApE,KAAAH,UAAA,CAAAN,CAAA,MAAAS,MAAA,GAAAH,UAAA,CAAAL,CAAA,IAAAC,IAAA,GAAuE;UAAA,IAA5DQ,KAAA,GAAAD,MAAA,CAAAJ,KAAA;UACV,IAAIV,UAAA,CAAWgB,GAAA,CAAID,KAAA,CAAME,EAAE,KAAKjB,UAAA,CAAWkB,GAAA,CAAIH,KAAA,CAAME,EAAE,MAAMF,KAAA,EAAO;YACnE,MAAM,IAAII,KAAA,mDAAAC,MAAA,CAAwDL,KAAA,CAAME,EAAA,CAAI;UAC7E;UACAjB,UAAA,CAAWqB,GAAA,CAAIN,KAAA,CAAME,EAAA,EAAIF,KAAK;QAC/B;MAAA,SAAAO,GAAA;QAAAX,UAAA,CAAAY,CAAA,CAAAD,GAAA;MAAA;QAAAX,UAAA,CAAAa,CAAA;MAAA;IACD;EAAA,SAAAF,GAAA;IAAApB,SAAA,CAAAqB,CAAA,CAAAD,GAAA;EAAA;IAAApB,SAAA,CAAAsB,CAAA;EAAA;EAEA,IAAMC,eAAA,GAAkB/B,qBAAA,CAAsBK,MAAM;EACpD,IAAM2B,kBAAA,GAAqBrC,wBAAA,CAAyBW,UAAU;EAE9D,OAAOlB,WAAA,CAAY6C,MAAA,CAClB;IACCC,KAAA,EAAO1C,eAAA;IACP2C,MAAA,EAAQ1C,gBAAA;IACR2C,QAAA,EAAU1C,kBAAA;IACV2C,QAAA,EAAUL,kBAAA;IACVM,mBAAA,EAAqBzC,2BAAA;IACrB0C,IAAA,EAAM3C,cAAA;IACNmB,KAAA,EAAOgB,eAAA;IACPS,iBAAA,EAAmBzC,0BAAA;IACnB0C,OAAA,EAAS3C;EACV,GACA;IACC4C,kBAAA,EAAoBxC,eAAA;IACpBX,mBAAA,EAAAA,mBAAA;IACAD,sBAAA,EAAAA;EACD,CACD;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}