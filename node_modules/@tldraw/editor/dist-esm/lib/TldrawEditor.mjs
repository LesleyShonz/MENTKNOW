import { jsx, jsxs } from "react/jsx-runtime";
import { Store } from "@tldraw/store";
import { annotateError } from "@tldraw/utils";
import React, {
  memo,
  useCallback,
  useLayoutEffect,
  useMemo,
  useState,
  useSyncExternalStore
} from "react";
import { useDefaultEditorAssetsWithOverrides } from "./assetUrls.mjs";
import { DefaultErrorFallback } from "./components/DefaultErrorFallback.mjs";
import { OptionalErrorBoundary } from "./components/ErrorBoundary.mjs";
import { createTLUser } from "./config/createTLUser.mjs";
import { Editor } from "./editor/Editor.mjs";
import { ContainerProvider, useContainer } from "./hooks/useContainer.mjs";
import { useCursor } from "./hooks/useCursor.mjs";
import { useDarkMode } from "./hooks/useDarkMode.mjs";
import { EditorContext } from "./hooks/useEditor.mjs";
import {
  EditorComponentsProvider,
  useEditorComponents
} from "./hooks/useEditorComponents.mjs";
import { useEvent } from "./hooks/useEvent.mjs";
import { useForceUpdate } from "./hooks/useForceUpdate.mjs";
import { useLocalStore } from "./hooks/useLocalStore.mjs";
import { usePreloadAssets } from "./hooks/usePreloadAssets.mjs";
import { useSafariFocusOutFix } from "./hooks/useSafariFocusOutFix.mjs";
import { useZoomCss } from "./hooks/useZoomCss.mjs";
const EMPTY_SHAPES_ARRAY = [];
const EMPTY_TOOLS_ARRAY = [];
const TldrawEditor = memo(function TldrawEditor2({
  store,
  components,
  ...rest
}) {
  const [container, setContainer] = React.useState(null);
  const user = useMemo(() => createTLUser(), []);
  const ErrorFallback = components?.ErrorFallback === void 0 ? DefaultErrorFallback : components?.ErrorFallback;
  const withDefaults = {
    ...rest,
    shapes: rest.shapes ?? EMPTY_SHAPES_ARRAY,
    tools: rest.tools ?? EMPTY_TOOLS_ARRAY
  };
  return (
    /* @__PURE__ */ jsx("div", { ref: setContainer, draggable: false, className: "tl-container tl-theme__light", tabIndex: 0, children: /* @__PURE__ */ jsx(
      OptionalErrorBoundary,
      {
        fallback: ErrorFallback ? (error) => /* @__PURE__ */ jsx(ErrorFallback, { error }) : null,
        onError: (error) => annotateError(error, { tags: { origin: "react.tldraw-before-app" } }),
        children: container && /* @__PURE__ */ jsx(ContainerProvider, { container, children: /* @__PURE__ */ jsx(EditorComponentsProvider, { overrides: components, children: store ? store instanceof Store ? (
          // Store is ready to go, whether externally synced or not
          /* @__PURE__ */ (jsx(TldrawEditorWithReadyStore, { ...withDefaults, store, user }))
        ) : (
          // Store is a synced store, so handle syncing stages internally
          /* @__PURE__ */ (jsx(TldrawEditorWithLoadingStore, { ...withDefaults, store, user }))
        ) : (
          // We have no store (it's undefined) so create one and possibly sync it
          /* @__PURE__ */ (jsx(TldrawEditorWithOwnStore, { ...withDefaults, store, user }))
        ) }) })
      }
    ) })
  );
});
function TldrawEditorWithOwnStore(props) {
  const { defaultName, initialData, shapes, persistenceKey, sessionId, user } = props;
  const syncedStore = useLocalStore({
    shapes,
    initialData,
    persistenceKey,
    sessionId,
    defaultName
  });
  return /* @__PURE__ */ jsx(TldrawEditorWithLoadingStore, { ...props, store: syncedStore, user });
}
const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
  store,
  user,
  ...rest
}) {
  const container = useContainer();
  useLayoutEffect(() => {
    if (user.userPreferences.value.isDarkMode) {
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    }
  }, [container, user.userPreferences.value.isDarkMode]);
  switch (store.status) {
    case "error": {
      throw store.error;
    }
    case "loading": {
      return /* @__PURE__ */ jsx(LoadingScreen, { children: "Connecting..." });
    }
    case "not-synced": {
      break;
    }
    case "synced-local": {
      break;
    }
    case "synced-remote": {
      break;
    }
  }
  return /* @__PURE__ */ jsx(TldrawEditorWithReadyStore, { ...rest, store: store.store, user });
});
function TldrawEditorWithReadyStore({
  onMount,
  children,
  store,
  tools,
  shapes,
  autoFocus,
  user,
  assetUrls
}) {
  const { ErrorFallback } = useEditorComponents();
  const container = useContainer();
  const [editor, setEditor] = useState(null);
  useLayoutEffect(() => {
    const editor2 = new Editor({
      store,
      shapes,
      tools,
      getContainer: () => container,
      user
    });
    window.app = editor2;
    window.editor = editor2;
    setEditor(editor2);
    return () => {
      editor2.dispose();
    };
  }, [container, shapes, tools, store, user]);
  React.useLayoutEffect(() => {
    if (editor && autoFocus)
      editor.focus();
  }, [editor, autoFocus]);
  const onMountEvent = useEvent((editor2) => {
    const teardown = onMount?.(editor2);
    editor2.emit("mount");
    window.tldrawReady = true;
    return teardown;
  });
  React.useLayoutEffect(() => {
    if (editor)
      return onMountEvent?.(editor);
  }, [editor, onMountEvent]);
  const crashingError = useSyncExternalStore(
    useCallback(
      (onStoreChange) => {
        if (editor) {
          editor.on("crash", onStoreChange);
          return () => editor.off("crash", onStoreChange);
        }
        return () => {
        };
      },
      [editor]
    ),
    () => editor?.crashingError ?? null
  );
  const assets = useDefaultEditorAssetsWithOverrides(assetUrls);
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
  if (preloadingError) {
    return /* @__PURE__ */ jsx(ErrorScreen, { children: "Could not load assets. Please refresh the page." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ jsx(LoadingScreen, { children: "Loading assets..." });
  }
  if (!editor) {
    return null;
  }
  return (
    // the top-level tldraw component also renders an error boundary almost
    // identical to this one. the reason we have two is because this one has
    // access to `App`, which means that here we can enrich errors with data
    // from app for reporting, and also still attempt to render the user's
    // document in the event of an error to reassure them that their work is
    // not lost.
    /* @__PURE__ */ (jsx(OptionalErrorBoundary, {
      fallback: ErrorFallback ? (error) => /* @__PURE__ */ jsx(ErrorFallback, { error, editor }) : null,
      onError: (error) => editor.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
      children: crashingError ? /* @__PURE__ */ jsx(Crash, { crashingError }) : /* @__PURE__ */ jsx(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ jsx(Layout, { children }) })
    }))
  );
}
function Layout({ children }) {
  useZoomCss();
  useCursor();
  useDarkMode();
  useSafariFocusOutFix();
  useForceUpdate();
  return children;
}
function Crash({ crashingError }) {
  throw crashingError;
}
function LoadingScreen({ children }) {
  const { Spinner } = useEditorComponents();
  return /* @__PURE__ */ jsxs("div", { className: "tl-loading", children: [
    Spinner ? /* @__PURE__ */ jsx(Spinner, {}) : null,
    children
  ] });
}
function ErrorScreen({ children }) {
  return /* @__PURE__ */ jsx("div", { className: "tl-loading", children });
}
export {
  ErrorScreen,
  LoadingScreen,
  TldrawEditor
};
//# sourceMappingURL=TldrawEditor.mjs.map
