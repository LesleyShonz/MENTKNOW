import { intersectLineSegmentPolyline, pointInPolygon } from "@tldraw/primitives";
import { ScribbleManager } from "../../../managers/ScribbleManager.mjs";
import { FrameShapeUtil } from "../../../shapes/frame/FrameShapeUtil.mjs";
import { GroupShapeUtil } from "../../../shapes/group/GroupShapeUtil.mjs";
import { StateNode } from "../../StateNode.mjs";
class ScribbleBrushing extends StateNode {
  static id = "scribble_brushing";
  hits = /* @__PURE__ */ new Set();
  size = 0;
  scribble = {};
  initialSelectedIds = /* @__PURE__ */ new Set();
  newlySelectedIds = /* @__PURE__ */ new Set();
  onEnter = () => {
    this.initialSelectedIds = new Set(
      this.editor.inputs.shiftKey ? this.editor.selectedIds : []
    );
    this.newlySelectedIds = /* @__PURE__ */ new Set();
    this.size = 0;
    this.hits.clear();
    this.startScribble();
    this.updateBrushSelection();
    requestAnimationFrame(() => {
      this.editor.setBrush(null);
    });
  };
  onExit = () => {
    this.editor.setErasingIds([]);
    this.scribble.stop();
  };
  onPointerMove = () => {
    this.updateBrushSelection();
  };
  onPointerUp = () => {
    this.complete();
  };
  onKeyDown = () => {
    this.updateBrushSelection();
  };
  onKeyUp = () => {
    if (!this.editor.inputs.altKey) {
      this.parent.transition("brushing", {});
    } else {
      this.updateBrushSelection();
    }
  };
  startScribble = () => {
    if (this.scribble.tick) {
      this.editor.off("tick", this.scribble?.tick);
    }
    this.scribble = new ScribbleManager({
      onUpdate: this.onScribbleUpdate,
      onComplete: this.onScribbleComplete,
      color: "selection-stroke",
      opacity: 0.32,
      size: 12
    });
    this.editor.on("tick", this.scribble.tick);
  };
  pushPointToScribble = () => {
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.scribble.addPoint(x, y);
  };
  onScribbleUpdate = (scribble) => {
    this.editor.setScribble(scribble);
  };
  onScribbleComplete = () => {
    this.editor.off("tick", this.scribble.tick);
    this.editor.setScribble(null);
  };
  updateBrushSelection() {
    const {
      shapesArray,
      inputs: { originPagePoint, previousPagePoint, currentPagePoint }
    } = this.editor;
    this.pushPointToScribble();
    const shapes = shapesArray;
    let shape, util;
    for (let i = 0, n = shapes.length; i < n; i++) {
      shape = shapes[i];
      util = this.editor.getShapeUtil(shape);
      if (this.editor.isShapeOfType(shape, GroupShapeUtil) || this.newlySelectedIds.has(shape.id) || this.editor.isShapeOfType(shape, FrameShapeUtil) && util.hitTestPoint(shape, this.editor.getPointInShapeSpace(shape, originPagePoint)) || this.editor.isShapeOrAncestorLocked(shape)) {
        continue;
      }
      if (util.hitTestLineSegment(
        shape,
        this.editor.getPointInShapeSpace(shape, previousPagePoint),
        this.editor.getPointInShapeSpace(shape, currentPagePoint)
      )) {
        const outermostShape = this.editor.getOutermostSelectableShape(shape);
        const pageMask = this.editor.getPageMaskById(outermostShape.id);
        if (pageMask) {
          const intersection = intersectLineSegmentPolyline(
            previousPagePoint,
            currentPagePoint,
            pageMask
          );
          if (intersection !== null) {
            const isInMask = pointInPolygon(currentPagePoint, pageMask);
            if (!isInMask)
              continue;
          }
        }
        this.newlySelectedIds.add(outermostShape.id);
      }
    }
    this.editor.setSelectedIds(
      [.../* @__PURE__ */ new Set([...this.newlySelectedIds, ...this.initialSelectedIds])],
      true
    );
  }
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  complete() {
    this.parent.transition("idle", {});
  }
  cancel() {
    this.editor.setSelectedIds([...this.initialSelectedIds], true);
    this.parent.transition("idle", {});
  }
}
export {
  ScribbleBrushing
};
//# sourceMappingURL=ScribbleBrushing.mjs.map
