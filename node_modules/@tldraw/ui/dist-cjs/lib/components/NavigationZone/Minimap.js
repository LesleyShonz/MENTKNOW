"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Minimap_exports = {};
__export(Minimap_exports, {
  Minimap: () => Minimap
});
module.exports = __toCommonJS(Minimap_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_editor = require("@tldraw/editor");
var import_primitives = require("@tldraw/primitives");
var React = __toESM(require("react"));
var import_signia_react = require("signia-react");
var import_MinimapManager = require("./MinimapManager");
const Minimap = (0, import_signia_react.track)(function Minimap2({
  shapeFill,
  selectFill,
  viewportFill
}) {
  const editor = (0, import_editor.useEditor)();
  const rCanvas = React.useRef(null);
  const container = (0, import_editor.useContainer)();
  const rPointing = React.useRef(false);
  const minimap = React.useMemo(() => new import_MinimapManager.MinimapManager(editor, editor.devicePixelRatio), [editor]);
  const isDarkMode = editor.isDarkMode;
  React.useEffect(() => {
    const raf = requestAnimationFrame(() => {
      const style = getComputedStyle(container);
      minimap.colors = {
        shapeFill: style.getPropertyValue(shapeFill).trim(),
        selectFill: style.getPropertyValue(selectFill).trim(),
        viewportFill: style.getPropertyValue(viewportFill).trim()
      };
      minimap.render();
    });
    return () => {
      cancelAnimationFrame(raf);
    };
  }, [container, selectFill, shapeFill, viewportFill, minimap, isDarkMode]);
  const onDoubleClick = React.useCallback(
    (e) => {
      if (!editor.currentPageShapeIds.size)
        return;
      const { x, y } = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
      const clampedPoint = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
      minimap.originPagePoint.setTo(clampedPoint);
      minimap.originPageCenter.setTo(editor.viewportPageBounds.center);
      editor.centerOnPoint(x, y, { duration: import_editor.ANIMATION_MEDIUM_MS });
    },
    [editor, minimap]
  );
  const onPointerDown = React.useCallback(
    (e) => {
      e.currentTarget.setPointerCapture(e.pointerId);
      if (!editor.currentPageShapeIds.size)
        return;
      rPointing.current = true;
      minimap.isInViewport = false;
      const { x, y } = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
      const clampedPoint = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
      const _vpPageBounds = editor.viewportPageBounds;
      minimap.originPagePoint.setTo(clampedPoint);
      minimap.originPageCenter.setTo(_vpPageBounds.center);
      minimap.isInViewport = _vpPageBounds.containsPoint(clampedPoint);
      if (!minimap.isInViewport) {
        editor.centerOnPoint(x, y, { duration: import_editor.ANIMATION_MEDIUM_MS });
      }
    },
    [editor, minimap]
  );
  const onPointerMove = React.useCallback(
    (e) => {
      if (rPointing.current) {
        const { x, y } = minimap.minimapScreenPointToPagePoint(
          e.clientX,
          e.clientY,
          e.shiftKey,
          true
        );
        if (minimap.isInViewport) {
          const delta = import_primitives.Vec2d.Sub({ x, y }, minimap.originPagePoint);
          const center = import_primitives.Vec2d.Add(minimap.originPageCenter, delta);
          editor.centerOnPoint(center.x, center.y);
          return;
        }
        editor.centerOnPoint(x, y);
      }
      const pagePoint = minimap.getPagePoint(e.clientX, e.clientY);
      const screenPoint = editor.pageToScreen(pagePoint.x, pagePoint.y);
      const info = {
        type: "pointer",
        target: "canvas",
        name: "pointer_move",
        ...getPointerInfo(e),
        point: screenPoint,
        isPen: editor.isPenMode
      };
      editor.dispatch(info);
    },
    [editor, minimap]
  );
  const onPointerUp = React.useCallback((_e) => {
    rPointing.current = false;
  }, []);
  const onWheel = React.useCallback(
    (e) => {
      const offset = (0, import_editor.normalizeWheel)(e);
      editor.dispatch({
        type: "wheel",
        name: "wheel",
        delta: offset,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      });
    },
    [editor]
  );
  (0, import_editor.useQuickReactor)(
    "update dpr",
    () => {
      const { devicePixelRatio } = editor;
      minimap.setDpr(devicePixelRatio);
      const canvas = rCanvas.current;
      const rect = canvas.getBoundingClientRect();
      const width = rect.width * devicePixelRatio;
      const height = rect.height * devicePixelRatio;
      canvas.width = width;
      canvas.height = height;
      minimap.canvasScreenBounds.set(rect.x, rect.y, width, height);
      minimap.cvs = rCanvas.current;
    },
    [editor, minimap]
  );
  const presences = React.useMemo(() => {
    return editor.store.query.records("instance_presence");
  }, [editor]);
  (0, import_editor.useQuickReactor)(
    "minimap render when pagebounds or collaborators changes",
    () => {
      const { devicePixelRatio, viewportPageBounds, allShapesCommonBounds } = editor;
      devicePixelRatio;
      minimap.contentPageBounds = allShapesCommonBounds ? import_primitives.Box2d.Expand(allShapesCommonBounds, viewportPageBounds) : viewportPageBounds;
      minimap.updateContentScreenBounds();
      const allShapeBounds = [];
      editor.currentPageShapeIds.forEach((id) => {
        let pageBounds = editor.getPageBoundsById(id);
        const pageMask = editor.getPageMaskById(id);
        if (pageMask) {
          const intersection = (0, import_primitives.intersectPolygonPolygon)(pageMask, pageBounds.corners);
          if (!intersection) {
            return;
          }
          pageBounds = import_primitives.Box2d.FromPoints(intersection);
        }
        if (pageBounds) {
          pageBounds.id = id;
          allShapeBounds.push(pageBounds);
        }
      });
      minimap.pageBounds = allShapeBounds;
      minimap.collaborators = presences.value;
      minimap.render();
    },
    [editor, minimap]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tlui-minimap", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "canvas",
    {
      ref: rCanvas,
      className: "tlui-minimap__canvas",
      onDoubleClick,
      onPointerMove,
      onPointerDown,
      onPointerUp,
      onWheel
    }
  ) });
});
function getPointerInfo(e) {
  ;
  e.isKilled = true;
  return {
    point: {
      x: e.clientX,
      y: e.clientY,
      z: e.pressure
    },
    shiftKey: e.shiftKey,
    altKey: e.altKey,
    ctrlKey: e.metaKey || e.ctrlKey,
    pointerId: e.pointerId,
    button: e.button,
    isPen: e.pointerType === "pen"
  };
}
//# sourceMappingURL=Minimap.js.map
