{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { isValidUrl, useEditor } from \"@tldraw/editor\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { track } from \"signia-react\";\nimport { useTranslation } from \"../hooks/useTranslation/useTranslation.mjs\";\nimport { Button } from \"./primitives/Button.mjs\";\nimport * as Dialog from \"./primitives/Dialog.mjs\";\nimport { Input } from \"./primitives/Input.mjs\";\nfunction validateUrl(url) {\n  if (isValidUrl(url)) {\n    return {\n      isValid: true,\n      hasProtocol: true\n    };\n  }\n  if (isValidUrl(\"https://\" + url)) {\n    return {\n      isValid: true,\n      hasProtocol: false\n    };\n  }\n  return {\n    isValid: false,\n    hasProtocol: false\n  };\n}\nvar EditLinkDialog = track(function EditLinkDialog2(_ref) {\n  var onClose = _ref.onClose;\n  var editor = useEditor();\n  var selectedShape = editor.onlySelectedShape;\n  if (!(selectedShape && \"url\" in selectedShape.props && typeof selectedShape.props.url === \"string\")) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(EditLinkDialogInner, {\n    onClose: onClose,\n    selectedShape: selectedShape\n  });\n});\nvar EditLinkDialogInner = track(function EditLinkDialogInner2(_ref2) {\n  var onClose = _ref2.onClose,\n    selectedShape = _ref2.selectedShape;\n  var editor = useEditor();\n  var msg = useTranslation();\n  var rInput = useRef(null);\n  useEffect(function () {\n    requestAnimationFrame(function () {\n      var _rInput$current;\n      return (_rInput$current = rInput.current) === null || _rInput$current === void 0 ? void 0 : _rInput$current.focus();\n    });\n  }, []);\n  var rInitialValue = useRef(selectedShape.props.url);\n  var _useState = useState(function () {\n      var urlValidResult = validateUrl(selectedShape.props.url);\n      var initialValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? selectedShape.props.url : \"https://\" + selectedShape.props.url : \"https://\";\n      return {\n        actual: initialValue,\n        safe: initialValue,\n        valid: true\n      };\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    urlInputState = _useState2[0],\n    setUrlInputState = _useState2[1];\n  var handleChange = useCallback(function (rawValue) {\n    var fixedRawValue = rawValue.replace(/https?:\\/\\/(https?:\\/\\/)/, function (_match, arg1) {\n      return arg1;\n    });\n    var urlValidResult = validateUrl(fixedRawValue);\n    var safeValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? fixedRawValue : \"https://\" + fixedRawValue : \"https://\";\n    setUrlInputState({\n      actual: fixedRawValue,\n      safe: safeValue,\n      valid: urlValidResult.isValid\n    });\n  }, []);\n  var handleClear = useCallback(function () {\n    var onlySelectedShape = editor.onlySelectedShape;\n    if (!onlySelectedShape) return;\n    editor.updateShapes([{\n      id: onlySelectedShape.id,\n      type: onlySelectedShape.type,\n      props: {\n        url: \"\"\n      }\n    }]);\n    onClose();\n  }, [editor, onClose]);\n  var handleComplete = useCallback(function () {\n    var onlySelectedShape = editor.onlySelectedShape;\n    if (!onlySelectedShape) return;\n    if (onlySelectedShape && \"url\" in onlySelectedShape.props) {\n      if (onlySelectedShape.props.url !== urlInputState.safe) {\n        editor.updateShapes([{\n          id: onlySelectedShape.id,\n          type: onlySelectedShape.type,\n          props: {\n            url: urlInputState.safe\n          }\n        }]);\n      }\n    }\n    onClose();\n  }, [editor, onClose, urlInputState]);\n  var handleCancel = useCallback(function () {\n    onClose();\n  }, [onClose]);\n  if (!selectedShape) {\n    onClose();\n    return null;\n  }\n  var isRemoving = rInitialValue.current && !urlInputState.valid;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsxs(Dialog.Header, {\n      children: [/* @__PURE__ */jsx(Dialog.Title, {\n        children: msg(\"edit-link-dialog.title\")\n      }), /* @__PURE__ */jsx(Dialog.CloseButton, {})]\n    }), /* @__PURE__ */jsx(Dialog.Body, {\n      children: /* @__PURE__ */jsxs(\"div\", {\n        className: \"tlui-edit-link-dialog\",\n        children: [/* @__PURE__ */jsx(Input, {\n          ref: rInput,\n          className: \"tlui-edit-link-dialog__input\",\n          label: \"edit-link-dialog.url\",\n          autofocus: true,\n          value: urlInputState.actual,\n          onValueChange: handleChange,\n          onComplete: handleComplete,\n          onCancel: handleCancel\n        }), /* @__PURE__ */jsx(\"div\", {\n          children: urlInputState.valid ? msg(\"edit-link-dialog.detail\") : msg(\"edit-link-dialog.invalid-url\")\n        })]\n      })\n    }), /* @__PURE__ */jsxs(Dialog.Footer, {\n      className: \"tlui-dialog__footer__actions\",\n      children: [/* @__PURE__ */jsx(Button, {\n        onClick: handleCancel,\n        onTouchEnd: handleCancel,\n        children: msg(\"edit-link-dialog.cancel\")\n      }), isRemoving ? /* @__PURE__ */jsx(Button, {\n        type: \"danger\",\n        onTouchEnd: handleClear,\n        onClick: handleClear,\n        children: msg(\"edit-link-dialog.clear\")\n      }) : /* @__PURE__ */jsx(Button, {\n        type: \"primary\",\n        disabled: !urlInputState.valid,\n        onTouchEnd: handleComplete,\n        onClick: handleComplete,\n        children: msg(\"edit-link-dialog.save\")\n      })]\n    })]\n  });\n});\nexport { EditLinkDialog, EditLinkDialogInner };","map":{"version":3,"names":["Fragment","jsx","jsxs","isValidUrl","useEditor","useCallback","useEffect","useRef","useState","track","useTranslation","Button","Dialog","Input","validateUrl","url","isValid","hasProtocol","EditLinkDialog","EditLinkDialog2","_ref","onClose","editor","selectedShape","onlySelectedShape","props","EditLinkDialogInner","EditLinkDialogInner2","_ref2","msg","rInput","requestAnimationFrame","_rInput$current","current","focus","rInitialValue","_useState","urlValidResult","initialValue","actual","safe","valid","_useState2","_slicedToArray","urlInputState","setUrlInputState","handleChange","rawValue","fixedRawValue","replace","_match","arg1","safeValue","handleClear","updateShapes","id","type","handleComplete","handleCancel","isRemoving","children","Header","Title","CloseButton","Body","className","ref","label","autofocus","value","onValueChange","onComplete","onCancel","Footer","onClick","onTouchEnd","disabled"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/EditLinkDialog.tsx"],"sourcesContent":["import { TLBaseShape, isValidUrl, useEditor } from '@tldraw/editor'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { track } from 'signia-react'\nimport { TLUiDialogProps } from '../hooks/useDialogsProvider'\nimport { useTranslation } from '../hooks/useTranslation/useTranslation'\nimport { Button } from './primitives/Button'\nimport * as Dialog from './primitives/Dialog'\nimport { Input } from './primitives/Input'\n\n// A url can either be invalid, or valid with a protocol, or valid without a protocol.\n// For example, \"aol.com\" would be valid with a protocol ()\nfunction validateUrl(url: string) {\n\tif (isValidUrl(url)) {\n\t\treturn { isValid: true, hasProtocol: true }\n\t}\n\tif (isValidUrl('https://' + url)) {\n\t\treturn { isValid: true, hasProtocol: false }\n\t}\n\treturn { isValid: false, hasProtocol: false }\n}\n\ntype ShapeWithUrl = TLBaseShape<string, { url: string }>\n\nexport const EditLinkDialog = track(function EditLinkDialog({ onClose }: TLUiDialogProps) {\n\tconst editor = useEditor()\n\n\tconst selectedShape = editor.onlySelectedShape\n\n\tif (\n\t\t!(selectedShape && 'url' in selectedShape.props && typeof selectedShape.props.url === 'string')\n\t) {\n\t\treturn null\n\t}\n\n\treturn <EditLinkDialogInner onClose={onClose} selectedShape={selectedShape as ShapeWithUrl} />\n})\n\nexport const EditLinkDialogInner = track(function EditLinkDialogInner({\n\tonClose,\n\tselectedShape,\n}: TLUiDialogProps & { selectedShape: ShapeWithUrl }) {\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\n\tconst rInput = useRef<HTMLInputElement>(null)\n\n\tuseEffect(() => {\n\t\trequestAnimationFrame(() => rInput.current?.focus())\n\t}, [])\n\n\tconst rInitialValue = useRef(selectedShape.props.url)\n\n\tconst [urlInputState, setUrlInputState] = useState(() => {\n\t\tconst urlValidResult = validateUrl(selectedShape.props.url)\n\n\t\tconst initialValue =\n\t\t\turlValidResult.isValid === true\n\t\t\t\t? urlValidResult.hasProtocol\n\t\t\t\t\t? selectedShape.props.url\n\t\t\t\t\t: 'https://' + selectedShape.props.url\n\t\t\t\t: 'https://'\n\n\t\treturn {\n\t\t\tactual: initialValue,\n\t\t\tsafe: initialValue,\n\t\t\tvalid: true,\n\t\t}\n\t})\n\n\tconst handleChange = useCallback((rawValue: string) => {\n\t\t// Just auto-correct double https:// from a bad paste.\n\t\tconst fixedRawValue = rawValue.replace(/https?:\\/\\/(https?:\\/\\/)/, (_match, arg1) => {\n\t\t\treturn arg1\n\t\t})\n\n\t\tconst urlValidResult = validateUrl(fixedRawValue)\n\n\t\tconst safeValue =\n\t\t\turlValidResult.isValid === true\n\t\t\t\t? urlValidResult.hasProtocol\n\t\t\t\t\t? fixedRawValue\n\t\t\t\t\t: 'https://' + fixedRawValue\n\t\t\t\t: 'https://'\n\n\t\tsetUrlInputState({\n\t\t\tactual: fixedRawValue,\n\t\t\tsafe: safeValue,\n\t\t\tvalid: urlValidResult.isValid,\n\t\t})\n\t}, [])\n\n\tconst handleClear = useCallback(() => {\n\t\tconst { onlySelectedShape } = editor\n\t\tif (!onlySelectedShape) return\n\t\teditor.updateShapes([\n\t\t\t{ id: onlySelectedShape.id, type: onlySelectedShape.type, props: { url: '' } },\n\t\t])\n\t\tonClose()\n\t}, [editor, onClose])\n\n\tconst handleComplete = useCallback(() => {\n\t\tconst { onlySelectedShape } = editor\n\n\t\tif (!onlySelectedShape) return\n\n\t\t// ? URL is a magic value\n\t\tif (onlySelectedShape && 'url' in onlySelectedShape.props) {\n\t\t\t// Here would be a good place to validate the next shape—would setting the empty\n\t\t\tif (onlySelectedShape.props.url !== urlInputState.safe) {\n\t\t\t\teditor.updateShapes([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: onlySelectedShape.id,\n\t\t\t\t\t\ttype: onlySelectedShape.type,\n\t\t\t\t\t\tprops: { url: urlInputState.safe },\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\t\tonClose()\n\t}, [editor, onClose, urlInputState])\n\n\tconst handleCancel = useCallback(() => {\n\t\tonClose()\n\t}, [onClose])\n\n\tif (!selectedShape) {\n\t\t// dismiss modal\n\t\tonClose()\n\t\treturn null\n\t}\n\n\t// Are we going from a valid state to an invalid state?\n\tconst isRemoving = rInitialValue.current && !urlInputState.valid\n\n\treturn (\n\t\t<>\n\t\t\t<Dialog.Header>\n\t\t\t\t<Dialog.Title>{msg('edit-link-dialog.title')}</Dialog.Title>\n\t\t\t\t<Dialog.CloseButton />\n\t\t\t</Dialog.Header>\n\t\t\t<Dialog.Body>\n\t\t\t\t<div className=\"tlui-edit-link-dialog\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tref={rInput}\n\t\t\t\t\t\tclassName=\"tlui-edit-link-dialog__input\"\n\t\t\t\t\t\tlabel=\"edit-link-dialog.url\"\n\t\t\t\t\t\tautofocus\n\t\t\t\t\t\tvalue={urlInputState.actual}\n\t\t\t\t\t\tonValueChange={handleChange}\n\t\t\t\t\t\tonComplete={handleComplete}\n\t\t\t\t\t\tonCancel={handleCancel}\n\t\t\t\t\t/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{urlInputState.valid\n\t\t\t\t\t\t\t? msg('edit-link-dialog.detail')\n\t\t\t\t\t\t\t: msg('edit-link-dialog.invalid-url')}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Dialog.Body>\n\t\t\t<Dialog.Footer className=\"tlui-dialog__footer__actions\">\n\t\t\t\t<Button onClick={handleCancel} onTouchEnd={handleCancel}>\n\t\t\t\t\t{msg('edit-link-dialog.cancel')}\n\t\t\t\t</Button>\n\t\t\t\t{isRemoving ? (\n\t\t\t\t\t<Button type={'danger'} onTouchEnd={handleClear} onClick={handleClear}>\n\t\t\t\t\t\t{msg('edit-link-dialog.clear')}\n\t\t\t\t\t</Button>\n\t\t\t\t) : (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\tdisabled={!urlInputState.valid}\n\t\t\t\t\t\tonTouchEnd={handleComplete}\n\t\t\t\t\t\tonClick={handleComplete}\n\t\t\t\t\t>\n\t\t\t\t\t\t{msg('edit-link-dialog.save')}\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</Dialog.Footer>\n\t\t</>\n\t)\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}