import * as Y from 'yjs';
import { PartyKitStorage } from 'partykit/server';

type StorageKey = DocumentStateVectorKey | DocumentUpdateKey;
/**
 * A key + value pair.
 */
type Datum = {
    key: StorageKey;
    value: Uint8Array;
};
/**
 * This helper method returns `null` if the key is not found.
 */
declare function levelGet(db: PartyKitStorage, key: StorageKey): Promise<Uint8Array | null>;
/**
 * Set a key + value in storage
 */
declare function levelPut(db: PartyKitStorage, key: StorageKey, val: Uint8Array): Promise<void>;
/**
 * A "bulkier" implementation of getting keys and/or values.
 */
declare function getLevelBulkData(db: PartyKitStorage, opts: {
    gte: StorageKey;
    lt: StorageKey;
    keys: boolean;
    values: boolean;
    reverse?: boolean;
    limit?: number;
}): Promise<Datum[]>;
declare function clearRange(db: PartyKitStorage, gte: StorageKey, // Greater than or equal
lt: StorageKey): Promise<void>;
/**
 * Create a unique key for a update message.
 * We encode the result using `keyEncoding` which expects an array.
 */
type DocumentUpdateKey = ["v1", string, "update", number];
type DocumentStateVectorKey = ["v1_sv", string];
declare class YPartyKitStorage {
    db: PartyKitStorage;
    tr: Promise<unknown>;
    _transact<T>(f: (arg0: PartyKitStorage) => Promise<T>): Promise<T>;
    constructor(storage: PartyKitStorage);
    flushDocument(docName: string): Promise<void>;
    getYDoc(docName: string): Promise<Y.Doc>;
    getStateVector(docName: string): Promise<Uint8Array>;
    storeUpdate(docName: string, update: Uint8Array): Promise<number>;
}

export { YPartyKitStorage, clearRange, getLevelBulkData, levelGet, levelPut };
