{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/shapes/text/toolStates/Pointing.ts"],
  "sourcesContent": ["import { createShapeId, TLTextShape } from '@tldraw/tlschema'\nimport { StateNode } from '../../../tools/StateNode'\nimport { TLEventHandlers } from '../../../types/event-types'\n\nexport class Pointing extends StateNode {\n\tstatic override id = 'pointing'\n\n\tshape?: TLTextShape\n\n\tonExit = () => {\n\t\tthis.editor.setHintingIds([])\n\t}\n\n\tonPointerMove: TLEventHandlers['onPointerMove'] = (info) => {\n\t\tif (this.editor.inputs.isDragging) {\n\t\t\tconst {\n\t\t\t\tinputs: { originPagePoint },\n\t\t\t} = this.editor\n\n\t\t\tconst id = createShapeId()\n\n\t\t\tthis.editor.mark('creating')\n\n\t\t\tthis.editor.createShapes<TLTextShape>([\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tx: originPagePoint.x,\n\t\t\t\t\ty: originPagePoint.y,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tautoSize: false,\n\t\t\t\t\t\tw: 20,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\n\t\t\tthis.editor.select(id)\n\n\t\t\tthis.shape = this.editor.getShapeById(id)\n\t\t\tif (!this.shape) return\n\n\t\t\tthis.editor.setSelectedTool('select.resizing', {\n\t\t\t\t...info,\n\t\t\t\ttarget: 'selection',\n\t\t\t\thandle: 'right',\n\t\t\t\tisCreating: true,\n\t\t\t\tcreationCursorOffset: { x: 1, y: 1 },\n\t\t\t\teditAfterComplete: true,\n\t\t\t\tonInteractionEnd: 'text',\n\t\t\t})\n\t\t}\n\t}\n\n\tonPointerUp = () => {\n\t\tthis.complete()\n\t}\n\n\tonComplete = () => {\n\t\tthis.cancel()\n\t}\n\tonCancel = () => {\n\t\tthis.cancel()\n\t}\n\n\tonInterrupt = () => {\n\t\tthis.cancel()\n\t}\n\n\tcomplete() {\n\t\tthis.editor.mark('creating text shape')\n\t\tconst id = createShapeId()\n\t\tconst { x, y } = this.editor.inputs.currentPagePoint\n\t\tthis.editor.createShapes(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\tautoSize: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue\n\t\t)\n\n\t\tthis.editor.setEditingId(id)\n\t\tthis.editor.setSelectedTool('select')\n\t\tthis.editor.root.current.value?.transition('editing_shape', {})\n\t}\n\n\tcancel() {\n\t\tthis.parent.transition('idle', {})\n\t\tthis.editor.bailToMark('creating')\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA2C;AAC3C,uBAA0B;AAGnB,MAAM,iBAAiB,2BAAU;AAAA,EACvC,OAAgB,KAAK;AAAA,EAErB;AAAA,EAEA,SAAS,MAAM;AACd,SAAK,OAAO,cAAc,CAAC,CAAC;AAAA,EAC7B;AAAA,EAEA,gBAAkD,CAAC,SAAS;AAC3D,QAAI,KAAK,OAAO,OAAO,YAAY;AAClC,YAAM;AAAA,QACL,QAAQ,EAAE,gBAAgB;AAAA,MAC3B,IAAI,KAAK;AAET,YAAM,SAAK,+BAAc;AAEzB,WAAK,OAAO,KAAK,UAAU;AAE3B,WAAK,OAAO,aAA0B;AAAA,QACrC;AAAA,UACC;AAAA,UACA,MAAM;AAAA,UACN,GAAG,gBAAgB;AAAA,UACnB,GAAG,gBAAgB;AAAA,UACnB,OAAO;AAAA,YACN,MAAM;AAAA,YACN,UAAU;AAAA,YACV,GAAG;AAAA,UACJ;AAAA,QACD;AAAA,MACD,CAAC;AAED,WAAK,OAAO,OAAO,EAAE;AAErB,WAAK,QAAQ,KAAK,OAAO,aAAa,EAAE;AACxC,UAAI,CAAC,KAAK;AAAO;AAEjB,WAAK,OAAO,gBAAgB,mBAAmB;AAAA,QAC9C,GAAG;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,sBAAsB,EAAE,GAAG,GAAG,GAAG,EAAE;AAAA,QACnC,mBAAmB;AAAA,QACnB,kBAAkB;AAAA,MACnB,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,cAAc,MAAM;AACnB,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,aAAa,MAAM;AAClB,SAAK,OAAO;AAAA,EACb;AAAA,EACA,WAAW,MAAM;AAChB,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,cAAc,MAAM;AACnB,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,WAAW;AACV,SAAK,OAAO,KAAK,qBAAqB;AACtC,UAAM,SAAK,+BAAc;AACzB,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK,OAAO,OAAO;AACpC,SAAK,OAAO;AAAA,MACX;AAAA,QACC;AAAA,UACC;AAAA,UACA,MAAM;AAAA,UACN;AAAA,UACA;AAAA,UACA,OAAO;AAAA,YACN,MAAM;AAAA,YACN,UAAU;AAAA,UACX;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAEA,SAAK,OAAO,aAAa,EAAE;AAC3B,SAAK,OAAO,gBAAgB,QAAQ;AACpC,SAAK,OAAO,KAAK,QAAQ,OAAO,WAAW,iBAAiB,CAAC,CAAC;AAAA,EAC/D;AAAA,EAEA,SAAS;AACR,SAAK,OAAO,WAAW,QAAQ,CAAC,CAAC;AACjC,SAAK,OAAO,WAAW,UAAU;AAAA,EAClC;AACD;",
  "names": []
}
