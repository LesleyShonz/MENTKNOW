{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { DefaultColorStyle, useEditor } from \"@tldraw/editor\";\nimport { clamp } from \"@tldraw/primitives\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { useRef } from \"react\";\nimport { useTranslation } from \"../../hooks/useTranslation/useTranslation.mjs\";\nimport { Button } from \"./Button.mjs\";\nfunction _ButtonPicker(props) {\n  var uiType = props.uiType,\n    items = props.items,\n    title = props.title,\n    style = props.style,\n    value = props.value,\n    _props$columns = props.columns,\n    columns = _props$columns === void 0 ? clamp(items.length, 2, 4) : _props$columns,\n    onValueChange = props.onValueChange;\n  var editor = useEditor();\n  var msg = useTranslation();\n  var rPointing = useRef(false);\n  var _React$useMemo = React.useMemo(function () {\n      var handlePointerUp = function handlePointerUp() {\n        rPointing.current = false;\n        window.removeEventListener(\"pointerup\", handlePointerUp);\n      };\n      var handleButtonClick2 = function handleButtonClick2(e) {\n        var id = e.currentTarget.dataset.id;\n        if (value.type === \"shared\" && value.value === id) return;\n        editor.mark(\"point picker item\");\n        onValueChange(style, id, false);\n      };\n      var handleButtonPointerDown2 = function handleButtonPointerDown2(e) {\n        var id = e.currentTarget.dataset.id;\n        editor.mark(\"point picker item\");\n        onValueChange(style, id, true);\n        rPointing.current = true;\n        window.addEventListener(\"pointerup\", handlePointerUp);\n      };\n      var handleButtonPointerEnter2 = function handleButtonPointerEnter2(e) {\n        if (!rPointing.current) return;\n        var id = e.currentTarget.dataset.id;\n        onValueChange(style, id, true);\n      };\n      var handleButtonPointerUp2 = function handleButtonPointerUp2(e) {\n        var id = e.currentTarget.dataset.id;\n        onValueChange(style, id, false);\n      };\n      return {\n        handleButtonClick: handleButtonClick2,\n        handleButtonPointerDown: handleButtonPointerDown2,\n        handleButtonPointerEnter: handleButtonPointerEnter2,\n        handleButtonPointerUp: handleButtonPointerUp2\n      };\n    }, [value, editor, onValueChange, style]),\n    handleButtonClick = _React$useMemo.handleButtonClick,\n    handleButtonPointerDown = _React$useMemo.handleButtonPointerDown,\n    handleButtonPointerEnter = _React$useMemo.handleButtonPointerEnter,\n    handleButtonPointerUp = _React$useMemo.handleButtonPointerUp;\n  return /* @__PURE__ */jsx(\"div\", {\n    className: classNames(\"tlui-button-grid\", {\n      \"tlui-button-grid__two\": columns === 2,\n      \"tlui-button-grid__three\": columns === 3,\n      \"tlui-button-grid__four\": columns === 4\n    }),\n    children: items.map(function (item) {\n      return /* @__PURE__ */jsx(Button, {\n        \"data-id\": item.value,\n        \"data-testid\": \"style.\".concat(uiType, \".\").concat(item.value),\n        \"aria-label\": item.value,\n        \"data-state\": value.type === \"shared\" && value.value === item.value ? \"hinted\" : void 0,\n        title: title + \" \\u2014 \" + msg(\"\".concat(uiType, \"-style.\").concat(item.value)),\n        className: classNames(\"tlui-button-grid__button\"),\n        style: style === DefaultColorStyle ? {\n          color: \"var(--palette-\".concat(item.value, \")\")\n        } : void 0,\n        onPointerEnter: handleButtonPointerEnter,\n        onPointerDown: handleButtonPointerDown,\n        onPointerUp: handleButtonPointerUp,\n        onClick: handleButtonClick,\n        icon: item.icon\n      }, item.value);\n    })\n  });\n}\nvar ButtonPicker = React.memo(_ButtonPicker);\nexport { ButtonPicker };","map":{"version":3,"names":["jsx","DefaultColorStyle","useEditor","clamp","classNames","React","useRef","useTranslation","Button","_ButtonPicker","props","uiType","items","title","style","value","_props$columns","columns","length","onValueChange","editor","msg","rPointing","_React$useMemo","useMemo","handlePointerUp","current","window","removeEventListener","handleButtonClick2","e","id","currentTarget","dataset","type","mark","handleButtonPointerDown2","addEventListener","handleButtonPointerEnter2","handleButtonPointerUp2","handleButtonClick","handleButtonPointerDown","handleButtonPointerEnter","handleButtonPointerUp","className","children","map","item","concat","color","onPointerEnter","onPointerDown","onPointerUp","onClick","icon","ButtonPicker","memo"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/primitives/ButtonPicker.tsx"],"sourcesContent":["import { DefaultColorStyle, SharedStyle, StyleProp, useEditor } from '@tldraw/editor'\nimport { clamp } from '@tldraw/primitives'\nimport classNames from 'classnames'\nimport * as React from 'react'\nimport { useRef } from 'react'\nimport { TLUiTranslationKey } from '../../hooks/useTranslation/TLUiTranslationKey'\nimport { useTranslation } from '../../hooks/useTranslation/useTranslation'\nimport { TLUiIconType } from '../../icon-types'\nimport { StyleValuesForUi } from '../StylePanel/styles'\nimport { Button } from './Button'\n\n/** @internal */\nexport interface ButtonPickerProps<T extends string> {\n\ttitle: string\n\tuiType: string\n\tstyle: StyleProp<T>\n\tvalue: SharedStyle<T>\n\titems: StyleValuesForUi<T>\n\tcolumns?: 2 | 3 | 4\n\tonValueChange: (style: StyleProp<T>, value: T, squashing: boolean) => void\n}\n\nfunction _ButtonPicker<T extends string>(props: ButtonPickerProps<T>) {\n\tconst {\n\t\tuiType,\n\t\titems,\n\t\ttitle,\n\t\tstyle,\n\t\tvalue,\n\t\tcolumns = clamp(items.length, 2, 4),\n\t\tonValueChange,\n\t} = props\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\n\tconst rPointing = useRef(false)\n\n\tconst {\n\t\thandleButtonClick,\n\t\thandleButtonPointerDown,\n\t\thandleButtonPointerEnter,\n\t\thandleButtonPointerUp,\n\t} = React.useMemo(() => {\n\t\tconst handlePointerUp = () => {\n\t\t\trPointing.current = false\n\t\t\twindow.removeEventListener('pointerup', handlePointerUp)\n\t\t}\n\n\t\tconst handleButtonClick = (e: React.PointerEvent<HTMLButtonElement>) => {\n\t\t\tconst { id } = e.currentTarget.dataset\n\t\t\tif (value.type === 'shared' && value.value === id) return\n\n\t\t\teditor.mark('point picker item')\n\t\t\tonValueChange(style, id as T, false)\n\t\t}\n\n\t\tconst handleButtonPointerDown = (e: React.PointerEvent<HTMLButtonElement>) => {\n\t\t\tconst { id } = e.currentTarget.dataset\n\n\t\t\teditor.mark('point picker item')\n\t\t\tonValueChange(style, id as T, true)\n\n\t\t\trPointing.current = true\n\t\t\twindow.addEventListener('pointerup', handlePointerUp) // see TLD-658\n\t\t}\n\n\t\tconst handleButtonPointerEnter = (e: React.PointerEvent<HTMLButtonElement>) => {\n\t\t\tif (!rPointing.current) return\n\n\t\t\tconst { id } = e.currentTarget.dataset\n\t\t\tonValueChange(style, id as T, true)\n\t\t}\n\n\t\tconst handleButtonPointerUp = (e: React.PointerEvent<HTMLButtonElement>) => {\n\t\t\tconst { id } = e.currentTarget.dataset\n\t\t\tonValueChange(style, id as T, false)\n\t\t}\n\n\t\treturn {\n\t\t\thandleButtonClick,\n\t\t\thandleButtonPointerDown,\n\t\t\thandleButtonPointerEnter,\n\t\t\thandleButtonPointerUp,\n\t\t}\n\t}, [value, editor, onValueChange, style])\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames('tlui-button-grid', {\n\t\t\t\t'tlui-button-grid__two': columns === 2,\n\t\t\t\t'tlui-button-grid__three': columns === 3,\n\t\t\t\t'tlui-button-grid__four': columns === 4,\n\t\t\t})}\n\t\t>\n\t\t\t{items.map((item) => (\n\t\t\t\t<Button\n\t\t\t\t\tkey={item.value}\n\t\t\t\t\tdata-id={item.value}\n\t\t\t\t\tdata-testid={`style.${uiType}.${item.value}`}\n\t\t\t\t\taria-label={item.value}\n\t\t\t\t\tdata-state={value.type === 'shared' && value.value === item.value ? 'hinted' : undefined}\n\t\t\t\t\ttitle={title + ' â€” ' + msg(`${uiType}-style.${item.value}` as TLUiTranslationKey)}\n\t\t\t\t\tclassName={classNames('tlui-button-grid__button')}\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tstyle === (DefaultColorStyle as StyleProp<unknown>)\n\t\t\t\t\t\t\t? { color: `var(--palette-${item.value})` }\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t}\n\t\t\t\t\tonPointerEnter={handleButtonPointerEnter}\n\t\t\t\t\tonPointerDown={handleButtonPointerDown}\n\t\t\t\t\tonPointerUp={handleButtonPointerUp}\n\t\t\t\t\tonClick={handleButtonClick}\n\t\t\t\t\ticon={item.icon as TLUiIconType}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\n/** @internal */\nexport const ButtonPicker = React.memo(_ButtonPicker) as typeof _ButtonPicker\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}