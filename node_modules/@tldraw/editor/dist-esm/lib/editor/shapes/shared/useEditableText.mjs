import { useCallback, useEffect, useRef } from "react";
import { useValue } from "signia-react";
import { useEditor } from "../../../hooks/useEditor.mjs";
import { preventDefault, stopEventPropagation } from "../../../utils/dom.mjs";
import { INDENT, TextHelpers } from "../text/TextHelpers.mjs";
function useEditableText(id, type, text) {
  const editor = useEditor();
  const rInput = useRef(null);
  const isEditing = useValue("isEditing", () => editor.pageState.editingId === id, [editor, id]);
  const rSkipSelectOnFocus = useRef(false);
  const rSelectionRanges = useRef();
  const isEditableFromHover = useValue(
    "is editable hovering",
    () => {
      if (type === "text" && editor.isIn("text") && editor.hoveredId === id) {
        return true;
      }
      if (editor.isIn("select.editing_shape")) {
        const { editingShape } = editor;
        if (!editingShape)
          return false;
        return (
          // The shape must be hovered
          (// and this shape must be capable of being editing in its current form
          editor.hoveredId === id && // the editing shape must be the same type as this shape
          editingShape.type === type && editor.getShapeUtil(editingShape).canEdit(editingShape))
        );
      }
      return false;
    },
    [type, id]
  );
  const handleFocus = useCallback(() => {
    if (isEditableFromHover)
      return;
    requestAnimationFrame(() => {
      const elm = rInput.current;
      if (!elm)
        return;
      const shape = editor.getShapeById(id);
      if (shape) {
        elm.value = shape.props.text;
        if (elm.value.length && !rSkipSelectOnFocus.current) {
          elm.select();
        }
        rSkipSelectOnFocus.current = false;
      }
    });
  }, [editor, id, isEditableFromHover]);
  const handleBlur = useCallback(() => {
    const ranges = rSelectionRanges.current;
    requestAnimationFrame(() => {
      const elm = rInput.current;
      if (editor.isIn("select.editing_shape") && elm) {
        if (ranges) {
          if (!ranges.length) {
            elm.focus();
          } else {
            rSkipSelectOnFocus.current = true;
            elm.focus();
            const selection = window.getSelection();
            if (selection) {
              ranges.forEach((range) => selection.addRange(range));
            }
          }
        } else {
          elm.focus();
        }
      } else {
        window.getSelection()?.removeAllRanges();
        editor.complete();
      }
    });
  }, [editor]);
  const handleKeyDown = useCallback(
    (e) => {
      if (e.ctrlKey || e.metaKey)
        stopEventPropagation(e);
      switch (e.key) {
        case "Enter": {
          if (e.ctrlKey || e.metaKey) {
            editor.complete();
          }
          break;
        }
        case "Tab": {
          preventDefault(e);
          if (e.shiftKey) {
            TextHelpers.unindent(e.currentTarget);
          } else {
            TextHelpers.indent(e.currentTarget);
          }
          break;
        }
      }
    },
    [editor]
  );
  const handleChange = useCallback(
    (e) => {
      let text2 = TextHelpers.normalizeText(e.currentTarget.value);
      const untabbedText = text2.replace(/\t/g, INDENT);
      if (untabbedText !== text2) {
        const selectionStart = e.currentTarget.selectionStart;
        e.currentTarget.value = untabbedText;
        e.currentTarget.selectionStart = selectionStart + (untabbedText.length - text2.length);
        e.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text2.length);
        text2 = untabbedText;
      }
      editor.updateShapes([
        { id, type, props: { text: text2 } }
      ]);
    },
    [editor, id, type]
  );
  const isEmpty = text.trim().length === 0;
  useEffect(() => {
    const elm = rInput.current;
    if (elm) {
      let updateSelection2 = function() {
        const selection = window.getSelection?.();
        if (selection && selection.type !== "None") {
          const ranges = [];
          if (selection) {
            for (let i = 0; i < selection.rangeCount; i++) {
              ranges.push(selection.getRangeAt?.(i));
            }
          }
          rSelectionRanges.current = ranges;
        }
      };
      var updateSelection = updateSelection2;
      document.addEventListener("selectionchange", updateSelection2);
      return () => {
        document.removeEventListener("selectionchange", updateSelection2);
      };
    }
  });
  return {
    rInput,
    isEditing,
    isEditableFromHover,
    handleFocus,
    handleBlur,
    handleKeyDown,
    handleChange,
    isEmpty
  };
}
export {
  useEditableText
};
//# sourceMappingURL=useEditableText.mjs.map
