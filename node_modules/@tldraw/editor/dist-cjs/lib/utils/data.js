"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var data_exports = {};
__export(data_exports, {
  checkFlag: () => checkFlag,
  fileToBase64: () => fileToBase64,
  getIncrementedName: () => getIncrementedName,
  isSerializable: () => isSerializable,
  isValidUrl: () => isValidUrl,
  snapToGrid: () => snapToGrid,
  uniqueId: () => uniqueId
});
module.exports = __toCommonJS(data_exports);
var import_is_plain_object = require("is-plain-object");
var import_nanoid = require("nanoid");
function uniqueId() {
  return (0, import_nanoid.nanoid)();
}
const serializableTypes = /* @__PURE__ */ new Set(["string", "number", "boolean", "undefined"]);
function isSerializable(value) {
  if (serializableTypes.has(typeof value) || value === null)
    return true;
  if (Array.isArray(value))
    return value.every(isSerializable);
  if ((0, import_is_plain_object.isPlainObject)(value))
    return Object.values(value).every(isSerializable);
  return false;
}
function fileToBase64(file) {
  return new Promise((resolve, reject) => {
    if (file) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
      reader.onabort = (error) => reject(error);
    }
  });
}
function getIncrementedName(name, others) {
  let result = name;
  const set = new Set(others);
  while (set.has(result)) {
    result = /^.*(\d+)$/.exec(result)?.[1] ? result.replace(/(\d+)(?=\D?)$/, (m) => {
      return (+m + 1).toString();
    }) : `${result} 1`;
  }
  return result;
}
const checkFlag = (flag) => typeof flag === "boolean" ? flag : flag?.();
function snapToGrid(n, gridSize) {
  return Math.round(n / gridSize) * gridSize;
}
const VALID_URL_REGEX = new RegExp(
  /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i
);
function isValidUrl(url) {
  return VALID_URL_REGEX.test(url);
}
//# sourceMappingURL=data.js.map
