import {
  getStrokeOutlinePoints,
  getStrokePoints,
  setStrokePointRadii,
  Vec2d
} from "@tldraw/primitives";
import { getSvgPathFromStroke, getSvgPathFromStrokePoints } from "../../../../utils/svg.mjs";
function getLinePoints(spline) {
  const { segments } = spline;
  const allPoints = [];
  for (let j = 0, k = segments.length; j < k; j++) {
    const segment = segments[j];
    const lut = segment.lut;
    const n = lut.length - 1;
    if (j > 0) {
      allPoints.push(Vec2d.Lrp(lut[0], lut[1], 0.25));
    } else {
      allPoints.push(lut[0]);
    }
    for (let i = 1; i < n; i++) {
      allPoints.push(lut[i]);
    }
    if (j < k - 1) {
      allPoints.push(Vec2d.Lrp(lut[n - 1], lut[n], 0.75));
    } else {
      allPoints.push(lut[n]);
    }
  }
  return allPoints;
}
function getLineDrawFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0.4,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: true,
    last: true
  };
}
function getLineSolidFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: false,
    last: true
  };
}
function getLineStrokePoints(shape, spline, strokeWidth) {
  const points = getLinePoints(spline);
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokePoints(points, options);
}
function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokeOutlinePoints(
    setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),
    options
  );
}
function getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineSolidFreehandOptions(strokeWidth);
  return getStrokeOutlinePoints(getLineStrokePoints(shape, spline, strokeWidth), options);
}
function getLineDrawPath(shape, spline, strokeWidth) {
  const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
  return getSvgPathFromStroke(stroke);
}
function getLineSolidPath(shape, spline, strokeWidth) {
  const outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth);
  return getSvgPathFromStroke(outlinePoints);
}
function getLineIndicatorPath(shape, spline, strokeWidth) {
  if (shape.props.dash === "draw") {
    const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
    return getSvgPathFromStrokePoints(strokePoints);
  }
  return spline.path;
}
export {
  getLineDrawFreehandOptions,
  getLineDrawPath,
  getLineDrawStrokeOutlinePoints,
  getLineIndicatorPath,
  getLinePoints,
  getLineSolidFreehandOptions,
  getLineSolidPath,
  getLineSolidStrokeOutlinePoints,
  getLineStrokePoints
};
//# sourceMappingURL=getLinePath.mjs.map
