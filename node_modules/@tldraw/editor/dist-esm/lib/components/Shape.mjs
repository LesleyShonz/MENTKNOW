import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { Matrix2d } from "@tldraw/primitives";
import * as React from "react";
import {
  track,
  useStateTracking
} from "signia-react";
import { useEditor } from "../../index.mjs";
import { useEditorComponents } from "../hooks/useEditorComponents.mjs";
import { useQuickReactor } from "../hooks/useQuickReactor.mjs";
import { useShapeEvents } from "../hooks/useShapeEvents.mjs";
import { OptionalErrorBoundary } from "./ErrorBoundary.mjs";
const Shape = track(function Shape2({
  id,
  index,
  backgroundIndex,
  opacity,
  isCulled
}) {
  const editor = useEditor();
  const { ShapeErrorFallback } = useEditorComponents();
  const events = useShapeEvents(id);
  const containerRef = React.useRef(null);
  const backgroundContainerRef = React.useRef(null);
  const setProperty = React.useCallback((property, value) => {
    containerRef.current?.style.setProperty(property, value);
    backgroundContainerRef.current?.style.setProperty(property, value);
  }, []);
  useQuickReactor(
    "set shape container transform position",
    () => {
      const shape2 = editor.getShapeById(id);
      const pageTransform = editor.getPageTransformById(id);
      if (!shape2 || !pageTransform)
        return null;
      const transform = Matrix2d.toCssString(pageTransform);
      setProperty("transform", transform);
    },
    [editor, setProperty]
  );
  useQuickReactor(
    "set shape container clip path",
    () => {
      const shape2 = editor.getShapeById(id);
      if (!shape2)
        return null;
      const clipPath = editor.getClipPathById(id);
      setProperty("clip-path", clipPath ?? "none");
    },
    [editor, setProperty]
  );
  useQuickReactor(
    "set shape height and width",
    () => {
      const shape2 = editor.getShapeById(id);
      if (!shape2)
        return null;
      const util2 = editor.getShapeUtil(shape2);
      const bounds = util2.bounds(shape2);
      setProperty("width", Math.ceil(bounds.width) + "px");
      setProperty("height", Math.ceil(bounds.height) + "px");
    },
    [editor]
  );
  React.useLayoutEffect(() => {
    setProperty("opacity", opacity + "");
    containerRef.current?.style.setProperty("z-index", index + "");
    backgroundContainerRef.current?.style.setProperty("z-index", backgroundIndex + "");
  }, [opacity, index, backgroundIndex, setProperty]);
  const shape = editor.getShapeById(id);
  if (!shape)
    return null;
  const util = editor.getShapeUtil(shape);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    util.renderBackground && /* @__PURE__ */ jsx(
      "div",
      {
        ref: backgroundContainerRef,
        className: "tl-shape tl-shape-background",
        "data-shape-type": shape.type,
        draggable: false,
        children: !isCulled && /* @__PURE__ */ jsx(
          OptionalErrorBoundary,
          {
            fallback: ShapeErrorFallback ? (error) => /* @__PURE__ */ jsx(ShapeErrorFallback, { error }) : null,
            onError: (error) => editor.annotateError(error, { origin: "react.shape", willCrashApp: false }),
            children: /* @__PURE__ */ jsx(InnerShapeBackground, { shape, util })
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(
      "div",
      {
        ref: containerRef,
        className: "tl-shape",
        "data-shape-type": shape.type,
        draggable: false,
        onPointerDown: events.onPointerDown,
        onPointerMove: events.onPointerMove,
        onPointerUp: events.onPointerUp,
        onPointerEnter: events.onPointerEnter,
        onPointerLeave: events.onPointerLeave,
        children: isCulled && util.canUnmount(shape) ? /* @__PURE__ */ jsx(CulledShape, { shape, util }) : /* @__PURE__ */ jsx(
          OptionalErrorBoundary,
          {
            fallback: ShapeErrorFallback ? (error) => /* @__PURE__ */ jsx(ShapeErrorFallback, { error }) : null,
            onError: (error) => editor.annotateError(error, { origin: "react.shape", willCrashApp: false }),
            children: /* @__PURE__ */ jsx(InnerShape, { shape, util })
          }
        )
      }
    )
  ] });
});
const InnerShape = React.memo(
  function InnerShape2({ shape, util }) {
    return useStateTracking("InnerShape:" + util.type, () => util.component(shape));
  },
  (prev, next) => prev.shape.props === next.shape.props
);
const InnerShapeBackground = React.memo(
  function InnerShapeBackground2({
    shape,
    util
  }) {
    return useStateTracking("InnerShape:" + util.type, () => util.renderBackground?.(shape));
  },
  (prev, next) => prev.shape.props === next.shape.props
);
const CulledShape = React.memo(
  function CulledShap({ shape, util }) {
    const bounds = util.bounds(shape);
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: "tl-shape__culled",
        style: {
          transform: `translate(${bounds.minX}px, ${bounds.minY}px)`,
          width: bounds.width,
          height: bounds.height
        }
      }
    );
  },
  () => true
);
export {
  Shape
};
//# sourceMappingURL=Shape.mjs.map
