import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import * as React from "react";
import { useValue } from "signia-react";
import { HASH_PATERN_ZOOM_NAMES } from "../../../constants.mjs";
import { useEditor } from "../../../hooks/useEditor.mjs";
const ShapeFill = React.memo(function ShapeFill2({ d, color, fill }) {
  switch (fill) {
    case "none": {
      return /* @__PURE__ */ jsx("path", { className: "tl-hitarea-stroke", fill: "none", d });
    }
    case "solid": {
      return /* @__PURE__ */ jsx("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-semi)`, d });
    }
    case "semi": {
      return /* @__PURE__ */ jsx("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-solid)`, d });
    }
    case "pattern": {
      return /* @__PURE__ */ jsx(PatternFill, { color, fill, d });
    }
  }
});
const PatternFill = function PatternFill2({ d, color }) {
  const editor = useEditor();
  const zoomLevel = useValue("zoomLevel", () => editor.zoomLevel, [editor]);
  const isDarkMode = useValue("isDarkMode", () => editor.isDarkMode, [editor]);
  const intZoom = Math.ceil(zoomLevel);
  const teenyTiny = editor.zoomLevel <= 0.18;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-pattern)`, d }),
    /* @__PURE__ */ jsx(
      "path",
      {
        fill: teenyTiny ? `var(--palette-${color}-semi)` : `url(#${HASH_PATERN_ZOOM_NAMES[intZoom + (isDarkMode ? "_dark" : "_light")]})`,
        d
      }
    )
  ] });
};
function getShapeFillSvg({
  d,
  color,
  fill,
  colors
}) {
  if (fill === "none") {
    return;
  }
  if (fill === "pattern") {
    const gEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const path1El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1El.setAttribute("d", d);
    path1El.setAttribute("fill", colors.pattern[color]);
    const path2El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2El.setAttribute("d", d);
    path2El.setAttribute("fill", `url(#hash_pattern)`);
    gEl.appendChild(path1El);
    gEl.appendChild(path2El);
    return gEl;
  }
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  switch (fill) {
    case "semi": {
      path.setAttribute("fill", colors.solid);
      break;
    }
    case "solid": {
      {
        path.setAttribute("fill", colors.semi[color]);
      }
      break;
    }
  }
  return path;
}
function getSvgWithShapeFill(foregroundPath, backgroundPath) {
  if (backgroundPath) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g.appendChild(backgroundPath);
    g.appendChild(foregroundPath);
    return g;
  } else {
    return foregroundPath;
  }
}
export {
  ShapeFill,
  getShapeFillSvg,
  getSvgWithShapeFill
};
//# sourceMappingURL=ShapeFill.mjs.map
