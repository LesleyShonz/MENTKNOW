import React from "react";
import { preventDefault, releasePointerCapture, setPointerCapture } from "../utils/dom.mjs";
import { getPointerInfo } from "../utils/svg.mjs";
import { useEditor } from "./useEditor.mjs";
const pointerEventHandler = (editor, shapeId, name) => {
  return (e) => {
    if (name !== "pointer_move" && editor.pageState.editingId === shapeId)
      e.isKilled = true;
    if (e.isKilled)
      return;
    switch (name) {
      case "pointer_down": {
        if (e.button !== 0 && e.button !== 1 && e.button !== 2)
          return;
        setPointerCapture(e.currentTarget, e);
        break;
      }
      case "pointer_up": {
        releasePointerCapture(e.currentTarget, e);
        break;
      }
    }
    const shape = editor.getShapeById(shapeId);
    if (!shape) {
      console.error("Shape not found", shapeId);
      return;
    }
    editor.dispatch({
      type: "pointer",
      target: "shape",
      shape,
      name,
      ...getPointerInfo(e, editor.getContainer())
    });
  };
};
function useShapeEvents(id) {
  const editor = useEditor();
  return React.useMemo(() => {
    function onTouchStart(e) {
      ;
      e.isKilled = true;
      preventDefault(e);
    }
    function onTouchEnd(e) {
      ;
      e.isKilled = true;
      preventDefault(e);
    }
    const handlePointerMove = pointerEventHandler(editor, id, "pointer_move");
    let lastX, lastY;
    function onPointerMove(e) {
      if (e.isKilled)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      return handlePointerMove(e);
    }
    return {
      onPointerDown: pointerEventHandler(editor, id, "pointer_down"),
      onPointerUp: pointerEventHandler(editor, id, "pointer_up"),
      onPointerEnter: pointerEventHandler(editor, id, "pointer_enter"),
      onPointerLeave: pointerEventHandler(editor, id, "pointer_leave"),
      onPointerMove,
      onTouchStart,
      onTouchEnd
    };
  }, [editor, id]);
}
export {
  useShapeEvents
};
//# sourceMappingURL=useShapeEvents.mjs.map
