{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { uniqueId } from \"@tldraw/editor\";\nimport { Box2d, PI2, Vec2d, clamp } from \"@tldraw/primitives\";\nvar MinimapManager = /*#__PURE__*/function () {\n  function MinimapManager(_editor, dpr) {\n    var _this = this;\n    _classCallCheck(this, MinimapManager);\n    _defineProperty(this, \"colors\", {\n      shapeFill: \"rgba(144, 144, 144, .1)\",\n      selectFill: \"#2f80ed\",\n      viewportFill: \"rgba(144, 144, 144, .1)\"\n    });\n    _defineProperty(this, \"id\", uniqueId());\n    _defineProperty(this, \"cvs\", null);\n    _defineProperty(this, \"pageBounds\", []);\n    _defineProperty(this, \"collaborators\", []);\n    _defineProperty(this, \"canvasScreenBounds\", new Box2d());\n    _defineProperty(this, \"canvasPageBounds\", new Box2d());\n    _defineProperty(this, \"contentPageBounds\", new Box2d());\n    _defineProperty(this, \"contentScreenBounds\", new Box2d());\n    _defineProperty(this, \"originPagePoint\", new Vec2d());\n    _defineProperty(this, \"originPageCenter\", new Vec2d());\n    _defineProperty(this, \"isInViewport\", false);\n    _defineProperty(this, \"debug\", false);\n    _defineProperty(this, \"updateContentScreenBounds\", function () {\n      var contentScreenBounds = _this.contentScreenBounds,\n        content = _this.contentPageBounds,\n        canvas = _this.canvasScreenBounds;\n      var x = contentScreenBounds.x,\n        y = contentScreenBounds.y,\n        w = contentScreenBounds.w,\n        h = contentScreenBounds.h;\n      if (content.w > content.h) {\n        var sh = canvas.w / (content.w / content.h);\n        if (sh > canvas.h) {\n          x = (canvas.w - canvas.w * (canvas.h / sh)) / 2;\n          y = 0;\n          w = canvas.w * (canvas.h / sh);\n          h = canvas.h;\n        } else {\n          x = 0;\n          y = (canvas.h - sh) / 2;\n          w = canvas.w;\n          h = sh;\n        }\n      } else if (content.w < content.h) {\n        var sw = canvas.h / (content.h / content.w);\n        x = (canvas.w - sw) / 2;\n        y = 0;\n        w = sw;\n        h = canvas.h;\n      } else {\n        x = canvas.h / 2;\n        y = 0;\n        w = canvas.h;\n        h = canvas.h;\n      }\n      contentScreenBounds.set(x, y, w, h);\n    });\n    /** Get the canvas's true bounds converted to page bounds. */\n    _defineProperty(this, \"updateCanvasPageBounds\", function () {\n      var canvasPageBounds = _this.canvasPageBounds,\n        canvasScreenBounds = _this.canvasScreenBounds,\n        contentPageBounds = _this.contentPageBounds,\n        contentScreenBounds = _this.contentScreenBounds;\n      canvasPageBounds.set(0, 0, contentPageBounds.width / (contentScreenBounds.width / canvasScreenBounds.width), contentPageBounds.height / (contentScreenBounds.height / canvasScreenBounds.height));\n      canvasPageBounds.center = contentPageBounds.center;\n    });\n    _defineProperty(this, \"getScreenPoint\", function (x, y) {\n      var canvasScreenBounds = _this.canvasScreenBounds;\n      var screenX = (x - canvasScreenBounds.minX) * _this.dpr;\n      var screenY = (y - canvasScreenBounds.minY) * _this.dpr;\n      return {\n        x: screenX,\n        y: screenY\n      };\n    });\n    _defineProperty(this, \"getPagePoint\", function (x, y) {\n      var contentPageBounds = _this.contentPageBounds,\n        contentScreenBounds = _this.contentScreenBounds,\n        canvasPageBounds = _this.canvasPageBounds;\n      var _this$getScreenPoint = _this.getScreenPoint(x, y),\n        screenX = _this$getScreenPoint.x,\n        screenY = _this$getScreenPoint.y;\n      return {\n        x: canvasPageBounds.minX + screenX * contentPageBounds.width / contentScreenBounds.width,\n        y: canvasPageBounds.minY + screenY * contentPageBounds.height / contentScreenBounds.height,\n        z: 1\n      };\n    });\n    _defineProperty(this, \"minimapScreenPointToPagePoint\", function (x, y) {\n      var shiftKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var clampToBounds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var editor = _this.editor;\n      var viewportPageBounds = editor.viewportPageBounds;\n      var _this$getPagePoint = _this.getPagePoint(x, y),\n        px = _this$getPagePoint.x,\n        py = _this$getPagePoint.y;\n      if (clampToBounds) {\n        var _shapesPageBounds$min, _shapesPageBounds$max, _shapesPageBounds$min2, _shapesPageBounds$max2;\n        var shapesPageBounds = _this.editor.allShapesCommonBounds;\n        var vpPageBounds = viewportPageBounds;\n        var minX = ((_shapesPageBounds$min = shapesPageBounds === null || shapesPageBounds === void 0 ? void 0 : shapesPageBounds.minX) !== null && _shapesPageBounds$min !== void 0 ? _shapesPageBounds$min : 0) - vpPageBounds.width / 2;\n        var maxX = ((_shapesPageBounds$max = shapesPageBounds === null || shapesPageBounds === void 0 ? void 0 : shapesPageBounds.maxX) !== null && _shapesPageBounds$max !== void 0 ? _shapesPageBounds$max : 0) + vpPageBounds.width / 2;\n        var minY = ((_shapesPageBounds$min2 = shapesPageBounds === null || shapesPageBounds === void 0 ? void 0 : shapesPageBounds.minY) !== null && _shapesPageBounds$min2 !== void 0 ? _shapesPageBounds$min2 : 0) - vpPageBounds.height / 2;\n        var maxY = ((_shapesPageBounds$max2 = shapesPageBounds === null || shapesPageBounds === void 0 ? void 0 : shapesPageBounds.maxY) !== null && _shapesPageBounds$max2 !== void 0 ? _shapesPageBounds$max2 : 0) + vpPageBounds.height / 2;\n        var lx = Math.max(0, minX + vpPageBounds.width - px);\n        var rx = Math.max(0, -(maxX - vpPageBounds.width - px));\n        var ly = Math.max(0, minY + vpPageBounds.height - py);\n        var ry = Math.max(0, -(maxY - vpPageBounds.height - py));\n        var ql = Math.max(0, lx - rx);\n        var qr = Math.max(0, rx - lx);\n        var qt = Math.max(0, ly - ry);\n        var qb = Math.max(0, ry - ly);\n        if (ql && ql > qr) {\n          px += ql / 2;\n        } else if (qr) {\n          px -= qr / 2;\n        }\n        if (qt && qt > qb) {\n          py += qt / 2;\n        } else if (qb) {\n          py -= qb / 2;\n        }\n        px = clamp(px, minX, maxX);\n        py = clamp(py, minY, maxY);\n      }\n      if (shiftKey) {\n        var originPagePoint = _this.originPagePoint;\n        var dx = Math.abs(px - originPagePoint.x);\n        var dy = Math.abs(py - originPagePoint.y);\n        if (dx > dy) {\n          py = originPagePoint.y;\n        } else {\n          px = originPagePoint.x;\n        }\n      }\n      return {\n        x: px,\n        y: py\n      };\n    });\n    _defineProperty(this, \"render\", function () {\n      var cvs = _this.cvs,\n        pageBounds = _this.pageBounds;\n      _this.updateCanvasPageBounds();\n      var editor = _this.editor,\n        canvasScreenBounds = _this.canvasScreenBounds,\n        canvasPageBounds = _this.canvasPageBounds,\n        contentPageBounds = _this.contentPageBounds,\n        contentScreenBounds = _this.contentScreenBounds;\n      var cw = canvasScreenBounds.width,\n        ch = canvasScreenBounds.height;\n      var viewportPageBounds = editor.viewportPageBounds,\n        selectedIds = editor.selectedIds;\n      if (!cvs || !pageBounds) {\n        return;\n      }\n      var ctx = cvs.getContext(\"2d\");\n      if (!ctx) {\n        throw new Error(\"Minimap (shapes): Could not get context\");\n      }\n      ctx.resetTransform();\n      ctx.globalAlpha = 1;\n      ctx.clearRect(0, 0, cw, ch);\n      var sx = contentScreenBounds.width / contentPageBounds.width;\n      var sy = contentScreenBounds.height / contentPageBounds.height;\n      ctx.translate((cw - contentScreenBounds.width) / 2, (ch - contentScreenBounds.height) / 2);\n      ctx.scale(sx, sy);\n      ctx.translate(-contentPageBounds.minX, -contentPageBounds.minY);\n      var rx = 8 / sx;\n      var ry = 8 / sx;\n      var ax = 1 / sx;\n      var ay = 1 / sx;\n      var bx = rx / 4;\n      var by = ry / 4;\n      var shapesPath = new Path2D();\n      var selectedPath = new Path2D();\n      var _this$colors = _this.colors,\n        shapeFill = _this$colors.shapeFill,\n        selectFill = _this$colors.selectFill,\n        viewportFill = _this$colors.viewportFill;\n      var pb;\n      for (var i = 0, n = pageBounds.length; i < n; i++) {\n        pb = pageBounds[i];\n        MinimapManager.roundedRect(selectedIds.includes(pb.id) ? selectedPath : shapesPath, pb.minX, pb.minY, pb.width, pb.height, clamp(rx, ax, pb.width / bx), clamp(ry, ay, pb.height / by));\n      }\n      ctx.fillStyle = shapeFill;\n      ctx.fill(shapesPath);\n      ctx.fillStyle = selectFill;\n      ctx.fill(selectedPath);\n      if (_this.debug) {\n        var commonBounds = Box2d.Common(pageBounds);\n        var minX = commonBounds.minX,\n          minY = commonBounds.minY,\n          width = commonBounds.width,\n          height = commonBounds.height;\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = 2 / sx;\n        ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);\n      }\n      {\n        var brush = editor.brush;\n        if (brush) {\n          var x = brush.x,\n            y = brush.y,\n            w = brush.w,\n            h = brush.h;\n          ctx.beginPath();\n          MinimapManager.sharpRect(ctx, x, y, w, h);\n          ctx.closePath();\n          ctx.fillStyle = viewportFill;\n          ctx.fill();\n        }\n      }\n      {\n        var _minX = viewportPageBounds.minX,\n          _minY = viewportPageBounds.minY,\n          _width = viewportPageBounds.width,\n          _height = viewportPageBounds.height;\n        ctx.beginPath();\n        var rx2 = 12 / sx;\n        var ry2 = 12 / sx;\n        MinimapManager.roundedRect(ctx, _minX, _minY, _width, _height, Math.min(_width / 4, rx2), Math.min(_height / 4, ry2));\n        ctx.closePath();\n        ctx.fillStyle = viewportFill;\n        ctx.fill();\n        if (_this.debug) {\n          ctx.strokeStyle = \"orange\";\n          ctx.strokeRect(_minX + 1 / sx, _minY + 1 / sy, _width - 2 / sx, _height - 2 / sy);\n        }\n      }\n      var px = 2.5 / sx;\n      var py = 2.5 / sy;\n      var currentPageId = editor.currentPageId;\n      var collaborator;\n      for (var _i = 0; _i < _this.collaborators.length; _i++) {\n        collaborator = _this.collaborators[_i];\n        if (collaborator.currentPageId !== currentPageId) {\n          continue;\n        }\n        ctx.beginPath();\n        ctx.ellipse(clamp(collaborator.cursor.x, canvasPageBounds.minX + px, canvasPageBounds.maxX - px), clamp(collaborator.cursor.y, canvasPageBounds.minY + py, canvasPageBounds.maxY - py), 5 / sx, 5 / sy, 0, 0, PI2);\n        ctx.fillStyle = collaborator.color;\n        ctx.fill();\n      }\n      if (_this.debug) {\n        ctx.lineWidth = 2 / sx;\n        {\n          var _minX2 = contentPageBounds.minX,\n            _minY2 = contentPageBounds.minY,\n            _width2 = contentPageBounds.width,\n            _height2 = contentPageBounds.height;\n          ctx.strokeStyle = \"red\";\n          ctx.strokeRect(_minX2 + 1 / sx, _minY2 + 1 / sy, _width2 - 2 / sx, _height2 - 2 / sy);\n        }\n        {\n          var _minX3 = canvasPageBounds.minX,\n            _minY3 = canvasPageBounds.minY,\n            _width3 = canvasPageBounds.width,\n            _height3 = canvasPageBounds.height;\n          ctx.strokeStyle = \"blue\";\n          ctx.strokeRect(_minX3 + 1 / sx, _minY3 + 1 / sy, _width3 - 2 / sx, _height3 - 2 / sy);\n        }\n      }\n    });\n    this.editor = _editor;\n    this.dpr = dpr;\n  }\n  _createClass(MinimapManager, [{\n    key: \"setDpr\",\n    value: function setDpr(dpr) {\n      this.dpr = +dpr.toFixed(2);\n    }\n  }], [{\n    key: \"roundedRect\",\n    value: function roundedRect(ctx, x, y, width, height, rx, ry) {\n      if (rx < 1 && ry < 1) {\n        ctx.rect(x, y, width, height);\n        return;\n      }\n      ctx.moveTo(x + rx, y);\n      ctx.lineTo(x + width - rx, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + ry);\n      ctx.lineTo(x + width, y + height - ry);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);\n      ctx.lineTo(x + rx, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - ry);\n      ctx.lineTo(x, y + ry);\n      ctx.quadraticCurveTo(x, y, x + rx, y);\n    }\n  }, {\n    key: \"sharpRect\",\n    value: function sharpRect(ctx, x, y, width, height, _rx, _ry) {\n      ctx.rect(x, y, width, height);\n    }\n  }]);\n  return MinimapManager;\n}();\nexport { MinimapManager };","map":{"version":3,"names":["uniqueId","Box2d","PI2","Vec2d","clamp","MinimapManager","editor","dpr","_this","_classCallCheck","_defineProperty","shapeFill","selectFill","viewportFill","contentScreenBounds","content","contentPageBounds","canvas","canvasScreenBounds","x","y","w","h","sh","sw","set","canvasPageBounds","width","height","center","screenX","minX","screenY","minY","_this$getScreenPoint","getScreenPoint","z","shiftKey","arguments","length","undefined","clampToBounds","viewportPageBounds","_this$getPagePoint","getPagePoint","px","py","_shapesPageBounds$min","_shapesPageBounds$max","_shapesPageBounds$min2","_shapesPageBounds$max2","shapesPageBounds","allShapesCommonBounds","vpPageBounds","maxX","maxY","lx","Math","max","rx","ly","ry","ql","qr","qt","qb","originPagePoint","dx","abs","dy","cvs","pageBounds","updateCanvasPageBounds","cw","ch","selectedIds","ctx","getContext","Error","resetTransform","globalAlpha","clearRect","sx","sy","translate","scale","ax","ay","bx","by","shapesPath","Path2D","selectedPath","_this$colors","colors","pb","i","n","roundedRect","includes","id","fillStyle","fill","debug","commonBounds","Common","strokeStyle","lineWidth","strokeRect","brush","beginPath","sharpRect","closePath","rx2","ry2","min","currentPageId","collaborator","collaborators","ellipse","cursor","color","_createClass","key","value","setDpr","toFixed","rect","moveTo","lineTo","quadraticCurveTo","_rx","_ry"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/NavigationZone/MinimapManager.ts"],"sourcesContent":["import { Editor, TLInstancePresence, TLShapeId, uniqueId } from '@tldraw/editor'\nimport { Box2d, PI2, Vec2d, clamp } from '@tldraw/primitives'\n\nexport class MinimapManager {\n\tconstructor(public editor: Editor, private dpr: number) {}\n\n\tcolors = {\n\t\tshapeFill: 'rgba(144, 144, 144, .1)',\n\t\tselectFill: '#2f80ed',\n\t\tviewportFill: 'rgba(144, 144, 144, .1)',\n\t}\n\n\tid = uniqueId()\n\tcvs: HTMLCanvasElement | null = null\n\tpageBounds: (Box2d & { id: TLShapeId })[] = []\n\tcollaborators: TLInstancePresence[] = []\n\n\tcanvasScreenBounds = new Box2d()\n\tcanvasPageBounds = new Box2d()\n\n\tcontentPageBounds = new Box2d()\n\tcontentScreenBounds = new Box2d()\n\n\toriginPagePoint = new Vec2d()\n\toriginPageCenter = new Vec2d()\n\n\tisInViewport = false\n\n\tdebug = false\n\n\tsetDpr(dpr: number) {\n\t\tthis.dpr = +dpr.toFixed(2)\n\t}\n\n\tupdateContentScreenBounds = () => {\n\t\tconst { contentScreenBounds, contentPageBounds: content, canvasScreenBounds: canvas } = this\n\n\t\tlet { x, y, w, h } = contentScreenBounds\n\n\t\tif (content.w > content.h) {\n\t\t\tconst sh = canvas.w / (content.w / content.h)\n\t\t\tif (sh > canvas.h) {\n\t\t\t\tx = (canvas.w - canvas.w * (canvas.h / sh)) / 2\n\t\t\t\ty = 0\n\t\t\t\tw = canvas.w * (canvas.h / sh)\n\t\t\t\th = canvas.h\n\t\t\t} else {\n\t\t\t\tx = 0\n\t\t\t\ty = (canvas.h - sh) / 2\n\t\t\t\tw = canvas.w\n\t\t\t\th = sh\n\t\t\t}\n\t\t} else if (content.w < content.h) {\n\t\t\tconst sw = canvas.h / (content.h / content.w)\n\t\t\tx = (canvas.w - sw) / 2\n\t\t\ty = 0\n\t\t\tw = sw\n\t\t\th = canvas.h\n\t\t} else {\n\t\t\tx = canvas.h / 2\n\t\t\ty = 0\n\t\t\tw = canvas.h\n\t\t\th = canvas.h\n\t\t}\n\n\t\tcontentScreenBounds.set(x, y, w, h)\n\t}\n\n\t/** Get the canvas's true bounds converted to page bounds. */\n\tupdateCanvasPageBounds = () => {\n\t\tconst { canvasPageBounds, canvasScreenBounds, contentPageBounds, contentScreenBounds } = this\n\n\t\tcanvasPageBounds.set(\n\t\t\t0,\n\t\t\t0,\n\t\t\tcontentPageBounds.width / (contentScreenBounds.width / canvasScreenBounds.width),\n\t\t\tcontentPageBounds.height / (contentScreenBounds.height / canvasScreenBounds.height)\n\t\t)\n\n\t\tcanvasPageBounds.center = contentPageBounds.center\n\t}\n\n\tgetScreenPoint = (x: number, y: number) => {\n\t\tconst { canvasScreenBounds } = this\n\n\t\tconst screenX = (x - canvasScreenBounds.minX) * this.dpr\n\t\tconst screenY = (y - canvasScreenBounds.minY) * this.dpr\n\n\t\treturn { x: screenX, y: screenY }\n\t}\n\n\tgetPagePoint = (x: number, y: number) => {\n\t\tconst { contentPageBounds, contentScreenBounds, canvasPageBounds } = this\n\n\t\tconst { x: screenX, y: screenY } = this.getScreenPoint(x, y)\n\n\t\treturn {\n\t\t\tx: canvasPageBounds.minX + (screenX * contentPageBounds.width) / contentScreenBounds.width,\n\t\t\ty: canvasPageBounds.minY + (screenY * contentPageBounds.height) / contentScreenBounds.height,\n\t\t\tz: 1,\n\t\t}\n\t}\n\n\tminimapScreenPointToPagePoint = (\n\t\tx: number,\n\t\ty: number,\n\t\tshiftKey = false,\n\t\tclampToBounds = false\n\t) => {\n\t\tconst { editor } = this\n\t\tconst { viewportPageBounds } = editor\n\n\t\tlet { x: px, y: py } = this.getPagePoint(x, y)\n\n\t\tif (clampToBounds) {\n\t\t\tconst shapesPageBounds = this.editor.allShapesCommonBounds\n\t\t\tconst vpPageBounds = viewportPageBounds\n\n\t\t\tconst minX = (shapesPageBounds?.minX ?? 0) - vpPageBounds.width / 2\n\t\t\tconst maxX = (shapesPageBounds?.maxX ?? 0) + vpPageBounds.width / 2\n\t\t\tconst minY = (shapesPageBounds?.minY ?? 0) - vpPageBounds.height / 2\n\t\t\tconst maxY = (shapesPageBounds?.maxY ?? 0) + vpPageBounds.height / 2\n\n\t\t\tconst lx = Math.max(0, minX + vpPageBounds.width - px)\n\t\t\tconst rx = Math.max(0, -(maxX - vpPageBounds.width - px))\n\t\t\tconst ly = Math.max(0, minY + vpPageBounds.height - py)\n\t\t\tconst ry = Math.max(0, -(maxY - vpPageBounds.height - py))\n\n\t\t\tconst ql = Math.max(0, lx - rx)\n\t\t\tconst qr = Math.max(0, rx - lx)\n\t\t\tconst qt = Math.max(0, ly - ry)\n\t\t\tconst qb = Math.max(0, ry - ly)\n\n\t\t\tif (ql && ql > qr) {\n\t\t\t\tpx += ql / 2\n\t\t\t} else if (qr) {\n\t\t\t\tpx -= qr / 2\n\t\t\t}\n\n\t\t\tif (qt && qt > qb) {\n\t\t\t\tpy += qt / 2\n\t\t\t} else if (qb) {\n\t\t\t\tpy -= qb / 2\n\t\t\t}\n\n\t\t\tpx = clamp(px, minX, maxX)\n\t\t\tpy = clamp(py, minY, maxY)\n\t\t}\n\n\t\tif (shiftKey) {\n\t\t\tconst { originPagePoint } = this\n\t\t\tconst dx = Math.abs(px - originPagePoint.x)\n\t\t\tconst dy = Math.abs(py - originPagePoint.y)\n\t\t\tif (dx > dy) {\n\t\t\t\tpy = originPagePoint.y\n\t\t\t} else {\n\t\t\t\tpx = originPagePoint.x\n\t\t\t}\n\t\t}\n\n\t\treturn { x: px, y: py }\n\t}\n\n\trender = () => {\n\t\tconst { cvs, pageBounds } = this\n\t\tthis.updateCanvasPageBounds()\n\n\t\tconst { editor, canvasScreenBounds, canvasPageBounds, contentPageBounds, contentScreenBounds } =\n\t\t\tthis\n\t\tconst { width: cw, height: ch } = canvasScreenBounds\n\t\tconst { viewportPageBounds, selectedIds } = editor\n\n\t\tif (!cvs || !pageBounds) {\n\t\t\treturn\n\t\t}\n\n\t\tconst ctx = cvs.getContext('2d')!\n\n\t\tif (!ctx) {\n\t\t\tthrow new Error('Minimap (shapes): Could not get context')\n\t\t}\n\n\t\tctx.resetTransform()\n\t\tctx.globalAlpha = 1\n\t\tctx.clearRect(0, 0, cw, ch)\n\n\t\t// Transform canvas\n\n\t\tconst sx = contentScreenBounds.width / contentPageBounds.width\n\t\tconst sy = contentScreenBounds.height / contentPageBounds.height\n\n\t\tctx.translate((cw - contentScreenBounds.width) / 2, (ch - contentScreenBounds.height) / 2)\n\t\tctx.scale(sx, sy)\n\t\tctx.translate(-contentPageBounds.minX, -contentPageBounds.minY)\n\n\t\t// Default radius for rounded rects\n\t\tconst rx = 8 / sx\n\t\tconst ry = 8 / sx\n\t\t// Min radius\n\t\tconst ax = 1 / sx\n\t\tconst ay = 1 / sx\n\t\t// Max radius factor\n\t\tconst bx = rx / 4\n\t\tconst by = ry / 4\n\n\t\t// shapes\n\n\t\tconst shapesPath = new Path2D()\n\t\tconst selectedPath = new Path2D()\n\n\t\tconst { shapeFill, selectFill, viewportFill } = this.colors\n\n\t\t// When there are many shapes, don't draw rounded rectangles;\n\t\t// consider using the shape's size instead.\n\n\t\tlet pb: Box2d & { id: TLShapeId }\n\t\tfor (let i = 0, n = pageBounds.length; i < n; i++) {\n\t\t\tpb = pageBounds[i]\n\t\t\tMinimapManager.roundedRect(\n\t\t\t\tselectedIds.includes(pb.id) ? selectedPath : shapesPath,\n\t\t\t\tpb.minX,\n\t\t\t\tpb.minY,\n\t\t\t\tpb.width,\n\t\t\t\tpb.height,\n\t\t\t\tclamp(rx, ax, pb.width / bx),\n\t\t\t\tclamp(ry, ay, pb.height / by)\n\t\t\t)\n\t\t}\n\t\t// Fill the shapes paths\n\t\tctx.fillStyle = shapeFill\n\t\tctx.fill(shapesPath)\n\n\t\t// Fill the selected paths\n\t\tctx.fillStyle = selectFill\n\t\tctx.fill(selectedPath)\n\n\t\tif (this.debug) {\n\t\t\t// Page bounds\n\t\t\tconst commonBounds = Box2d.Common(pageBounds)\n\t\t\tconst { minX, minY, width, height } = commonBounds\n\t\t\tctx.strokeStyle = 'green'\n\t\t\tctx.lineWidth = 2 / sx\n\t\t\tctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy)\n\t\t}\n\n\t\t// Brush\n\t\t{\n\t\t\tconst { brush } = editor\n\t\t\tif (brush) {\n\t\t\t\tconst { x, y, w, h } = brush\n\t\t\t\tctx.beginPath()\n\t\t\t\tMinimapManager.sharpRect(ctx, x, y, w, h)\n\t\t\t\tctx.closePath()\n\t\t\t\tctx.fillStyle = viewportFill\n\t\t\t\tctx.fill()\n\t\t\t}\n\t\t}\n\n\t\t// Viewport\n\t\t{\n\t\t\tconst { minX, minY, width, height } = viewportPageBounds\n\n\t\t\tctx.beginPath()\n\n\t\t\tconst rx = 12 / sx\n\t\t\tconst ry = 12 / sx\n\t\t\tMinimapManager.roundedRect(\n\t\t\t\tctx,\n\t\t\t\tminX,\n\t\t\t\tminY,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tMath.min(width / 4, rx),\n\t\t\t\tMath.min(height / 4, ry)\n\t\t\t)\n\t\t\tctx.closePath()\n\t\t\tctx.fillStyle = viewportFill\n\t\t\tctx.fill()\n\n\t\t\tif (this.debug) {\n\t\t\t\tctx.strokeStyle = 'orange'\n\t\t\t\tctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy)\n\t\t\t}\n\t\t}\n\n\t\t// Show collaborator cursors\n\n\t\t// Padding for canvas bounds edges\n\t\tconst px = 2.5 / sx\n\t\tconst py = 2.5 / sy\n\n\t\tconst { currentPageId } = editor\n\n\t\tlet collaborator: TLInstancePresence\n\t\tfor (let i = 0; i < this.collaborators.length; i++) {\n\t\t\tcollaborator = this.collaborators[i]\n\t\t\tif (collaborator.currentPageId !== currentPageId) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tctx.beginPath()\n\t\t\tctx.ellipse(\n\t\t\t\tclamp(collaborator.cursor.x, canvasPageBounds.minX + px, canvasPageBounds.maxX - px),\n\t\t\t\tclamp(collaborator.cursor.y, canvasPageBounds.minY + py, canvasPageBounds.maxY - py),\n\t\t\t\t5 / sx,\n\t\t\t\t5 / sy,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tPI2\n\t\t\t)\n\t\t\tctx.fillStyle = collaborator.color\n\t\t\tctx.fill()\n\t\t}\n\n\t\tif (this.debug) {\n\t\t\tctx.lineWidth = 2 / sx\n\n\t\t\t{\n\t\t\t\t// Minimap Bounds\n\t\t\t\tconst { minX, minY, width, height } = contentPageBounds\n\t\t\t\tctx.strokeStyle = 'red'\n\t\t\t\tctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\t// Canvas Bounds\n\t\t\t\tconst { minX, minY, width, height } = canvasPageBounds\n\t\t\t\tctx.strokeStyle = 'blue'\n\t\t\t\tctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy)\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic roundedRect(\n\t\tctx: CanvasRenderingContext2D | Path2D,\n\t\tx: number,\n\t\ty: number,\n\t\twidth: number,\n\t\theight: number,\n\t\trx: number,\n\t\try: number\n\t) {\n\t\tif (rx < 1 && ry < 1) {\n\t\t\tctx.rect(x, y, width, height)\n\t\t\treturn\n\t\t}\n\n\t\tctx.moveTo(x + rx, y)\n\t\tctx.lineTo(x + width - rx, y)\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + ry)\n\t\tctx.lineTo(x + width, y + height - ry)\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height)\n\t\tctx.lineTo(x + rx, y + height)\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - ry)\n\t\tctx.lineTo(x, y + ry)\n\t\tctx.quadraticCurveTo(x, y, x + rx, y)\n\t}\n\n\tstatic sharpRect(\n\t\tctx: CanvasRenderingContext2D | Path2D,\n\t\tx: number,\n\t\ty: number,\n\t\twidth: number,\n\t\theight: number,\n\t\t_rx?: number,\n\t\t_ry?: number\n\t) {\n\t\tctx.rect(x, y, width, height)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}