{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { debugFlags } from \"./debug-flags.mjs\";\nimport { getBrowserCanvasMaxSize } from \"./getBrowserCanvasMaxSize.mjs\";\nimport { setPhysChunk } from \"./png.mjs\";\nfunction getSvgAsString(svg) {\n  var clone = svg.cloneNode(true);\n  svg.setAttribute(\"width\", +svg.getAttribute(\"width\") + \"\");\n  svg.setAttribute(\"height\", +svg.getAttribute(\"height\") + \"\");\n  var out = new XMLSerializer().serializeToString(clone).replaceAll(\"&#10;      \", \"\").replaceAll(/((\\s|\")[0-9]*\\.[0-9]{2})([0-9]*)(\\b|\"|\\))/g, \"$1\");\n  return out;\n}\nfunction getSvgAsImage(_x, _x2) {\n  return _getSvgAsImage.apply(this, arguments);\n}\nfunction _getSvgAsImage() {\n  _getSvgAsImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(svg, options) {\n    var type, quality, scale, width, height, scaledWidth, scaledHeight, dataUrl, canvasSizes, ratio, effectiveScale, canvas, blob, view;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          type = options.type, quality = options.quality, scale = options.scale;\n          width = +svg.getAttribute(\"width\");\n          height = +svg.getAttribute(\"height\");\n          scaledWidth = width * scale;\n          scaledHeight = height * scale;\n          _context2.next = 7;\n          return getSvgAsDataUrl(svg);\n        case 7:\n          dataUrl = _context2.sent;\n          _context2.next = 10;\n          return getBrowserCanvasMaxSize();\n        case 10:\n          canvasSizes = _context2.sent;\n          if (width > canvasSizes.maxWidth) {\n            scaledWidth = canvasSizes.maxWidth;\n            scaledHeight = scaledWidth / width * height;\n          }\n          if (height > canvasSizes.maxHeight) {\n            scaledHeight = canvasSizes.maxHeight;\n            scaledWidth = scaledHeight / height * width;\n          }\n          if (scaledWidth * scaledHeight > canvasSizes.maxArea) {\n            ratio = Math.sqrt(canvasSizes.maxArea / (scaledWidth * scaledHeight));\n            scaledWidth *= ratio;\n            scaledHeight *= ratio;\n          }\n          scaledWidth = Math.floor(scaledWidth);\n          scaledHeight = Math.floor(scaledHeight);\n          effectiveScale = scaledWidth / width;\n          _context2.next = 19;\n          return new Promise(function (resolve) {\n            var image = new Image();\n            image.crossOrigin = \"anonymous\";\n            image.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var canvas2, ctx;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return new Promise(function (resolve2) {\n                      return setTimeout(resolve2, 250);\n                    });\n                  case 2:\n                    canvas2 = document.createElement(\"canvas\");\n                    ctx = canvas2.getContext(\"2d\");\n                    canvas2.width = scaledWidth;\n                    canvas2.height = scaledHeight;\n                    ctx.imageSmoothingEnabled = true;\n                    ctx.imageSmoothingQuality = \"high\";\n                    ctx.drawImage(image, 0, 0, scaledWidth, scaledHeight);\n                    URL.revokeObjectURL(dataUrl);\n                    resolve(canvas2);\n                  case 11:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            image.onerror = function () {\n              resolve(null);\n            };\n            image.src = dataUrl;\n          });\n        case 19:\n          canvas = _context2.sent;\n          if (canvas) {\n            _context2.next = 22;\n            break;\n          }\n          return _context2.abrupt(\"return\", null);\n        case 22:\n          _context2.next = 24;\n          return new Promise(function (resolve) {\n            return canvas.toBlob(function (blob2) {\n              if (!blob2 || debugFlags.throwToBlob.value) {\n                resolve(null);\n              }\n              resolve(blob2);\n            }, \"image/\" + type, quality);\n          });\n        case 24:\n          blob = _context2.sent;\n          if (blob) {\n            _context2.next = 27;\n            break;\n          }\n          return _context2.abrupt(\"return\", null);\n        case 27:\n          _context2.t0 = DataView;\n          _context2.next = 30;\n          return blob.arrayBuffer();\n        case 30:\n          _context2.t1 = _context2.sent;\n          view = new _context2.t0(_context2.t1);\n          return _context2.abrupt(\"return\", setPhysChunk(view, effectiveScale, {\n            type: \"image/\" + type\n          }));\n        case 33:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getSvgAsImage.apply(this, arguments);\n}\nfunction getSvgAsDataUrl(_x3) {\n  return _getSvgAsDataUrl.apply(this, arguments);\n}\nfunction _getSvgAsDataUrl() {\n  _getSvgAsDataUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svg) {\n    var clone, fileReader, imgs, _loop, _i, _imgs;\n    return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          clone = svg.cloneNode(true);\n          clone.setAttribute(\"encoding\", 'UTF-8\"');\n          fileReader = new FileReader();\n          imgs = Array.from(clone.querySelectorAll(\"image\"));\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var img, src, blob, base64;\n            return _regeneratorRuntime().wrap(function _loop$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  img = _imgs[_i];\n                  src = img.getAttribute(\"xlink:href\");\n                  if (!src) {\n                    _context3.next = 13;\n                    break;\n                  }\n                  if (src.startsWith(\"data:\")) {\n                    _context3.next = 13;\n                    break;\n                  }\n                  _context3.next = 6;\n                  return fetch(src);\n                case 6:\n                  _context3.next = 8;\n                  return _context3.sent.blob();\n                case 8:\n                  blob = _context3.sent;\n                  _context3.next = 11;\n                  return new Promise(function (resolve, reject) {\n                    fileReader.onload = function () {\n                      return resolve(fileReader.result);\n                    };\n                    fileReader.onerror = function () {\n                      return reject(fileReader.error);\n                    };\n                    fileReader.readAsDataURL(blob);\n                  });\n                case 11:\n                  base64 = _context3.sent;\n                  img.setAttribute(\"xlink:href\", base64);\n                case 13:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _loop);\n          });\n          _i = 0, _imgs = imgs;\n        case 6:\n          if (!(_i < _imgs.length)) {\n            _context4.next = 11;\n            break;\n          }\n          return _context4.delegateYield(_loop(), \"t0\", 8);\n        case 8:\n          _i++;\n          _context4.next = 6;\n          break;\n        case 11:\n          return _context4.abrupt(\"return\", getSvgAsDataUrlSync(clone));\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee3);\n  }));\n  return _getSvgAsDataUrl.apply(this, arguments);\n}\nfunction getSvgAsDataUrlSync(node) {\n  var svgStr = new XMLSerializer().serializeToString(node);\n  var base64SVG = window.btoa(unescape(encodeURIComponent(svgStr)));\n  return \"data:image/svg+xml;base64,\".concat(base64SVG);\n}\nfunction downloadDataURLAsFile(dataUrl, filename) {\n  var link = document.createElement(\"a\");\n  link.href = dataUrl;\n  link.download = filename;\n  link.click();\n}\nfunction getTextBoundingBox(text) {\n  var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  svg.appendChild(text);\n  document.body.appendChild(svg);\n  var bbox = text.getBoundingClientRect();\n  document.body.removeChild(svg);\n  return bbox;\n}\nexport { downloadDataURLAsFile, getSvgAsDataUrl, getSvgAsDataUrlSync, getSvgAsImage, getSvgAsString, getTextBoundingBox };","map":{"version":3,"names":["debugFlags","getBrowserCanvasMaxSize","setPhysChunk","getSvgAsString","svg","clone","cloneNode","setAttribute","getAttribute","out","XMLSerializer","serializeToString","replaceAll","getSvgAsImage","_x","_x2","_getSvgAsImage","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","options","type","quality","scale","width","height","scaledWidth","scaledHeight","dataUrl","canvasSizes","ratio","effectiveScale","canvas","blob","view","wrap","_callee2$","_context2","prev","next","getSvgAsDataUrl","sent","maxWidth","maxHeight","maxArea","Math","sqrt","floor","Promise","resolve","image","Image","crossOrigin","onload","_callee","canvas2","ctx","_callee$","_context","resolve2","setTimeout","document","createElement","getContext","imageSmoothingEnabled","imageSmoothingQuality","drawImage","URL","revokeObjectURL","stop","onerror","src","abrupt","toBlob","blob2","throwToBlob","value","t0","DataView","arrayBuffer","t1","_x3","_getSvgAsDataUrl","_callee3","fileReader","imgs","_loop","_i","_imgs","_callee3$","_context4","FileReader","Array","from","querySelectorAll","img","base64","_loop$","_context3","startsWith","fetch","reject","result","error","readAsDataURL","length","delegateYield","getSvgAsDataUrlSync","node","svgStr","base64SVG","window","btoa","unescape","encodeURIComponent","concat","downloadDataURLAsFile","filename","link","href","download","click","getTextBoundingBox","text","createElementNS","appendChild","body","bbox","getBoundingClientRect","removeChild"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/export.ts"],"sourcesContent":["import { debugFlags } from './debug-flags'\nimport { getBrowserCanvasMaxSize } from './getBrowserCanvasMaxSize'\nimport { setPhysChunk } from './png'\n\n/** @public */\nexport type TLCopyType = 'svg' | 'png' | 'jpeg' | 'json'\n\n/** @public */\nexport type TLExportType = 'svg' | 'png' | 'jpeg' | 'webp' | 'json'\n\n/** @public */\nexport function getSvgAsString(svg: SVGElement) {\n\tconst clone = svg.cloneNode(true) as SVGGraphicsElement\n\n\tsvg.setAttribute('width', +svg.getAttribute('width')! + '')\n\tsvg.setAttribute('height', +svg.getAttribute('height')! + '')\n\n\tconst out = new XMLSerializer()\n\t\t.serializeToString(clone)\n\t\t.replaceAll('&#10;      ', '')\n\t\t.replaceAll(/((\\s|\")[0-9]*\\.[0-9]{2})([0-9]*)(\\b|\"|\\))/g, '$1')\n\n\treturn out\n}\n\n/** @public */\nexport async function getSvgAsImage(\n\tsvg: SVGElement,\n\toptions: {\n\t\ttype: TLCopyType | TLExportType\n\t\tquality: number\n\t\tscale: number\n\t}\n) {\n\tconst { type, quality, scale } = options\n\n\tconst width = +svg.getAttribute('width')!\n\tconst height = +svg.getAttribute('height')!\n\tlet scaledWidth = width * scale\n\tlet scaledHeight = height * scale\n\n\tconst dataUrl = await getSvgAsDataUrl(svg)\n\n\tconst canvasSizes = await getBrowserCanvasMaxSize()\n\tif (width > canvasSizes.maxWidth) {\n\t\tscaledWidth = canvasSizes.maxWidth\n\t\tscaledHeight = (scaledWidth / width) * height\n\t}\n\tif (height > canvasSizes.maxHeight) {\n\t\tscaledHeight = canvasSizes.maxHeight\n\t\tscaledWidth = (scaledHeight / height) * width\n\t}\n\tif (scaledWidth * scaledHeight > canvasSizes.maxArea) {\n\t\tconst ratio = Math.sqrt(canvasSizes.maxArea / (scaledWidth * scaledHeight))\n\t\tscaledWidth *= ratio\n\t\tscaledHeight *= ratio\n\t}\n\n\tscaledWidth = Math.floor(scaledWidth)\n\tscaledHeight = Math.floor(scaledHeight)\n\tconst effectiveScale = scaledWidth / width\n\n\tconst canvas = await new Promise<HTMLCanvasElement | null>((resolve) => {\n\t\tconst image = new Image()\n\t\timage.crossOrigin = 'anonymous'\n\n\t\timage.onload = async () => {\n\t\t\t// safari will fire `onLoad` before the fonts in the SVG are\n\t\t\t// actually loaded. just waiting around a while is brittle, but\n\t\t\t// there doesn't seem to be any better solution for now :( see\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=219770\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 250))\n\n\t\t\tconst canvas = document.createElement('canvas') as HTMLCanvasElement\n\t\t\tconst ctx = canvas.getContext('2d')!\n\n\t\t\tcanvas.width = scaledWidth\n\t\t\tcanvas.height = scaledHeight\n\n\t\t\tctx.imageSmoothingEnabled = true\n\t\t\tctx.imageSmoothingQuality = 'high'\n\t\t\tctx.drawImage(image, 0, 0, scaledWidth, scaledHeight)\n\n\t\t\tURL.revokeObjectURL(dataUrl)\n\n\t\t\tresolve(canvas)\n\t\t}\n\n\t\timage.onerror = () => {\n\t\t\tresolve(null)\n\t\t}\n\n\t\timage.src = dataUrl\n\t})\n\n\tif (!canvas) return null\n\n\tconst blob = await new Promise<Blob | null>((resolve) =>\n\t\tcanvas.toBlob(\n\t\t\t(blob) => {\n\t\t\t\tif (!blob || debugFlags.throwToBlob.value) {\n\t\t\t\t\tresolve(null)\n\t\t\t\t}\n\t\t\t\tresolve(blob)\n\t\t\t},\n\t\t\t'image/' + type,\n\t\t\tquality\n\t\t)\n\t)\n\n\tif (!blob) return null\n\n\tconst view = new DataView(await blob.arrayBuffer())\n\treturn setPhysChunk(view, effectiveScale, {\n\t\ttype: 'image/' + type,\n\t})\n}\n\n/** @public */\nexport async function getSvgAsDataUrl(svg: SVGElement) {\n\tconst clone = svg.cloneNode(true) as SVGGraphicsElement\n\tclone.setAttribute('encoding', 'UTF-8\"')\n\n\tconst fileReader = new FileReader()\n\tconst imgs = Array.from(clone.querySelectorAll('image')) as SVGImageElement[]\n\n\tfor (const img of imgs) {\n\t\tconst src = img.getAttribute('xlink:href')\n\t\tif (src) {\n\t\t\tif (!src.startsWith('data:')) {\n\t\t\t\tconst blob = await (await fetch(src)).blob()\n\t\t\t\tconst base64 = await new Promise<string>((resolve, reject) => {\n\t\t\t\t\tfileReader.onload = () => resolve(fileReader.result as string)\n\t\t\t\t\tfileReader.onerror = () => reject(fileReader.error)\n\t\t\t\t\tfileReader.readAsDataURL(blob)\n\t\t\t\t})\n\t\t\t\timg.setAttribute('xlink:href', base64)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn getSvgAsDataUrlSync(clone)\n}\n\n/** @public */\nexport function getSvgAsDataUrlSync(node: SVGElement) {\n\tconst svgStr = new XMLSerializer().serializeToString(node)\n\t// NOTE: `unescape` works everywhere although deprecated\n\tconst base64SVG = window.btoa(unescape(encodeURIComponent(svgStr)))\n\treturn `data:image/svg+xml;base64,${base64SVG}`\n}\n\n/** @public */\nexport function downloadDataURLAsFile(dataUrl: string, filename: string) {\n\tconst link = document.createElement('a')\n\tlink.href = dataUrl\n\tlink.download = filename\n\tlink.click()\n}\n\n/** @public */\nexport function getTextBoundingBox(text: SVGTextElement) {\n\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n\tsvg.appendChild(text)\n\n\tdocument.body.appendChild(svg)\n\tconst bbox = text.getBoundingClientRect()\n\tdocument.body.removeChild(svg)\n\n\treturn bbox\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}