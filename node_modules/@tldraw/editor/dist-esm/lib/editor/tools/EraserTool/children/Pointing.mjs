import { FrameShapeUtil } from "../../../shapes/frame/FrameShapeUtil.mjs";
import { GroupShapeUtil } from "../../../shapes/group/GroupShapeUtil.mjs";
import { StateNode } from "../../StateNode.mjs";
class Pointing extends StateNode {
  static id = "pointing";
  onEnter = () => {
    const { inputs } = this.editor;
    const erasing = /* @__PURE__ */ new Set();
    const initialSize = erasing.size;
    for (const shape of [...this.editor.sortedShapesArray].reverse()) {
      if (this.editor.isPointInShape(inputs.currentPagePoint, shape)) {
        if (this.editor.isShapeOfType(shape, GroupShapeUtil))
          continue;
        const hitShape = this.editor.getOutermostSelectableShape(shape);
        if (this.editor.isShapeOfType(hitShape, FrameShapeUtil) && erasing.size > initialSize)
          break;
        erasing.add(hitShape.id);
      }
    }
    this.editor.setErasingIds([...erasing]);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("erasing", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    const { erasingIds } = this.editor;
    if (erasingIds.length) {
      this.editor.mark("erase end");
      this.editor.deleteShapes(erasingIds);
    }
    this.editor.setErasingIds([]);
    this.parent.transition("idle", {});
  }
  cancel() {
    this.editor.setErasingIds([]);
    this.parent.transition("idle", {});
  }
}
export {
  Pointing
};
//# sourceMappingURL=Pointing.mjs.map
