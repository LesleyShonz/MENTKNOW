{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/tools/SelectTool/children/PointingCropHandle.ts"],
  "sourcesContent": ["import { TLShape } from '@tldraw/tlschema'\nimport { TLEventHandlers, TLPointerEventInfo } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\nimport { CursorTypeMap } from './PointingResizeHandle'\n\ntype TLPointingCropHandleInfo = Extract<\n\tTLPointerEventInfo,\n\t{\n\t\ttarget: 'selection'\n\t}\n> & {\n\tonInteractionEnd?: string\n}\n\nexport class PointingCropHandle extends StateNode {\n\tstatic override id = 'pointing_crop_handle'\n\n\tprivate info = {} as TLPointingCropHandleInfo\n\n\tprivate updateCursor(shape: TLShape) {\n\t\tconst cursorType = CursorTypeMap[this.info.handle!]\n\t\tthis.editor.setCursor({\n\t\t\ttype: cursorType,\n\t\t\trotation: shape.rotation,\n\t\t})\n\t}\n\n\toverride onEnter = (info: TLPointingCropHandleInfo) => {\n\t\tthis.info = info\n\t\tconst selectedShape = this.editor.selectedShapes[0]\n\t\tif (!selectedShape) return\n\n\t\tthis.updateCursor(selectedShape)\n\t\tthis.editor.setCroppingId(selectedShape.id)\n\t}\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = () => {\n\t\tconst isDragging = this.editor.inputs.isDragging\n\n\t\tif (isDragging) {\n\t\t\tthis.parent.transition('cropping', {\n\t\t\t\t...this.info,\n\t\t\t\tonInteractionEnd: this.info.onInteractionEnd,\n\t\t\t})\n\t\t}\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.editor.setCroppingId(null)\n\t\t\tthis.parent.transition('idle', {})\n\t\t}\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onInterrupt = () => {\n\t\tthis.cancel()\n\t}\n\n\tprivate cancel() {\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.editor.setCroppingId(null)\n\t\t\tthis.parent.transition('idle', {})\n\t\t}\n\t}\n}\n"],
  "mappings": "AAEA,SAAS,iBAAiB;AAC1B,SAAS,qBAAqB;AAWvB,MAAM,2BAA2B,UAAU;AAAA,EACjD,OAAgB,KAAK;AAAA,EAEb,OAAO,CAAC;AAAA,EAER,aAAa,OAAgB;AACpC,UAAM,aAAa,cAAc,KAAK,KAAK,MAAO;AAClD,SAAK,OAAO,UAAU;AAAA,MACrB,MAAM;AAAA,MACN,UAAU,MAAM;AAAA,IACjB,CAAC;AAAA,EACF;AAAA,EAES,UAAU,CAAC,SAAmC;AACtD,SAAK,OAAO;AACZ,UAAM,gBAAgB,KAAK,OAAO,eAAe,CAAC;AAClD,QAAI,CAAC;AAAe;AAEpB,SAAK,aAAa,aAAa;AAC/B,SAAK,OAAO,cAAc,cAAc,EAAE;AAAA,EAC3C;AAAA,EAES,gBAAkD,MAAM;AAChE,UAAM,aAAa,KAAK,OAAO,OAAO;AAEtC,QAAI,YAAY;AACf,WAAK,OAAO,WAAW,YAAY;AAAA,QAClC,GAAG,KAAK;AAAA,QACR,kBAAkB,KAAK,KAAK;AAAA,MAC7B,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAES,cAA8C,MAAM;AAC5D,QAAI,KAAK,KAAK,kBAAkB;AAC/B,WAAK,OAAO,gBAAgB,KAAK,KAAK,kBAAkB,KAAK,IAAI;AAAA,IAClE,OAAO;AACN,WAAK,OAAO,cAAc,IAAI;AAC9B,WAAK,OAAO,WAAW,QAAQ,CAAC,CAAC;AAAA,IAClC;AAAA,EACD;AAAA,EAES,WAAwC,MAAM;AACtD,SAAK,OAAO;AAAA,EACb;AAAA,EAES,aAA4C,MAAM;AAC1D,SAAK,OAAO;AAAA,EACb;AAAA,EAES,cAAc,MAAM;AAC5B,SAAK,OAAO;AAAA,EACb;AAAA,EAEQ,SAAS;AAChB,QAAI,KAAK,KAAK,kBAAkB;AAC/B,WAAK,OAAO,gBAAgB,KAAK,KAAK,kBAAkB,KAAK,IAAI;AAAA,IAClE,OAAO;AACN,WAAK,OAAO,cAAc,IAAI;AAC9B,WAAK,OAAO,WAAW,QAAQ,CAAC,CAAC;AAAA,IAClC;AAAA,EACD;AACD;",
  "names": []
}
