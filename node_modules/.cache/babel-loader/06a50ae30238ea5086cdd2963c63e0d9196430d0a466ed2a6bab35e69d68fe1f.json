{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { useEditor } from \"@tldraw/editor\";\nimport classNames from \"classnames\";\nimport { useValue } from \"signia-react\";\nimport { useBreakpoint } from \"../../hooks/useBreakpoint.mjs\";\nimport { useTranslation } from \"../../hooks/useTranslation/useTranslation.mjs\";\nimport { Button } from \"../primitives/Button.mjs\";\nvar NOT_LOCKABLE_TOOLS = [\"select\", \"hand\", \"draw\", \"eraser\", \"text\", \"zoom\", \"laser\"];\nfunction ToggleToolLockedButton(_ref) {\n  var activeToolId = _ref.activeToolId;\n  var editor = useEditor();\n  var breakpoint = useBreakpoint();\n  var msg = useTranslation();\n  var isToolLocked = useValue(\"is tool locked\", function () {\n    return editor.instanceState.isToolLocked;\n  }, [editor]);\n  if (!activeToolId || NOT_LOCKABLE_TOOLS.includes(activeToolId)) return null;\n  return /* @__PURE__ */jsx(Button, {\n    title: msg(\"action.toggle-tool-lock\"),\n    className: classNames(\"tlui-toolbar__lock-button\", {\n      \"tlui-toolbar__lock-button__mobile\": breakpoint < 5\n    }),\n    icon: isToolLocked ? \"lock\" : \"unlock\",\n    onClick: function onClick() {\n      return editor.updateInstanceState({\n        isToolLocked: !isToolLocked\n      });\n    },\n    smallIcon: true\n  });\n}\nexport { ToggleToolLockedButton };","map":{"version":3,"names":["jsx","useEditor","classNames","useValue","useBreakpoint","useTranslation","Button","NOT_LOCKABLE_TOOLS","ToggleToolLockedButton","_ref","activeToolId","editor","breakpoint","msg","isToolLocked","instanceState","includes","title","className","icon","onClick","updateInstanceState","smallIcon"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/Toolbar/ToggleToolLockedButton.tsx"],"sourcesContent":["import { useEditor } from '@tldraw/editor'\nimport classNames from 'classnames'\nimport { useValue } from 'signia-react'\nimport { useBreakpoint } from '../../hooks/useBreakpoint'\nimport { useTranslation } from '../../hooks/useTranslation/useTranslation'\nimport { Button } from '../primitives/Button'\n\ninterface ToggleToolLockedButtonProps {\n\tactiveToolId?: string\n}\n\nconst NOT_LOCKABLE_TOOLS = ['select', 'hand', 'draw', 'eraser', 'text', 'zoom', 'laser']\n\nexport function ToggleToolLockedButton({ activeToolId }: ToggleToolLockedButtonProps) {\n\tconst editor = useEditor()\n\tconst breakpoint = useBreakpoint()\n\tconst msg = useTranslation()\n\n\tconst isToolLocked = useValue('is tool locked', () => editor.instanceState.isToolLocked, [editor])\n\n\tif (!activeToolId || NOT_LOCKABLE_TOOLS.includes(activeToolId)) return null\n\n\treturn (\n\t\t<Button\n\t\t\ttitle={msg('action.toggle-tool-lock')}\n\t\t\tclassName={classNames('tlui-toolbar__lock-button', {\n\t\t\t\t'tlui-toolbar__lock-button__mobile': breakpoint < 5,\n\t\t\t})}\n\t\t\ticon={isToolLocked ? 'lock' : 'unlock'}\n\t\t\tonClick={() => editor.updateInstanceState({ isToolLocked: !isToolLocked })}\n\t\t\tsmallIcon\n\t\t/>\n\t)\n}\n"],"mappings":"AAuBE,SAAAA,GAAA;AAvBF,SAASC,SAAA,QAAiB;AAC1B,OAAOC,UAAA,MAAgB;AACvB,SAASC,QAAA,QAAgB;AACzB,SAASC,aAAA,QAAqB;AAC9B,SAASC,cAAA,QAAsB;AAC/B,SAASC,MAAA,QAAc;AAMvB,IAAMC,kBAAA,GAAqB,CAAC,UAAU,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,OAAO;AAEhF,SAASC,uBAAAC,IAAA,EAAsE;EAAA,IAA7CC,YAAA,GAAAD,IAAA,CAAAC,YAAA;EACxC,IAAMC,MAAA,GAASV,SAAA,CAAU;EACzB,IAAMW,UAAA,GAAaR,aAAA,CAAc;EACjC,IAAMS,GAAA,GAAMR,cAAA,CAAe;EAE3B,IAAMS,YAAA,GAAeX,QAAA,CAAS,kBAAkB;IAAA,OAAMQ,MAAA,CAAOI,aAAA,CAAcD,YAAA;EAAA,GAAc,CAACH,MAAM,CAAC;EAEjG,IAAI,CAACD,YAAA,IAAgBH,kBAAA,CAAmBS,QAAA,CAASN,YAAY,GAAG,OAAO;EAEvE,OACC,eAAAV,GAAA,CAACM,MAAA;IACAW,KAAA,EAAOJ,GAAA,CAAI,yBAAyB;IACpCK,SAAA,EAAWhB,UAAA,CAAW,6BAA6B;MAClD,qCAAqCU,UAAA,GAAa;IACnD,CAAC;IACDO,IAAA,EAAML,YAAA,GAAe,SAAS;IAC9BM,OAAA,EAAS,SAAAA,QAAA;MAAA,OAAMT,MAAA,CAAOU,mBAAA,CAAoB;QAAEP,YAAA,EAAc,CAACA;MAAa,CAAC;IAAA;IACzEQ,SAAA,EAAS;EAAA,CACV;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}