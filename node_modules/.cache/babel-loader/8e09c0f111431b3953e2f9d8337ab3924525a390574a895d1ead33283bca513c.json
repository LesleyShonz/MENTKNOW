{"ast":null,"code":"function getDataBlocksLength(buffer, offset) {\n  var length = 0;\n  while (buffer[offset + length]) {\n    length += buffer[offset + length] + 1;\n  }\n  return length + 1;\n}\nfunction isGIF(buffer) {\n  var enc = new TextDecoder(\"ascii\");\n  var header = enc.decode(buffer.slice(0, 3));\n  return header === \"GIF\";\n}\nfunction isAnimated(buffer) {\n  var view = new Uint8Array(buffer);\n  var hasColorTable, colorTableSize;\n  var offset = 0;\n  var imagesCount = 0;\n  if (!isGIF(buffer)) {\n    return false;\n  }\n  hasColorTable = view[10] & 128;\n  colorTableSize = view[10] & 7;\n  offset += 6;\n  offset += 7;\n  offset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;\n  while (imagesCount < 2 && offset < view.length) {\n    switch (view[offset]) {\n      case 44:\n        imagesCount += 1;\n        hasColorTable = view[offset + 9] & 128;\n        colorTableSize = view[offset + 9] & 7;\n        offset += 10;\n        offset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;\n        offset += getDataBlocksLength(view, offset + 1) + 1;\n        break;\n      case 33:\n        offset += 2;\n        offset += getDataBlocksLength(view, offset);\n        break;\n      case 59:\n        offset = view.length;\n        break;\n      default:\n        offset = view.length;\n        break;\n    }\n  }\n  return imagesCount > 1;\n}\nexport { isAnimated, isGIF };","map":{"version":3,"names":["getDataBlocksLength","buffer","offset","length","isGIF","enc","TextDecoder","header","decode","slice","isAnimated","view","Uint8Array","hasColorTable","colorTableSize","imagesCount","Math","pow"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/is-gif-animated.ts"],"sourcesContent":["// =========================\n// Modified code originally from <https://github.com/qzb/is-animated>\n//\n// # [MIT License](https://spdx.org/licenses/MIT)\n//\n// Copyright (c) 2016 Józef Sokołowski <j.k.sokolowski@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// =========================\n\n/** Returns total length of data blocks sequence */\nfunction getDataBlocksLength(buffer: Uint8Array, offset: number): number {\n\tlet length = 0\n\n\twhile (buffer[offset + length]) {\n\t\tlength += buffer[offset + length] + 1\n\t}\n\n\treturn length + 1\n}\n\n/**\n * Checks if buffer contains GIF image\n *\n * @public\n */\nexport function isGIF(buffer: ArrayBuffer): boolean {\n\tconst enc = new TextDecoder('ascii')\n\tconst header = enc.decode(buffer.slice(0, 3))\n\treturn header === 'GIF'\n}\n\n/**\n * Checks if buffer contains animated GIF image\n *\n * @public\n */\nexport function isAnimated(buffer: ArrayBuffer): boolean {\n\tconst view = new Uint8Array(buffer)\n\tlet hasColorTable, colorTableSize\n\tlet offset = 0\n\tlet imagesCount = 0\n\n\t// Check if this is this image has valid GIF header.\n\t// If not return false. Chrome, FF and IE doesn't handle GIFs with invalid version.\n\tif (!isGIF(buffer)) {\n\t\treturn false\n\t}\n\n\t// Skip header, logical screen descriptor and global color table\n\n\thasColorTable = view[10] & 0x80 // 0b10000000\n\tcolorTableSize = view[10] & 0x07 // 0b00000111\n\n\toffset += 6 // skip header\n\toffset += 7 // skip logical screen descriptor\n\toffset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0 // skip global color table\n\n\t// Find if there is more than one image descriptor\n\n\twhile (imagesCount < 2 && offset < view.length) {\n\t\tswitch (view[offset]) {\n\t\t\t// Image descriptor block. According to specification there could be any\n\t\t\t// number of these blocks (even zero). When there is more than one image\n\t\t\t// descriptor browsers will display animation (they shouldn't when there\n\t\t\t// is no delays defined, but they do it anyway).\n\t\t\tcase 0x2c:\n\t\t\t\timagesCount += 1\n\n\t\t\t\thasColorTable = view[offset + 9] & 0x80 // 0b10000000\n\t\t\t\tcolorTableSize = view[offset + 9] & 0x07 // 0b00000111\n\n\t\t\t\toffset += 10 // skip image descriptor\n\t\t\t\toffset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0 // skip local color table\n\t\t\t\toffset += getDataBlocksLength(view, offset + 1) + 1 // skip image data\n\n\t\t\t\tbreak\n\n\t\t\t// Skip all extension blocks. In theory this \"plain text extension\" blocks\n\t\t\t// could be frames of animation, but no browser renders them.\n\t\t\tcase 0x21:\n\t\t\t\toffset += 2 // skip introducer and label\n\t\t\t\toffset += getDataBlocksLength(view, offset) // skip this block and following data blocks\n\n\t\t\t\tbreak\n\n\t\t\t// Stop processing on trailer block,\n\t\t\t// all data after this point will is ignored by decoders\n\t\t\tcase 0x3b:\n\t\t\t\toffset = view.length // fast forward to end of buffer\n\t\t\t\tbreak\n\n\t\t\t// Oops! This GIF seems to be invalid\n\t\t\tdefault:\n\t\t\t\t// fast forward to end of buffer\n\t\t\t\toffset = view.length\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\treturn imagesCount > 1\n}\n"],"mappings":"AAeA,SAASA,oBAAoBC,MAAA,EAAoBC,MAAA,EAAwB;EACxE,IAAIC,MAAA,GAAS;EAEb,OAAOF,MAAA,CAAOC,MAAA,GAASC,MAAM,GAAG;IAC/BA,MAAA,IAAUF,MAAA,CAAOC,MAAA,GAASC,MAAM,IAAI;EACrC;EAEA,OAAOA,MAAA,GAAS;AACjB;AAOO,SAASC,MAAMH,MAAA,EAA8B;EACnD,IAAMI,GAAA,GAAM,IAAIC,WAAA,CAAY,OAAO;EACnC,IAAMC,MAAA,GAASF,GAAA,CAAIG,MAAA,CAAOP,MAAA,CAAOQ,KAAA,CAAM,GAAG,CAAC,CAAC;EAC5C,OAAOF,MAAA,KAAW;AACnB;AAOO,SAASG,WAAWT,MAAA,EAA8B;EACxD,IAAMU,IAAA,GAAO,IAAIC,UAAA,CAAWX,MAAM;EAClC,IAAIY,aAAA,EAAeC,cAAA;EACnB,IAAIZ,MAAA,GAAS;EACb,IAAIa,WAAA,GAAc;EAIlB,IAAI,CAACX,KAAA,CAAMH,MAAM,GAAG;IACnB,OAAO;EACR;EAIAY,aAAA,GAAgBF,IAAA,CAAK,EAAE,IAAI;EAC3BG,cAAA,GAAiBH,IAAA,CAAK,EAAE,IAAI;EAE5BT,MAAA,IAAU;EACVA,MAAA,IAAU;EACVA,MAAA,IAAUW,aAAA,GAAgB,IAAIG,IAAA,CAAKC,GAAA,CAAI,GAAGH,cAAA,GAAiB,CAAC,IAAI;EAIhE,OAAOC,WAAA,GAAc,KAAKb,MAAA,GAASS,IAAA,CAAKR,MAAA,EAAQ;IAC/C,QAAQQ,IAAA,CAAKT,MAAM;MAKlB,KAAK;QACJa,WAAA,IAAe;QAEfF,aAAA,GAAgBF,IAAA,CAAKT,MAAA,GAAS,CAAC,IAAI;QACnCY,cAAA,GAAiBH,IAAA,CAAKT,MAAA,GAAS,CAAC,IAAI;QAEpCA,MAAA,IAAU;QACVA,MAAA,IAAUW,aAAA,GAAgB,IAAIG,IAAA,CAAKC,GAAA,CAAI,GAAGH,cAAA,GAAiB,CAAC,IAAI;QAChEZ,MAAA,IAAUF,mBAAA,CAAoBW,IAAA,EAAMT,MAAA,GAAS,CAAC,IAAI;QAElD;MAID,KAAK;QACJA,MAAA,IAAU;QACVA,MAAA,IAAUF,mBAAA,CAAoBW,IAAA,EAAMT,MAAM;QAE1C;MAID,KAAK;QACJA,MAAA,GAASS,IAAA,CAAKR,MAAA;QACd;MAGD;QAECD,MAAA,GAASS,IAAA,CAAKR,MAAA;QACd;IACF;EACD;EAEA,OAAOY,WAAA,GAAc;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}