{"ast":null,"code":"import crc32 from \"crc/crc32\";\nfunction isPng(view, offset) {\n  if (view.getUint8(offset + 0) === 137 && view.getUint8(offset + 1) === 80 && view.getUint8(offset + 2) === 78 && view.getUint8(offset + 3) === 71 && view.getUint8(offset + 4) === 13 && view.getUint8(offset + 5) === 10 && view.getUint8(offset + 6) === 26 && view.getUint8(offset + 7) === 10) {\n    return true;\n  }\n  return false;\n}\nfunction getChunkType(view, offset) {\n  return [String.fromCharCode(view.getUint8(offset)), String.fromCharCode(view.getUint8(offset + 1)), String.fromCharCode(view.getUint8(offset + 2)), String.fromCharCode(view.getUint8(offset + 3))].join(\"\");\n}\nfunction crc(arrayBuffer) {\n  return crc32(arrayBuffer);\n}\nvar LEN_SIZE = 4;\nvar CRC_SIZE = 4;\nfunction readChunks(view) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var chunks = {};\n  if (!isPng(view, offset)) {\n    throw new Error(\"Not a PNG\");\n  }\n  offset += 8;\n  while (offset <= view.buffer.byteLength) {\n    var start = offset;\n    var len = view.getInt32(offset);\n    offset += 4;\n    var chunkType = getChunkType(view, offset);\n    if (chunkType === \"IDAT\" && chunks[chunkType]) {\n      offset += len + LEN_SIZE + CRC_SIZE;\n      continue;\n    }\n    if (chunkType === \"IEND\") {\n      break;\n    }\n    chunks[chunkType] = {\n      start: start,\n      dataOffset: offset + 4,\n      size: len\n    };\n    offset += len + LEN_SIZE + CRC_SIZE;\n  }\n  return chunks;\n}\nfunction parsePhys(view, offset) {\n  return {\n    ppux: view.getUint32(offset),\n    ppuy: view.getUint32(offset + 4),\n    unit: view.getUint8(offset + 4)\n  };\n}\nfunction findChunk(view, type) {\n  var chunks = readChunks(view);\n  return chunks[type];\n}\nfunction setPhysChunk(view) {\n  var dpr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  var offset = 46;\n  var size = 0;\n  var res1 = findChunk(view, \"pHYs\");\n  if (res1) {\n    offset = res1.start;\n    size = res1.size;\n  }\n  var res2 = findChunk(view, \"IDAT\");\n  if (res2) {\n    offset = res2.start;\n    size = 0;\n  }\n  var pHYsData = new ArrayBuffer(21);\n  var pHYsDataView = new DataView(pHYsData);\n  pHYsDataView.setUint32(0, 9);\n  pHYsDataView.setUint8(4, \"p\".charCodeAt(0));\n  pHYsDataView.setUint8(5, \"H\".charCodeAt(0));\n  pHYsDataView.setUint8(6, \"Y\".charCodeAt(0));\n  pHYsDataView.setUint8(7, \"s\".charCodeAt(0));\n  var DPI_96 = 2835.5;\n  pHYsDataView.setInt32(8, DPI_96 * dpr);\n  pHYsDataView.setInt32(12, DPI_96 * dpr);\n  pHYsDataView.setInt8(16, 1);\n  var crcBit = new Uint8Array(pHYsData.slice(4, 17));\n  pHYsDataView.setInt32(17, crc(crcBit));\n  var startBuf = view.buffer.slice(0, offset);\n  var endBuf = view.buffer.slice(offset + size);\n  return new Blob([startBuf, pHYsData, endBuf], options);\n}\nexport { crc, findChunk, isPng, parsePhys, readChunks, setPhysChunk };","map":{"version":3,"names":["crc32","isPng","view","offset","getUint8","getChunkType","String","fromCharCode","join","crc","arrayBuffer","LEN_SIZE","CRC_SIZE","readChunks","arguments","length","undefined","chunks","Error","buffer","byteLength","start","len","getInt32","chunkType","dataOffset","size","parsePhys","ppux","getUint32","ppuy","unit","findChunk","type","setPhysChunk","dpr","options","res1","res2","pHYsData","ArrayBuffer","pHYsDataView","DataView","setUint32","setUint8","charCodeAt","DPI_96","setInt32","setInt8","crcBit","Uint8Array","slice","startBuf","endBuf","Blob"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/png.ts"],"sourcesContent":["import crc32 from 'crc/crc32'\n\nexport function isPng(view: DataView, offset: number) {\n\tif (\n\t\tview.getUint8(offset + 0) === 0x89 &&\n\t\tview.getUint8(offset + 1) === 0x50 &&\n\t\tview.getUint8(offset + 2) === 0x4e &&\n\t\tview.getUint8(offset + 3) === 0x47 &&\n\t\tview.getUint8(offset + 4) === 0x0d &&\n\t\tview.getUint8(offset + 5) === 0x0a &&\n\t\tview.getUint8(offset + 6) === 0x1a &&\n\t\tview.getUint8(offset + 7) === 0x0a\n\t) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunction getChunkType(view: DataView, offset: number) {\n\treturn [\n\t\tString.fromCharCode(view.getUint8(offset)),\n\t\tString.fromCharCode(view.getUint8(offset + 1)),\n\t\tString.fromCharCode(view.getUint8(offset + 2)),\n\t\tString.fromCharCode(view.getUint8(offset + 3)),\n\t].join('')\n}\n\nexport function crc(arrayBuffer: ArrayBuffer) {\n\treturn crc32(arrayBuffer)\n}\n\nconst LEN_SIZE = 4\nconst CRC_SIZE = 4\n\nexport function readChunks(view: DataView, offset = 0) {\n\tconst chunks: Record<string, { dataOffset: number; size: number; start: number }> = {}\n\tif (!isPng(view, offset)) {\n\t\tthrow new Error('Not a PNG')\n\t}\n\toffset += 8\n\n\twhile (offset <= view.buffer.byteLength) {\n\t\tconst start = offset\n\t\tconst len = view.getInt32(offset)\n\t\toffset += 4\n\t\tconst chunkType = getChunkType(view, offset)\n\n\t\tif (chunkType === 'IDAT' && chunks[chunkType]) {\n\t\t\toffset += len + LEN_SIZE + CRC_SIZE\n\t\t\tcontinue\n\t\t}\n\n\t\tif (chunkType === 'IEND') {\n\t\t\tbreak\n\t\t}\n\n\t\tchunks[chunkType] = {\n\t\t\tstart,\n\t\t\tdataOffset: offset + 4,\n\t\t\tsize: len,\n\t\t}\n\t\toffset += len + LEN_SIZE + CRC_SIZE\n\t}\n\n\treturn chunks\n}\n\nexport function parsePhys(view: DataView, offset: number) {\n\treturn {\n\t\tppux: view.getUint32(offset),\n\t\tppuy: view.getUint32(offset + 4),\n\t\tunit: view.getUint8(offset + 4),\n\t}\n}\n\nexport function findChunk(view: DataView, type: string) {\n\tconst chunks = readChunks(view)\n\treturn chunks[type]\n}\n\nexport function setPhysChunk(view: DataView, dpr = 1, options?: BlobPropertyBag) {\n\tlet offset = 46\n\tlet size = 0\n\tconst res1 = findChunk(view, 'pHYs')\n\tif (res1) {\n\t\toffset = res1.start\n\t\tsize = res1.size\n\t}\n\n\tconst res2 = findChunk(view, 'IDAT')\n\tif (res2) {\n\t\toffset = res2.start\n\t\tsize = 0\n\t}\n\n\tconst pHYsData = new ArrayBuffer(21)\n\tconst pHYsDataView = new DataView(pHYsData)\n\n\tpHYsDataView.setUint32(0, 9)\n\n\tpHYsDataView.setUint8(4, 'p'.charCodeAt(0))\n\tpHYsDataView.setUint8(5, 'H'.charCodeAt(0))\n\tpHYsDataView.setUint8(6, 'Y'.charCodeAt(0))\n\tpHYsDataView.setUint8(7, 's'.charCodeAt(0))\n\n\tconst DPI_96 = 2835.5\n\n\tpHYsDataView.setInt32(8, DPI_96 * dpr)\n\tpHYsDataView.setInt32(12, DPI_96 * dpr)\n\tpHYsDataView.setInt8(16, 1)\n\n\tconst crcBit = new Uint8Array(pHYsData.slice(4, 17))\n\tpHYsDataView.setInt32(17, crc(crcBit))\n\n\tconst startBuf = view.buffer.slice(0, offset)\n\tconst endBuf = view.buffer.slice(offset + size)\n\n\treturn new Blob([startBuf, pHYsData, endBuf], options)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}