"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LiveCollaborators_exports = {};
__export(LiveCollaborators_exports, {
  LiveCollaborators: () => LiveCollaborators
});
module.exports = __toCommonJS(LiveCollaborators_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_react = require("react");
var import_signia_react = require("signia-react");
var import_constants = require("../constants");
var import_useEditor = require("../hooks/useEditor");
var import_useEditorComponents = require("../hooks/useEditorComponents");
var import_usePeerIds = require("../hooks/usePeerIds");
var import_usePresence = require("../hooks/usePresence");
const LiveCollaborators = (0, import_signia_react.track)(function Collaborators() {
  const peerIds = (0, import_usePeerIds.usePeerIds)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: peerIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Collaborator, { userId: id }, id)) });
});
const Collaborator = (0, import_signia_react.track)(function Collaborator2({ userId }) {
  const editor = (0, import_useEditor.useEditor)();
  const { viewportPageBounds, zoomLevel } = editor;
  const {
    CollaboratorBrush,
    CollaboratorScribble,
    CollaboratorCursor,
    CollaboratorHint,
    CollaboratorShapeIndicator
  } = (0, import_useEditorComponents.useEditorComponents)();
  const latestPresence = (0, import_usePresence.usePresence)(userId);
  const [isTimedOut, setIsTimedOut] = (0, import_react.useState)(false);
  const rLastSeen = (0, import_react.useRef)(-1);
  (0, import_react.useEffect)(() => {
    const interval = setInterval(() => {
      setIsTimedOut(Date.now() - rLastSeen.current > import_constants.COLLABORATOR_TIMEOUT);
    }, import_constants.COLLABORATOR_CHECK_INTERVAL);
    return () => clearInterval(interval);
  }, []);
  if (!latestPresence)
    return null;
  rLastSeen.current = latestPresence.lastActivityTimestamp;
  if (isTimedOut && editor.instanceState.followingUserId !== userId && !editor.instanceState.highlightedUserIds.includes(userId))
    return null;
  if (latestPresence.currentPageId !== editor.currentPageId)
    return null;
  const { brush, scribble, selectedIds, userName, cursor, color, chatMessage } = latestPresence;
  const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    brush && CollaboratorBrush ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CollaboratorBrush,
      {
        className: "tl-collaborator__brush",
        brush,
        color,
        opacity: 0.1
      },
      userId + "_brush"
    ) : null,
    isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CollaboratorCursor,
      {
        className: "tl-collaborator__cursor",
        point: cursor,
        color,
        zoom: zoomLevel,
        name: userName !== "New User" ? userName : null,
        chatMessage
      },
      userId + "_cursor"
    ) : CollaboratorHint ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CollaboratorHint,
      {
        className: "tl-collaborator__cursor-hint",
        point: cursor,
        color,
        zoom: zoomLevel,
        viewport: viewportPageBounds
      },
      userId + "_cursor_hint"
    ) : null,
    scribble && CollaboratorScribble ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CollaboratorScribble,
      {
        className: "tl-collaborator__scribble",
        scribble,
        color,
        zoom: zoomLevel,
        opacity: scribble.color === "laser" ? 0.5 : 0.1
      },
      userId + "_scribble"
    ) : null,
    CollaboratorShapeIndicator && selectedIds.map((shapeId) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CollaboratorShapeIndicator,
      {
        className: "tl-collaborator__shape-indicator",
        id: shapeId,
        color,
        opacity: 0.5
      },
      userId + "_" + shapeId
    ))
  ] });
});
//# sourceMappingURL=LiveCollaborators.js.map
