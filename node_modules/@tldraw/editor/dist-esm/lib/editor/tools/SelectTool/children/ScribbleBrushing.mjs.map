{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/tools/SelectTool/children/ScribbleBrushing.ts"],
  "sourcesContent": ["import { intersectLineSegmentPolyline, pointInPolygon } from '@tldraw/primitives'\nimport { TLScribble, TLShape, TLShapeId } from '@tldraw/tlschema'\nimport { ScribbleManager } from '../../../managers/ScribbleManager'\nimport { ShapeUtil } from '../../../shapes/ShapeUtil'\nimport { FrameShapeUtil } from '../../../shapes/frame/FrameShapeUtil'\nimport { GroupShapeUtil } from '../../../shapes/group/GroupShapeUtil'\nimport { TLEventHandlers } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\n\nexport class ScribbleBrushing extends StateNode {\n\tstatic override id = 'scribble_brushing'\n\n\thits = new Set<TLShapeId>()\n\n\tsize = 0\n\n\tscribble = {} as ScribbleManager\n\n\tinitialSelectedIds = new Set<TLShapeId>()\n\tnewlySelectedIds = new Set<TLShapeId>()\n\n\toverride onEnter = () => {\n\t\tthis.initialSelectedIds = new Set<TLShapeId>(\n\t\t\tthis.editor.inputs.shiftKey ? this.editor.selectedIds : []\n\t\t)\n\t\tthis.newlySelectedIds = new Set<TLShapeId>()\n\t\tthis.size = 0\n\t\tthis.hits.clear()\n\n\t\tthis.startScribble()\n\n\t\tthis.updateBrushSelection()\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.editor.setBrush(null)\n\t\t})\n\t}\n\n\toverride onExit = () => {\n\t\tthis.editor.setErasingIds([])\n\t\tthis.scribble.stop()\n\t}\n\n\toverride onPointerMove = () => {\n\t\tthis.updateBrushSelection()\n\t}\n\n\toverride onPointerUp = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onKeyDown = () => {\n\t\tthis.updateBrushSelection()\n\t}\n\n\toverride onKeyUp = () => {\n\t\tif (!this.editor.inputs.altKey) {\n\t\t\tthis.parent.transition('brushing', {})\n\t\t} else {\n\t\t\tthis.updateBrushSelection()\n\t\t}\n\t}\n\n\tprivate startScribble = () => {\n\t\tif (this.scribble.tick) {\n\t\t\tthis.editor.off('tick', this.scribble?.tick)\n\t\t}\n\n\t\tthis.scribble = new ScribbleManager({\n\t\t\tonUpdate: this.onScribbleUpdate,\n\t\t\tonComplete: this.onScribbleComplete,\n\t\t\tcolor: 'selection-stroke',\n\t\t\topacity: 0.32,\n\t\t\tsize: 12,\n\t\t})\n\n\t\tthis.editor.on('tick', this.scribble.tick)\n\t}\n\n\tprivate pushPointToScribble = () => {\n\t\tconst { x, y } = this.editor.inputs.currentPagePoint\n\t\tthis.scribble.addPoint(x, y)\n\t}\n\n\tprivate onScribbleUpdate = (scribble: TLScribble) => {\n\t\tthis.editor.setScribble(scribble)\n\t}\n\n\tprivate onScribbleComplete = () => {\n\t\tthis.editor.off('tick', this.scribble.tick)\n\t\tthis.editor.setScribble(null)\n\t}\n\n\tprivate updateBrushSelection() {\n\t\tconst {\n\t\t\tshapesArray,\n\t\t\tinputs: { originPagePoint, previousPagePoint, currentPagePoint },\n\t\t} = this.editor\n\n\t\tthis.pushPointToScribble()\n\n\t\tconst shapes = shapesArray\n\t\tlet shape: TLShape, util: ShapeUtil<TLShape>\n\n\t\tfor (let i = 0, n = shapes.length; i < n; i++) {\n\t\t\tshape = shapes[i]\n\t\t\tutil = this.editor.getShapeUtil(shape)\n\n\t\t\tif (\n\t\t\t\tthis.editor.isShapeOfType(shape, GroupShapeUtil) ||\n\t\t\t\tthis.newlySelectedIds.has(shape.id) ||\n\t\t\t\t(this.editor.isShapeOfType(shape, FrameShapeUtil) &&\n\t\t\t\t\tutil.hitTestPoint(shape, this.editor.getPointInShapeSpace(shape, originPagePoint))) ||\n\t\t\t\tthis.editor.isShapeOrAncestorLocked(shape)\n\t\t\t) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tutil.hitTestLineSegment(\n\t\t\t\t\tshape,\n\t\t\t\t\tthis.editor.getPointInShapeSpace(shape, previousPagePoint),\n\t\t\t\t\tthis.editor.getPointInShapeSpace(shape, currentPagePoint)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst outermostShape = this.editor.getOutermostSelectableShape(shape)\n\n\t\t\t\tconst pageMask = this.editor.getPageMaskById(outermostShape.id)\n\n\t\t\t\tif (pageMask) {\n\t\t\t\t\tconst intersection = intersectLineSegmentPolyline(\n\t\t\t\t\t\tpreviousPagePoint,\n\t\t\t\t\t\tcurrentPagePoint,\n\t\t\t\t\t\tpageMask\n\t\t\t\t\t)\n\n\t\t\t\t\tif (intersection !== null) {\n\t\t\t\t\t\tconst isInMask = pointInPolygon(currentPagePoint, pageMask)\n\t\t\t\t\t\tif (!isInMask) continue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.newlySelectedIds.add(outermostShape.id)\n\t\t\t}\n\t\t}\n\n\t\tthis.editor.setSelectedIds(\n\t\t\t[...new Set<TLShapeId>([...this.newlySelectedIds, ...this.initialSelectedIds])],\n\t\t\ttrue\n\t\t)\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\tprivate complete() {\n\t\tthis.parent.transition('idle', {})\n\t}\n\n\tprivate cancel() {\n\t\tthis.editor.setSelectedIds([...this.initialSelectedIds], true)\n\t\tthis.parent.transition('idle', {})\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
