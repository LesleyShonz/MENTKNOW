{
  "version": 3,
  "sources": ["../../../../../src/lib/editor/shapes/draw/DrawShapeUtil.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n\tBox2d,\n\tgetStrokeOutlinePoints,\n\tgetStrokePoints,\n\tlinesIntersect,\n\tpointInPolygon,\n\tsetStrokePointRadii,\n\ttoFixed,\n\tVec2d,\n\tVecLike,\n} from '@tldraw/primitives'\nimport { TLDrawShape, TLDrawShapeSegment } from '@tldraw/tlschema'\nimport { last, rng } from '@tldraw/utils'\nimport { SVGContainer } from '../../../components/SVGContainer'\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from '../../../utils/svg'\nimport { ShapeUtil, TLOnResizeHandler } from '../ShapeUtil'\nimport { STROKE_SIZES } from '../shared/default-shape-constants'\nimport { getShapeFillSvg, ShapeFill } from '../shared/ShapeFill'\nimport { TLExportColors } from '../shared/TLExportColors'\nimport { useForceSolid } from '../shared/useForceSolid'\nimport { getDrawShapeStrokeDashArray, getFreehandOptions, getPointsFromSegments } from './getPath'\n\n/** @public */\nexport class DrawShapeUtil extends ShapeUtil<TLDrawShape> {\n\tstatic override type = 'draw' as const\n\n\thideResizeHandles = (shape: TLDrawShape) => getIsDot(shape)\n\thideRotateHandle = (shape: TLDrawShape) => getIsDot(shape)\n\thideSelectionBoundsBg = (shape: TLDrawShape) => getIsDot(shape)\n\thideSelectionBoundsFg = (shape: TLDrawShape) => getIsDot(shape)\n\n\toverride defaultProps(): TLDrawShape['props'] {\n\t\treturn {\n\t\t\tsegments: [],\n\t\t\tcolor: 'black',\n\t\t\tfill: 'none',\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tisComplete: false,\n\t\t\tisClosed: false,\n\t\t\tisPen: false,\n\t\t}\n\t}\n\n\tisClosed = (shape: TLDrawShape) => shape.props.isClosed\n\n\tgetBounds(shape: TLDrawShape) {\n\t\treturn Box2d.FromPoints(this.outline(shape))\n\t}\n\n\tgetOutline(shape: TLDrawShape) {\n\t\treturn getPointsFromSegments(shape.props.segments)\n\t}\n\n\tgetCenter(shape: TLDrawShape): Vec2d {\n\t\treturn this.bounds(shape).center\n\t}\n\n\thitTestPoint(shape: TLDrawShape, point: VecLike): boolean {\n\t\tconst outline = this.outline(shape)\n\t\tconst zoomLevel = this.editor.zoomLevel\n\t\tconst offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel\n\n\t\tif (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {\n\t\t\tif (shape.props.segments[0].points.some((pt) => Vec2d.Dist(point, pt) < offsetDist * 1.5)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tif (this.isClosed(shape)) {\n\t\t\treturn pointInPolygon(point, outline)\n\t\t}\n\n\t\tif (this.bounds(shape).containsPoint(point)) {\n\t\t\tfor (let i = 0; i < outline.length; i++) {\n\t\t\t\tconst C = outline[i]\n\t\t\t\tconst D = outline[(i + 1) % outline.length]\n\n\t\t\t\tif (Vec2d.DistanceToLineSegment(C, D, point) < offsetDist) return true\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\thitTestLineSegment(shape: TLDrawShape, A: VecLike, B: VecLike): boolean {\n\t\tconst outline = this.outline(shape)\n\n\t\tif (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {\n\t\t\tconst zoomLevel = this.editor.zoomLevel\n\t\t\tconst offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel\n\n\t\t\tif (\n\t\t\t\tshape.props.segments[0].points.some(\n\t\t\t\t\t(pt) => Vec2d.DistanceToLineSegment(A, B, pt) < offsetDist * 1.5\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tif (this.isClosed(shape)) {\n\t\t\tfor (let i = 0; i < outline.length; i++) {\n\t\t\t\tconst C = outline[i]\n\t\t\t\tconst D = outline[(i + 1) % outline.length]\n\t\t\t\tif (linesIntersect(A, B, C, D)) return true\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < outline.length - 1; i++) {\n\t\t\t\tconst C = outline[i]\n\t\t\t\tconst D = outline[i + 1]\n\t\t\t\tif (linesIntersect(A, B, C, D)) return true\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\tcomponent(shape: TLDrawShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\n\t\tlet sw = strokeWidth\n\t\tif (\n\t\t\t!forceSolid &&\n\t\t\t!shape.props.isPen &&\n\t\t\tshape.props.dash === 'draw' &&\n\t\t\tallPointsFromSegments.length === 1\n\t\t) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid)\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\n\t\tconst solidStrokePath =\n\t\t\tstrokePoints.length > 1\n\t\t\t\t? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\t\t\t\t: getDot(allPointsFromSegments[0], sw)\n\n\t\tif ((!forceSolid && shape.props.dash === 'draw') || strokePoints.length < 2) {\n\t\t\tsetStrokePointRadii(strokePoints, options)\n\t\t\tconst strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options)\n\n\t\t\treturn (\n\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t<ShapeFill\n\t\t\t\t\t\tfill={shape.props.isClosed ? shape.props.fill : 'none'}\n\t\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\t\td={solidStrokePath}\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={getSvgPathFromStroke(strokeOutlinePoints, true)}\n\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\tfill={`var(--palette-${shape.props.color})`}\n\t\t\t\t\t/>\n\t\t\t\t</SVGContainer>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t<ShapeFill\n\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\tfill={shape.props.isClosed ? shape.props.fill : 'none'}\n\t\t\t\t\td={solidStrokePath}\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\td={solidStrokePath}\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke={`var(--palette-${shape.props.color})`}\n\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\tstrokeDasharray={getDrawShapeStrokeDashArray(shape, strokeWidth)}\n\t\t\t\t\tstrokeDashoffset=\"0\"\n\t\t\t\t/>\n\t\t\t</SVGContainer>\n\t\t)\n\t}\n\n\tindicator(shape: TLDrawShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tlet sw = strokeWidth\n\t\tif (\n\t\t\t!forceSolid &&\n\t\t\t!shape.props.isPen &&\n\t\t\tshape.props.dash === 'draw' &&\n\t\t\tallPointsFromSegments.length === 1\n\t\t) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, true)\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\t\tconst solidStrokePath =\n\t\t\tstrokePoints.length > 1\n\t\t\t\t? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\t\t\t\t: getDot(allPointsFromSegments[0], sw)\n\n\t\treturn <path d={solidStrokePath} />\n\t}\n\n\ttoSvg(shape: TLDrawShape, _font: string | undefined, colors: TLExportColors) {\n\t\tconst { color } = shape.props\n\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\n\t\tlet sw = strokeWidth\n\t\tif (!shape.props.isPen && shape.props.dash === 'draw' && allPointsFromSegments.length === 1) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, false)\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\t\tconst solidStrokePath =\n\t\t\tstrokePoints.length > 1\n\t\t\t\t? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\t\t\t\t: getDot(allPointsFromSegments[0], sw)\n\n\t\tlet foregroundPath: SVGPathElement | undefined\n\n\t\tif (shape.props.dash === 'draw' || strokePoints.length < 2) {\n\t\t\tsetStrokePointRadii(strokePoints, options)\n\t\t\tconst strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options)\n\n\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\tp.setAttribute('d', getSvgPathFromStroke(strokeOutlinePoints, true))\n\t\t\tp.setAttribute('fill', colors.fill[color])\n\t\t\tp.setAttribute('stroke-linecap', 'round')\n\n\t\t\tforegroundPath = p\n\t\t} else {\n\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\tp.setAttribute('d', solidStrokePath)\n\t\t\tp.setAttribute('stroke', colors.fill[color])\n\t\t\tp.setAttribute('fill', 'none')\n\t\t\tp.setAttribute('stroke-linecap', 'round')\n\t\t\tp.setAttribute('stroke-width', strokeWidth.toString())\n\t\t\tp.setAttribute('stroke-dasharray', getDrawShapeStrokeDashArray(shape, strokeWidth))\n\t\t\tp.setAttribute('stroke-dashoffset', '0')\n\n\t\t\tforegroundPath = p\n\t\t}\n\n\t\tconst fillPath = getShapeFillSvg({\n\t\t\tfill: shape.props.isClosed ? shape.props.fill : 'none',\n\t\t\td: solidStrokePath,\n\t\t\tcolor: shape.props.color,\n\t\t\tcolors,\n\t\t})\n\n\t\tif (fillPath) {\n\t\t\tconst g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\t\t\tg.appendChild(fillPath)\n\t\t\tg.appendChild(foregroundPath)\n\t\t\treturn g\n\t\t}\n\n\t\treturn foregroundPath\n\t}\n\n\toverride onResize: TLOnResizeHandler<TLDrawShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst newSegments: TLDrawShapeSegment[] = []\n\n\t\tfor (const segment of shape.props.segments) {\n\t\t\tnewSegments.push({\n\t\t\t\t...segment,\n\t\t\t\tpoints: segment.points.map(({ x, y, z }) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: toFixed(scaleX * x),\n\t\t\t\t\t\ty: toFixed(scaleY * y),\n\t\t\t\t\t\tz,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t})\n\t\t}\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\tsegments: newSegments,\n\t\t\t},\n\t\t}\n\t}\n\n\texpandSelectionOutlinePx(shape: TLDrawShape): number {\n\t\tconst multiplier = shape.props.dash === 'draw' ? 1.6 : 1\n\t\treturn (STROKE_SIZES[shape.props.size] * multiplier) / 2\n\t}\n}\n\nfunction getDot(point: VecLike, sw: number) {\n\tconst r = (sw + 1) * 0.5\n\treturn `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${\n\t\tr * 2\n\t},0`\n}\n\nfunction getIsDot(shape: TLDrawShape) {\n\treturn shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2\n}\n"],
  "mappings": "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",
  "names": []
}
