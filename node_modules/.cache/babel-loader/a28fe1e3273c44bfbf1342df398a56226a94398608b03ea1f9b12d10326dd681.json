{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"persistenceKey\", \"sessionId\"];\nimport { useEffect, useState } from \"react\";\nimport { uniqueId } from \"../utils/data.mjs\";\nimport { TLLocalSyncClient } from \"../utils/sync/TLLocalSyncClient.mjs\";\nimport { useTLStore } from \"./useTLStore.mjs\";\nfunction useLocalStore(_ref) {\n  var _state$storeWithStatu;\n  var persistenceKey = _ref.persistenceKey,\n    sessionId = _ref.sessionId,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var store = useTLStore(rest);\n  useEffect(function () {\n    var id = uniqueId();\n    if (!persistenceKey) {\n      setState({\n        id: id,\n        storeWithStatus: {\n          status: \"not-synced\",\n          store: store\n        }\n      });\n      return;\n    }\n    setState({\n      id: id,\n      storeWithStatus: {\n        status: \"loading\"\n      }\n    });\n    var setStoreWithStatus = function setStoreWithStatus(storeWithStatus) {\n      setState(function (prev) {\n        if ((prev === null || prev === void 0 ? void 0 : prev.id) === id) {\n          return {\n            id: id,\n            storeWithStatus: storeWithStatus\n          };\n        }\n        return prev;\n      });\n    };\n    var client = new TLLocalSyncClient(store, {\n      sessionId: sessionId,\n      persistenceKey: persistenceKey,\n      onLoad: function onLoad() {\n        setStoreWithStatus({\n          store: store,\n          status: \"synced-local\"\n        });\n      },\n      onLoadError: function onLoadError(err) {\n        setStoreWithStatus({\n          status: \"error\",\n          error: err\n        });\n      }\n    });\n    return function () {\n      setState(function (prevState) {\n        return (prevState === null || prevState === void 0 ? void 0 : prevState.id) === id ? null : prevState;\n      });\n      client.close();\n    };\n  }, [persistenceKey, store, sessionId]);\n  return (_state$storeWithStatu = state === null || state === void 0 ? void 0 : state.storeWithStatus) !== null && _state$storeWithStatu !== void 0 ? _state$storeWithStatu : {\n    status: \"loading\"\n  };\n}\nexport { useLocalStore };","map":{"version":3,"names":["useEffect","useState","uniqueId","TLLocalSyncClient","useTLStore","useLocalStore","_ref","_state$storeWithStatu","persistenceKey","sessionId","rest","_objectWithoutProperties","_excluded","_useState","_useState2","_slicedToArray","state","setState","store","id","storeWithStatus","status","setStoreWithStatus","prev","client","onLoad","onLoadError","err","error","prevState","close"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/hooks/useLocalStore.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { TLStoreOptions } from '../config/createTLStore'\nimport { uniqueId } from '../utils/data'\nimport { TLStoreWithStatus } from '../utils/sync/StoreWithStatus'\nimport { TLLocalSyncClient } from '../utils/sync/TLLocalSyncClient'\nimport { useTLStore } from './useTLStore'\n\n/** @internal */\nexport function useLocalStore({\n\tpersistenceKey,\n\tsessionId,\n\t...rest\n}: { persistenceKey?: string; sessionId?: string } & TLStoreOptions): TLStoreWithStatus {\n\tconst [state, setState] = useState<{ id: string; storeWithStatus: TLStoreWithStatus } | null>(\n\t\tnull\n\t)\n\tconst store = useTLStore(rest)\n\n\tuseEffect(() => {\n\t\tconst id = uniqueId()\n\n\t\tif (!persistenceKey) {\n\t\t\tsetState({\n\t\t\t\tid,\n\t\t\t\tstoreWithStatus: { status: 'not-synced', store },\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tsetState({\n\t\t\tid,\n\t\t\tstoreWithStatus: { status: 'loading' },\n\t\t})\n\n\t\tconst setStoreWithStatus = (storeWithStatus: TLStoreWithStatus) => {\n\t\t\tsetState((prev) => {\n\t\t\t\tif (prev?.id === id) {\n\t\t\t\t\treturn { id, storeWithStatus }\n\t\t\t\t}\n\t\t\t\treturn prev\n\t\t\t})\n\t\t}\n\n\t\tconst client = new TLLocalSyncClient(store, {\n\t\t\tsessionId,\n\t\t\tpersistenceKey,\n\t\t\tonLoad() {\n\t\t\t\tsetStoreWithStatus({ store, status: 'synced-local' })\n\t\t\t},\n\t\t\tonLoadError(err: any) {\n\t\t\t\tsetStoreWithStatus({ status: 'error', error: err })\n\t\t\t},\n\t\t})\n\n\t\treturn () => {\n\t\t\tsetState((prevState) => (prevState?.id === id ? null : prevState))\n\t\t\tclient.close()\n\t\t}\n\t}, [persistenceKey, store, sessionId])\n\n\treturn state?.storeWithStatus ?? { status: 'loading' }\n}\n"],"mappings":";;;AAAA,SAASA,SAAA,EAAWC,QAAA,QAAgB;AAEpC,SAASC,QAAA,QAAgB;AAEzB,SAASC,iBAAA,QAAyB;AAClC,SAASC,UAAA,QAAkB;AAGpB,SAASC,cAAAC,IAAA,EAIwE;EAAA,IAAAC,qBAAA;EAAA,IAHvFC,cAAA,GAAAF,IAAA,CAAAE,cAAA;IACAC,SAAA,GAAAH,IAAA,CAAAG,SAAA;IACGC,IAAA,GAAAC,wBAAA,CAAAL,IAAA,EAAAM,SAAA;EAEH,IAAAC,SAAA,GAA0BZ,QAAA,CACzB,IACD;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAFOG,KAAA,GAAAF,UAAA;IAAOG,QAAQ,GAAAH,UAAA;EAGtB,IAAMI,KAAA,GAAQd,UAAA,CAAWM,IAAI;EAE7BV,SAAA,CAAU,YAAM;IACf,IAAMmB,EAAA,GAAKjB,QAAA,CAAS;IAEpB,IAAI,CAACM,cAAA,EAAgB;MACpBS,QAAA,CAAS;QACRE,EAAA,EAAAA,EAAA;QACAC,eAAA,EAAiB;UAAEC,MAAA,EAAQ;UAAcH,KAAA,EAAAA;QAAM;MAChD,CAAC;MACD;IACD;IAEAD,QAAA,CAAS;MACRE,EAAA,EAAAA,EAAA;MACAC,eAAA,EAAiB;QAAEC,MAAA,EAAQ;MAAU;IACtC,CAAC;IAED,IAAMC,kBAAA,GAAqB,SAArBA,mBAAsBF,eAAA,EAAuC;MAClEH,QAAA,CAAS,UAACM,IAAA,EAAS;QAClB,IAAI,CAAAA,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMJ,EAAA,MAAOA,EAAA,EAAI;UACpB,OAAO;YAAEA,EAAA,EAAAA,EAAA;YAAIC,eAAA,EAAAA;UAAgB;QAC9B;QACA,OAAOG,IAAA;MACR,CAAC;IACF;IAEA,IAAMC,MAAA,GAAS,IAAIrB,iBAAA,CAAkBe,KAAA,EAAO;MAC3CT,SAAA,EAAAA,SAAA;MACAD,cAAA,EAAAA,cAAA;MACAiB,MAAA,WAAAA,OAAA,EAAS;QACRH,kBAAA,CAAmB;UAAEJ,KAAA,EAAAA,KAAA;UAAOG,MAAA,EAAQ;QAAe,CAAC;MACrD;MACAK,WAAA,WAAAA,YAAYC,GAAA,EAAU;QACrBL,kBAAA,CAAmB;UAAED,MAAA,EAAQ;UAASO,KAAA,EAAOD;QAAI,CAAC;MACnD;IACD,CAAC;IAED,OAAO,YAAM;MACZV,QAAA,CAAS,UAACY,SAAA;QAAA,OAAe,CAAAA,SAAA,aAAAA,SAAA,uBAAAA,SAAA,CAAWV,EAAA,MAAOA,EAAA,GAAK,OAAOU,SAAU;MAAA;MACjEL,MAAA,CAAOM,KAAA,CAAM;IACd;EACD,GAAG,CAACtB,cAAA,EAAgBU,KAAA,EAAOT,SAAS,CAAC;EAErC,QAAAF,qBAAA,GAAOS,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOI,eAAA,cAAAb,qBAAA,cAAAA,qBAAA,GAAmB;IAAEc,MAAA,EAAQ;EAAU;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}