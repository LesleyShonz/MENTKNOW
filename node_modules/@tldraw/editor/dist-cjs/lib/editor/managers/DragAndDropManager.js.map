{
  "version": 3,
  "sources": ["../../../../src/lib/editor/managers/DragAndDropManager.ts"],
  "sourcesContent": ["import { TLShape, TLShapeId } from '@tldraw/tlschema'\nimport { compact } from '@tldraw/utils'\nimport type { Editor } from '../Editor'\n\nconst LAG_DURATION = 100\n\nexport class DragAndDropManager {\n\tconstructor(public editor: Editor) {\n\t\teditor.disposables.add(this.dispose)\n\t}\n\n\tprevDroppingShapeId: TLShapeId | null = null\n\tcurrDroppingShapeId: TLShapeId | null = null\n\n\tdroppingNodeTimer: ReturnType<typeof setTimeout> | null = null\n\n\tupdateDroppingNode(movingShapes: TLShape[], cb: () => void) {\n\t\tif (this.droppingNodeTimer === null) {\n\t\t\tconst { currentPagePoint } = this.editor.inputs\n\t\t\tthis.currDroppingShapeId =\n\t\t\t\tthis.editor.getDroppingShape(currentPagePoint, movingShapes)?.id ?? null\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION * 10, cb)\n\t\t} else if (this.editor.inputs.pointerVelocity.len() > 0.5) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION, cb)\n\t\t}\n\t}\n\n\tprivate setDragTimer(movingShapes: TLShape[], duration: number, cb: () => void) {\n\t\tthis.droppingNodeTimer = setTimeout(() => {\n\t\t\tthis.editor.batch(() => {\n\t\t\t\tthis.handleDrag(movingShapes, cb)\n\t\t\t})\n\t\t\tthis.droppingNodeTimer = null\n\t\t}, duration)\n\t}\n\n\tprivate handleDrag(movingShapes: TLShape[], cb?: () => void) {\n\t\tconst { currentPagePoint } = this.editor.inputs\n\n\t\tmovingShapes = compact(movingShapes.map((shape) => this.editor.getShapeById(shape.id)))\n\n\t\tconst currDroppingShapeId =\n\t\t\tthis.editor.getDroppingShape(currentPagePoint, movingShapes)?.id ?? null\n\n\t\tif (currDroppingShapeId !== this.currDroppingShapeId) {\n\t\t\tthis.prevDroppingShapeId = this.currDroppingShapeId\n\t\t\tthis.currDroppingShapeId = currDroppingShapeId\n\t\t}\n\n\t\tconst { prevDroppingShapeId } = this\n\n\t\tif (currDroppingShapeId === prevDroppingShapeId) {\n\t\t\t// we already called onDragShapesOver on this node, no need to do it again\n\t\t\treturn\n\t\t}\n\n\t\tconst prevDroppingShape = prevDroppingShapeId && this.editor.getShapeById(prevDroppingShapeId)\n\t\tconst nextDroppingShape = currDroppingShapeId && this.editor.getShapeById(currDroppingShapeId)\n\n\t\t// Even if we don't have a next dropping shape id (i.e. if we're dropping\n\t\t// onto the page) set the prev to the current, to avoid repeat calls to\n\t\t// the previous parent's onDragShapesOut\n\t\tthis.prevDroppingShapeId = this.currDroppingShapeId\n\n\t\tif (prevDroppingShape) {\n\t\t\tthis.editor.getShapeUtil(prevDroppingShape).onDragShapesOut?.(prevDroppingShape, movingShapes)\n\t\t}\n\n\t\tif (nextDroppingShape) {\n\t\t\tconst res = this.editor\n\t\t\t\t.getShapeUtil(nextDroppingShape)\n\t\t\t\t.onDragShapesOver?.(nextDroppingShape, movingShapes)\n\n\t\t\tif (res && res.shouldHint) {\n\t\t\t\tthis.editor.setHintingIds([nextDroppingShape.id])\n\t\t\t}\n\t\t} else {\n\t\t\t// If we're dropping onto the page, then clear hinting ids\n\t\t\tthis.editor.setHintingIds([])\n\t\t}\n\n\t\tcb?.()\n\t}\n\n\tdropShapes(shapes: TLShape[]) {\n\t\tconst { currDroppingShapeId } = this\n\n\t\tthis.handleDrag(shapes)\n\n\t\tif (currDroppingShapeId) {\n\t\t\tconst shape = this.editor.getShapeById(currDroppingShapeId)\n\t\t\tif (!shape) return\n\t\t\tthis.editor.getShapeUtil(shape).onDropShapesOver?.(shape, shapes)\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.prevDroppingShapeId = null\n\t\tthis.currDroppingShapeId = null\n\n\t\tif (this.droppingNodeTimer !== null) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t}\n\n\t\tthis.droppingNodeTimer = null\n\t\tthis.editor.setHintingIds([])\n\t}\n\n\tdispose = () => {\n\t\tthis.clear()\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAwB;AAGxB,MAAM,eAAe;AAEd,MAAM,mBAAmB;AAAA,EAC/B,YAAmB,QAAgB;AAAhB;AAClB,WAAO,YAAY,IAAI,KAAK,OAAO;AAAA,EACpC;AAAA,EAEA,sBAAwC;AAAA,EACxC,sBAAwC;AAAA,EAExC,oBAA0D;AAAA,EAE1D,mBAAmB,cAAyB,IAAgB;AAC3D,QAAI,KAAK,sBAAsB,MAAM;AACpC,YAAM,EAAE,iBAAiB,IAAI,KAAK,OAAO;AACzC,WAAK,sBACJ,KAAK,OAAO,iBAAiB,kBAAkB,YAAY,GAAG,MAAM;AACrE,WAAK,aAAa,cAAc,eAAe,IAAI,EAAE;AAAA,IACtD,WAAW,KAAK,OAAO,OAAO,gBAAgB,IAAI,IAAI,KAAK;AAC1D,oBAAc,KAAK,iBAAiB;AACpC,WAAK,aAAa,cAAc,cAAc,EAAE;AAAA,IACjD;AAAA,EACD;AAAA,EAEQ,aAAa,cAAyB,UAAkB,IAAgB;AAC/E,SAAK,oBAAoB,WAAW,MAAM;AACzC,WAAK,OAAO,MAAM,MAAM;AACvB,aAAK,WAAW,cAAc,EAAE;AAAA,MACjC,CAAC;AACD,WAAK,oBAAoB;AAAA,IAC1B,GAAG,QAAQ;AAAA,EACZ;AAAA,EAEQ,WAAW,cAAyB,IAAiB;AAC5D,UAAM,EAAE,iBAAiB,IAAI,KAAK,OAAO;AAEzC,uBAAe,sBAAQ,aAAa,IAAI,CAAC,UAAU,KAAK,OAAO,aAAa,MAAM,EAAE,CAAC,CAAC;AAEtF,UAAM,sBACL,KAAK,OAAO,iBAAiB,kBAAkB,YAAY,GAAG,MAAM;AAErE,QAAI,wBAAwB,KAAK,qBAAqB;AACrD,WAAK,sBAAsB,KAAK;AAChC,WAAK,sBAAsB;AAAA,IAC5B;AAEA,UAAM,EAAE,oBAAoB,IAAI;AAEhC,QAAI,wBAAwB,qBAAqB;AAEhD;AAAA,IACD;AAEA,UAAM,oBAAoB,uBAAuB,KAAK,OAAO,aAAa,mBAAmB;AAC7F,UAAM,oBAAoB,uBAAuB,KAAK,OAAO,aAAa,mBAAmB;AAK7F,SAAK,sBAAsB,KAAK;AAEhC,QAAI,mBAAmB;AACtB,WAAK,OAAO,aAAa,iBAAiB,EAAE,kBAAkB,mBAAmB,YAAY;AAAA,IAC9F;AAEA,QAAI,mBAAmB;AACtB,YAAM,MAAM,KAAK,OACf,aAAa,iBAAiB,EAC9B,mBAAmB,mBAAmB,YAAY;AAEpD,UAAI,OAAO,IAAI,YAAY;AAC1B,aAAK,OAAO,cAAc,CAAC,kBAAkB,EAAE,CAAC;AAAA,MACjD;AAAA,IACD,OAAO;AAEN,WAAK,OAAO,cAAc,CAAC,CAAC;AAAA,IAC7B;AAEA,SAAK;AAAA,EACN;AAAA,EAEA,WAAW,QAAmB;AAC7B,UAAM,EAAE,oBAAoB,IAAI;AAEhC,SAAK,WAAW,MAAM;AAEtB,QAAI,qBAAqB;AACxB,YAAM,QAAQ,KAAK,OAAO,aAAa,mBAAmB;AAC1D,UAAI,CAAC;AAAO;AACZ,WAAK,OAAO,aAAa,KAAK,EAAE,mBAAmB,OAAO,MAAM;AAAA,IACjE;AAAA,EACD;AAAA,EAEA,QAAQ;AACP,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAE3B,QAAI,KAAK,sBAAsB,MAAM;AACpC,oBAAc,KAAK,iBAAiB;AAAA,IACrC;AAEA,SAAK,oBAAoB;AACzB,SAAK,OAAO,cAAc,CAAC,CAAC;AAAA,EAC7B;AAAA,EAEA,UAAU,MAAM;AACf,SAAK,MAAM;AAAA,EACZ;AACD;",
  "names": []
}
