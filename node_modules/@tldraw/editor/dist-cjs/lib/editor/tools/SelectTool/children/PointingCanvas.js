"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PointingCanvas_exports = {};
__export(PointingCanvas_exports, {
  PointingCanvas: () => PointingCanvas
});
module.exports = __toCommonJS(PointingCanvas_exports);
var import_tlschema = require("@tldraw/tlschema");
var import_StateNode = require("../../StateNode");
class PointingCanvas extends import_StateNode.StateNode {
  static id = "pointing_canvas";
  onEnter = () => {
    const { inputs } = this.editor;
    if (!inputs.shiftKey) {
      if (this.editor.selectedIds.length > 0) {
        this.editor.mark("selecting none");
        this.editor.selectNone();
      }
    }
  };
  _clickWasInsideFocusedGroup() {
    const { focusLayerId, inputs } = this.editor;
    if (!(0, import_tlschema.isShapeId)(focusLayerId)) {
      return false;
    }
    const groupShape = this.editor.getShapeById(focusLayerId);
    if (!groupShape) {
      return false;
    }
    const clickPoint = this.editor.getPointInShapeSpace(groupShape, inputs.currentPagePoint);
    const util = this.editor.getShapeUtil(groupShape);
    return util.hitTestPoint(groupShape, clickPoint);
  }
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("brushing", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.parent.transition("idle", {});
  };
  complete() {
    const { shiftKey } = this.editor.inputs;
    if (!shiftKey) {
      this.editor.selectNone();
      if (!this._clickWasInsideFocusedGroup()) {
        this.editor.setFocusLayer(null);
      }
    }
    this.parent.transition("idle", {});
  }
}
//# sourceMappingURL=PointingCanvas.js.map
