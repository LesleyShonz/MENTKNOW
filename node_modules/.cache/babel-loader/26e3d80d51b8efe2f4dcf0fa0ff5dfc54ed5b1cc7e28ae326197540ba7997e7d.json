{"ast":null,"code":"import _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Vec2d } from \"@tldraw/primitives\";\nvar ScribbleManager = /*#__PURE__*/function () {\n  function ScribbleManager(opts) {\n    var _this = this;\n    _classCallCheck(this, ScribbleManager);\n    // Scribble properties\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"points\", void 0);\n    _defineProperty(this, \"size\", void 0);\n    _defineProperty(this, \"color\", void 0);\n    _defineProperty(this, \"opacity\", void 0);\n    _defineProperty(this, \"delay\", void 0);\n    _defineProperty(this, \"timeoutMs\", 0);\n    _defineProperty(this, \"delayRemaining\", 0);\n    // Callbacks\n    _defineProperty(this, \"onUpdate\", void 0);\n    _defineProperty(this, \"onComplete\", void 0);\n    // Internal state\n    _defineProperty(this, \"prev\", null);\n    _defineProperty(this, \"next\", null);\n    _defineProperty(this, \"resume\", function () {\n      _this.state = \"active\";\n    });\n    _defineProperty(this, \"pause\", function () {\n      _this.state = \"starting\";\n    });\n    /**\n     * Start stopping the scribble. The scribble won't be removed until its last point is cleared.\n     *\n     * @public\n     */\n    _defineProperty(this, \"stop\", function () {\n      _this.delayRemaining = Math.min(_this.delayRemaining, 200);\n      _this.state = \"stopping\";\n    });\n    /**\n     * Set the scribble's next point.\n     *\n     * @param point - The point to add.\n     * @public\n     */\n    _defineProperty(this, \"addPoint\", function (x, y) {\n      var prev = _this.prev;\n      var point = {\n        x: x,\n        y: y,\n        z: 0.5\n      };\n      if (prev && Vec2d.Dist(prev, point) < 1) return;\n      _this.next = point;\n    });\n    _defineProperty(this, \"tick\", function (elapsed) {\n      _this.timeoutMs += elapsed;\n      if (_this.delayRemaining > 0) {\n        _this.delayRemaining = Math.max(0, _this.delayRemaining - elapsed);\n      }\n      if (_this.timeoutMs >= 16) {\n        _this.timeoutMs = 0;\n      }\n      var timeoutMs = _this.timeoutMs,\n        state = _this.state,\n        prev = _this.prev,\n        next = _this.next,\n        points = _this.points;\n      switch (state) {\n        case \"active\":\n          {\n            if (next && next !== prev) {\n              _this.prev = next;\n              points.push(next);\n              if (_this.delayRemaining === 0) {\n                if (points.length > 8) {\n                  points.shift();\n                }\n              }\n              _this.updateScribble();\n            } else {\n              if (timeoutMs === 0) {\n                if (points.length > 1) {\n                  points.shift();\n                  _this.updateScribble();\n                } else {\n                  _this.delayRemaining = _this.delay;\n                }\n              }\n            }\n            break;\n          }\n        case \"stopping\":\n          {\n            if (_this.delayRemaining === 0) {\n              if (timeoutMs === 0) {\n                if (points.length === 1) {\n                  _this.state = \"paused\";\n                  _this.onComplete();\n                  return;\n                }\n                _this.size *= 0.9;\n                points.shift();\n                _this.updateScribble();\n              }\n            }\n            break;\n          }\n        case \"paused\":\n          {\n            break;\n          }\n      }\n    });\n    var _opts$size = opts.size,\n      size = _opts$size === void 0 ? 20 : _opts$size,\n      _opts$color = opts.color,\n      color = _opts$color === void 0 ? \"accent\" : _opts$color,\n      _opts$opacity = opts.opacity,\n      opacity = _opts$opacity === void 0 ? 0.8 : _opts$opacity,\n      _opts$delay = opts.delay,\n      delay = _opts$delay === void 0 ? 0 : _opts$delay,\n      onComplete = opts.onComplete,\n      onUpdate = opts.onUpdate;\n    this.onUpdate = onUpdate;\n    this.onComplete = onComplete;\n    this.size = size;\n    this.color = color;\n    this.delay = delay;\n    this.opacity = opacity;\n    this.points = [];\n    this.state = \"starting\";\n    this.prev = null;\n    this.next = null;\n    this.delayRemaining = this.delay;\n    this.resume();\n  }\n  _createClass(ScribbleManager, [{\n    key: \"getScribble\",\n    value:\n    /**\n     * Get the current TLScribble object from the scribble manager.\n     *\n     * @public\n     */\n    function getScribble() {\n      return {\n        state: this.state,\n        size: this.size,\n        color: this.color,\n        opacity: this.opacity,\n        delay: this.delay,\n        points: _toConsumableArray(this.points)\n      };\n    }\n  }, {\n    key: \"updateScribble\",\n    value: function updateScribble() {\n      this.onUpdate(this.getScribble());\n    }\n  }]);\n  return ScribbleManager;\n}();\nexport { ScribbleManager };","map":{"version":3,"names":["Vec2d","ScribbleManager","opts","_this","_classCallCheck","_defineProperty","state","delayRemaining","Math","min","x","y","prev","point","z","Dist","next","elapsed","timeoutMs","max","points","push","length","shift","updateScribble","delay","onComplete","size","_opts$size","_opts$color","color","_opts$opacity","opacity","_opts$delay","onUpdate","resume","_createClass","key","value","getScribble","_toConsumableArray"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/managers/ScribbleManager.ts"],"sourcesContent":["import { Vec2d, VecLike } from '@tldraw/primitives'\nimport { TLScribble, Vec2dModel } from '@tldraw/tlschema'\nimport { TLTickEvent } from '../types/event-types'\n\nexport class ScribbleManager implements TLScribble {\n\t// Scribble properties\n\tstate\n\tpoints\n\tsize\n\tcolor\n\topacity\n\tdelay\n\n\ttimeoutMs = 0\n\tdelayRemaining = 0\n\n\t// Callbacks\n\tprivate onUpdate: (scribble: TLScribble) => void\n\tprivate onComplete: () => void\n\n\t// Internal state\n\tprivate prev: VecLike | null = null\n\tprivate next: VecLike | null = null\n\n\tconstructor(opts: {\n\t\tonUpdate: (scribble: TLScribble) => void\n\t\tonComplete: () => void\n\t\tsize?: TLScribble['size']\n\t\tcolor?: TLScribble['color']\n\t\topacity?: TLScribble['opacity']\n\t\tdelay?: TLScribble['delay']\n\t}) {\n\t\tconst { size = 20, color = 'accent', opacity = 0.8, delay = 0, onComplete, onUpdate } = opts\n\n\t\tthis.onUpdate = onUpdate\n\t\tthis.onComplete = onComplete\n\t\tthis.size = size\n\t\tthis.color = color\n\t\tthis.delay = delay\n\t\tthis.opacity = opacity\n\t\tthis.points = [] as Vec2dModel[]\n\t\tthis.state = 'starting' as TLScribble['state']\n\n\t\tthis.prev = null\n\t\tthis.next = null\n\n\t\tthis.delayRemaining = this.delay\n\n\t\tthis.resume()\n\t}\n\n\tresume = () => {\n\t\tthis.state = 'active'\n\t}\n\n\tpause = () => {\n\t\tthis.state = 'starting'\n\t}\n\n\t/**\n\t * Start stopping the scribble. The scribble won't be removed until its last point is cleared.\n\t *\n\t * @public\n\t */\n\tstop = () => {\n\t\tthis.delayRemaining = Math.min(this.delayRemaining, 200)\n\t\tthis.state = 'stopping'\n\t}\n\n\t/**\n\t * Set the scribble's next point.\n\t *\n\t * @param point - The point to add.\n\t * @public\n\t */\n\taddPoint = (x: number, y: number) => {\n\t\tconst { prev } = this\n\t\tconst point = { x, y, z: 0.5 }\n\t\tif (prev && Vec2d.Dist(prev, point) < 1) return\n\t\tthis.next = point\n\t}\n\n\t/**\n\t * Get the current TLScribble object from the scribble manager.\n\t *\n\t * @public\n\t */\n\tgetScribble(): TLScribble {\n\t\treturn {\n\t\t\tstate: this.state,\n\t\t\tsize: this.size,\n\t\t\tcolor: this.color,\n\t\t\topacity: this.opacity,\n\t\t\tdelay: this.delay,\n\t\t\tpoints: [...this.points],\n\t\t}\n\t}\n\n\tprivate updateScribble() {\n\t\tthis.onUpdate(this.getScribble())\n\t}\n\n\ttick: TLTickEvent = (elapsed) => {\n\t\tthis.timeoutMs += elapsed\n\n\t\tif (this.delayRemaining > 0) {\n\t\t\tthis.delayRemaining = Math.max(0, this.delayRemaining - elapsed)\n\t\t}\n\n\t\tif (this.timeoutMs >= 16) {\n\t\t\tthis.timeoutMs = 0\n\t\t}\n\n\t\tconst { timeoutMs, state, prev, next, points } = this\n\n\t\tswitch (state) {\n\t\t\tcase 'active': {\n\t\t\t\tif (next && next !== prev) {\n\t\t\t\t\tthis.prev = next\n\t\t\t\t\tpoints.push(next)\n\n\t\t\t\t\tif (this.delayRemaining === 0) {\n\t\t\t\t\t\tif (points.length > 8) {\n\t\t\t\t\t\t\tpoints.shift()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateScribble()\n\t\t\t\t} else {\n\t\t\t\t\t// While not moving, shrink the scribble from the start\n\t\t\t\t\tif (timeoutMs === 0) {\n\t\t\t\t\t\tif (points.length > 1) {\n\t\t\t\t\t\t\tpoints.shift()\n\t\t\t\t\t\t\tthis.updateScribble()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.delayRemaining = this.delay\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'stopping': {\n\t\t\t\tif (this.delayRemaining === 0) {\n\t\t\t\t\tif (timeoutMs === 0) {\n\t\t\t\t\t\t// If the scribble is down to one point, we're done!\n\t\t\t\t\t\tif (points.length === 1) {\n\t\t\t\t\t\t\tthis.state = 'paused'\n\t\t\t\t\t\t\tthis.onComplete()\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Drop the scribble's size\n\t\t\t\t\t\tthis.size *= 0.9\n\n\t\t\t\t\t\t// Drop the scribble's first point (its tail)\n\t\t\t\t\t\tpoints.shift()\n\n\t\t\t\t\t\t// otherwise, update the scribble\n\t\t\t\t\t\tthis.updateScribble()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'paused': {\n\t\t\t\t// Nothing to do while paused.\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}