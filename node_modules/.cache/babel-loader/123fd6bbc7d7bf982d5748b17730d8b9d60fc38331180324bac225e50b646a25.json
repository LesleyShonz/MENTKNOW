{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { useTranslation } from \"../../hooks/useTranslation/useTranslation.mjs\";\nimport { Icon } from \"./Icon.mjs\";\nvar Input = React.forwardRef(function Input2(_ref, ref) {\n  var className = _ref.className,\n    label = _ref.label,\n    icon = _ref.icon,\n    iconLeft = _ref.iconLeft,\n    _ref$autoselect = _ref.autoselect,\n    autoselect = _ref$autoselect === void 0 ? false : _ref$autoselect,\n    _ref$autofocus = _ref.autofocus,\n    autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n    defaultValue = _ref.defaultValue,\n    placeholder = _ref.placeholder,\n    onComplete = _ref.onComplete,\n    onValueChange = _ref.onValueChange,\n    onCancel = _ref.onCancel,\n    onBlur = _ref.onBlur,\n    _ref$shouldManuallyMa = _ref.shouldManuallyMaintainScrollPositionWhenFocused,\n    shouldManuallyMaintainScrollPositionWhenFocused = _ref$shouldManuallyMa === void 0 ? false : _ref$shouldManuallyMa,\n    children = _ref.children,\n    value = _ref.value;\n  var rInputRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return rInputRef.current;\n  });\n  var msg = useTranslation();\n  var rInitialValue = React.useRef(defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"\");\n  var rCurrentValue = React.useRef(defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"\");\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isFocused = _React$useState2[0],\n    setIsFocused = _React$useState2[1];\n  var handleFocus = React.useCallback(function (e) {\n    setIsFocused(true);\n    var elm = e.currentTarget;\n    rCurrentValue.current = elm.value;\n    requestAnimationFrame(function () {\n      if (autoselect) {\n        elm.select();\n      }\n    });\n  }, [autoselect]);\n  var handleChange = React.useCallback(function (e) {\n    var value2 = e.currentTarget.value;\n    rCurrentValue.current = value2;\n    onValueChange === null || onValueChange === void 0 || onValueChange(value2);\n  }, [onValueChange]);\n  var handleKeyUp = React.useCallback(function (e) {\n    switch (e.key) {\n      case \"Enter\":\n        {\n          e.currentTarget.blur();\n          e.stopPropagation();\n          onComplete === null || onComplete === void 0 || onComplete(e.currentTarget.value);\n          break;\n        }\n      case \"Escape\":\n        {\n          e.currentTarget.value = rInitialValue.current;\n          e.currentTarget.blur();\n          e.stopPropagation();\n          onCancel === null || onCancel === void 0 || onCancel(e.currentTarget.value);\n          break;\n        }\n    }\n  }, [onComplete, onCancel]);\n  var handleBlur = React.useCallback(function (e) {\n    setIsFocused(false);\n    var value2 = e.currentTarget.value;\n    onBlur === null || onBlur === void 0 || onBlur(value2);\n  }, [onBlur]);\n  React.useEffect(function () {\n    var visualViewport = window.visualViewport;\n    if (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {\n      var onViewportChange = function onViewportChange() {\n        var _rInputRef$current;\n        (_rInputRef$current = rInputRef.current) === null || _rInputRef$current === void 0 || _rInputRef$current.scrollIntoView({\n          block: \"center\"\n        });\n      };\n      visualViewport.addEventListener(\"resize\", onViewportChange);\n      visualViewport.addEventListener(\"scroll\", onViewportChange);\n      requestAnimationFrame(function () {\n        var _rInputRef$current2;\n        (_rInputRef$current2 = rInputRef.current) === null || _rInputRef$current2 === void 0 || _rInputRef$current2.scrollIntoView({\n          block: \"center\"\n        });\n      });\n      return function () {\n        visualViewport.removeEventListener(\"resize\", onViewportChange);\n        visualViewport.removeEventListener(\"scroll\", onViewportChange);\n      };\n    }\n  }, [isFocused, shouldManuallyMaintainScrollPositionWhenFocused]);\n  return /* @__PURE__ */jsxs(\"div\", {\n    draggable: false,\n    className: \"tlui-input__wrapper\",\n    children: [children, label && /* @__PURE__ */jsx(\"label\", {\n      children: msg(label)\n    }), iconLeft && /* @__PURE__ */jsx(Icon, {\n      icon: iconLeft,\n      className: \"tlui-icon-left\",\n      small: true\n    }), /* @__PURE__ */jsx(\"input\", {\n      ref: rInputRef,\n      className: classNames(\"tlui-input\", className),\n      type: \"text\",\n      defaultValue: defaultValue,\n      onKeyUp: handleKeyUp,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      autoFocus: autofocus,\n      placeholder: placeholder,\n      value: value\n    }), icon && /* @__PURE__ */jsx(Icon, {\n      icon: icon,\n      small: !!label\n    })]\n  });\n});\nexport { Input };","map":{"version":3,"names":["jsx","jsxs","classNames","React","useTranslation","Icon","Input","forwardRef","Input2","_ref","ref","className","label","icon","iconLeft","_ref$autoselect","autoselect","_ref$autofocus","autofocus","defaultValue","placeholder","onComplete","onValueChange","onCancel","onBlur","_ref$shouldManuallyMa","shouldManuallyMaintainScrollPositionWhenFocused","children","value","rInputRef","useRef","useImperativeHandle","current","msg","rInitialValue","rCurrentValue","_React$useState","useState","_React$useState2","_slicedToArray","isFocused","setIsFocused","handleFocus","useCallback","e","elm","currentTarget","requestAnimationFrame","select","handleChange","value2","handleKeyUp","key","blur","stopPropagation","handleBlur","useEffect","visualViewport","window","onViewportChange","_rInputRef$current","scrollIntoView","block","addEventListener","_rInputRef$current2","removeEventListener","draggable","small","type","onKeyUp","onChange","onFocus","autoFocus"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/primitives/Input.tsx"],"sourcesContent":["import classNames from 'classnames'\nimport * as React from 'react'\nimport { TLUiTranslationKey } from '../../hooks/useTranslation/TLUiTranslationKey'\nimport { useTranslation } from '../../hooks/useTranslation/useTranslation'\nimport { TLUiIconType } from '../../icon-types'\nimport { Icon } from './Icon'\n\n/** @public */\nexport interface TLUiInputProps {\n\tdisabled?: boolean\n\tlabel?: TLUiTranslationKey\n\ticon?: TLUiIconType\n\ticonLeft?: TLUiIconType\n\tautofocus?: boolean\n\tautoselect?: boolean\n\tchildren?: any\n\tdefaultValue?: string\n\tplaceholder?: string\n\tonComplete?: (value: string) => void\n\tonValueChange?: (value: string) => void\n\tonCancel?: (value: string) => void\n\tonBlur?: (value: string) => void\n\tclassName?: string\n\t/**\n\t * Usually on iOS when you focus an input, the browser will adjust the viewport to bring the input\n\t * into view. Sometimes this doesn't work properly though - for example, if the input is newly\n\t * created, iOS seems to have a hard time adjusting the viewport for it. This prop allows you to\n\t * opt-in to some extra code to manually bring the input into view when the visual viewport of the\n\t * browser changes, but we don't want to use it everywhere because generally the native behavior\n\t * looks nicer in scenarios where it's sufficient.\n\t */\n\tshouldManuallyMaintainScrollPositionWhenFocused?: boolean\n\tvalue?: string\n}\n\n/** @public */\nexport const Input = React.forwardRef<HTMLInputElement, TLUiInputProps>(function Input(\n\t{\n\t\tclassName,\n\t\tlabel,\n\t\ticon,\n\t\ticonLeft,\n\t\tautoselect = false,\n\t\tautofocus = false,\n\t\tdefaultValue,\n\t\tplaceholder,\n\t\tonComplete,\n\t\tonValueChange,\n\t\tonCancel,\n\t\tonBlur,\n\t\tshouldManuallyMaintainScrollPositionWhenFocused = false,\n\t\tchildren,\n\t\tvalue,\n\t},\n\tref\n) {\n\tconst rInputRef = React.useRef<HTMLInputElement>(null)\n\n\t// combine rInputRef and ref\n\tReact.useImperativeHandle(ref, () => rInputRef.current as HTMLInputElement)\n\n\tconst msg = useTranslation()\n\tconst rInitialValue = React.useRef<string>(defaultValue ?? '')\n\tconst rCurrentValue = React.useRef<string>(defaultValue ?? '')\n\n\tconst [isFocused, setIsFocused] = React.useState(false)\n\tconst handleFocus = React.useCallback(\n\t\t(e: React.FocusEvent<HTMLInputElement>) => {\n\t\t\tsetIsFocused(true)\n\t\t\tconst elm = e.currentTarget as HTMLInputElement\n\t\t\trCurrentValue.current = elm.value\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tif (autoselect) {\n\t\t\t\t\telm.select()\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t[autoselect]\n\t)\n\n\tconst handleChange = React.useCallback(\n\t\t(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = e.currentTarget.value\n\t\t\trCurrentValue.current = value\n\t\t\tonValueChange?.(value)\n\t\t},\n\t\t[onValueChange]\n\t)\n\n\tconst handleKeyUp = React.useCallback(\n\t\t(e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\t\tswitch (e.key) {\n\t\t\t\tcase 'Enter': {\n\t\t\t\t\te.currentTarget.blur()\n\t\t\t\t\te.stopPropagation()\n\t\t\t\t\tonComplete?.(e.currentTarget.value)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'Escape': {\n\t\t\t\t\te.currentTarget.value = rInitialValue.current\n\t\t\t\t\te.currentTarget.blur()\n\t\t\t\t\te.stopPropagation()\n\t\t\t\t\tonCancel?.(e.currentTarget.value)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[onComplete, onCancel]\n\t)\n\n\tconst handleBlur = React.useCallback(\n\t\t(e: React.FocusEvent<HTMLInputElement>) => {\n\t\t\tsetIsFocused(false)\n\t\t\tconst value = e.currentTarget.value\n\t\t\tonBlur?.(value)\n\t\t},\n\t\t[onBlur]\n\t)\n\n\tReact.useEffect(() => {\n\t\tconst visualViewport = window.visualViewport\n\t\tif (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {\n\t\t\tconst onViewportChange = () => {\n\t\t\t\trInputRef.current?.scrollIntoView({ block: 'center' })\n\t\t\t}\n\t\t\tvisualViewport.addEventListener('resize', onViewportChange)\n\t\t\tvisualViewport.addEventListener('scroll', onViewportChange)\n\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\trInputRef.current?.scrollIntoView({ block: 'center' })\n\t\t\t})\n\n\t\t\treturn () => {\n\t\t\t\tvisualViewport.removeEventListener('resize', onViewportChange)\n\t\t\t\tvisualViewport.removeEventListener('scroll', onViewportChange)\n\t\t\t}\n\t\t}\n\t}, [isFocused, shouldManuallyMaintainScrollPositionWhenFocused])\n\n\treturn (\n\t\t<div draggable={false} className=\"tlui-input__wrapper\">\n\t\t\t{children}\n\t\t\t{label && <label>{msg(label)}</label>}\n\t\t\t{iconLeft && <Icon icon={iconLeft} className=\"tlui-icon-left\" small />}\n\t\t\t<input\n\t\t\t\tref={rInputRef}\n\t\t\t\tclassName={classNames('tlui-input', className)}\n\t\t\t\ttype=\"text\"\n\t\t\t\tdefaultValue={defaultValue}\n\t\t\t\tonKeyUp={handleKeyUp}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={handleFocus}\n\t\t\t\tonBlur={handleBlur}\n\t\t\t\tautoFocus={autofocus}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t\t{icon && <Icon icon={icon} small={!!label} />}\n\t\t</div>\n\t)\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}