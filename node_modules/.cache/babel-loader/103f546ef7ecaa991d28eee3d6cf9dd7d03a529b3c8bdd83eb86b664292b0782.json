{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"initialData\", \"defaultName\"];\nimport { Store } from \"@tldraw/store\";\nimport { createTLSchema } from \"@tldraw/tlschema\";\nimport { checkShapesAndAddCore } from \"./defaultShapes.mjs\";\nfunction createTLStore(_ref) {\n  var initialData = _ref.initialData,\n    _ref$defaultName = _ref.defaultName,\n    defaultName = _ref$defaultName === void 0 ? \"\" : _ref$defaultName,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var schema = \"schema\" in rest ? rest.schema : createTLSchema({\n    shapes: shapesArrayToShapeMap(checkShapesAndAddCore(rest.shapes))\n  });\n  return new Store({\n    schema: schema,\n    initialData: initialData,\n    props: {\n      defaultName: defaultName\n    }\n  });\n}\nfunction shapesArrayToShapeMap(shapes) {\n  return Object.fromEntries(shapes.map(function (s) {\n    return [s.type, s];\n  }));\n}\nexport { createTLStore };","map":{"version":3,"names":["Store","createTLSchema","checkShapesAndAddCore","createTLStore","_ref","initialData","_ref$defaultName","defaultName","rest","_objectWithoutProperties","_excluded","schema","shapes","shapesArrayToShapeMap","props","Object","fromEntries","map","s","type"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/config/createTLStore.ts"],"sourcesContent":["import { HistoryEntry, Store, StoreSchema, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStore, TLStoreProps, createTLSchema } from '@tldraw/tlschema'\nimport { checkShapesAndAddCore } from './defaultShapes'\nimport { AnyTLShapeInfo, TLShapeInfo } from './defineShape'\n\n/** @public */\nexport type TLStoreOptions = {\n\tinitialData?: StoreSnapshot<TLRecord>\n\tdefaultName?: string\n} & ({ shapes: readonly AnyTLShapeInfo[] } | { schema: StoreSchema<TLRecord, TLStoreProps> })\n\n/** @public */\nexport type TLStoreEventInfo = HistoryEntry<TLRecord>\n\n/**\n * A helper for creating a TLStore. Custom shapes cannot override default shapes.\n *\n * @param opts - Options for creating the store.\n *\n * @public */\nexport function createTLStore({ initialData, defaultName = '', ...rest }: TLStoreOptions): TLStore {\n\tconst schema =\n\t\t'schema' in rest\n\t\t\t? rest.schema\n\t\t\t: createTLSchema({ shapes: shapesArrayToShapeMap(checkShapesAndAddCore(rest.shapes)) })\n\treturn new Store({\n\t\tschema,\n\t\tinitialData,\n\t\tprops: {\n\t\t\tdefaultName,\n\t\t},\n\t})\n}\n\nfunction shapesArrayToShapeMap(shapes: TLShapeInfo[]) {\n\treturn Object.fromEntries(shapes.map((s) => [s.type, s]))\n}\n"],"mappings":";;AAAA,SAAuBA,KAAA,QAAyC;AAChE,SAA0CC,cAAA,QAAsB;AAChE,SAASC,qBAAA,QAA6B;AAkB/B,SAASC,cAAAC,IAAA,EAAmF;EAAA,IAAnEC,WAAA,GAAAD,IAAA,CAAAC,WAAA;IAAAC,gBAAA,GAAAF,IAAA,CAAaG,WAAA;IAAAA,WAAA,GAAAD,gBAAA,cAAc,KAAAA,gBAAA;IAAOE,IAAA,GAAAC,wBAAA,CAAAL,IAAA,EAAAM,SAAA;EACjE,IAAMC,MAAA,GACL,YAAYH,IAAA,GACTA,IAAA,CAAKG,MAAA,GACLV,cAAA,CAAe;IAAEW,MAAA,EAAQC,qBAAA,CAAsBX,qBAAA,CAAsBM,IAAA,CAAKI,MAAM,CAAC;EAAE,CAAC;EACxF,OAAO,IAAIZ,KAAA,CAAM;IAChBW,MAAA,EAAAA,MAAA;IACAN,WAAA,EAAAA,WAAA;IACAS,KAAA,EAAO;MACNP,WAAA,EAAAA;IACD;EACD,CAAC;AACF;AAEA,SAASM,sBAAsBD,MAAA,EAAuB;EACrD,OAAOG,MAAA,CAAOC,WAAA,CAAYJ,MAAA,CAAOK,GAAA,CAAI,UAACC,CAAA;IAAA,OAAM,CAACA,CAAA,CAAEC,IAAA,EAAMD,CAAC,CAAC;EAAA,EAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}