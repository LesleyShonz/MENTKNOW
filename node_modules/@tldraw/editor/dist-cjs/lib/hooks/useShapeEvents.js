"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useShapeEvents_exports = {};
__export(useShapeEvents_exports, {
  useShapeEvents: () => useShapeEvents
});
module.exports = __toCommonJS(useShapeEvents_exports);
var import_react = __toESM(require("react"));
var import_dom = require("../utils/dom");
var import_svg = require("../utils/svg");
var import_useEditor = require("./useEditor");
const pointerEventHandler = (editor, shapeId, name) => {
  return (e) => {
    if (name !== "pointer_move" && editor.pageState.editingId === shapeId)
      e.isKilled = true;
    if (e.isKilled)
      return;
    switch (name) {
      case "pointer_down": {
        if (e.button !== 0 && e.button !== 1 && e.button !== 2)
          return;
        (0, import_dom.setPointerCapture)(e.currentTarget, e);
        break;
      }
      case "pointer_up": {
        (0, import_dom.releasePointerCapture)(e.currentTarget, e);
        break;
      }
    }
    const shape = editor.getShapeById(shapeId);
    if (!shape) {
      console.error("Shape not found", shapeId);
      return;
    }
    editor.dispatch({
      type: "pointer",
      target: "shape",
      shape,
      name,
      ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
    });
  };
};
function useShapeEvents(id) {
  const editor = (0, import_useEditor.useEditor)();
  return import_react.default.useMemo(() => {
    function onTouchStart(e) {
      ;
      e.isKilled = true;
      (0, import_dom.preventDefault)(e);
    }
    function onTouchEnd(e) {
      ;
      e.isKilled = true;
      (0, import_dom.preventDefault)(e);
    }
    const handlePointerMove = pointerEventHandler(editor, id, "pointer_move");
    let lastX, lastY;
    function onPointerMove(e) {
      if (e.isKilled)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      return handlePointerMove(e);
    }
    return {
      onPointerDown: pointerEventHandler(editor, id, "pointer_down"),
      onPointerUp: pointerEventHandler(editor, id, "pointer_up"),
      onPointerEnter: pointerEventHandler(editor, id, "pointer_enter"),
      onPointerLeave: pointerEventHandler(editor, id, "pointer_leave"),
      onPointerMove,
      onTouchStart,
      onTouchEnd
    };
  }, [editor, id]);
}
//# sourceMappingURL=useShapeEvents.js.map
