"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SelectionBg_exports = {};
__export(SelectionBg_exports, {
  SelectionBg: () => SelectionBg
});
module.exports = __toCommonJS(SelectionBg_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_primitives = require("@tldraw/primitives");
var React = __toESM(require("react"));
var import_signia_react = require("signia-react");
var import_useEditor = require("../hooks/useEditor");
var import_dom = require("../utils/dom");
var import_svg = require("../utils/svg");
const SelectionBg = (0, import_signia_react.track)(function SelectionBg2() {
  const editor = (0, import_useEditor.useEditor)();
  const events = React.useMemo(() => {
    const onPointerDown = (e) => {
      if (e.isKilled)
        return;
      (0, import_dom.setPointerCapture)(e.currentTarget, e);
      const info = {
        type: "pointer",
        target: "selection",
        name: "pointer_down",
        ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
      };
      editor.dispatch(info);
    };
    const onPointerMove = (e) => {
      if (e.isKilled)
        return;
      const info = {
        type: "pointer",
        target: "selection",
        name: "pointer_move",
        ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
      };
      editor.dispatch(info);
    };
    const onPointerUp = (e) => {
      if (e.isKilled)
        return;
      (0, import_dom.releasePointerCapture)(e.currentTarget, e);
      const info = {
        type: "pointer",
        target: "selection",
        name: "pointer_up",
        ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
      };
      editor.dispatch(info);
    };
    const onPointerEnter = (e) => {
      if (e.isKilled)
        return;
      const info = {
        type: "pointer",
        target: "selection",
        name: "pointer_enter",
        ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
      };
      editor.dispatch(info);
    };
    const onPointerLeave = (e) => {
      if (e.isKilled)
        return;
      const info = {
        type: "pointer",
        target: "selection",
        name: "pointer_leave",
        ...(0, import_svg.getPointerInfo)(e, editor.getContainer())
      };
      editor.dispatch(info);
    };
    return {
      onPointerDown,
      onPointerMove,
      onPointerUp,
      onPointerEnter,
      onPointerLeave
    };
  }, [editor]);
  const { selectionBounds: bounds, selectedIds } = editor;
  if (!bounds)
    return null;
  const shouldDisplay = editor.isInAny(
    "select.idle",
    "select.brushing",
    "select.scribble_brushing",
    "select.pointing_shape",
    "select.pointing_selection",
    "text.resizing"
  );
  if (selectedIds.length === 1) {
    const shape = editor.getShapeById(selectedIds[0]);
    if (!shape) {
      return null;
    }
    const util = editor.getShapeUtil(shape);
    if (util.hideSelectionBoundsBg(shape)) {
      return null;
    }
  }
  const transform = import_primitives.Matrix2d.toCssString(
    import_primitives.Matrix2d.Compose(
      import_primitives.Matrix2d.Translate(bounds.minX, bounds.minY),
      import_primitives.Matrix2d.Rotate(editor.selectionRotation)
    )
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "div",
    {
      className: "tl-selection__bg",
      draggable: false,
      style: {
        transform,
        width: (0, import_primitives.toDomPrecision)(Math.max(1, bounds.width)),
        height: (0, import_primitives.toDomPrecision)(Math.max(1, bounds.height)),
        pointerEvents: shouldDisplay ? "all" : "none",
        opacity: shouldDisplay ? 1 : 0
      },
      ...events
    }
  );
});
//# sourceMappingURL=SelectionBg.js.map
