{"ast":null,"code":"var EVENT_NAME_MAP = {\n  wheel: \"onWheel\",\n  pointer_enter: \"onPointerEnter\",\n  pointer_leave: \"onPointerLeave\",\n  pointer_down: \"onPointerDown\",\n  pointer_move: \"onPointerMove\",\n  pointer_up: \"onPointerUp\",\n  right_click: \"onRightClick\",\n  middle_click: \"onMiddleClick\",\n  key_down: \"onKeyDown\",\n  key_up: \"onKeyUp\",\n  key_repeat: \"onKeyRepeat\",\n  cancel: \"onCancel\",\n  complete: \"onComplete\",\n  interrupt: \"onInterrupt\",\n  double_click: \"onDoubleClick\",\n  triple_click: \"onTripleClick\",\n  quadruple_click: \"onQuadrupleClick\"\n};\nexport { EVENT_NAME_MAP };","map":{"version":3,"names":["EVENT_NAME_MAP","wheel","pointer_enter","pointer_leave","pointer_down","pointer_move","pointer_up","right_click","middle_click","key_down","key_up","key_repeat","cancel","complete","interrupt","double_click","triple_click","quadruple_click"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/types/event-types.ts"],"sourcesContent":["import { VecLike } from '@tldraw/primitives'\nimport { TLHandle, TLShape, Vec2dModel } from '@tldraw/tlschema'\nimport { TLSelectionHandle } from './selection-types'\n\n/** @public */\nexport type UiEventType = 'pointer' | 'click' | 'keyboard' | 'wheel' | 'pinch' | 'zoom'\n\n/** @public */\nexport type TLPointerEventTarget =\n\t| { target: 'canvas'; shape?: undefined }\n\t| { target: 'selection'; handle?: TLSelectionHandle; shape?: undefined }\n\t| { target: 'shape'; shape: TLShape }\n\t| { target: 'handle'; shape: TLShape; handle: TLHandle }\n\n/** @public */\nexport type TLPointerEventName =\n\t| 'pointer_down'\n\t| 'pointer_move'\n\t| 'pointer_up'\n\t| 'pointer_enter'\n\t| 'pointer_leave'\n\t| 'right_click'\n\t| 'middle_click'\n\n/** @public */\nexport type TLCLickEventName = 'double_click' | 'triple_click' | 'quadruple_click'\n\n/** @public */\nexport type TLPinchEventName = 'pinch_start' | 'pinch' | 'pinch_end'\n\n/** @public */\nexport type TLKeyboardEventName = 'key_down' | 'key_up' | 'key_repeat'\n\n/** @public */\nexport type TLEventName =\n\t| TLPointerEventName\n\t| TLCLickEventName\n\t| TLPinchEventName\n\t| TLKeyboardEventName\n\t| 'wheel'\n\t| 'cancel'\n\t| 'complete'\n\t| 'interrupt'\n\n/** @public */\nexport interface TLBaseEventInfo {\n\ttype: UiEventType\n\tshiftKey: boolean\n\taltKey: boolean\n\tctrlKey: boolean\n}\n\n/** @public */\nexport type TLPointerEventInfo = TLBaseEventInfo & {\n\ttype: 'pointer'\n\tname: TLPointerEventName\n\tpoint: VecLike\n\tpointerId: number\n\tbutton: number\n\tisPen: boolean\n} & TLPointerEventTarget\n\n/** @public */\nexport type TLClickEventInfo = TLBaseEventInfo & {\n\ttype: 'click'\n\tname: TLCLickEventName\n\tpoint: VecLike\n\tpointerId: number\n\tbutton: number\n\tphase: 'down' | 'up' | 'settle'\n} & TLPointerEventTarget\n\n/** @public */\nexport type TLKeyboardEventInfo = TLBaseEventInfo & {\n\ttype: 'keyboard'\n\tname: TLKeyboardEventName\n\tkey: string\n\tcode: string\n}\n\n/** @public */\nexport type TLPinchEventInfo = TLBaseEventInfo & {\n\ttype: 'pinch'\n\tname: TLPinchEventName\n\tpoint: Vec2dModel\n\tdelta: Vec2dModel\n}\n\n/** @public */\nexport type TLWheelEventInfo = TLBaseEventInfo & {\n\ttype: 'wheel'\n\tname: 'wheel'\n\tdelta: Vec2dModel\n}\n\n/** @public */\nexport type TLCancelEventInfo = { type: 'misc'; name: 'cancel' }\n/** @public */\nexport type TLCompleteEventInfo = { type: 'misc'; name: 'complete' }\n/** @public */\nexport type TLInterruptEventInfo = { type: 'misc'; name: 'interrupt' }\n\n/** @public */\nexport type TLEventInfo =\n\t| TLPointerEventInfo\n\t| TLClickEventInfo\n\t| TLKeyboardEventInfo\n\t| TLPinchEventInfo\n\t| TLWheelEventInfo\n\t| TLCancelEventInfo\n\t| TLCompleteEventInfo\n\t| TLInterruptEventInfo\n\n/** @public */\nexport type TLPointerEvent = (info: TLPointerEventInfo) => void\n/** @public */\nexport type TLClickEvent = (info: TLClickEventInfo) => void\n/** @public */\nexport type TLKeyboardEvent = (info: TLKeyboardEventInfo) => void\n/** @public */\nexport type TLPinchEvent = (info: TLPinchEventInfo) => void\n/** @public */\nexport type TLWheelEvent = (info: TLWheelEventInfo) => void\n/** @public */\nexport type TLCancelEvent = (info: TLCancelEventInfo) => void\n/** @public */\nexport type TLCompleteEvent = (info: TLCompleteEventInfo) => void\n/** @public */\nexport type TLInterruptEvent = (info: TLInterruptEventInfo) => void\n\n/** @public */\nexport type UiEvent =\n\t| TLPointerEvent\n\t| TLClickEvent\n\t| TLKeyboardEvent\n\t| TLPinchEvent\n\t| TLCancelEvent\n\t| TLCompleteEvent\n\n/** @public */\nexport type TLEnterEventHandler = (info: any, from: string) => void\n/** @public */\nexport type TLExitEventHandler = (info: any, to: string) => void\n\n/** @public */\nexport interface TLEventHandlers {\n\tonPointerEnter: TLPointerEvent\n\tonPointerLeave: TLPointerEvent\n\tonPointerDown: TLPointerEvent\n\tonPointerMove: TLPointerEvent\n\tonRightClick: TLPointerEvent\n\tonDoubleClick: TLClickEvent\n\tonTripleClick: TLClickEvent\n\tonQuadrupleClick: TLClickEvent\n\tonMiddleClick: TLPointerEvent\n\tonPointerUp: TLPointerEvent\n\tonKeyDown: TLKeyboardEvent\n\tonKeyUp: TLKeyboardEvent\n\tonKeyRepeat: TLKeyboardEvent\n\tonWheel: TLWheelEvent\n\tonCancel: TLCancelEvent\n\tonComplete: TLCompleteEvent\n\tonInterrupt: TLInterruptEvent\n}\n\n/** @public */\nexport const EVENT_NAME_MAP: Record<\n\tExclude<TLEventName, TLPinchEventName>,\n\tkeyof TLEventHandlers\n> = {\n\twheel: 'onWheel',\n\tpointer_enter: 'onPointerEnter',\n\tpointer_leave: 'onPointerLeave',\n\tpointer_down: 'onPointerDown',\n\tpointer_move: 'onPointerMove',\n\tpointer_up: 'onPointerUp',\n\tright_click: 'onRightClick',\n\tmiddle_click: 'onMiddleClick',\n\tkey_down: 'onKeyDown',\n\tkey_up: 'onKeyUp',\n\tkey_repeat: 'onKeyRepeat',\n\tcancel: 'onCancel',\n\tcomplete: 'onComplete',\n\tinterrupt: 'onInterrupt',\n\tdouble_click: 'onDoubleClick',\n\ttriple_click: 'onTripleClick',\n\tquadruple_click: 'onQuadrupleClick',\n}\n\n/** @public */\nexport type TLTickEvent = (elapsed: number) => void\n"],"mappings":"AAsKO,IAAMA,cAAA,GAGT;EACHC,KAAA,EAAO;EACPC,aAAA,EAAe;EACfC,aAAA,EAAe;EACfC,YAAA,EAAc;EACdC,YAAA,EAAc;EACdC,UAAA,EAAY;EACZC,WAAA,EAAa;EACbC,YAAA,EAAc;EACdC,QAAA,EAAU;EACVC,MAAA,EAAQ;EACRC,UAAA,EAAY;EACZC,MAAA,EAAQ;EACRC,QAAA,EAAU;EACVC,SAAA,EAAW;EACXC,YAAA,EAAc;EACdC,YAAA,EAAc;EACdC,eAAA,EAAiB;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}