{
  "version": 3,
  "sources": ["../../src/lib/BaseSpline2d.ts"],
  "sourcesContent": ["import { BaseSegment2d } from './BaseSegment2d'\nimport { Box2d } from './Box2d'\nimport { Vec2d, VecLike } from './Vec2d'\n\nexport abstract class BaseSpline2d<T extends { p: number }> {\n\tconstructor(public points: VecLike[], public p = 50, public k = 1) {}\n\n\tabstract segments: BaseSegment2d<T>[]\n\n\tabstract getSegmentsFromPoints(points: VecLike[], p: number, k: number): BaseSegment2d<T>[]\n\n\tprotected computed: {\n\t\tlength?: number\n\t\tbounds?: Box2d\n\t\tpath?: string\n\t\tlut?: Vec2d[]\n\t} = {}\n\n\tget length() {\n\t\tif (this.computed.length !== undefined) {\n\t\t\treturn this.computed.length\n\t\t}\n\n\t\tconst { segments } = this\n\n\t\tconst result = segments.reduce((acc, curr) => acc + curr.length, 0)\n\n\t\tthis.computed.length = result\n\n\t\treturn result\n\t}\n\n\tget bounds() {\n\t\tif (this.computed.bounds !== undefined) {\n\t\t\treturn this.computed.bounds\n\t\t}\n\n\t\tconst { segments } = this\n\n\t\tconst result = Box2d.Common(segments.map((segment) => segment.bounds))\n\n\t\tthis.computed.bounds = result\n\n\t\treturn result\n\t}\n\n\tget head() {\n\t\tconst { points } = this\n\t\treturn points[0]\n\t}\n\n\tget tail() {\n\t\tconst { points } = this\n\t\treturn points[points.length - 1]\n\t}\n\n\tget path() {\n\t\tif (this.computed.path !== undefined) {\n\t\t\treturn this.computed.path\n\t\t}\n\n\t\tconst result = this.segments\n\t\t\t.map((segment) => segment.path)\n\t\t\t.filter((i) => i !== undefined && i !== null && i !== '')\n\t\t\t.join(' ')\n\n\t\tthis.computed.path = result\n\n\t\treturn result\n\t}\n\n\taddPoint(point: Vec2d) {\n\t\tconst { points, k, p } = this\n\t\tpoints.push(point)\n\t\tthis.computed = {}\n\t\tthis.getSegmentsFromPoints(this.points, p, k)\n\t\treturn this\n\t}\n\n\tremovePoint(point: Vec2d | number) {\n\t\tconst { points, k, p } = this\n\t\tconst index = typeof point === 'number' ? Math.floor(point) : points.indexOf(point)\n\t\tif (index === -1) return this\n\t\tpoints.splice(index, 1)\n\t\tthis.computed = {}\n\t\tthis.getSegmentsFromPoints(this.points, p, k)\n\t\treturn this\n\t}\n\n\tgetPointAtLength(length: number) {\n\t\tconst { segments } = this\n\n\t\tlet remaining = length\n\n\t\tif (length <= 0) return segments[0].getPoint(0)\n\t\tif (length >= this.length) return segments[segments.length - 1].getPoint(1)\n\n\t\tfor (let i = 0; i < segments.length; i++) {\n\t\t\tconst segment = segments[i]\n\t\t\tconst { length: segmentLength } = segment\n\n\t\t\tif (remaining < segmentLength) {\n\t\t\t\treturn segment.getPoint(remaining / segmentLength)\n\t\t\t}\n\n\t\t\tremaining -= segment.length\n\t\t}\n\n\t\treturn segments[segments.length - 1].getPoint(1)\n\t}\n\n\tgetPoint(t: number) {\n\t\tif (t <= 0) return this.segments[0].getPoint(0)\n\t\tif (t >= 1) return this.segments[this.segments.length - 1].getPoint(1)\n\t\treturn this.getPointAtLength(t * this.length)\n\t}\n\n\tgetNormal(t: number): Vec2d {\n\t\tconst { length } = this\n\t\treturn this.getNormalAtLength(t * length)\n\t}\n\n\tgetNormalAtLength(t: number): Vec2d {\n\t\tconst { segments } = this\n\n\t\tif (t < 0) return new Vec2d(0, 0)\n\n\t\tlet remaining = t\n\n\t\tfor (const segment of segments) {\n\t\t\tconst segmentLength = segment.length\n\t\t\tif (remaining <= segmentLength) {\n\t\t\t\treturn segment.getNormal(remaining / segmentLength)\n\t\t\t}\n\t\t\tremaining -= segmentLength\n\t\t}\n\n\t\treturn new Vec2d(0, 0)\n\t}\n\n\tgetClosestPointTo(point: Vec2d) {\n\t\tconst { head, segments } = this\n\t\tlet closestPoint = head\n\t\tlet closestDistance = Vec2d.Dist(point, head)\n\n\t\tfor (const segment of segments) {\n\t\t\tconst p = segment.getClosestPointTo(point)\n\t\t\tif (p.distance < closestDistance) {\n\t\t\t\tclosestDistance = p.distance\n\t\t\t\tclosestPoint = p.point\n\t\t\t}\n\t\t}\n\n\t\treturn { point: closestPoint, distance: closestDistance }\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
