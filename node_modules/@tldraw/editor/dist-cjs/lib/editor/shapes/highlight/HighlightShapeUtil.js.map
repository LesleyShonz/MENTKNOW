{
  "version": 3,
  "sources": ["../../../../../src/lib/editor/shapes/highlight/HighlightShapeUtil.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/rules-of-hooks */\nimport { Box2d, getStrokePoints, linesIntersect, Vec2d, VecLike } from '@tldraw/primitives'\nimport { TLDrawShapeSegment, TLHighlightShape } from '@tldraw/tlschema'\nimport { last, rng } from '@tldraw/utils'\nimport { SVGContainer } from '../../../components/SVGContainer'\nimport { getSvgPathFromStrokePoints } from '../../../utils/svg'\nimport { getHighlightFreehandSettings, getPointsFromSegments } from '../draw/getPath'\nimport { ShapeUtil, TLOnResizeHandler } from '../ShapeUtil'\nimport { FONT_SIZES } from '../shared/default-shape-constants'\nimport { TLExportColors } from '../shared/TLExportColors'\nimport { useForceSolid } from '../shared/useForceSolid'\n\nconst OVERLAY_OPACITY = 0.35\nconst UNDERLAY_OPACITY = 0.82\n\n/** @public */\nexport class HighlightShapeUtil extends ShapeUtil<TLHighlightShape> {\n\tstatic type = 'highlight' as const\n\n\thideResizeHandles = (shape: TLHighlightShape) => getIsDot(shape)\n\thideRotateHandle = (shape: TLHighlightShape) => getIsDot(shape)\n\thideSelectionBoundsBg = (shape: TLHighlightShape) => getIsDot(shape)\n\thideSelectionBoundsFg = (shape: TLHighlightShape) => getIsDot(shape)\n\n\toverride defaultProps(): TLHighlightShape['props'] {\n\t\treturn {\n\t\t\tsegments: [],\n\t\t\tcolor: 'black',\n\t\t\tsize: 'm',\n\t\t\tisComplete: false,\n\t\t\tisPen: false,\n\t\t}\n\t}\n\n\tgetBounds(shape: TLHighlightShape) {\n\t\treturn Box2d.FromPoints(this.outline(shape))\n\t}\n\n\tgetOutline(shape: TLHighlightShape) {\n\t\treturn getPointsFromSegments(shape.props.segments)\n\t}\n\n\tgetCenter(shape: TLHighlightShape): Vec2d {\n\t\treturn this.bounds(shape).center\n\t}\n\n\thitTestPoint(shape: TLHighlightShape, point: VecLike): boolean {\n\t\tconst outline = this.outline(shape)\n\t\tconst zoomLevel = this.editor.zoomLevel\n\t\tconst offsetDist = getStrokeWidth(shape) / zoomLevel\n\n\t\tif (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {\n\t\t\tif (shape.props.segments[0].points.some((pt) => Vec2d.Dist(point, pt) < offsetDist * 1.5)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tif (this.bounds(shape).containsPoint(point)) {\n\t\t\tfor (let i = 0; i < outline.length; i++) {\n\t\t\t\tconst C = outline[i]\n\t\t\t\tconst D = outline[(i + 1) % outline.length]\n\n\t\t\t\tif (Vec2d.DistanceToLineSegment(C, D, point) < offsetDist) return true\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\thitTestLineSegment(shape: TLHighlightShape, A: VecLike, B: VecLike): boolean {\n\t\tconst outline = this.outline(shape)\n\n\t\tif (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {\n\t\t\tconst zoomLevel = this.editor.zoomLevel\n\t\t\tconst offsetDist = getStrokeWidth(shape) / zoomLevel\n\n\t\t\tif (\n\t\t\t\tshape.props.segments[0].points.some(\n\t\t\t\t\t(pt) => Vec2d.DistanceToLineSegment(A, B, pt) < offsetDist * 1.5\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < outline.length - 1; i++) {\n\t\t\tconst C = outline[i]\n\t\t\tconst D = outline[i + 1]\n\t\t\tif (linesIntersect(A, B, C, D)) return true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tcomponent(shape: TLHighlightShape) {\n\t\treturn (\n\t\t\t<HighlightRenderer\n\t\t\t\tstrokeWidth={getStrokeWidth(shape)}\n\t\t\t\tshape={shape}\n\t\t\t\topacity={OVERLAY_OPACITY}\n\t\t\t/>\n\t\t)\n\t}\n\n\trenderBackground(shape: TLHighlightShape) {\n\t\treturn (\n\t\t\t<HighlightRenderer\n\t\t\t\tstrokeWidth={getStrokeWidth(shape)}\n\t\t\t\tshape={shape}\n\t\t\t\topacity={UNDERLAY_OPACITY}\n\t\t\t/>\n\t\t)\n\t}\n\n\tindicator(shape: TLHighlightShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst strokeWidth = getStrokeWidth(shape)\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tlet sw = strokeWidth\n\t\tif (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\t\tconst options = getHighlightFreehandSettings({\n\t\t\tstrokeWidth,\n\t\t\tshowAsComplete,\n\t\t\tisPen: shape.props.isPen,\n\t\t})\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\n\t\tlet strokePath\n\t\tif (strokePoints.length < 2) {\n\t\t\tstrokePath = getIndicatorDot(allPointsFromSegments[0], sw)\n\t\t} else {\n\t\t\tstrokePath = getSvgPathFromStrokePoints(strokePoints, false)\n\t\t}\n\n\t\treturn <path d={strokePath} />\n\t}\n\n\toverride expandSelectionOutlinePx(shape: TLHighlightShape): number {\n\t\treturn getStrokeWidth(shape) / 2\n\t}\n\n\toverride toSvg(shape: TLHighlightShape, _font: string | undefined, colors: TLExportColors) {\n\t\treturn highlighterToSvg(getStrokeWidth(shape), shape, OVERLAY_OPACITY, colors)\n\t}\n\n\toverride toBackgroundSvg(\n\t\tshape: TLHighlightShape,\n\t\tfont: string | undefined,\n\t\tcolors: TLExportColors\n\t) {\n\t\treturn highlighterToSvg(getStrokeWidth(shape), shape, UNDERLAY_OPACITY, colors)\n\t}\n\n\toverride onResize: TLOnResizeHandler<TLHighlightShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst newSegments: TLDrawShapeSegment[] = []\n\n\t\tfor (const segment of shape.props.segments) {\n\t\t\tnewSegments.push({\n\t\t\t\t...segment,\n\t\t\t\tpoints: segment.points.map(({ x, y, z }) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: scaleX * x,\n\t\t\t\t\t\ty: scaleY * y,\n\t\t\t\t\t\tz,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t})\n\t\t}\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\tsegments: newSegments,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction getShapeDot(point: VecLike) {\n\tconst r = 0.1\n\treturn `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${\n\t\tr * 2\n\t},0`\n}\n\nfunction getIndicatorDot(point: VecLike, sw: number) {\n\tconst r = sw / 2\n\treturn `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${\n\t\tr * 2\n\t},0`\n}\n\nfunction getHighlightSvgPath(shape: TLHighlightShape, strokeWidth: number, forceSolid: boolean) {\n\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\n\tlet sw = strokeWidth\n\tif (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {\n\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t}\n\n\tconst options = getHighlightFreehandSettings({\n\t\tstrokeWidth: sw,\n\t\tshowAsComplete,\n\t\tisPen: shape.props.isPen,\n\t})\n\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\tconst solidStrokePath =\n\t\tstrokePoints.length > 1\n\t\t\t? getSvgPathFromStrokePoints(strokePoints, false)\n\t\t\t: getShapeDot(allPointsFromSegments[0])\n\n\treturn { solidStrokePath, sw }\n}\n\nfunction HighlightRenderer({\n\tstrokeWidth,\n\tshape,\n\topacity,\n}: {\n\tstrokeWidth: number\n\tshape: TLHighlightShape\n\topacity?: number\n}) {\n\tconst forceSolid = useForceSolid()\n\tconst { solidStrokePath, sw } = getHighlightSvgPath(shape, strokeWidth, forceSolid)\n\n\treturn (\n\t\t<SVGContainer id={shape.id} style={{ opacity }}>\n\t\t\t<path\n\t\t\t\td={solidStrokePath}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tpointerEvents=\"all\"\n\t\t\t\tstroke={`var(--palette-${shape.props.color}-highlight)`}\n\t\t\t\tstrokeWidth={sw}\n\t\t\t/>\n\t\t</SVGContainer>\n\t)\n}\n\nfunction highlighterToSvg(\n\tstrokeWidth: number,\n\tshape: TLHighlightShape,\n\topacity: number,\n\tcolors: TLExportColors\n) {\n\tconst { solidStrokePath, sw } = getHighlightSvgPath(shape, strokeWidth, false)\n\n\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tpath.setAttribute('d', solidStrokePath)\n\tpath.setAttribute('fill', 'none')\n\tpath.setAttribute('stroke', colors.highlight[shape.props.color])\n\tpath.setAttribute('stroke-width', `${sw}`)\n\tpath.setAttribute('opacity', `${opacity}`)\n\n\treturn path\n}\n\nfunction getStrokeWidth(shape: TLHighlightShape) {\n\treturn FONT_SIZES[shape.props.size] * 1.12\n}\n\nfunction getIsDot(shape: TLHighlightShape) {\n\treturn shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2\n}\n"],
  "mappings": "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",
  "names": []
}
