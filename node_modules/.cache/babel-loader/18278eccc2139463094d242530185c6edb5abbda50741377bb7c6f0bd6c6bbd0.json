{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Vec2d } from \"@tldraw/primitives\";\nimport { COARSE_DRAG_DISTANCE, DOUBLE_CLICK_DURATION, DRAG_DISTANCE, MULTI_CLICK_DURATION } from \"../../constants.mjs\";\nimport { uniqueId } from \"../../utils/data.mjs\";\nvar MAX_CLICK_DISTANCE = 40;\nvar ClickManager = /*#__PURE__*/function () {\n  function ClickManager(editor) {\n    var _this = this;\n    _classCallCheck(this, ClickManager);\n    _defineProperty(this, \"_clickId\", \"\");\n    _defineProperty(this, \"_clickTimeout\", void 0);\n    _defineProperty(this, \"_clickScreenPoint\", void 0);\n    _defineProperty(this, \"_previousScreenPoint\", void 0);\n    _defineProperty(this, \"_getClickTimeout\", function (state) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : uniqueId();\n      _this._clickId = id;\n      clearTimeout(_this._clickTimeout);\n      _this._clickTimeout = setTimeout(function () {\n        if (_this._clickState === state && _this._clickId === id) {\n          switch (_this._clickState) {\n            case \"pendingTriple\":\n              {\n                _this.editor.dispatch(_objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n                  type: \"click\",\n                  name: \"double_click\",\n                  phase: \"settle\"\n                }));\n                break;\n              }\n            case \"pendingQuadruple\":\n              {\n                _this.editor.dispatch(_objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n                  type: \"click\",\n                  name: \"triple_click\",\n                  phase: \"settle\"\n                }));\n                break;\n              }\n            case \"pendingOverflow\":\n              {\n                _this.editor.dispatch(_objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n                  type: \"click\",\n                  name: \"quadruple_click\",\n                  phase: \"settle\"\n                }));\n                break;\n              }\n            default:\n              {}\n          }\n          _this._clickState = \"idle\";\n        }\n      }, state === \"idle\" || state === \"pendingDouble\" ? DOUBLE_CLICK_DURATION : MULTI_CLICK_DURATION);\n    });\n    /**\n     * The current click state.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"_clickState\", \"idle\");\n    _defineProperty(this, \"lastPointerInfo\", {});\n    /**\n     * Start the double click timeout.\n     *\n     * @param info - The event info.\n     */\n    _defineProperty(this, \"transformPointerDownEvent\", function (info) {\n      if (!_this._clickState) return info;\n      _this._clickScreenPoint = Vec2d.From(info.point);\n      if (_this._previousScreenPoint && _this._previousScreenPoint.dist(_this._clickScreenPoint) > MAX_CLICK_DISTANCE) {\n        _this._clickState = \"idle\";\n      }\n      _this._previousScreenPoint = _this._clickScreenPoint;\n      _this.lastPointerInfo = info;\n      switch (_this._clickState) {\n        case \"idle\":\n          {\n            _this._clickState = \"pendingDouble\";\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return info;\n          }\n        case \"pendingDouble\":\n          {\n            _this._clickState = \"pendingTriple\";\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return _objectSpread(_objectSpread({}, info), {}, {\n              type: \"click\",\n              name: \"double_click\",\n              phase: \"down\"\n            });\n          }\n        case \"pendingTriple\":\n          {\n            _this._clickState = \"pendingQuadruple\";\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return _objectSpread(_objectSpread({}, info), {}, {\n              type: \"click\",\n              name: \"triple_click\",\n              phase: \"down\"\n            });\n          }\n        case \"pendingQuadruple\":\n          {\n            _this._clickState = \"pendingOverflow\";\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return _objectSpread(_objectSpread({}, info), {}, {\n              type: \"click\",\n              name: \"quadruple_click\",\n              phase: \"down\"\n            });\n          }\n        case \"pendingOverflow\":\n          {\n            _this._clickState = \"overflow\";\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return info;\n          }\n        default:\n          {\n            _this._clickTimeout = _this._getClickTimeout(_this._clickState);\n            return info;\n          }\n      }\n    });\n    /**\n     * Emit click_up events on pointer up.\n     *\n     * @param info - The event info.\n     */\n    _defineProperty(this, \"transformPointerUpEvent\", function (info) {\n      if (!_this._clickState) return info;\n      _this._clickScreenPoint = Vec2d.From(info.point);\n      switch (_this._clickState) {\n        case \"pendingTriple\":\n          {\n            return _objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n              type: \"click\",\n              name: \"double_click\",\n              phase: \"up\"\n            });\n          }\n        case \"pendingQuadruple\":\n          {\n            return _objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n              type: \"click\",\n              name: \"triple_click\",\n              phase: \"up\"\n            });\n          }\n        case \"pendingOverflow\":\n          {\n            return _objectSpread(_objectSpread({}, _this.lastPointerInfo), {}, {\n              type: \"click\",\n              name: \"quadruple_click\",\n              phase: \"up\"\n            });\n          }\n        default:\n          {\n            return info;\n          }\n      }\n    });\n    /**\n     * Cancel the double click timeout.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"cancelDoubleClickTimeout\", function () {\n      _this._clickTimeout = clearTimeout(_this._clickTimeout);\n      _this._clickState = \"idle\";\n    });\n    /**\n     * Handle a move event, possibly cancelling the click timeout.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"handleMove\", function () {\n      if (_this._clickState !== \"idle\" && _this._clickScreenPoint && _this._clickScreenPoint.dist(_this.editor.inputs.currentScreenPoint) > (_this.editor.isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE)) {\n        _this.cancelDoubleClickTimeout();\n      }\n    });\n    this.editor = editor;\n  }\n  _createClass(ClickManager, [{\n    key: \"clickState\",\n    get:\n    /**\n     * The current click state.\n     *\n     * @public\n     */\n    function get() {\n      return this._clickState;\n    }\n  }]);\n  return ClickManager;\n}();\nexport { ClickManager };","map":{"version":3,"names":["Vec2d","COARSE_DRAG_DISTANCE","DOUBLE_CLICK_DURATION","DRAG_DISTANCE","MULTI_CLICK_DURATION","uniqueId","MAX_CLICK_DISTANCE","ClickManager","editor","_this","_classCallCheck","_defineProperty","state","id","arguments","length","undefined","_clickId","clearTimeout","_clickTimeout","setTimeout","_clickState","dispatch","_objectSpread","lastPointerInfo","type","name","phase","info","_clickScreenPoint","From","point","_previousScreenPoint","dist","_getClickTimeout","inputs","currentScreenPoint","isCoarsePointer","cancelDoubleClickTimeout","_createClass","key","get"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/managers/ClickManager.ts"],"sourcesContent":["import { Vec2d } from '@tldraw/primitives'\nimport {\n\tCOARSE_DRAG_DISTANCE,\n\tDOUBLE_CLICK_DURATION,\n\tDRAG_DISTANCE,\n\tMULTI_CLICK_DURATION,\n} from '../../constants'\nimport { uniqueId } from '../../utils/data'\nimport type { Editor } from '../Editor'\nimport { TLClickEventInfo, TLPointerEventInfo } from '../types/event-types'\n\ntype TLClickState =\n\t| 'idle'\n\t| 'pendingDouble'\n\t| 'pendingTriple'\n\t| 'pendingQuadruple'\n\t| 'pendingOverflow'\n\t| 'overflow'\n\nconst MAX_CLICK_DISTANCE = 40\n\nexport class ClickManager {\n\tconstructor(public editor: Editor) {}\n\n\tprivate _clickId = ''\n\n\tprivate _clickTimeout?: any\n\n\tprivate _clickScreenPoint?: Vec2d\n\n\tprivate _previousScreenPoint?: Vec2d\n\n\tprivate _getClickTimeout = (state: TLClickState, id = uniqueId()) => {\n\t\tthis._clickId = id\n\t\tclearTimeout(this._clickTimeout)\n\t\tthis._clickTimeout = setTimeout(\n\t\t\t() => {\n\t\t\t\tif (this._clickState === state && this._clickId === id) {\n\t\t\t\t\tswitch (this._clickState) {\n\t\t\t\t\t\tcase 'pendingTriple': {\n\t\t\t\t\t\t\tthis.editor.dispatch({\n\t\t\t\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\t\t\t\ttype: 'click',\n\t\t\t\t\t\t\t\tname: 'double_click',\n\t\t\t\t\t\t\t\tphase: 'settle',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'pendingQuadruple': {\n\t\t\t\t\t\t\tthis.editor.dispatch({\n\t\t\t\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\t\t\t\ttype: 'click',\n\t\t\t\t\t\t\t\tname: 'triple_click',\n\t\t\t\t\t\t\t\tphase: 'settle',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'pendingOverflow': {\n\t\t\t\t\t\t\tthis.editor.dispatch({\n\t\t\t\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\t\t\t\ttype: 'click',\n\t\t\t\t\t\t\t\tname: 'quadruple_click',\n\t\t\t\t\t\t\t\tphase: 'settle',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t// noop\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._clickState = 'idle'\n\t\t\t\t}\n\t\t\t},\n\t\t\tstate === 'idle' || state === 'pendingDouble' ? DOUBLE_CLICK_DURATION : MULTI_CLICK_DURATION\n\t\t)\n\t}\n\n\t/**\n\t * The current click state.\n\t *\n\t * @internal\n\t */\n\tprivate _clickState?: TLClickState = 'idle'\n\n\t/**\n\t * The current click state.\n\t *\n\t * @public\n\t */\n\tget clickState() {\n\t\treturn this._clickState\n\t}\n\n\tlastPointerInfo = {} as TLPointerEventInfo\n\n\t/**\n\t * Start the double click timeout.\n\t *\n\t * @param info - The event info.\n\t */\n\ttransformPointerDownEvent = (info: TLPointerEventInfo): TLPointerEventInfo | TLClickEventInfo => {\n\t\tif (!this._clickState) return info\n\n\t\tthis._clickScreenPoint = Vec2d.From(info.point)\n\n\t\tif (\n\t\t\tthis._previousScreenPoint &&\n\t\t\tthis._previousScreenPoint.dist(this._clickScreenPoint) > MAX_CLICK_DISTANCE\n\t\t) {\n\t\t\tthis._clickState = 'idle'\n\t\t}\n\n\t\tthis._previousScreenPoint = this._clickScreenPoint\n\n\t\tthis.lastPointerInfo = info\n\n\t\tswitch (this._clickState) {\n\t\t\tcase 'idle': {\n\t\t\t\tthis._clickState = 'pendingDouble'\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn info // returns the pointer event\n\t\t\t}\n\t\t\tcase 'pendingDouble': {\n\t\t\t\tthis._clickState = 'pendingTriple'\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn {\n\t\t\t\t\t...info,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'double_click',\n\t\t\t\t\tphase: 'down',\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase 'pendingTriple': {\n\t\t\t\tthis._clickState = 'pendingQuadruple'\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn {\n\t\t\t\t\t...info,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'triple_click',\n\t\t\t\t\tphase: 'down',\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase 'pendingQuadruple': {\n\t\t\t\tthis._clickState = 'pendingOverflow'\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn {\n\t\t\t\t\t...info,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'quadruple_click',\n\t\t\t\t\tphase: 'down',\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase 'pendingOverflow': {\n\t\t\t\tthis._clickState = 'overflow'\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn info\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\t// overflow\n\t\t\t\tthis._clickTimeout = this._getClickTimeout(this._clickState)\n\t\t\t\treturn info\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Emit click_up events on pointer up.\n\t *\n\t * @param info - The event info.\n\t */\n\ttransformPointerUpEvent = (info: TLPointerEventInfo): TLPointerEventInfo | TLClickEventInfo => {\n\t\tif (!this._clickState) return info\n\n\t\tthis._clickScreenPoint = Vec2d.From(info.point)\n\n\t\tswitch (this._clickState) {\n\t\t\tcase 'pendingTriple': {\n\t\t\t\treturn {\n\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'double_click',\n\t\t\t\t\tphase: 'up',\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase 'pendingQuadruple': {\n\t\t\t\treturn {\n\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'triple_click',\n\t\t\t\t\tphase: 'up',\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase 'pendingOverflow': {\n\t\t\t\treturn {\n\t\t\t\t\t...this.lastPointerInfo,\n\t\t\t\t\ttype: 'click',\n\t\t\t\t\tname: 'quadruple_click',\n\t\t\t\t\tphase: 'up',\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\t// idle, pendingDouble, overflow\n\t\t\t\treturn info\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Cancel the double click timeout.\n\t *\n\t * @internal\n\t */\n\tcancelDoubleClickTimeout = () => {\n\t\tthis._clickTimeout = clearTimeout(this._clickTimeout)\n\t\tthis._clickState = 'idle'\n\t}\n\n\t/**\n\t * Handle a move event, possibly cancelling the click timeout.\n\t *\n\t * @internal\n\t */\n\thandleMove = () => {\n\t\t// Cancel a double click event if the user has started dragging.\n\t\tif (\n\t\t\tthis._clickState !== 'idle' &&\n\t\t\tthis._clickScreenPoint &&\n\t\t\tthis._clickScreenPoint.dist(this.editor.inputs.currentScreenPoint) >\n\t\t\t\t(this.editor.isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE)\n\t\t) {\n\t\t\tthis.cancelDoubleClickTimeout()\n\t\t}\n\t}\n}\n"],"mappings":";;;;AAAA,SAASA,KAAA,QAAa;AACtB,SACCC,oBAAA,EACAC,qBAAA,EACAC,aAAA,EACAC,oBAAA,QACM;AACP,SAASC,QAAA,QAAgB;AAYzB,IAAMC,kBAAA,GAAqB;AAAA,IAEdC,YAAA;EACZ,SAAAA,aAAmBC,MAAA,EAAgB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAH,YAAA;IAAAI,eAAA,mBAEhB;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,2BAQQ,UAACC,KAAA,EAAyC;MAAA,IAApBC,EAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAKT,QAAA,CAAS;MAC9DI,KAAA,CAAKQ,QAAA,GAAWJ,EAAA;MAChBK,YAAA,CAAaT,KAAA,CAAKU,aAAa;MAC/BV,KAAA,CAAKU,aAAA,GAAgBC,UAAA,CACpB,YAAM;QACL,IAAIX,KAAA,CAAKY,WAAA,KAAgBT,KAAA,IAASH,KAAA,CAAKQ,QAAA,KAAaJ,EAAA,EAAI;UACvD,QAAQJ,KAAA,CAAKY,WAAA;YACZ,KAAK;cAAiB;gBACrBZ,KAAA,CAAKD,MAAA,CAAOc,QAAA,CAAAC,aAAA,CAAAA,aAAA,KACRd,KAAA,CAAKe,eAAA;kBACRC,IAAA,EAAM;kBACNC,IAAA,EAAM;kBACNC,KAAA,EAAO;gBAAA,EACP;gBACD;cACD;YACA,KAAK;cAAoB;gBACxBlB,KAAA,CAAKD,MAAA,CAAOc,QAAA,CAAAC,aAAA,CAAAA,aAAA,KACRd,KAAA,CAAKe,eAAA;kBACRC,IAAA,EAAM;kBACNC,IAAA,EAAM;kBACNC,KAAA,EAAO;gBAAA,EACP;gBACD;cACD;YACA,KAAK;cAAmB;gBACvBlB,KAAA,CAAKD,MAAA,CAAOc,QAAA,CAAAC,aAAA,CAAAA,aAAA,KACRd,KAAA,CAAKe,eAAA;kBACRC,IAAA,EAAM;kBACNC,IAAA,EAAM;kBACNC,KAAA,EAAO;gBAAA,EACP;gBACD;cACD;YACA;cAAS,CAET;UACD;UAEAlB,KAAA,CAAKY,WAAA,GAAc;QACpB;MACD,GACAT,KAAA,KAAU,UAAUA,KAAA,KAAU,kBAAkBV,qBAAA,GAAwBE,oBACzE;IACD;IAAA;AAAA;AAAA;AAAA;AAAA;IAAAO,eAAA,sBAOqC;IAAAA,eAAA,0BAWnB,CAAC;IAAA;AAAA;AAAA;AAAA;AAAA;IAAAA,eAAA,oCAOS,UAACiB,IAAA,EAAoE;MAChG,IAAI,CAACnB,KAAA,CAAKY,WAAA,EAAa,OAAOO,IAAA;MAE9BnB,KAAA,CAAKoB,iBAAA,GAAoB7B,KAAA,CAAM8B,IAAA,CAAKF,IAAA,CAAKG,KAAK;MAE9C,IACCtB,KAAA,CAAKuB,oBAAA,IACLvB,KAAA,CAAKuB,oBAAA,CAAqBC,IAAA,CAAKxB,KAAA,CAAKoB,iBAAiB,IAAIvB,kBAAA,EACxD;QACDG,KAAA,CAAKY,WAAA,GAAc;MACpB;MAEAZ,KAAA,CAAKuB,oBAAA,GAAuBvB,KAAA,CAAKoB,iBAAA;MAEjCpB,KAAA,CAAKe,eAAA,GAAkBI,IAAA;MAEvB,QAAQnB,KAAA,CAAKY,WAAA;QACZ,KAAK;UAAQ;YACZZ,KAAA,CAAKY,WAAA,GAAc;YACnBZ,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAOO,IAAA;UACR;QACA,KAAK;UAAiB;YACrBnB,KAAA,CAAKY,WAAA,GAAc;YACnBZ,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAAE,aAAA,CAAAA,aAAA,KACIK,IAAA;cACHH,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA,KAAK;UAAiB;YACrBlB,KAAA,CAAKY,WAAA,GAAc;YACnBZ,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAAE,aAAA,CAAAA,aAAA,KACIK,IAAA;cACHH,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA,KAAK;UAAoB;YACxBlB,KAAA,CAAKY,WAAA,GAAc;YACnBZ,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAAE,aAAA,CAAAA,aAAA,KACIK,IAAA;cACHH,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA,KAAK;UAAmB;YACvBlB,KAAA,CAAKY,WAAA,GAAc;YACnBZ,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAOO,IAAA;UACR;QACA;UAAS;YAERnB,KAAA,CAAKU,aAAA,GAAgBV,KAAA,CAAKyB,gBAAA,CAAiBzB,KAAA,CAAKY,WAAW;YAC3D,OAAOO,IAAA;UACR;MACD;IACD;IAAA;AAAA;AAAA;AAAA;AAAA;IAAAjB,eAAA,kCAO0B,UAACiB,IAAA,EAAoE;MAC9F,IAAI,CAACnB,KAAA,CAAKY,WAAA,EAAa,OAAOO,IAAA;MAE9BnB,KAAA,CAAKoB,iBAAA,GAAoB7B,KAAA,CAAM8B,IAAA,CAAKF,IAAA,CAAKG,KAAK;MAE9C,QAAQtB,KAAA,CAAKY,WAAA;QACZ,KAAK;UAAiB;YACrB,OAAAE,aAAA,CAAAA,aAAA,KACId,KAAA,CAAKe,eAAA;cACRC,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA,KAAK;UAAoB;YACxB,OAAAJ,aAAA,CAAAA,aAAA,KACId,KAAA,CAAKe,eAAA;cACRC,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA,KAAK;UAAmB;YACvB,OAAAJ,aAAA,CAAAA,aAAA,KACId,KAAA,CAAKe,eAAA;cACRC,IAAA,EAAM;cACNC,IAAA,EAAM;cACNC,KAAA,EAAO;YAAA;UAET;QACA;UAAS;YAER,OAAOC,IAAA;UACR;MACD;IACD;IAAA;AAAA;AAAA;AAAA;AAAA;IAAAjB,eAAA,mCAO2B,YAAM;MAChCF,KAAA,CAAKU,aAAA,GAAgBD,YAAA,CAAaT,KAAA,CAAKU,aAAa;MACpDV,KAAA,CAAKY,WAAA,GAAc;IACpB;IAAA;AAAA;AAAA;AAAA;AAAA;IAAAV,eAAA,qBAOa,YAAM;MAElB,IACCF,KAAA,CAAKY,WAAA,KAAgB,UACrBZ,KAAA,CAAKoB,iBAAA,IACLpB,KAAA,CAAKoB,iBAAA,CAAkBI,IAAA,CAAKxB,KAAA,CAAKD,MAAA,CAAO2B,MAAA,CAAOC,kBAAkB,KAC/D3B,KAAA,CAAKD,MAAA,CAAO6B,eAAA,GAAkBpC,oBAAA,GAAuBE,aAAA,GACtD;QACDM,KAAA,CAAK6B,wBAAA,CAAyB;MAC/B;IACD;IAnNmB,KAAA9B,MAAA,GAAAA,MAAA;EAAiB;EAAA+B,YAAA,CAAAhC,YAAA;IAAAiC,GAAA;IAAAC,GAAA;IA6DC;AAAA;AAAA;AAAA;AAAA;IAOrC,SAAAA,IAAA,EAAiB;MAChB,OAAO,KAAKpB,WAAA;IACb;EAAA;EAAA,OAAAd,YAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}