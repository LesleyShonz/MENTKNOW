{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/tools/ZoomTool/children/ZoomBrushing.ts"],
  "sourcesContent": ["import { Box2d } from '@tldraw/primitives'\nimport { TLEventHandlers, TLPointerEventInfo } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\n\nexport class ZoomBrushing extends StateNode {\n\tstatic override id = 'zoom_brushing'\n\n\tinfo = {} as TLPointerEventInfo & { onInteractionEnd?: string }\n\n\tzoomBrush = new Box2d()\n\n\tonEnter = (info: TLPointerEventInfo & { onInteractionEnd: string }) => {\n\t\tthis.info = info\n\t\tthis.update()\n\t}\n\n\tonExit = () => {\n\t\tthis.editor.setZoomBrush(null)\n\t}\n\n\tonPointerMove = () => {\n\t\tthis.update()\n\t}\n\n\tonPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\tonCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\tprivate update() {\n\t\tconst {\n\t\t\tinputs: { originPagePoint, currentPagePoint },\n\t\t} = this.editor\n\n\t\tthis.zoomBrush.setTo(Box2d.FromPoints([originPagePoint, currentPagePoint]))\n\t\tthis.editor.setZoomBrush(this.zoomBrush.toJson())\n\t}\n\n\tprivate cancel() {\n\t\tthis.parent.transition('idle', this.info)\n\t}\n\n\tprivate complete() {\n\t\tconst { zoomBrush } = this\n\t\tconst threshold = 8 / this.editor.zoomLevel\n\t\t// If the selected area is small then treat it as a click\n\t\tif (zoomBrush.width < threshold && zoomBrush.height < threshold) {\n\t\t\tconst point = this.editor.inputs.currentScreenPoint\n\t\t\tif (this.editor.inputs.altKey) {\n\t\t\t\tthis.editor.zoomOut(point, { duration: 220 })\n\t\t\t} else {\n\t\t\t\tthis.editor.zoomIn(point, { duration: 220 })\n\t\t\t}\n\t\t} else {\n\t\t\tconst zoomLevel = this.editor.inputs.altKey ? this.editor.zoomLevel / 2 : undefined\n\t\t\tthis.editor.zoomToBounds(\n\t\t\t\tzoomBrush.x,\n\t\t\t\tzoomBrush.y,\n\t\t\t\tzoomBrush.width,\n\t\t\t\tzoomBrush.height,\n\t\t\t\tzoomLevel,\n\t\t\t\t{ duration: 220 }\n\t\t\t)\n\t\t}\n\n\t\tthis.parent.transition('idle', this.info)\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,aAAa;AAEtB,SAAS,iBAAiB;AAEnB,MAAM,qBAAqB,UAAU;AAAA,EAC3C,OAAgB,KAAK;AAAA,EAErB,OAAO,CAAC;AAAA,EAER,YAAY,IAAI,MAAM;AAAA,EAEtB,UAAU,CAAC,SAA4D;AACtE,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,SAAS,MAAM;AACd,SAAK,OAAO,aAAa,IAAI;AAAA,EAC9B;AAAA,EAEA,gBAAgB,MAAM;AACrB,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,cAA8C,MAAM;AACnD,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,WAAwC,MAAM;AAC7C,SAAK,OAAO;AAAA,EACb;AAAA,EAEQ,SAAS;AAChB,UAAM;AAAA,MACL,QAAQ,EAAE,iBAAiB,iBAAiB;AAAA,IAC7C,IAAI,KAAK;AAET,SAAK,UAAU,MAAM,MAAM,WAAW,CAAC,iBAAiB,gBAAgB,CAAC,CAAC;AAC1E,SAAK,OAAO,aAAa,KAAK,UAAU,OAAO,CAAC;AAAA,EACjD;AAAA,EAEQ,SAAS;AAChB,SAAK,OAAO,WAAW,QAAQ,KAAK,IAAI;AAAA,EACzC;AAAA,EAEQ,WAAW;AAClB,UAAM,EAAE,UAAU,IAAI;AACtB,UAAM,YAAY,IAAI,KAAK,OAAO;AAElC,QAAI,UAAU,QAAQ,aAAa,UAAU,SAAS,WAAW;AAChE,YAAM,QAAQ,KAAK,OAAO,OAAO;AACjC,UAAI,KAAK,OAAO,OAAO,QAAQ;AAC9B,aAAK,OAAO,QAAQ,OAAO,EAAE,UAAU,IAAI,CAAC;AAAA,MAC7C,OAAO;AACN,aAAK,OAAO,OAAO,OAAO,EAAE,UAAU,IAAI,CAAC;AAAA,MAC5C;AAAA,IACD,OAAO;AACN,YAAM,YAAY,KAAK,OAAO,OAAO,SAAS,KAAK,OAAO,YAAY,IAAI;AAC1E,WAAK,OAAO;AAAA,QACX,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV;AAAA,QACA,EAAE,UAAU,IAAI;AAAA,MACjB;AAAA,IACD;AAEA,SAAK,OAAO,WAAW,QAAQ,KAAK,IAAI;AAAA,EACzC;AACD;",
  "names": []
}
