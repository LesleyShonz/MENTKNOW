{"ast":null,"code":"import { atom, react } from \"signia\";\nvar featureFlags = {\n  // todo: remove this. it's not used, but we only have one feature flag and i\n  // wanted an example :(\n  peopleMenu: createFeatureFlag(\"peopleMenu\"),\n  highlighterTool: createFeatureFlag(\"highlighterTool\", {\n    all: true\n  })\n};\nvar debugFlags = {\n  // --- DEBUG VALUES ---\n  preventDefaultLogging: createDebugValue(\"preventDefaultLogging\", {\n    defaults: {\n      all: false\n    }\n  }),\n  pointerCaptureLogging: createDebugValue(\"pointerCaptureLogging\", {\n    defaults: {\n      all: false\n    }\n  }),\n  pointerCaptureTracking: createDebugValue(\"pointerCaptureTracking\", {\n    defaults: {\n      all: false\n    }\n  }),\n  pointerCaptureTrackingObject: createDebugValue(\"pointerCaptureTrackingObject\",\n  // ideally we wouldn't store this mutable value in an atom but it's not\n  // a big deal for debug values\n  {\n    defaults: {\n      all: /* @__PURE__ */new Map()\n    },\n    shouldStoreForSession: false\n  }),\n  elementRemovalLogging: createDebugValue(\"elementRemovalLogging\", {\n    defaults: {\n      all: false\n    }\n  }),\n  debugSvg: createDebugValue(\"debugSvg\", {\n    defaults: {\n      all: false\n    }\n  }),\n  throwToBlob: createDebugValue(\"throwToBlob\", {\n    defaults: {\n      all: false\n    }\n  }),\n  logMessages: createDebugValue(\"uiLog\", {\n    defaults: {\n      all: []\n    }\n  }),\n  resetConnectionEveryPing: createDebugValue(\"resetConnectionEveryPing\", {\n    defaults: {\n      all: false\n    }\n  }),\n  debugCursors: createDebugValue(\"debugCursors\", {\n    defaults: {\n      all: false\n    }\n  }),\n  forceSrgb: createDebugValue(\"forceSrgbColors\", {\n    defaults: {\n      all: false\n    }\n  })\n};\nif (typeof window !== \"undefined\") {\n  window.tldrawLog = function (message) {\n    debugFlags.logMessages.set(debugFlags.logMessages.value.concat(message));\n  };\n}\nif (typeof Element !== \"undefined\") {\n  var nativeElementRemoveChild = Element.prototype.removeChild;\n  react(\"element removal logging\", function () {\n    if (debugFlags.elementRemovalLogging.value) {\n      Element.prototype.removeChild = function (child) {\n        console.warn(\"[tldraw] removing child:\", child);\n        return nativeElementRemoveChild.call(this, child);\n      };\n    } else {\n      Element.prototype.removeChild = nativeElementRemoveChild;\n    }\n  });\n}\nfunction createDebugValue(name, _ref) {\n  var defaults = _ref.defaults,\n    _ref$shouldStoreForSe = _ref.shouldStoreForSession,\n    shouldStoreForSession = _ref$shouldStoreForSe === void 0 ? true : _ref$shouldStoreForSe;\n  return createDebugValueBase({\n    name: name,\n    defaults: defaults,\n    shouldStoreForSession: shouldStoreForSession\n  });\n}\nfunction createFeatureFlag(name) {\n  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    all: true,\n    production: false\n  };\n  return createDebugValueBase({\n    name: name,\n    defaults: defaults,\n    shouldStoreForSession: true\n  });\n}\nfunction createDebugValueBase(def) {\n  var defaultValue = getDefaultValue(def);\n  var storedValue = def.shouldStoreForSession ? getStoredInitialValue(def.name) : null;\n  var valueAtom = atom(\"debug:\".concat(def.name), storedValue !== null && storedValue !== void 0 ? storedValue : defaultValue);\n  if (typeof window !== \"undefined\") {\n    if (def.shouldStoreForSession) {\n      react(\"debug:\".concat(def.name), function () {\n        var currentValue = valueAtom.value;\n        try {\n          if (currentValue === defaultValue) {\n            window.sessionStorage.removeItem(\"tldraw_debug:\".concat(def.name));\n          } else {\n            window.sessionStorage.setItem(\"tldraw_debug:\".concat(def.name), JSON.stringify(currentValue));\n          }\n        } catch (_unused) {}\n      });\n    }\n    Object.defineProperty(window, \"tldraw\".concat(def.name.replace(/^[a-z]/, function (l) {\n      return l.toUpperCase();\n    })), {\n      get: function get() {\n        return valueAtom.value;\n      },\n      set: function set(newValue) {\n        valueAtom.set(newValue);\n      },\n      configurable: true\n    });\n  }\n  return Object.assign(valueAtom, def);\n}\nfunction getStoredInitialValue(name) {\n  try {\n    var _window$sessionStorag, _window;\n    return JSON.parse((_window$sessionStorag = (_window = window) === null || _window === void 0 ? void 0 : _window.sessionStorage.getItem(\"tldraw_debug:\".concat(name))) !== null && _window$sessionStorag !== void 0 ? _window$sessionStorag : \"null\");\n  } catch (err) {\n    return null;\n  }\n}\nfunction readEnv(fn) {\n  try {\n    return fn();\n  } catch (_unused2) {\n    return null;\n  }\n}\nfunction getDefaultValue(def) {\n  var _ref2, _ref3, _readEnv, _def$defaults$product, _def$defaults$staging, _def$defaults$develop;\n  var env = (_ref2 = (_ref3 = (_readEnv = readEnv(function () {\n    return process.env.TLDRAW_ENV;\n  })) !== null && _readEnv !== void 0 ? _readEnv : readEnv(function () {\n    return process.env.VERCEL_PUBLIC_TLDRAW_ENV;\n  })) !== null && _ref3 !== void 0 ? _ref3 : readEnv(function () {\n    return process.env.NEXT_PUBLIC_TLDRAW_ENV;\n  })) !== null && _ref2 !== void 0 ? _ref2 :\n  // default to production because if we don't have one of these, this is probably a library use\n  \"production\";\n  switch (env) {\n    case \"production\":\n      return (_def$defaults$product = def.defaults.production) !== null && _def$defaults$product !== void 0 ? _def$defaults$product : def.defaults.all;\n    case \"preview\":\n    case \"staging\":\n      return (_def$defaults$staging = def.defaults.staging) !== null && _def$defaults$staging !== void 0 ? _def$defaults$staging : def.defaults.all;\n    default:\n      return (_def$defaults$develop = def.defaults.development) !== null && _def$defaults$develop !== void 0 ? _def$defaults$develop : def.defaults.all;\n  }\n}\nexport { debugFlags, featureFlags };","map":{"version":3,"names":["atom","react","featureFlags","peopleMenu","createFeatureFlag","highlighterTool","all","debugFlags","preventDefaultLogging","createDebugValue","defaults","pointerCaptureLogging","pointerCaptureTracking","pointerCaptureTrackingObject","Map","shouldStoreForSession","elementRemovalLogging","debugSvg","throwToBlob","logMessages","resetConnectionEveryPing","debugCursors","forceSrgb","window","tldrawLog","message","set","value","concat","Element","nativeElementRemoveChild","prototype","removeChild","child","console","warn","call","name","_ref","_ref$shouldStoreForSe","createDebugValueBase","arguments","length","undefined","production","def","defaultValue","getDefaultValue","storedValue","getStoredInitialValue","valueAtom","currentValue","sessionStorage","removeItem","setItem","JSON","stringify","_unused","Object","defineProperty","replace","l","toUpperCase","get","newValue","configurable","assign","_window$sessionStorag","_window","parse","getItem","err","readEnv","fn","_unused2","_ref2","_ref3","_readEnv","_def$defaults$product","_def$defaults$staging","_def$defaults$develop","env","process","TLDRAW_ENV","VERCEL_PUBLIC_TLDRAW_ENV","NEXT_PUBLIC_TLDRAW_ENV","staging","development"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/debug-flags.ts"],"sourcesContent":["import { Atom, atom, react } from 'signia'\n\n// --- 1. DEFINE ---\n//\n// Define your debug values and feature flags here. Use `createDebugValue` to\n// create an arbitrary value with defaults for production, staging, and\n// development. Use `createFeatureFlag` to create a boolean flag which will be\n// `true` by default in development and staging, and `false` in production.\n/** @internal */\nexport const featureFlags = {\n\t// todo: remove this. it's not used, but we only have one feature flag and i\n\t// wanted an example :(\n\tpeopleMenu: createFeatureFlag('peopleMenu'),\n\thighlighterTool: createFeatureFlag('highlighterTool', { all: true }),\n} satisfies Record<string, DebugFlag<boolean>>\n\n/** @internal */\nexport const debugFlags = {\n\t// --- DEBUG VALUES ---\n\tpreventDefaultLogging: createDebugValue('preventDefaultLogging', {\n\t\tdefaults: { all: false },\n\t}),\n\tpointerCaptureLogging: createDebugValue('pointerCaptureLogging', {\n\t\tdefaults: { all: false },\n\t}),\n\tpointerCaptureTracking: createDebugValue('pointerCaptureTracking', {\n\t\tdefaults: { all: false },\n\t}),\n\tpointerCaptureTrackingObject: createDebugValue(\n\t\t'pointerCaptureTrackingObject',\n\t\t// ideally we wouldn't store this mutable value in an atom but it's not\n\t\t// a big deal for debug values\n\t\t{\n\t\t\tdefaults: { all: new Map<Element, number>() },\n\t\t\tshouldStoreForSession: false,\n\t\t}\n\t),\n\telementRemovalLogging: createDebugValue('elementRemovalLogging', {\n\t\tdefaults: { all: false },\n\t}),\n\tdebugSvg: createDebugValue('debugSvg', {\n\t\tdefaults: { all: false },\n\t}),\n\tthrowToBlob: createDebugValue('throwToBlob', {\n\t\tdefaults: { all: false },\n\t}),\n\tlogMessages: createDebugValue('uiLog', { defaults: { all: [] } }),\n\tresetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {\n\t\tdefaults: { all: false },\n\t}),\n\tdebugCursors: createDebugValue('debugCursors', {\n\t\tdefaults: { all: false },\n\t}),\n\tforceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),\n}\n\ndeclare global {\n\tinterface Window {\n\t\ttldrawLog: (message: any) => void\n\t}\n}\n\nif (typeof window !== 'undefined') {\n\twindow.tldrawLog = (message: any) => {\n\t\tdebugFlags.logMessages.set(debugFlags.logMessages.value.concat(message))\n\t}\n}\n\n// --- 2. USE ---\n// In normal code, read from debug flags directly by calling .value on them:\n//    if (debugFlags.preventDefaultLogging.value) { ... }\n//\n// In react, wrap your reads in `useValue` (or your component in `track`)\n// so they react to changes:\n//    const shouldLog = useValue(debugFlags.preventDefaultLogging)\n\n// --- 3. GET FUNKY ---\n// If you need to do fun stuff like monkey-patching in response to flag changes,\n// add that here. Make sure you wrap your code in `react` so it runs\n// automatically when values change!\n\nif (typeof Element !== 'undefined') {\n\tconst nativeElementRemoveChild = Element.prototype.removeChild\n\treact('element removal logging', () => {\n\t\tif (debugFlags.elementRemovalLogging.value) {\n\t\t\tElement.prototype.removeChild = function <T extends Node>(this: any, child: Node): T {\n\t\t\t\tconsole.warn('[tldraw] removing child:', child)\n\t\t\t\treturn nativeElementRemoveChild.call(this, child) as T\n\t\t\t}\n\t\t} else {\n\t\t\tElement.prototype.removeChild = nativeElementRemoveChild\n\t\t}\n\t})\n}\n\n// --- IMPLEMENTATION ---\n// you probably don't need to read this if you're just using the debug values system\nfunction createDebugValue<T>(\n\tname: string,\n\t{\n\t\tdefaults,\n\t\tshouldStoreForSession = true,\n\t}: { defaults: Defaults<T>; shouldStoreForSession?: boolean }\n) {\n\treturn createDebugValueBase({\n\t\tname,\n\t\tdefaults,\n\t\tshouldStoreForSession,\n\t})\n}\nfunction createFeatureFlag(\n\tname: string,\n\tdefaults: Defaults<boolean> = { all: true, production: false }\n) {\n\treturn createDebugValueBase({\n\t\tname,\n\t\tdefaults,\n\t\tshouldStoreForSession: true,\n\t})\n}\n\nfunction createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {\n\tconst defaultValue = getDefaultValue(def)\n\tconst storedValue = def.shouldStoreForSession\n\t\t? (getStoredInitialValue(def.name) as T | null)\n\t\t: null\n\tconst valueAtom = atom(`debug:${def.name}`, storedValue ?? defaultValue)\n\n\tif (typeof window !== 'undefined') {\n\t\tif (def.shouldStoreForSession) {\n\t\t\treact(`debug:${def.name}`, () => {\n\t\t\t\tconst currentValue = valueAtom.value\n\t\t\t\ttry {\n\t\t\t\t\tif (currentValue === defaultValue) {\n\t\t\t\t\t\twindow.sessionStorage.removeItem(`tldraw_debug:${def.name}`)\n\t\t\t\t\t} else {\n\t\t\t\t\t\twindow.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\t// not a big deal\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tObject.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {\n\t\t\tget() {\n\t\t\t\treturn valueAtom.value\n\t\t\t},\n\t\t\tset(newValue) {\n\t\t\t\tvalueAtom.set(newValue)\n\t\t\t},\n\t\t\tconfigurable: true,\n\t\t})\n\t}\n\n\treturn Object.assign(valueAtom, def)\n}\n\nfunction getStoredInitialValue(name: string) {\n\ttry {\n\t\treturn JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? 'null')\n\t} catch (err) {\n\t\treturn null\n\t}\n}\n\n// process.env might not be defined, but we can't access it using optional\n// chaining because some bundlers search for `process.env.SOMETHING` as a string\n// and replace it with its value.\nfunction readEnv(fn: () => string | undefined) {\n\ttry {\n\t\treturn fn()\n\t} catch {\n\t\treturn null\n\t}\n}\n\nfunction getDefaultValue<T>(def: DebugFlagDef<T>): T {\n\tconst env =\n\t\treadEnv(() => process.env.TLDRAW_ENV) ??\n\t\treadEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ??\n\t\treadEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ??\n\t\t// default to production because if we don't have one of these, this is probably a library use\n\t\t'production'\n\n\tswitch (env) {\n\t\tcase 'production':\n\t\t\treturn def.defaults.production ?? def.defaults.all\n\t\tcase 'preview':\n\t\tcase 'staging':\n\t\t\treturn def.defaults.staging ?? def.defaults.all\n\t\tdefault:\n\t\t\treturn def.defaults.development ?? def.defaults.all\n\t}\n}\n\ninterface Defaults<T> {\n\tdevelopment?: T\n\tstaging?: T\n\tproduction?: T\n\tall: T\n}\n\n/** @internal */\nexport interface DebugFlagDef<T> {\n\tname: string\n\tdefaults: Defaults<T>\n\tshouldStoreForSession: boolean\n}\n\n/** @internal */\nexport type DebugFlag<T> = DebugFlagDef<T> & Atom<T>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}