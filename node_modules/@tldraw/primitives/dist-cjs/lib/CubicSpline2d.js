"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CubicSpline2d_exports = {};
__export(CubicSpline2d_exports, {
  CubicSpline2d: () => CubicSpline2d
});
module.exports = __toCommonJS(CubicSpline2d_exports);
var import_BaseSpline2d = require("./BaseSpline2d");
var import_CubicSegment2d = require("./CubicSegment2d");
var import_Vec2d = require("./Vec2d");
class CubicSpline2d extends import_BaseSpline2d.BaseSpline2d {
  constructor(points, k = 1.2, p = 20) {
    super(points, k, p);
    this.segments = this.getSegmentsFromPoints(points, k, p);
  }
  segments;
  getSegmentsFromPoints(points, k = 1.25, p = 20) {
    const len = points.length;
    const last = len - 2;
    const results = [];
    for (let i = 0; i < len - 1; i++) {
      const p0 = i === 0 ? points[0] : points[i - 1];
      const p1 = points[i];
      const p2 = points[i + 1];
      const p3 = i === last ? p2 : points[i + 2];
      results.push(
        new import_CubicSegment2d.CubicSegment2d(
          p1,
          i === 0 ? p0 : new import_Vec2d.Vec2d(p1.x + (p2.x - p0.x) / 6 * k, p1.y + (p2.y - p0.y) / 6 * k),
          i === last ? p2 : new import_Vec2d.Vec2d(p2.x - (p3.x - p1.x) / 6 * k, p2.y - (p3.y - p1.y) / 6 * k),
          p2,
          p
        )
      );
    }
    return results;
  }
  static FromPoints(points) {
    return new CubicSpline2d(points);
  }
}
//# sourceMappingURL=CubicSpline2d.js.map
