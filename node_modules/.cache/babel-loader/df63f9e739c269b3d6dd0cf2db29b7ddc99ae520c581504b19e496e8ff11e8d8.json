{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nfunction lerp(a, b, t) {\n  return a + (b - a) * t;\n}\nfunction rng() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var w = 0;\n  function next() {\n    var t = x ^ x << 11;\n    x = y;\n    y = z;\n    z = w;\n    w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;\n    return w / 4294967296 * 2;\n  }\n  for (var k = 0; k < seed.length + 64; k++) {\n    x ^= seed.charCodeAt(k) | 0;\n    next();\n  }\n  return next;\n}\nfunction modulate(value, rangeA, rangeB) {\n  var clamp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var _rangeA = _slicedToArray(rangeA, 2),\n    fromLow = _rangeA[0],\n    fromHigh = _rangeA[1];\n  var _rangeB = _slicedToArray(rangeB, 2),\n    v0 = _rangeB[0],\n    v1 = _rangeB[1];\n  var result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);\n  return clamp ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;\n}\nexport { lerp, modulate, rng };","map":{"version":3,"names":["lerp","a","b","t","rng","seed","arguments","length","undefined","x","y","z","w","next","k","charCodeAt","modulate","value","rangeA","rangeB","clamp","_rangeA","_slicedToArray","fromLow","fromHigh","_rangeB","v0","v1","result","Math","max","min"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/utils/src/lib/number.ts"],"sourcesContent":["/**\n * Linear interpolate between two values.\n *\n * @example\n *\n * ```ts\n * const A = lerp(0, 1, 0.5)\n * ```\n *\n * @public\n */\nexport function lerp(a: number, b: number, t: number) {\n\treturn a + (b - a) * t\n}\n\n/**\n * Seeded random number generator, using [xorshift](https://en.wikipedia.org/wiki/Xorshift). The\n * result will always be betweeen -1 and 1.\n *\n * Adapted from [seedrandom](https://github.com/davidbau/seedrandom).\n *\n * @public\n */\nexport function rng(seed = '') {\n\tlet x = 0\n\tlet y = 0\n\tlet z = 0\n\tlet w = 0\n\n\tfunction next() {\n\t\tconst t = x ^ (x << 11)\n\t\tx = y\n\t\ty = z\n\t\tz = w\n\t\tw ^= ((w >>> 19) ^ t ^ (t >>> 8)) >>> 0\n\t\treturn (w / 0x100000000) * 2\n\t}\n\n\tfor (let k = 0; k < seed.length + 64; k++) {\n\t\tx ^= seed.charCodeAt(k) | 0\n\t\tnext()\n\t}\n\n\treturn next\n}\n\n/**\n * Modulate a value between two ranges.\n *\n * @example\n *\n * ```ts\n * const A = modulate(0, [0, 1], [0, 100])\n * ```\n *\n * @param value - The interpolation value.\n * @param rangeA - From [low, high]\n * @param rangeB - To [low, high]\n * @param clamp - Whether to clamp the the result to [low, high]\n * @public\n */\nexport function modulate(value: number, rangeA: number[], rangeB: number[], clamp = false): number {\n\tconst [fromLow, fromHigh] = rangeA\n\tconst [v0, v1] = rangeB\n\tconst result = v0 + ((value - fromLow) / (fromHigh - fromLow)) * (v1 - v0)\n\n\treturn clamp\n\t\t? v0 < v1\n\t\t\t? Math.max(Math.min(result, v1), v0)\n\t\t\t: Math.max(Math.min(result, v0), v1)\n\t\t: result\n}\n"],"mappings":";AAWO,SAASA,KAAKC,CAAA,EAAWC,CAAA,EAAWC,CAAA,EAAW;EACrD,OAAOF,CAAA,IAAKC,CAAA,GAAID,CAAA,IAAKE,CAAA;AACtB;AAUO,SAASC,IAAA,EAAe;EAAA,IAAXC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO;EAC1B,IAAIG,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EAER,SAASC,KAAA,EAAO;IACf,IAAMV,CAAA,GAAIM,CAAA,GAAKA,CAAA,IAAK;IACpBA,CAAA,GAAIC,CAAA;IACJA,CAAA,GAAIC,CAAA;IACJA,CAAA,GAAIC,CAAA;IACJA,CAAA,KAAOA,CAAA,KAAM,KAAMT,CAAA,GAAKA,CAAA,KAAM,OAAQ;IACtC,OAAQS,CAAA,GAAI,aAAe;EAC5B;EAEA,SAASE,CAAA,GAAI,GAAGA,CAAA,GAAIT,IAAA,CAAKE,MAAA,GAAS,IAAIO,CAAA,IAAK;IAC1CL,CAAA,IAAKJ,IAAA,CAAKU,UAAA,CAAWD,CAAC,IAAI;IAC1BD,IAAA,CAAK;EACN;EAEA,OAAOA,IAAA;AACR;AAiBO,SAASG,SAASC,KAAA,EAAeC,MAAA,EAAkBC,MAAA,EAAyC;EAAA,IAAvBC,KAAA,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ;EACnF,IAAAe,OAAA,GAAAC,cAAA,CAA4BJ,MAAA;IAArBK,OAAA,GAAAF,OAAA;IAASG,QAAQ,GAAAH,OAAA;EACxB,IAAAI,OAAA,GAAAH,cAAA,CAAiBH,MAAA;IAAVO,EAAA,GAAAD,OAAA;IAAIE,EAAE,GAAAF,OAAA;EACb,IAAMG,MAAA,GAASF,EAAA,IAAOT,KAAA,GAAQM,OAAA,KAAYC,QAAA,GAAWD,OAAA,KAAaI,EAAA,GAAKD,EAAA;EAEvE,OAAON,KAAA,GACJM,EAAA,GAAKC,EAAA,GACJE,IAAA,CAAKC,GAAA,CAAID,IAAA,CAAKE,GAAA,CAAIH,MAAA,EAAQD,EAAE,GAAGD,EAAE,IACjCG,IAAA,CAAKC,GAAA,CAAID,IAAA,CAAKE,GAAA,CAAIH,MAAA,EAAQF,EAAE,GAAGC,EAAE,IAClCC,MAAA;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}