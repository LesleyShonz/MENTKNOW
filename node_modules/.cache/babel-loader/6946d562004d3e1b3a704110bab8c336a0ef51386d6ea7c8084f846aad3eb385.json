{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getIndexAbove, sortByIndex } from \"@tldraw/indices\";\nimport { Matrix2d, Vec2d } from \"@tldraw/primitives\";\nimport { createShapeId } from \"@tldraw/tlschema\";\nimport { last, structuredClone } from \"@tldraw/utils\";\nimport { StateNode } from \"../../../tools/StateNode.mjs\";\nvar Pointing = /*#__PURE__*/function (_StateNode) {\n  _inherits(Pointing, _StateNode);\n  var _super = _createSuper(Pointing);\n  function Pointing() {\n    var _this;\n    _classCallCheck(this, Pointing);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"shape\", {});\n    _defineProperty(_assertThisInitialized(_this), \"markPointId\", \"\");\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function (info) {\n      var inputs = _this.editor.inputs;\n      var currentPagePoint = inputs.currentPagePoint;\n      _this.markPointId = _this.editor.mark(\"creating\");\n      var shapeExists = false;\n      if (info.shapeId) {\n        var shape = _this.editor.getShapeById(info.shapeId);\n        if (shape) {\n          shapeExists = true;\n          _this.shape = shape;\n        }\n      }\n      if (inputs.shiftKey && shapeExists) {\n        var handles = _this.editor.getShapeUtil(_this.shape).handles(_this.shape);\n        var vertexHandles = handles.filter(function (h) {\n          return h.type === \"vertex\";\n        }).sort(sortByIndex);\n        var endHandle = vertexHandles[vertexHandles.length - 1];\n        var shapePagePoint = Matrix2d.applyToPoint(_this.editor.getParentTransform(_this.shape), new Vec2d(_this.shape.x, _this.shape.y));\n        var nextEndHandleIndex, nextEndHandleId, nextEndHandle;\n        if (vertexHandles.length === 2 && vertexHandles[1].x === 1 && vertexHandles[1].y === 1) {\n          nextEndHandleIndex = vertexHandles[1].index;\n          nextEndHandleId = vertexHandles[1].id;\n          nextEndHandle = _objectSpread(_objectSpread({}, vertexHandles[1]), {}, {\n            x: currentPagePoint.x - shapePagePoint.x,\n            y: currentPagePoint.y - shapePagePoint.y\n          });\n        } else {\n          nextEndHandleIndex = getIndexAbove(endHandle.index);\n          nextEndHandleId = \"handle:\" + nextEndHandleIndex;\n          nextEndHandle = {\n            x: currentPagePoint.x - shapePagePoint.x,\n            y: currentPagePoint.y - shapePagePoint.y,\n            index: nextEndHandleIndex,\n            canBind: false,\n            type: \"vertex\",\n            id: nextEndHandleId\n          };\n        }\n        var nextHandles = structuredClone(_this.shape.props.handles);\n        nextHandles[nextEndHandle.id] = nextEndHandle;\n        _this.editor.updateShapes([{\n          id: _this.shape.id,\n          type: _this.shape.type,\n          props: {\n            handles: nextHandles\n          }\n        }]);\n      } else {\n        var id = createShapeId();\n        _this.editor.createShapes([{\n          id: id,\n          type: \"line\",\n          x: currentPagePoint.x,\n          y: currentPagePoint.y\n        }]);\n        _this.editor.select(id);\n        _this.shape = _this.editor.getShapeById(id);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function () {\n      if (!_this.shape) return;\n      if (_this.editor.inputs.isDragging) {\n        var _util$handles;\n        var util = _this.editor.getShapeUtil(_this.shape);\n        var handles = (_util$handles = util.handles) === null || _util$handles === void 0 ? void 0 : _util$handles.call(util, _this.shape);\n        if (!handles) {\n          _this.editor.bailToMark(\"creating\");\n          throw Error(\"No handles found\");\n        }\n        _this.editor.setSelectedTool(\"select.dragging_handle\", {\n          shape: _this.shape,\n          isCreating: true,\n          handle: last(handles),\n          onInteractionEnd: \"line\"\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.cancel();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onComplete\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onInterrupt\", function () {\n      _this.parent.transition(\"idle\", {});\n      _this.editor.bailToMark(\"creating\");\n      _this.editor.snaps.clear();\n    });\n    return _this;\n  }\n  _createClass(Pointing, [{\n    key: \"complete\",\n    value: function complete() {\n      this.parent.transition(\"idle\", {\n        shapeId: this.shape.id\n      });\n      this.editor.snaps.clear();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.editor.bailToMark(this.markPointId);\n      this.parent.transition(\"idle\", {\n        shapeId: this.shape.id\n      });\n      this.editor.snaps.clear();\n    }\n  }]);\n  return Pointing;\n}(StateNode);\n_defineProperty(Pointing, \"id\", \"pointing\");\nexport { Pointing };","map":{"version":3,"names":["getIndexAbove","sortByIndex","Matrix2d","Vec2d","createShapeId","last","structuredClone","StateNode","Pointing","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","info","inputs","editor","currentPagePoint","markPointId","mark","shapeExists","shapeId","shape","getShapeById","shiftKey","handles","getShapeUtil","vertexHandles","filter","h","type","sort","endHandle","shapePagePoint","applyToPoint","getParentTransform","x","y","nextEndHandleIndex","nextEndHandleId","nextEndHandle","index","id","_objectSpread","canBind","nextHandles","props","updateShapes","createShapes","select","isDragging","_util$handles","util","bailToMark","Error","setSelectedTool","isCreating","handle","onInteractionEnd","complete","cancel","parent","transition","snaps","clear","_createClass","key","value"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/line/toolStates/Pointing.ts"],"sourcesContent":["import { getIndexAbove, sortByIndex } from '@tldraw/indices'\nimport { Matrix2d, Vec2d } from '@tldraw/primitives'\nimport { TLHandle, TLLineShape, TLShapeId, createShapeId } from '@tldraw/tlschema'\nimport { last, structuredClone } from '@tldraw/utils'\nimport { StateNode } from '../../../tools/StateNode'\nimport { TLEventHandlers, TLInterruptEvent } from '../../../types/event-types'\n\nexport class Pointing extends StateNode {\n\tstatic override id = 'pointing'\n\n\tshape = {} as TLLineShape\n\n\tmarkPointId = ''\n\n\tonEnter = (info: { shapeId?: TLShapeId }) => {\n\t\tconst { inputs } = this.editor\n\t\tconst { currentPagePoint } = inputs\n\n\t\tthis.markPointId = this.editor.mark('creating')\n\n\t\tlet shapeExists = false\n\t\tif (info.shapeId) {\n\t\t\tconst shape = this.editor.getShapeById<TLLineShape>(info.shapeId)\n\t\t\tif (shape) {\n\t\t\t\tshapeExists = true\n\t\t\t\tthis.shape = shape\n\t\t\t}\n\t\t}\n\n\t\t// if user is holding shift then we are adding points to an existing line\n\t\tif (inputs.shiftKey && shapeExists) {\n\t\t\tconst handles = this.editor.getShapeUtil(this.shape).handles(this.shape)\n\n\t\t\tconst vertexHandles = handles.filter((h) => h.type === 'vertex').sort(sortByIndex)\n\t\t\tconst endHandle = vertexHandles[vertexHandles.length - 1]\n\n\t\t\tconst shapePagePoint = Matrix2d.applyToPoint(\n\t\t\t\tthis.editor.getParentTransform(this.shape)!,\n\t\t\t\tnew Vec2d(this.shape.x, this.shape.y)\n\t\t\t)\n\n\t\t\tlet nextEndHandleIndex: string, nextEndHandleId: string, nextEndHandle: TLHandle\n\n\t\t\tif (vertexHandles.length === 2 && vertexHandles[1].x === 1 && vertexHandles[1].y === 1) {\n\t\t\t\tnextEndHandleIndex = vertexHandles[1].index\n\t\t\t\tnextEndHandleId = vertexHandles[1].id\n\t\t\t\tnextEndHandle = {\n\t\t\t\t\t...vertexHandles[1],\n\t\t\t\t\tx: currentPagePoint.x - shapePagePoint.x,\n\t\t\t\t\ty: currentPagePoint.y - shapePagePoint.y,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextEndHandleIndex = getIndexAbove(endHandle.index)\n\t\t\t\tnextEndHandleId = 'handle:' + nextEndHandleIndex\n\t\t\t\tnextEndHandle = {\n\t\t\t\t\tx: currentPagePoint.x - shapePagePoint.x,\n\t\t\t\t\ty: currentPagePoint.y - shapePagePoint.y,\n\t\t\t\t\tindex: nextEndHandleIndex,\n\t\t\t\t\tcanBind: false,\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tid: nextEndHandleId,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst nextHandles = structuredClone(this.shape.props.handles)\n\n\t\t\tnextHandles[nextEndHandle.id] = nextEndHandle\n\n\t\t\tthis.editor.updateShapes([\n\t\t\t\t{\n\t\t\t\t\tid: this.shape.id,\n\t\t\t\t\ttype: this.shape.type,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\thandles: nextHandles,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t} else {\n\t\t\tconst id = createShapeId()\n\n\t\t\tthis.editor.createShapes<TLLineShape>([\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tx: currentPagePoint.x,\n\t\t\t\t\ty: currentPagePoint.y,\n\t\t\t\t},\n\t\t\t])\n\n\t\t\tthis.editor.select(id)\n\t\t\tthis.shape = this.editor.getShapeById(id)!\n\t\t}\n\t}\n\n\tonPointerMove: TLEventHandlers['onPointerMove'] = () => {\n\t\tif (!this.shape) return\n\n\t\tif (this.editor.inputs.isDragging) {\n\t\t\tconst util = this.editor.getShapeUtil(this.shape)\n\t\t\tconst handles = util.handles?.(this.shape)\n\t\t\tif (!handles) {\n\t\t\t\tthis.editor.bailToMark('creating')\n\t\t\t\tthrow Error('No handles found')\n\t\t\t}\n\n\t\t\tthis.editor.setSelectedTool('select.dragging_handle', {\n\t\t\t\tshape: this.shape,\n\t\t\t\tisCreating: true,\n\t\t\t\thandle: last(handles)!,\n\t\t\t\tonInteractionEnd: 'line',\n\t\t\t})\n\t\t}\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onInterrupt: TLInterruptEvent = () => {\n\t\tthis.parent.transition('idle', {})\n\t\tthis.editor.bailToMark('creating')\n\t\tthis.editor.snaps.clear()\n\t}\n\n\tcomplete() {\n\t\tthis.parent.transition('idle', { shapeId: this.shape.id })\n\t\tthis.editor.snaps.clear()\n\t}\n\n\tcancel() {\n\t\tthis.editor.bailToMark(this.markPointId)\n\t\tthis.parent.transition('idle', { shapeId: this.shape.id })\n\t\tthis.editor.snaps.clear()\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}