{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { angleDelta, degreesToRadians, EPSILON, snapAngle } from \"@tldraw/primitives\";\nimport { applyRotationToSnapshotShapes, getRotationSnapshot } from \"../../../../utils/rotation.mjs\";\nimport { StateNode } from \"../../StateNode.mjs\";\nimport { CursorTypeMap } from \"./PointingResizeHandle.mjs\";\nvar Rotating = /*#__PURE__*/function (_StateNode) {\n  _inherits(Rotating, _StateNode);\n  var _super = _createSuper(Rotating);\n  function Rotating() {\n    var _this;\n    _classCallCheck(this, Rotating);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"snapshot\", {});\n    _defineProperty(_assertThisInitialized(_this), \"info\", {});\n    _defineProperty(_assertThisInitialized(_this), \"markId\", \"\");\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function (info) {\n      _this.info = info;\n      _this.markId = _this.editor.mark(\"rotate start\");\n      _this.snapshot = getRotationSnapshot({\n        editor: _this.editor\n      });\n      _this.handleStart();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onExit\", function () {\n      _this.editor.setCursor({\n        type: \"none\"\n      });\n      _this.snapshot = {};\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function () {\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function () {\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function () {\n      _this.update();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onComplete\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.cancel();\n    });\n    // ---\n    _defineProperty(_assertThisInitialized(_this), \"update\", function () {\n      var newSelectionRotation = _this._getRotationFromPointerPosition({\n        snapToNearestDegree: false\n      });\n      applyRotationToSnapshotShapes({\n        editor: _this.editor,\n        delta: newSelectionRotation,\n        snapshot: _this.snapshot,\n        stage: \"update\"\n      });\n      _this.editor.setCursor({\n        type: CursorTypeMap[_this.info.handle],\n        rotation: newSelectionRotation + _this.snapshot.initialSelectionRotation\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.editor.bailToMark(_this.markId);\n      if (_this.info.onInteractionEnd) {\n        _this.editor.setSelectedTool(_this.info.onInteractionEnd, _this.info);\n      } else {\n        _this.parent.transition(\"idle\", _this.info);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"complete\", function () {\n      applyRotationToSnapshotShapes({\n        editor: _this.editor,\n        delta: _this._getRotationFromPointerPosition({\n          snapToNearestDegree: true\n        }),\n        snapshot: _this.snapshot,\n        stage: \"end\"\n      });\n      if (_this.info.onInteractionEnd) {\n        _this.editor.setSelectedTool(_this.info.onInteractionEnd, _this.info);\n      } else {\n        _this.parent.transition(\"idle\", _this.info);\n      }\n    });\n    return _this;\n  }\n  _createClass(Rotating, [{\n    key: \"handleStart\",\n    value: function handleStart() {\n      var newSelectionRotation = this._getRotationFromPointerPosition({\n        snapToNearestDegree: false\n      });\n      applyRotationToSnapshotShapes({\n        editor: this.editor,\n        delta: this._getRotationFromPointerPosition({\n          snapToNearestDegree: false\n        }),\n        snapshot: this.snapshot,\n        stage: \"start\"\n      });\n      this.editor.setCursor({\n        type: CursorTypeMap[this.info.handle],\n        rotation: newSelectionRotation + this.snapshot.initialSelectionRotation\n      });\n    }\n  }, {\n    key: \"_getRotationFromPointerPosition\",\n    value: function _getRotationFromPointerPosition(_ref) {\n      var snapToNearestDegree = _ref.snapToNearestDegree;\n      var _this$editor = this.editor,\n        selectionPageCenter = _this$editor.selectionPageCenter,\n        _this$editor$inputs = _this$editor.inputs,\n        shiftKey = _this$editor$inputs.shiftKey,\n        currentPagePoint = _this$editor$inputs.currentPagePoint;\n      var _this$snapshot = this.snapshot,\n        initialCursorAngle = _this$snapshot.initialCursorAngle,\n        initialSelectionRotation = _this$snapshot.initialSelectionRotation;\n      var preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;\n      var newSelectionRotation = initialSelectionRotation + preSnapRotationDelta;\n      if (shiftKey) {\n        newSelectionRotation = snapAngle(newSelectionRotation, 24);\n      } else if (snapToNearestDegree) {\n        newSelectionRotation = Math.round(newSelectionRotation / EPSILON) * EPSILON;\n        if (this.editor.isCoarsePointer) {\n          var snappedToRightAngle = snapAngle(newSelectionRotation, 4);\n          var angleToRightAngle = angleDelta(newSelectionRotation, snappedToRightAngle);\n          if (Math.abs(angleToRightAngle) < degreesToRadians(5)) {\n            newSelectionRotation = snappedToRightAngle;\n          }\n        }\n      }\n      return newSelectionRotation - initialSelectionRotation;\n    }\n  }]);\n  return Rotating;\n}(StateNode);\n_defineProperty(Rotating, \"id\", \"rotating\");\nexport { Rotating };","map":{"version":3,"names":["angleDelta","degreesToRadians","EPSILON","snapAngle","applyRotationToSnapshotShapes","getRotationSnapshot","StateNode","CursorTypeMap","Rotating","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","info","markId","editor","mark","snapshot","handleStart","setCursor","type","update","complete","cancel","newSelectionRotation","_getRotationFromPointerPosition","snapToNearestDegree","delta","stage","handle","rotation","initialSelectionRotation","bailToMark","onInteractionEnd","setSelectedTool","parent","transition","_createClass","key","value","_ref","_this$editor","selectionPageCenter","_this$editor$inputs","inputs","shiftKey","currentPagePoint","_this$snapshot","initialCursorAngle","preSnapRotationDelta","angle","Math","round","isCoarsePointer","snappedToRightAngle","angleToRightAngle","abs"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/Rotating.ts"],"sourcesContent":["import { angleDelta, degreesToRadians, EPSILON, RotateCorner, snapAngle } from '@tldraw/primitives'\nimport {\n\tapplyRotationToSnapshotShapes,\n\tgetRotationSnapshot,\n\tTLRotationSnapshot,\n} from '../../../../utils/rotation'\nimport { TLEventHandlers, TLPointerEventInfo } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\nimport { CursorTypeMap } from './PointingResizeHandle'\n\nexport class Rotating extends StateNode {\n\tstatic override id = 'rotating'\n\n\tsnapshot = {} as TLRotationSnapshot\n\n\tinfo = {} as Extract<TLPointerEventInfo, { target: 'selection' }> & { onInteractionEnd?: string }\n\n\tmarkId = ''\n\n\toverride onEnter = (\n\t\tinfo: Extract<TLPointerEventInfo, { target: 'selection'; onInteractionEnd?: string }>\n\t) => {\n\t\t// Store the event information\n\t\tthis.info = info\n\n\t\tthis.markId = this.editor.mark('rotate start')\n\n\t\tthis.snapshot = getRotationSnapshot({ editor: this.editor })\n\n\t\t// Trigger a pointer move\n\t\tthis.handleStart()\n\t}\n\n\toverride onExit = () => {\n\t\tthis.editor.setCursor({ type: 'none' })\n\n\t\tthis.snapshot = {} as TLRotationSnapshot\n\t}\n\n\toverride onPointerMove = () => {\n\t\tthis.update()\n\t}\n\n\toverride onKeyDown = () => {\n\t\tthis.update()\n\t}\n\n\toverride onKeyUp = () => {\n\t\tthis.update()\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel = () => {\n\t\tthis.cancel()\n\t}\n\n\t// ---\n\n\tprivate update = () => {\n\t\tconst newSelectionRotation = this._getRotationFromPointerPosition({\n\t\t\tsnapToNearestDegree: false,\n\t\t})\n\n\t\tapplyRotationToSnapshotShapes({\n\t\t\teditor: this.editor,\n\t\t\tdelta: newSelectionRotation,\n\t\t\tsnapshot: this.snapshot,\n\t\t\tstage: 'update',\n\t\t})\n\n\t\t// Update cursor\n\t\tthis.editor.setCursor({\n\t\t\ttype: CursorTypeMap[this.info.handle as RotateCorner],\n\t\t\trotation: newSelectionRotation + this.snapshot.initialSelectionRotation,\n\t\t})\n\t}\n\n\tprivate cancel = () => {\n\t\tthis.editor.bailToMark(this.markId)\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.parent.transition('idle', this.info)\n\t\t}\n\t}\n\n\tprivate complete = () => {\n\t\tapplyRotationToSnapshotShapes({\n\t\t\teditor: this.editor,\n\t\t\tdelta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),\n\t\t\tsnapshot: this.snapshot,\n\t\t\tstage: 'end',\n\t\t})\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.parent.transition('idle', this.info)\n\t\t}\n\t}\n\n\tprotected handleStart() {\n\t\tconst newSelectionRotation = this._getRotationFromPointerPosition({\n\t\t\tsnapToNearestDegree: false,\n\t\t})\n\n\t\tapplyRotationToSnapshotShapes({\n\t\t\teditor: this.editor,\n\t\t\tdelta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),\n\t\t\tsnapshot: this.snapshot,\n\t\t\tstage: 'start',\n\t\t})\n\n\t\t// Update cursor\n\t\tthis.editor.setCursor({\n\t\t\ttype: CursorTypeMap[this.info.handle as RotateCorner],\n\t\t\trotation: newSelectionRotation + this.snapshot.initialSelectionRotation,\n\t\t})\n\t}\n\n\t_getRotationFromPointerPosition({ snapToNearestDegree }: { snapToNearestDegree: boolean }) {\n\t\tconst {\n\t\t\tselectionPageCenter,\n\t\t\tinputs: { shiftKey, currentPagePoint },\n\t\t} = this.editor\n\t\tconst { initialCursorAngle, initialSelectionRotation } = this.snapshot\n\n\t\t// The delta is the difference between the current angle and the initial angle\n\t\tconst preSnapRotationDelta = selectionPageCenter!.angle(currentPagePoint) - initialCursorAngle\n\t\tlet newSelectionRotation = initialSelectionRotation + preSnapRotationDelta\n\n\t\tif (shiftKey) {\n\t\t\tnewSelectionRotation = snapAngle(newSelectionRotation, 24)\n\t\t} else if (snapToNearestDegree) {\n\t\t\tnewSelectionRotation = Math.round(newSelectionRotation / EPSILON) * EPSILON\n\n\t\t\tif (this.editor.isCoarsePointer) {\n\t\t\t\tconst snappedToRightAngle = snapAngle(newSelectionRotation, 4)\n\t\t\t\tconst angleToRightAngle = angleDelta(newSelectionRotation, snappedToRightAngle)\n\t\t\t\tif (Math.abs(angleToRightAngle) < degreesToRadians(5)) {\n\t\t\t\t\tnewSelectionRotation = snappedToRightAngle\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectionRotation - initialSelectionRotation\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}