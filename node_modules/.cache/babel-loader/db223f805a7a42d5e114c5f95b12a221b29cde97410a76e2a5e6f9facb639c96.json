{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/* eslint-env browser */\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n/* c8 ignore start */\nvar VarStoragePolyfill = /*#__PURE__*/function () {\n  function VarStoragePolyfill() {\n    _classCallCheck(this, VarStoragePolyfill);\n    this.map = new Map();\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  _createClass(VarStoragePolyfill, [{\n    key: \"setItem\",\n    value: function setItem(key, newValue) {\n      this.map.set(key, newValue);\n    }\n\n    /**\n     * @param {string} key\n     */\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.map.get(key);\n    }\n  }]);\n  return VarStoragePolyfill;\n}();\n/* c8 ignore stop */\n/**\n * @type {any}\n */\nvar _localStorage = new VarStoragePolyfill();\nvar usePolyfill = true;\n\n/* c8 ignore start */\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage;\n    usePolyfill = false;\n  }\n} catch (e) {}\n/* c8 ignore stop */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n/* c8 ignore next */\nexport var varStorage = _localStorage;\n\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport var onChange = function onChange(eventHandler) {\n  return usePolyfill || addEventListener('storage', /** @type {any} */eventHandler);\n};\n\n/**\n * A polyfill for `removeEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport var offChange = function offChange(eventHandler) {\n  return usePolyfill || removeEventListener('storage', /** @type {any} */eventHandler);\n};","map":{"version":3,"names":["VarStoragePolyfill","_classCallCheck","map","Map","_createClass","key","value","setItem","newValue","set","getItem","get","_localStorage","usePolyfill","localStorage","e","varStorage","onChange","eventHandler","addEventListener","offChange","removeEventListener"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/lib0/storage.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* c8 ignore start */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n/* c8 ignore stop */\n\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\n/* c8 ignore start */\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n/* c8 ignore stop */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n/* c8 ignore next */\nexport const varStorage = _localStorage\n\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n\n/**\n * A polyfill for `removeEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n/* c8 ignore next */\nexport const offChange = eventHandler => usePolyfill || removeEventListener('storage', /** @type {any} */ (eventHandler))\n"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA,IACMA,kBAAkB;EACtB,SAAAA,mBAAA,EAAe;IAAAC,eAAA,OAAAD,kBAAA;IACb,IAAI,CAACE,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACtB;;EAEA;AACF;AACA;AACA;EAHEC,YAAA,CAAAJ,kBAAA;IAAAK,GAAA;IAAAC,KAAA,EAIA,SAAAC,QAASF,GAAG,EAAEG,QAAQ,EAAE;MACtB,IAAI,CAACN,GAAG,CAACO,GAAG,CAACJ,GAAG,EAAEG,QAAQ,CAAC;IAC7B;;IAEA;AACF;AACA;EAFE;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAI,QAASL,GAAG,EAAE;MACZ,OAAO,IAAI,CAACH,GAAG,CAACS,GAAG,CAACN,GAAG,CAAC;IAC1B;EAAC;EAAA,OAAAL,kBAAA;AAAA;AAEH;AAEA;AACA;AACA;AACA,IAAIY,aAAa,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;AAC5C,IAAIa,WAAW,GAAG,IAAI;;AAEtB;AACA,IAAI;EACF;EACA,IAAI,OAAOC,YAAY,KAAK,WAAW,EAAE;IACvCF,aAAa,GAAGE,YAAY;IAC5BD,WAAW,GAAG,KAAK;EACrB;AACF,CAAC,CAAC,OAAOE,CAAC,EAAE,CAAE;AACd;;AAEA;AACA;AACA;AACA;AACA,OAAO,IAAMC,UAAU,GAAGJ,aAAa;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMK,QAAQ,GAAG,SAAXA,QAAQA,CAAGC,YAAY;EAAA,OAAIL,WAAW,IAAIM,gBAAgB,CAAC,SAAS,EAAE,kBAAoBD,YAAa,CAAC;AAAA;;AAErH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAASA,CAAGF,YAAY;EAAA,OAAIL,WAAW,IAAIQ,mBAAmB,CAAC,SAAS,EAAE,kBAAoBH,YAAa,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}