{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar IncrementalSetConstructor = /*#__PURE__*/function () {\n  function IncrementalSetConstructor(previousValue) {\n    _classCallCheck(this, IncrementalSetConstructor);\n    /**\n     * The next value of the set.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"nextValue\", void 0);\n    /**\n     * The diff of the set.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"diff\", void 0);\n    this.previousValue = previousValue;\n  }\n  _createClass(IncrementalSetConstructor, [{\n    key: \"get\",\n    value:\n    /**\n     * Get the next value of the set.\n     *\n     * @public\n     */\n    function get() {\n      var _this$diff$removed$si, _this$diff, _this$diff$added$size, _this$diff2;\n      var numRemoved = (_this$diff$removed$si = (_this$diff = this.diff) === null || _this$diff === void 0 || (_this$diff = _this$diff.removed) === null || _this$diff === void 0 ? void 0 : _this$diff.size) !== null && _this$diff$removed$si !== void 0 ? _this$diff$removed$si : 0;\n      var numAdded = (_this$diff$added$size = (_this$diff2 = this.diff) === null || _this$diff2 === void 0 || (_this$diff2 = _this$diff2.added) === null || _this$diff2 === void 0 ? void 0 : _this$diff2.size) !== null && _this$diff$added$size !== void 0 ? _this$diff$added$size : 0;\n      if (numRemoved === 0 && numAdded === 0) {\n        return void 0;\n      }\n      return {\n        value: this.nextValue,\n        diff: this.diff\n      };\n    }\n    /**\n     * Add an item to the set.\n     *\n     * @param item - The item to add.\n     * @param wasAlreadyPresent - Whether the item was already present in the set.\n     * @internal\n     */\n  }, {\n    key: \"_add\",\n    value: function _add(item, wasAlreadyPresent) {\n      var _this$nextValue, _this$diff3;\n      (_this$nextValue = this.nextValue) !== null && _this$nextValue !== void 0 ? _this$nextValue : this.nextValue = new Set(this.previousValue);\n      this.nextValue.add(item);\n      (_this$diff3 = this.diff) !== null && _this$diff3 !== void 0 ? _this$diff3 : this.diff = {};\n      if (wasAlreadyPresent) {\n        var _this$diff$removed;\n        (_this$diff$removed = this.diff.removed) === null || _this$diff$removed === void 0 || _this$diff$removed.delete(item);\n      } else {\n        var _this$diff4, _this$diff4$added;\n        (_this$diff4$added = (_this$diff4 = this.diff).added) !== null && _this$diff4$added !== void 0 ? _this$diff4$added : _this$diff4.added = /* @__PURE__ */new Set();\n        this.diff.added.add(item);\n      }\n    }\n    /**\n     * Add an item to the set.\n     *\n     * @param item - The item to add.\n     * @public\n     */\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var _this$nextValue2;\n      var wasAlreadyPresent = this.previousValue.has(item);\n      if (wasAlreadyPresent) {\n        var _this$diff5;\n        var wasRemoved = (_this$diff5 = this.diff) === null || _this$diff5 === void 0 || (_this$diff5 = _this$diff5.removed) === null || _this$diff5 === void 0 ? void 0 : _this$diff5.has(item);\n        if (!wasRemoved) return;\n        return this._add(item, wasAlreadyPresent);\n      }\n      var isCurrentlyPresent = (_this$nextValue2 = this.nextValue) === null || _this$nextValue2 === void 0 ? void 0 : _this$nextValue2.has(item);\n      if (isCurrentlyPresent) return;\n      this._add(item, wasAlreadyPresent);\n    }\n    /**\n     * Remove an item from the set.\n     *\n     * @param item - The item to remove.\n     * @param wasAlreadyPresent - Whether the item was already present in the set.\n     * @internal\n     */\n  }, {\n    key: \"_remove\",\n    value: function _remove(item, wasAlreadyPresent) {\n      var _this$nextValue3, _this$diff6;\n      (_this$nextValue3 = this.nextValue) !== null && _this$nextValue3 !== void 0 ? _this$nextValue3 : this.nextValue = new Set(this.previousValue);\n      this.nextValue.delete(item);\n      (_this$diff6 = this.diff) !== null && _this$diff6 !== void 0 ? _this$diff6 : this.diff = {};\n      if (wasAlreadyPresent) {\n        var _this$diff7, _this$diff7$removed;\n        (_this$diff7$removed = (_this$diff7 = this.diff).removed) !== null && _this$diff7$removed !== void 0 ? _this$diff7$removed : _this$diff7.removed = /* @__PURE__ */new Set();\n        this.diff.removed.add(item);\n      } else {\n        var _this$diff$added;\n        (_this$diff$added = this.diff.added) === null || _this$diff$added === void 0 || _this$diff$added.delete(item);\n      }\n    }\n    /**\n     * Remove an item from the set.\n     *\n     * @param item - The item to remove.\n     * @public\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      var _this$diff9;\n      var wasAlreadyPresent = this.previousValue.has(item);\n      if (!wasAlreadyPresent) {\n        var _this$diff8;\n        var wasAdded = (_this$diff8 = this.diff) === null || _this$diff8 === void 0 || (_this$diff8 = _this$diff8.added) === null || _this$diff8 === void 0 ? void 0 : _this$diff8.has(item);\n        if (!wasAdded) return;\n        return this._remove(item, wasAlreadyPresent);\n      }\n      var hasAlreadyBeenRemoved = (_this$diff9 = this.diff) === null || _this$diff9 === void 0 || (_this$diff9 = _this$diff9.removed) === null || _this$diff9 === void 0 ? void 0 : _this$diff9.has(item);\n      if (hasAlreadyBeenRemoved) return;\n      this._remove(item, wasAlreadyPresent);\n    }\n  }]);\n  return IncrementalSetConstructor;\n}();\nexport { IncrementalSetConstructor };","map":{"version":3,"names":["IncrementalSetConstructor","previousValue","_classCallCheck","_defineProperty","_createClass","key","value","get","_this$diff$removed$si","_this$diff","_this$diff$added$size","_this$diff2","numRemoved","diff","removed","size","numAdded","added","nextValue","_add","item","wasAlreadyPresent","_this$nextValue","_this$diff3","Set","add","_this$diff$removed","delete","_this$diff4","_this$diff4$added","_this$nextValue2","has","_this$diff5","wasRemoved","isCurrentlyPresent","_remove","_this$nextValue3","_this$diff6","_this$diff7","_this$diff7$removed","_this$diff$added","remove","_this$diff9","_this$diff8","wasAdded","hasAlreadyBeenRemoved"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/store/src/lib/IncrementalSetConstructor.ts"],"sourcesContent":["import { CollectionDiff } from './Store'\n\n/**\n * A class that can be used to incrementally construct a set of records.\n *\n * @internal\n */\nexport class IncrementalSetConstructor<T> {\n\t/**\n\t * The next value of the set.\n\t *\n\t * @internal\n\t */\n\tprivate nextValue?: Set<T>\n\n\t/**\n\t * The diff of the set.\n\t *\n\t * @internal\n\t */\n\tprivate diff?: CollectionDiff<T>\n\n\tconstructor(\n\t\t/**\n\t\t * The previous value of the set.\n\t\t *\n\t\t * @internal\n\t\t * @readonly\n\t\t */\n\t\tprivate readonly previousValue: Set<T>\n\t) {}\n\n\t/**\n\t * Get the next value of the set.\n\t *\n\t * @public\n\t */\n\tpublic get() {\n\t\tconst numRemoved = this.diff?.removed?.size ?? 0\n\t\tconst numAdded = this.diff?.added?.size ?? 0\n\t\tif (numRemoved === 0 && numAdded === 0) {\n\t\t\treturn undefined\n\t\t}\n\t\treturn { value: this.nextValue!, diff: this.diff! }\n\t}\n\n\t/**\n\t * Add an item to the set.\n\t *\n\t * @param item - The item to add.\n\t * @param wasAlreadyPresent - Whether the item was already present in the set.\n\t * @internal\n\t */\n\tprivate _add(item: T, wasAlreadyPresent: boolean) {\n\t\tthis.nextValue ??= new Set(this.previousValue)\n\t\tthis.nextValue.add(item)\n\n\t\tthis.diff ??= {}\n\t\tif (wasAlreadyPresent) {\n\t\t\tthis.diff.removed?.delete(item)\n\t\t} else {\n\t\t\tthis.diff.added ??= new Set()\n\t\t\tthis.diff.added.add(item)\n\t\t}\n\t}\n\n\t/**\n\t * Add an item to the set.\n\t *\n\t * @param item - The item to add.\n\t * @public\n\t */\n\tadd(item: T) {\n\t\tconst wasAlreadyPresent = this.previousValue.has(item)\n\t\tif (wasAlreadyPresent) {\n\t\t\tconst wasRemoved = this.diff?.removed?.has(item)\n\t\t\t// if it wasn't removed during the lifetime of this set constructor, there's no need to add it again\n\t\t\tif (!wasRemoved) return\n\t\t\treturn this._add(item, wasAlreadyPresent)\n\t\t}\n\t\tconst isCurrentlyPresent = this.nextValue?.has(item)\n\t\t// if it's already there, no need to add it again\n\t\tif (isCurrentlyPresent) return\n\t\t// otherwise add it\n\t\tthis._add(item, wasAlreadyPresent)\n\t}\n\n\t/**\n\t * Remove an item from the set.\n\t *\n\t * @param item - The item to remove.\n\t * @param wasAlreadyPresent - Whether the item was already present in the set.\n\t * @internal\n\t */\n\tprivate _remove(item: T, wasAlreadyPresent: boolean) {\n\t\tthis.nextValue ??= new Set(this.previousValue)\n\t\tthis.nextValue.delete(item)\n\n\t\tthis.diff ??= {}\n\t\tif (wasAlreadyPresent) {\n\t\t\t// it was in the original set, so we need to add it to the removed diff\n\t\t\tthis.diff.removed ??= new Set()\n\t\t\tthis.diff.removed.add(item)\n\t\t} else {\n\t\t\t// if it was added during the lifetime of this set constructor, we need to remove it from the added diff\n\t\t\tthis.diff.added?.delete(item)\n\t\t}\n\t}\n\n\t/**\n\t * Remove an item from the set.\n\t *\n\t * @param item - The item to remove.\n\t * @public\n\t */\n\tremove(item: T) {\n\t\tconst wasAlreadyPresent = this.previousValue.has(item)\n\t\tif (!wasAlreadyPresent) {\n\t\t\tconst wasAdded = this.diff?.added?.has(item)\n\t\t\t// if it wasn't added during the lifetime of this set constructor, there's no need to remove it\n\t\t\tif (!wasAdded) return\n\t\t\treturn this._remove(item, wasAlreadyPresent)\n\t\t}\n\t\tconst hasAlreadyBeenRemoved = this.diff?.removed?.has(item)\n\t\t// if it's already removed, no need to remove it again\n\t\tif (hasAlreadyBeenRemoved) return\n\t\t// otherwise remove it\n\t\tthis._remove(item, wasAlreadyPresent)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}