"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Pointing_exports = {};
__export(Pointing_exports, {
  Pointing: () => Pointing
});
module.exports = __toCommonJS(Pointing_exports);
var import_FrameShapeUtil = require("../../../shapes/frame/FrameShapeUtil");
var import_GroupShapeUtil = require("../../../shapes/group/GroupShapeUtil");
var import_StateNode = require("../../StateNode");
class Pointing extends import_StateNode.StateNode {
  static id = "pointing";
  onEnter = () => {
    const { inputs } = this.editor;
    const erasing = /* @__PURE__ */ new Set();
    const initialSize = erasing.size;
    for (const shape of [...this.editor.sortedShapesArray].reverse()) {
      if (this.editor.isPointInShape(inputs.currentPagePoint, shape)) {
        if (this.editor.isShapeOfType(shape, import_GroupShapeUtil.GroupShapeUtil))
          continue;
        const hitShape = this.editor.getOutermostSelectableShape(shape);
        if (this.editor.isShapeOfType(hitShape, import_FrameShapeUtil.FrameShapeUtil) && erasing.size > initialSize)
          break;
        erasing.add(hitShape.id);
      }
    }
    this.editor.setErasingIds([...erasing]);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("erasing", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    const { erasingIds } = this.editor;
    if (erasingIds.length) {
      this.editor.mark("erase end");
      this.editor.deleteShapes(erasingIds);
    }
    this.editor.setErasingIds([]);
    this.parent.transition("idle", {});
  }
  cancel() {
    this.editor.setErasingIds([]);
    this.parent.transition("idle", {});
  }
}
//# sourceMappingURL=Pointing.js.map
