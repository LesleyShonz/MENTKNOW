{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { pointInPolygon } from \"./utils.mjs\";\nimport { Vec2d } from \"./Vec2d.mjs\";\nfunction intersectLineSegmentLineSegment(a1, a2, b1, b2) {\n  var ABx = a1.x - b1.x;\n  var ABy = a1.y - b1.y;\n  var BVx = b2.x - b1.x;\n  var BVy = b2.y - b1.y;\n  var AVx = a2.x - a1.x;\n  var AVy = a2.y - a1.y;\n  var ua_t = BVx * ABy - BVy * ABx;\n  var ub_t = AVx * ABy - AVy * ABx;\n  var u_b = BVy * AVx - BVx * AVy;\n  if (ua_t === 0 || ub_t === 0) return null;\n  if (u_b === 0) return null;\n  if (u_b !== 0) {\n    var ua = ua_t / u_b;\n    var ub = ub_t / u_b;\n    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n      return Vec2d.AddXY(a1, ua * AVx, ua * AVy);\n    }\n  }\n  return null;\n}\nfunction intersectLineSegmentCircle(a1, a2, c, r) {\n  var a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y);\n  var b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y));\n  var cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r;\n  var deter = b * b - 4 * a * cc;\n  if (deter < 0) return null;\n  if (deter === 0) return null;\n  var e = Math.sqrt(deter);\n  var u1 = (-b + e) / (2 * a);\n  var u2 = (-b - e) / (2 * a);\n  if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n    return null;\n  }\n  var result = [];\n  if (0 <= u1 && u1 <= 1) result.push(Vec2d.Lrp(a1, a2, u1));\n  if (0 <= u2 && u2 <= 1) result.push(Vec2d.Lrp(a1, a2, u2));\n  if (result.length === 0) return null;\n  return result;\n}\nfunction intersectLineSegmentPolyline(a1, a2, points) {\n  var result = [];\n  var segmentIntersection;\n  for (var i = 0, n = points.length - 1; i < n; i++) {\n    segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1]);\n    if (segmentIntersection) result.push(segmentIntersection);\n  }\n  if (result.length === 0) return null;\n  return result;\n}\nfunction intersectLineSegmentPolygon(a1, a2, points) {\n  var result = [];\n  var segmentIntersection;\n  for (var i = 1, n = points.length; i < n + 1; i++) {\n    segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i - 1], points[i % points.length]);\n    if (segmentIntersection) result.push(segmentIntersection);\n  }\n  if (result.length === 0) return null;\n  return result;\n}\nfunction intersectCircleCircle(c1, r1, c2, r2) {\n  var dx = c2.x - c1.x;\n  var dy = c2.y - c1.y;\n  var d = Math.sqrt(dx * dx + dy * dy),\n    x = (d * d - r2 * r2 + r1 * r1) / (2 * d),\n    y = Math.sqrt(r1 * r1 - x * x);\n  dx /= d;\n  dy /= d;\n  return [new Vec2d(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y), new Vec2d(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y)];\n}\nfunction intersectCirclePolygon(c, r, points) {\n  var result = [];\n  var a, b, int;\n  for (var i = 0, n = points.length; i < n; i++) {\n    a = points[i];\n    b = points[(i + 1) % points.length];\n    int = intersectLineSegmentCircle(a, b, c, r);\n    if (int) result.push.apply(result, _toConsumableArray(int));\n  }\n  if (result.length === 0) return null;\n  return result;\n}\nfunction intersectCirclePolyline(c, r, points) {\n  var result = [];\n  var a, b, int;\n  for (var i = 1, n = points.length; i < n; i++) {\n    a = points[i - 1];\n    b = points[i];\n    int = intersectLineSegmentCircle(a, b, c, r);\n    if (int) result.push.apply(result, _toConsumableArray(int));\n  }\n  if (result.length === 0) return null;\n  return result;\n}\nfunction intersectPolygonBounds(points, bounds) {\n  var result = [];\n  var segmentIntersection;\n  var _iterator = _createForOfIteratorHelper(bounds.sides),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var side = _step.value;\n      segmentIntersection = intersectLineSegmentPolygon(side[0], side[1], points);\n      if (segmentIntersection) result.push.apply(result, _toConsumableArray(segmentIntersection));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (result.length === 0) return null;\n  return result;\n}\nfunction ccw(A, B, C) {\n  return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x);\n}\nfunction linesIntersect(A, B, C, D) {\n  return ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D);\n}\nfunction intersectPolygonPolygon(polygonA, polygonB) {\n  var result = [];\n  var a, b, c, d;\n  for (var i = 0, n = polygonA.length; i < n; i++) {\n    a = polygonA[i];\n    if (pointInPolygon(a, polygonB)) {\n      result.push(a);\n    }\n  }\n  for (var _i = 0, _n = polygonB.length; _i < _n; _i++) {\n    a = polygonB[_i];\n    if (pointInPolygon(a, polygonA)) {\n      result.push(a);\n    }\n  }\n  for (var _i2 = 0, _n2 = polygonA.length; _i2 < _n2; _i2++) {\n    a = polygonA[_i2];\n    b = polygonA[(_i2 + 1) % polygonA.length];\n    for (var j = 0, m = polygonB.length; j < m; j++) {\n      c = polygonB[j];\n      d = polygonB[(j + 1) % polygonB.length];\n      var intersection = intersectLineSegmentLineSegment(a, b, c, d);\n      if (intersection !== null) {\n        result.push(intersection);\n      }\n    }\n  }\n  if (result.length === 0) return null;\n  return orderClockwise(result);\n}\nfunction orderClockwise(points) {\n  var C = Vec2d.Average(points);\n  return points.sort(function (A, B) {\n    return Vec2d.Angle(C, A) - Vec2d.Angle(C, B);\n  });\n}\nfunction polygonsIntersect(a, b) {\n  var a0, a1, b0, b1;\n  for (var i = 0, n = a.length; i < n; i++) {\n    a0 = a[i];\n    a1 = a[(i + 1) % n];\n    for (var j = 0, m = b.length; j < m; j++) {\n      b0 = b[j];\n      b1 = b[(j + 1) % m];\n      if (linesIntersect(a0, a1, b0, b1)) return true;\n    }\n  }\n  return false;\n}\nexport { intersectCircleCircle, intersectCirclePolygon, intersectCirclePolyline, intersectLineSegmentCircle, intersectLineSegmentLineSegment, intersectLineSegmentPolygon, intersectLineSegmentPolyline, intersectPolygonBounds, intersectPolygonPolygon, linesIntersect, polygonsIntersect };","map":{"version":3,"names":["pointInPolygon","Vec2d","intersectLineSegmentLineSegment","a1","a2","b1","b2","ABx","x","ABy","y","BVx","BVy","AVx","AVy","ua_t","ub_t","u_b","ua","ub","AddXY","intersectLineSegmentCircle","c","r","a","b","cc","deter","e","Math","sqrt","u1","u2","result","push","Lrp","length","intersectLineSegmentPolyline","points","segmentIntersection","i","n","intersectLineSegmentPolygon","intersectCircleCircle","c1","r1","c2","r2","dx","dy","d","intersectCirclePolygon","int","apply","_toConsumableArray","intersectCirclePolyline","intersectPolygonBounds","bounds","_iterator","_createForOfIteratorHelper","sides","_step","s","done","side","value","err","f","ccw","A","B","C","linesIntersect","D","intersectPolygonPolygon","polygonA","polygonB","j","m","intersection","orderClockwise","Average","sort","Angle","polygonsIntersect","a0","b0"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/primitives/src/lib/intersect.ts"],"sourcesContent":["import { Box2d } from './Box2d'\nimport { pointInPolygon } from './utils'\nimport { Vec2d, VecLike } from './Vec2d'\n\n// need even more intersections? See https://gist.github.com/steveruizok/35c02d526c707003a5c79761bfb89a52\n\n/**\n * Find the intersection between a line segment and a line segment.\n *\n * @param a1 - The first segment's first point.\n * @param a2 - The first segment's second point.\n * @param b1 - The second segment's first point.\n * @param b2 - The second segment's second point.\n * @public\n */\nexport function intersectLineSegmentLineSegment(\n\ta1: VecLike,\n\ta2: VecLike,\n\tb1: VecLike,\n\tb2: VecLike\n) {\n\tconst ABx = a1.x - b1.x\n\tconst ABy = a1.y - b1.y\n\tconst BVx = b2.x - b1.x\n\tconst BVy = b2.y - b1.y\n\tconst AVx = a2.x - a1.x\n\tconst AVy = a2.y - a1.y\n\tconst ua_t = BVx * ABy - BVy * ABx\n\tconst ub_t = AVx * ABy - AVy * ABx\n\tconst u_b = BVy * AVx - BVx * AVy\n\n\tif (ua_t === 0 || ub_t === 0) return null // coincident\n\n\tif (u_b === 0) return null // parallel\n\n\tif (u_b !== 0) {\n\t\tconst ua = ua_t / u_b\n\t\tconst ub = ub_t / u_b\n\t\tif (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n\t\t\treturn Vec2d.AddXY(a1, ua * AVx, ua * AVy)\n\t\t}\n\t}\n\n\treturn null // no intersection\n}\n\n/**\n * Find the intersections between a line segment and a circle.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @public\n */\nexport function intersectLineSegmentCircle(a1: VecLike, a2: VecLike, c: VecLike, r: number) {\n\tconst a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y)\n\tconst b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y))\n\tconst cc =\n\t\tc.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r\n\tconst deter = b * b - 4 * a * cc\n\n\tif (deter < 0) return null // outside\n\tif (deter === 0) return null // tangent\n\n\tconst e = Math.sqrt(deter)\n\tconst u1 = (-b + e) / (2 * a)\n\tconst u2 = (-b - e) / (2 * a)\n\n\tif ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n\t\treturn null // outside or inside\n\t\t// if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n\t\t// \treturn null // outside\n\t\t// } else return null // inside'\n\t}\n\n\tconst result: VecLike[] = []\n\n\tif (0 <= u1 && u1 <= 1) result.push(Vec2d.Lrp(a1, a2, u1))\n\tif (0 <= u2 && u2 <= 1) result.push(Vec2d.Lrp(a1, a2, u2))\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a line segment and a polyline.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param points - The points in the polyline.\n * @public\n */\nexport function intersectLineSegmentPolyline(a1: VecLike, a2: VecLike, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike | null\n\n\tfor (let i = 0, n = points.length - 1; i < n; i++) {\n\t\tsegmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1])\n\t\tif (segmentIntersection) result.push(segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a line segment and a closed polygon.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param points - The points in the polygon.\n * @public\n */\nexport function intersectLineSegmentPolygon(a1: VecLike, a2: VecLike, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike | null\n\n\tfor (let i = 1, n = points.length; i < n + 1; i++) {\n\t\tsegmentIntersection = intersectLineSegmentLineSegment(\n\t\t\ta1,\n\t\t\ta2,\n\t\t\tpoints[i - 1],\n\t\t\tpoints[i % points.length]\n\t\t)\n\t\tif (segmentIntersection) result.push(segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a circle and a circle.\n *\n * @param c1 - The first circle's center.\n * @param r1 - The first circle's radius.\n * @param c2 - The second circle's center.\n * @param r2 - The second circle's radius.\n * @public\n */\nexport function intersectCircleCircle(c1: VecLike, r1: number, c2: VecLike, r2: number) {\n\tlet dx = c2.x - c1.x\n\tlet dy = c2.y - c1.y\n\tconst d = Math.sqrt(dx * dx + dy * dy),\n\t\tx = (d * d - r2 * r2 + r1 * r1) / (2 * d),\n\t\ty = Math.sqrt(r1 * r1 - x * x)\n\tdx /= d\n\tdy /= d\n\treturn [\n\t\tnew Vec2d(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y),\n\t\tnew Vec2d(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y),\n\t]\n}\n\n/**\n * Find the intersections between a circle and a bounding box.\n *\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @param points - The points in the polygon.\n * @public\n */\nexport function intersectCirclePolygon(c: VecLike, r: number, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet a: VecLike, b: VecLike, int: VecLike[] | null\n\n\tfor (let i = 0, n = points.length; i < n; i++) {\n\t\ta = points[i]\n\t\tb = points[(i + 1) % points.length]\n\t\tint = intersectLineSegmentCircle(a, b, c, r)\n\t\tif (int) result.push(...int)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a circle and a bounding box.\n *\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @param points - The points in the polyline.\n * @public\n */\nexport function intersectCirclePolyline(c: VecLike, r: number, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet a: VecLike, b: VecLike, int: VecLike[] | null\n\n\tfor (let i = 1, n = points.length; i < n; i++) {\n\t\ta = points[i - 1]\n\t\tb = points[i]\n\t\tint = intersectLineSegmentCircle(a, b, c, r)\n\t\tif (int) result.push(...int)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a polygon and a bounding box.\n *\n * @public\n */\nexport function intersectPolygonBounds(points: VecLike[], bounds: Box2d) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike[] | null\n\n\tfor (const side of bounds.sides) {\n\t\tsegmentIntersection = intersectLineSegmentPolygon(side[0], side[1], points)\n\t\tif (segmentIntersection) result.push(...segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\nfunction ccw(A: VecLike, B: VecLike, C: VecLike) {\n\treturn (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x)\n}\n\n/** @public */\nexport function linesIntersect(A: VecLike, B: VecLike, C: VecLike, D: VecLike) {\n\treturn ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D)\n}\n\n/**\n * Create a new convex polygon as the intersection of two convex polygons.\n *\n * @param polygonA - An array of points representing the first polygon.\n * @param polygonB - An array of points representing the second polygon.\n * @public\n */\nexport function intersectPolygonPolygon(polygonA: VecLike[], polygonB: VecLike[]) {\n\t// Create an empty polygon as P\n\tconst result: VecLike[] = []\n\tlet a: VecLike, b: VecLike, c: VecLike, d: VecLike\n\n\t// Add all corners of PolygonA that is inside PolygonB to P\n\tfor (let i = 0, n = polygonA.length; i < n; i++) {\n\t\ta = polygonA[i]\n\t\tif (pointInPolygon(a, polygonB)) {\n\t\t\tresult.push(a)\n\t\t}\n\t}\n\t// Add all corners of PolygonB that is inside PolygonA to P\n\tfor (let i = 0, n = polygonB.length; i < n; i++) {\n\t\ta = polygonB[i]\n\t\tif (pointInPolygon(a, polygonA)) {\n\t\t\tresult.push(a)\n\t\t}\n\t}\n\n\t// Add all intersection points to P\n\tfor (let i = 0, n = polygonA.length; i < n; i++) {\n\t\ta = polygonA[i]\n\t\tb = polygonA[(i + 1) % polygonA.length]\n\n\t\tfor (let j = 0, m = polygonB.length; j < m; j++) {\n\t\t\tc = polygonB[j]\n\t\t\td = polygonB[(j + 1) % polygonB.length]\n\t\t\tconst intersection = intersectLineSegmentLineSegment(a, b, c, d)\n\n\t\t\tif (intersection !== null) {\n\t\t\t\tresult.push(intersection)\n\t\t\t}\n\t\t}\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\t// Order all points in the P counter-clockwise.\n\treturn orderClockwise(result)\n}\n\nfunction orderClockwise(points: VecLike[]): VecLike[] {\n\tconst C = Vec2d.Average(points)\n\treturn points.sort((A, B) => Vec2d.Angle(C, A) - Vec2d.Angle(C, B))\n}\n\n/** @public */\nexport function polygonsIntersect(a: VecLike[], b: VecLike[]) {\n\tlet a0: VecLike, a1: VecLike, b0: VecLike, b1: VecLike\n\tfor (let i = 0, n = a.length; i < n; i++) {\n\t\ta0 = a[i]\n\t\ta1 = a[(i + 1) % n]\n\t\tfor (let j = 0, m = b.length; j < m; j++) {\n\t\t\tb0 = b[j]\n\t\t\tb1 = b[(j + 1) % m]\n\t\t\tif (linesIntersect(a0, a1, b0, b1)) return true\n\t\t}\n\t}\n\treturn false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}