{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AssetRecordType, createShapeId, getIndexAbove, getIndices, isShapeId, uniqueId } from \"@tldraw/editor\";\nimport { Box2d, Vec2d } from \"@tldraw/primitives\";\nimport { compact } from \"@tldraw/utils\";\nfunction pasteExcalidrawContent(_x, _x2, _x3) {\n  return _pasteExcalidrawContent.apply(this, arguments);\n}\nfunction _pasteExcalidrawContent() {\n  _pasteExcalidrawContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(editor, clipboard, point) {\n    var elements, files, tldrawContent, groupShapeIdToChildren, rotatedElements, currentPageId, excElementIdsToTldrawShapeIds, rootShapeIds, skipIds, index, _iterator2, _step2, _loop, p, _iterator3, _step3, groupedShapeIds, groupShape, _iterator4, _step4, _step4$value, id, angle, rootShapes, bounds, viewPortCenter;\n    return _regeneratorRuntime().wrap(function _callee$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          elements = clipboard.elements, files = clipboard.files;\n          tldrawContent = {\n            shapes: [],\n            rootShapeIds: [],\n            assets: [],\n            schema: editor.store.schema.serialize()\n          };\n          groupShapeIdToChildren = /* @__PURE__ */new Map();\n          rotatedElements = /* @__PURE__ */new Map();\n          currentPageId = editor.currentPageId;\n          excElementIdsToTldrawShapeIds = /* @__PURE__ */new Map();\n          rootShapeIds = [];\n          skipIds = /* @__PURE__ */new Set();\n          elements.forEach(function (element) {\n            excElementIdsToTldrawShapeIds.set(element.id, createShapeId());\n            if (element.boundElements !== null) {\n              var _iterator = _createForOfIteratorHelper(element.boundElements),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var boundElement = _step.value;\n                  if (boundElement.type === \"text\") {\n                    skipIds.add(boundElement.id);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          });\n          index = \"a1\";\n          _iterator2 = _createForOfIteratorHelper(elements);\n          _context4.prev = 11;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var element, id, base, _groupShapeIdToChildr, _element$link, _strokeWidthsToSizes$, _colorsToColors$color, text, align, _iterator5, _step5, _loop2, colorToUse, _colorsToColors$eleme, _colorsToColors$eleme2, start, end, indices, _element$startBinding, _element$endBinding, _strokeWidthsToSizes$2, _colorsToColors$eleme3, _arrowheadsToArrowhea, _arrowheadsToArrowhea2, _text, _iterator6, _step6, _loop3, _start, _end, startTargetId, endTargetId, _fontFamilyToFontType, _colorsToColors$eleme4, _getFontSizeAndScale, size, scale, _element$id, file, assetId;\n            return _regeneratorRuntime().wrap(function _loop$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  element = _step2.value;\n                  if (!skipIds.has(element.id)) {\n                    _context3.next = 3;\n                    break;\n                  }\n                  return _context3.abrupt(\"return\", 1);\n                case 3:\n                  id = excElementIdsToTldrawShapeIds.get(element.id);\n                  base = {\n                    id: id,\n                    typeName: \"shape\",\n                    parentId: currentPageId,\n                    index: index,\n                    x: element.x,\n                    y: element.y,\n                    rotation: 0,\n                    isLocked: element.locked,\n                    opacity: getOpacity(element.opacity)\n                  };\n                  if (element.angle !== 0) {\n                    rotatedElements.set(id, element.angle);\n                  }\n                  if (element.groupIds && element.groupIds.length > 0) {\n                    if (groupShapeIdToChildren.has(element.groupIds[0])) {\n                      (_groupShapeIdToChildr = groupShapeIdToChildren.get(element.groupIds[0])) === null || _groupShapeIdToChildr === void 0 || _groupShapeIdToChildr.push(id);\n                    } else {\n                      groupShapeIdToChildren.set(element.groupIds[0], [id]);\n                    }\n                  } else {\n                    rootShapeIds.push(id);\n                  }\n                  _context3.t0 = element.type;\n                  _context3.next = _context3.t0 === \"rectangle\" ? 10 : _context3.t0 === \"ellipse\" ? 10 : _context3.t0 === \"diamond\" ? 10 : _context3.t0 === \"freedraw\" ? 32 : _context3.t0 === \"line\" ? 34 : _context3.t0 === \"arrow\" ? 39 : _context3.t0 === \"text\" ? 63 : _context3.t0 === \"image\" ? 66 : 72;\n                  break;\n                case 10:\n                  text = \"\";\n                  align = \"middle\";\n                  if (!(element.boundElements !== null)) {\n                    _context3.next = 29;\n                    break;\n                  }\n                  _iterator5 = _createForOfIteratorHelper(element.boundElements);\n                  _context3.prev = 14;\n                  _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                    var boundElement, labelElement;\n                    return _regeneratorRuntime().wrap(function _loop2$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          boundElement = _step5.value;\n                          if (boundElement.type === \"text\") {\n                            labelElement = elements.find(function (elm) {\n                              return elm.id === boundElement.id;\n                            });\n                            if (labelElement) {\n                              text = labelElement.text;\n                              align = textAlignToAlignTypes[labelElement.textAlign];\n                            }\n                          }\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _loop2);\n                  });\n                  _iterator5.s();\n                case 17:\n                  if ((_step5 = _iterator5.n()).done) {\n                    _context3.next = 21;\n                    break;\n                  }\n                  return _context3.delegateYield(_loop2(), \"t1\", 19);\n                case 19:\n                  _context3.next = 17;\n                  break;\n                case 21:\n                  _context3.next = 26;\n                  break;\n                case 23:\n                  _context3.prev = 23;\n                  _context3.t2 = _context3[\"catch\"](14);\n                  _iterator5.e(_context3.t2);\n                case 26:\n                  _context3.prev = 26;\n                  _iterator5.f();\n                  return _context3.finish(26);\n                case 29:\n                  colorToUse = element.backgroundColor === \"transparent\" ? element.strokeColor : element.backgroundColor;\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"geo\",\n                    props: {\n                      geo: element.type,\n                      url: (_element$link = element.link) !== null && _element$link !== void 0 ? _element$link : \"\",\n                      w: element.width,\n                      h: element.height,\n                      size: (_strokeWidthsToSizes$ = strokeWidthsToSizes[element.strokeWidth]) !== null && _strokeWidthsToSizes$ !== void 0 ? _strokeWidthsToSizes$ : \"draw\",\n                      color: (_colorsToColors$color = colorsToColors[colorToUse]) !== null && _colorsToColors$color !== void 0 ? _colorsToColors$color : \"black\",\n                      text: text,\n                      align: align,\n                      dash: getDash(element),\n                      fill: getFill(element)\n                    }\n                  }));\n                  return _context3.abrupt(\"break\", 72);\n                case 32:\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"draw\",\n                    props: {\n                      dash: getDash(element),\n                      size: strokeWidthsToSizes[element.strokeWidth],\n                      color: (_colorsToColors$eleme = colorsToColors[element.strokeColor]) !== null && _colorsToColors$eleme !== void 0 ? _colorsToColors$eleme : \"black\",\n                      segments: [{\n                        type: \"free\",\n                        points: element.points.map(function (_ref) {\n                          var _ref2 = _slicedToArray(_ref, 3),\n                            x = _ref2[0],\n                            y = _ref2[1],\n                            _ref2$ = _ref2[2],\n                            z = _ref2$ === void 0 ? 0.5 : _ref2$;\n                          return {\n                            x: x,\n                            y: y,\n                            z: z\n                          };\n                        })\n                      }]\n                    }\n                  }));\n                  return _context3.abrupt(\"break\", 72);\n                case 34:\n                  start = element.points[0];\n                  end = element.points[element.points.length - 1];\n                  indices = getIndices(element.points.length);\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"line\",\n                    props: {\n                      dash: getDash(element),\n                      size: strokeWidthsToSizes[element.strokeWidth],\n                      color: (_colorsToColors$eleme2 = colorsToColors[element.strokeColor]) !== null && _colorsToColors$eleme2 !== void 0 ? _colorsToColors$eleme2 : \"black\",\n                      spline: element.roundness ? \"cubic\" : \"line\",\n                      handles: _objectSpread({\n                        start: {\n                          id: \"start\",\n                          type: \"vertex\",\n                          index: indices[0],\n                          x: start[0],\n                          y: start[1]\n                        },\n                        end: {\n                          id: \"end\",\n                          type: \"vertex\",\n                          index: indices[indices.length - 1],\n                          x: end[0],\n                          y: end[1]\n                        }\n                      }, Object.fromEntries(element.points.slice(1, -1).map(function (_ref3, i) {\n                        var _ref4 = _slicedToArray(_ref3, 2),\n                          x = _ref4[0],\n                          y = _ref4[1];\n                        var id2 = uniqueId();\n                        return [id2, {\n                          id: id2,\n                          type: \"vertex\",\n                          index: indices[i + 1],\n                          x: x,\n                          y: y\n                        }];\n                      })))\n                    }\n                  }));\n                  return _context3.abrupt(\"break\", 72);\n                case 39:\n                  _text = \"\";\n                  if (!(element.boundElements !== null)) {\n                    _context3.next = 57;\n                    break;\n                  }\n                  _iterator6 = _createForOfIteratorHelper(element.boundElements);\n                  _context3.prev = 42;\n                  _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3() {\n                    var boundElement, labelElement;\n                    return _regeneratorRuntime().wrap(function _loop3$(_context2) {\n                      while (1) switch (_context2.prev = _context2.next) {\n                        case 0:\n                          boundElement = _step6.value;\n                          if (boundElement.type === \"text\") {\n                            labelElement = elements.find(function (elm) {\n                              return elm.id === boundElement.id;\n                            });\n                            if (labelElement) {\n                              _text = labelElement.text;\n                            }\n                          }\n                        case 2:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }, _loop3);\n                  });\n                  _iterator6.s();\n                case 45:\n                  if ((_step6 = _iterator6.n()).done) {\n                    _context3.next = 49;\n                    break;\n                  }\n                  return _context3.delegateYield(_loop3(), \"t3\", 47);\n                case 47:\n                  _context3.next = 45;\n                  break;\n                case 49:\n                  _context3.next = 54;\n                  break;\n                case 51:\n                  _context3.prev = 51;\n                  _context3.t4 = _context3[\"catch\"](42);\n                  _iterator6.e(_context3.t4);\n                case 54:\n                  _context3.prev = 54;\n                  _iterator6.f();\n                  return _context3.finish(54);\n                case 57:\n                  _start = element.points[0];\n                  _end = element.points[element.points.length - 1];\n                  startTargetId = excElementIdsToTldrawShapeIds.get((_element$startBinding = element.startBinding) === null || _element$startBinding === void 0 ? void 0 : _element$startBinding.elementId);\n                  endTargetId = excElementIdsToTldrawShapeIds.get((_element$endBinding = element.endBinding) === null || _element$endBinding === void 0 ? void 0 : _element$endBinding.elementId);\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"arrow\",\n                    props: {\n                      text: _text,\n                      bend: getBend(element, _start, _end),\n                      dash: getDash(element),\n                      size: (_strokeWidthsToSizes$2 = strokeWidthsToSizes[element.strokeWidth]) !== null && _strokeWidthsToSizes$2 !== void 0 ? _strokeWidthsToSizes$2 : \"m\",\n                      color: (_colorsToColors$eleme3 = colorsToColors[element.strokeColor]) !== null && _colorsToColors$eleme3 !== void 0 ? _colorsToColors$eleme3 : \"black\",\n                      start: startTargetId ? {\n                        type: \"binding\",\n                        boundShapeId: startTargetId,\n                        normalizedAnchor: {\n                          x: 0.5,\n                          y: 0.5\n                        },\n                        isExact: false\n                      } : {\n                        type: \"point\",\n                        x: _start[0],\n                        y: _start[1]\n                      },\n                      end: endTargetId ? {\n                        type: \"binding\",\n                        boundShapeId: endTargetId,\n                        normalizedAnchor: {\n                          x: 0.5,\n                          y: 0.5\n                        },\n                        isExact: false\n                      } : {\n                        type: \"point\",\n                        x: _end[0],\n                        y: _end[1]\n                      },\n                      arrowheadEnd: (_arrowheadsToArrowhea = arrowheadsToArrowheadTypes[element.endArrowhead]) !== null && _arrowheadsToArrowhea !== void 0 ? _arrowheadsToArrowhea : \"none\",\n                      arrowheadStart: (_arrowheadsToArrowhea2 = arrowheadsToArrowheadTypes[element.startArrowhead]) !== null && _arrowheadsToArrowhea2 !== void 0 ? _arrowheadsToArrowhea2 : \"none\"\n                    }\n                  }));\n                  return _context3.abrupt(\"break\", 72);\n                case 63:\n                  _getFontSizeAndScale = getFontSizeAndScale(element.fontSize), size = _getFontSizeAndScale.size, scale = _getFontSizeAndScale.scale;\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"text\",\n                    props: {\n                      size: size,\n                      scale: scale,\n                      font: (_fontFamilyToFontType = fontFamilyToFontType[element.fontFamily]) !== null && _fontFamilyToFontType !== void 0 ? _fontFamilyToFontType : \"draw\",\n                      color: (_colorsToColors$eleme4 = colorsToColors[element.strokeColor]) !== null && _colorsToColors$eleme4 !== void 0 ? _colorsToColors$eleme4 : \"black\",\n                      text: element.text,\n                      align: textAlignToAlignTypes[element.textAlign]\n                    }\n                  }));\n                  return _context3.abrupt(\"break\", 72);\n                case 66:\n                  file = files[element.fileId];\n                  if (file) {\n                    _context3.next = 69;\n                    break;\n                  }\n                  return _context3.abrupt(\"break\", 72);\n                case 69:\n                  assetId = AssetRecordType.createId();\n                  tldrawContent.assets.push({\n                    id: assetId,\n                    typeName: \"asset\",\n                    type: \"image\",\n                    props: {\n                      w: element.width,\n                      h: element.height,\n                      name: (_element$id = element.id) !== null && _element$id !== void 0 ? _element$id : \"Untitled\",\n                      isAnimated: false,\n                      mimeType: file.mimeType,\n                      src: file.dataURL\n                    }\n                  });\n                  tldrawContent.shapes.push(_objectSpread(_objectSpread({}, base), {}, {\n                    type: \"image\",\n                    props: {\n                      w: element.width,\n                      h: element.height,\n                      assetId: assetId\n                    }\n                  }));\n                case 72:\n                  index = getIndexAbove(index);\n                case 73:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _loop, null, [[14, 23, 26, 29], [42, 51, 54, 57]]);\n          });\n          _iterator2.s();\n        case 14:\n          if ((_step2 = _iterator2.n()).done) {\n            _context4.next = 20;\n            break;\n          }\n          return _context4.delegateYield(_loop(), \"t0\", 16);\n        case 16:\n          if (!_context4.t0) {\n            _context4.next = 18;\n            break;\n          }\n          return _context4.abrupt(\"continue\", 18);\n        case 18:\n          _context4.next = 14;\n          break;\n        case 20:\n          _context4.next = 25;\n          break;\n        case 22:\n          _context4.prev = 22;\n          _context4.t1 = _context4[\"catch\"](11);\n          _iterator2.e(_context4.t1);\n        case 25:\n          _context4.prev = 25;\n          _iterator2.f();\n          return _context4.finish(25);\n        case 28:\n          p = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0;\n          editor.mark(\"paste\");\n          editor.putContent(tldrawContent, {\n            point: p,\n            select: false,\n            preserveIds: true\n          });\n          _iterator3 = _createForOfIteratorHelper(groupShapeIdToChildren.values());\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              groupedShapeIds = _step3.value;\n              if (groupedShapeIds.length > 1) {\n                editor.groupShapes(groupedShapeIds);\n                groupShape = editor.getShapeById(groupedShapeIds[0]);\n                if (groupShape !== null && groupShape !== void 0 && groupShape.parentId && isShapeId(groupShape.parentId)) {\n                  rootShapeIds.push(groupShape.parentId);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          _iterator4 = _createForOfIteratorHelper(rotatedElements);\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              _step4$value = _slicedToArray(_step4.value, 2), id = _step4$value[0], angle = _step4$value[1];\n              editor.select(id);\n              editor.rotateShapesBy([id], angle);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          rootShapes = compact(rootShapeIds.map(function (id) {\n            return editor.getShapeById(id);\n          }));\n          bounds = Box2d.Common(rootShapes.map(function (s) {\n            return editor.getPageBounds(s);\n          }));\n          viewPortCenter = editor.viewportPageBounds.center;\n          editor.updateShapes(rootShapes.map(function (s) {\n            var _s$x, _s$y;\n            var delta = {\n              x: ((_s$x = s.x) !== null && _s$x !== void 0 ? _s$x : 0) - (bounds.x + bounds.w / 2),\n              y: ((_s$y = s.y) !== null && _s$y !== void 0 ? _s$y : 0) - (bounds.y + bounds.h / 2)\n            };\n            return {\n              id: s.id,\n              type: s.type,\n              x: viewPortCenter.x + delta.x,\n              y: viewPortCenter.y + delta.y\n            };\n          }));\n          editor.setSelectedIds(rootShapeIds);\n        case 40:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee, null, [[11, 22, 25, 28]]);\n  }));\n  return _pasteExcalidrawContent.apply(this, arguments);\n}\nvar getOpacity = function getOpacity(opacity) {\n  var t = opacity / 100;\n  if (t < 0.2) {\n    return 0.1;\n  } else if (t < 0.4) {\n    return 0.25;\n  } else if (t < 0.6) {\n    return 0.5;\n  } else if (t < 0.8) {\n    return 0.75;\n  }\n  return 1;\n};\nvar strokeWidthsToSizes = {\n  1: \"s\",\n  2: \"m\",\n  3: \"l\",\n  4: \"xl\"\n};\nvar fontSizesToSizes = {\n  16: \"s\",\n  20: \"m\",\n  28: \"l\",\n  36: \"xl\"\n};\nfunction getFontSizeAndScale(fontSize) {\n  var size = fontSizesToSizes[fontSize];\n  if (size) {\n    return {\n      size: size,\n      scale: 1\n    };\n  }\n  if (fontSize < 16) {\n    return {\n      size: \"s\",\n      scale: fontSize / 16\n    };\n  }\n  if (fontSize > 36) {\n    return {\n      size: \"xl\",\n      scale: fontSize / 36\n    };\n  }\n  return {\n    size: \"m\",\n    scale: 1\n  };\n}\nvar fontFamilyToFontType = {\n  1: \"draw\",\n  2: \"sans\",\n  3: \"mono\"\n};\nvar colorsToColors = {\n  \"#ffffff\": \"grey\",\n  // Strokes\n  \"#000000\": \"black\",\n  \"#343a40\": \"black\",\n  \"#495057\": \"grey\",\n  \"#c92a2a\": \"red\",\n  \"#a61e4d\": \"light-red\",\n  \"#862e9c\": \"violet\",\n  \"#5f3dc4\": \"light-violet\",\n  \"#364fc7\": \"blue\",\n  \"#1864ab\": \"light-blue\",\n  \"#0b7285\": \"light-green\",\n  \"#087f5b\": \"light-green\",\n  \"#2b8a3e\": \"green\",\n  \"#5c940d\": \"light-green\",\n  \"#e67700\": \"yellow\",\n  \"#d9480f\": \"orange\",\n  // Backgrounds\n  \"#ced4da\": \"grey\",\n  \"#868e96\": \"grey\",\n  \"#fa5252\": \"light-red\",\n  \"#e64980\": \"red\",\n  \"#be4bdb\": \"light-violet\",\n  \"#7950f2\": \"violet\",\n  \"#4c6ef5\": \"blue\",\n  \"#228be6\": \"light-blue\",\n  \"#15aabf\": \"light-green\",\n  \"#12b886\": \"green\",\n  \"#40c057\": \"green\",\n  \"#82c91e\": \"light-green\",\n  \"#fab005\": \"yellow\",\n  \"#fd7e14\": \"orange\",\n  \"#212529\": \"grey\"\n};\nvar strokeStylesToStrokeTypes = {\n  solid: \"draw\",\n  dashed: \"dashed\",\n  dotted: \"dotted\"\n};\nvar fillStylesToFillType = {\n  \"cross-hatch\": \"pattern\",\n  hachure: \"pattern\",\n  solid: \"solid\"\n};\nvar textAlignToAlignTypes = {\n  left: \"start\",\n  center: \"middle\",\n  right: \"end\"\n};\nvar arrowheadsToArrowheadTypes = {\n  arrow: \"arrow\",\n  dot: \"dot\",\n  triangle: \"triangle\",\n  bar: \"pipe\"\n};\nfunction getBend(element, startPoint, endPoint) {\n  var bend = 0;\n  if (element.points.length > 2) {\n    var start = new Vec2d(startPoint[0], startPoint[1]);\n    var end = new Vec2d(endPoint[0], endPoint[1]);\n    var handle = new Vec2d(element.points[1][0], element.points[1][1]);\n    var delta = Vec2d.Sub(end, start);\n    var v = Vec2d.Per(delta);\n    var med = Vec2d.Med(end, start);\n    var A = Vec2d.Sub(med, v);\n    var B = Vec2d.Add(med, v);\n    var point = Vec2d.NearestPointOnLineSegment(A, B, handle, false);\n    bend = Vec2d.Dist(point, med);\n    if (Vec2d.Clockwise(point, end, med)) bend *= -1;\n  }\n  return bend;\n}\nvar getDash = function getDash(element) {\n  var _strokeStylesToStroke;\n  var dash = (_strokeStylesToStroke = strokeStylesToStrokeTypes[element.strokeStyle]) !== null && _strokeStylesToStroke !== void 0 ? _strokeStylesToStroke : \"draw\";\n  if (dash === \"draw\" && element.roughness === 0) {\n    dash = \"solid\";\n  }\n  return dash;\n};\nvar getFill = function getFill(element) {\n  var _fillStylesToFillType;\n  if (element.backgroundColor === \"transparent\") {\n    return \"none\";\n  }\n  return (_fillStylesToFillType = fillStylesToFillType[element.fillStyle]) !== null && _fillStylesToFillType !== void 0 ? _fillStylesToFillType : \"solid\";\n};\nexport { pasteExcalidrawContent };","map":{"version":3,"names":["AssetRecordType","createShapeId","getIndexAbove","getIndices","isShapeId","uniqueId","Box2d","Vec2d","compact","pasteExcalidrawContent","_x","_x2","_x3","_pasteExcalidrawContent","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","editor","clipboard","point","elements","files","tldrawContent","groupShapeIdToChildren","rotatedElements","currentPageId","excElementIdsToTldrawShapeIds","rootShapeIds","skipIds","index","_iterator2","_step2","_loop","p","_iterator3","_step3","groupedShapeIds","groupShape","_iterator4","_step4","_step4$value","id","angle","rootShapes","bounds","viewPortCenter","wrap","_callee$","_context4","prev","next","shapes","assets","schema","store","serialize","Map","Set","forEach","element","set","boundElements","_iterator","_createForOfIteratorHelper","_step","s","n","done","boundElement","value","type","add","err","e","f","base","_groupShapeIdToChildr","_element$link","_strokeWidthsToSizes$","_colorsToColors$color","text","align","_iterator5","_step5","_loop2","colorToUse","_colorsToColors$eleme","_colorsToColors$eleme2","start","end","indices","_element$startBinding","_element$endBinding","_strokeWidthsToSizes$2","_colorsToColors$eleme3","_arrowheadsToArrowhea","_arrowheadsToArrowhea2","_text","_iterator6","_step6","_loop3","_start","_end","startTargetId","endTargetId","_fontFamilyToFontType","_colorsToColors$eleme4","_getFontSizeAndScale","size","scale","_element$id","file","assetId","_loop$","_context3","has","abrupt","get","typeName","parentId","x","y","rotation","isLocked","locked","opacity","getOpacity","groupIds","length","push","t0","labelElement","_loop2$","_context","find","elm","textAlignToAlignTypes","textAlign","stop","delegateYield","t2","finish","backgroundColor","strokeColor","_objectSpread","props","geo","url","link","w","width","h","height","strokeWidthsToSizes","strokeWidth","color","colorsToColors","dash","getDash","fill","getFill","segments","points","map","_ref","_ref2","_slicedToArray","_ref2$","z","spline","roundness","handles","Object","fromEntries","slice","_ref3","i","_ref4","id2","_loop3$","_context2","t4","startBinding","elementId","endBinding","bend","getBend","boundShapeId","normalizedAnchor","isExact","arrowheadEnd","arrowheadsToArrowheadTypes","endArrowhead","arrowheadStart","startArrowhead","getFontSizeAndScale","fontSize","font","fontFamilyToFontType","fontFamily","fileId","createId","name","isAnimated","mimeType","src","dataURL","t1","inputs","shiftKey","currentPagePoint","putContent","select","preserveIds","values","groupShapes","getShapeById","rotateShapesBy","Common","getPageBounds","viewportPageBounds","center","updateShapes","_s$x","_s$y","delta","setSelectedIds","t","fontSizesToSizes","strokeStylesToStrokeTypes","solid","dashed","dotted","fillStylesToFillType","hachure","left","right","arrow","dot","triangle","bar","startPoint","endPoint","handle","Sub","v","Per","med","Med","A","B","Add","NearestPointOnLineSegment","Dist","Clockwise","_strokeStylesToStroke","strokeStyle","roughness","_fillStylesToFillType","fillStyle"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/clipboard/pasteExcalidrawContent.ts"],"sourcesContent":["import {\n\tAssetRecordType,\n\tEditor,\n\tTLArrowShapeArrowheadStyle,\n\tTLAssetId,\n\tTLContent,\n\tTLDefaultColorStyle,\n\tTLDefaultDashStyle,\n\tTLDefaultFillStyle,\n\tTLDefaultFontStyle,\n\tTLDefaultHorizontalAlignStyle,\n\tTLDefaultSizeStyle,\n\tTLOpacityType,\n\tTLShapeId,\n\tcreateShapeId,\n\tgetIndexAbove,\n\tgetIndices,\n\tisShapeId,\n\tuniqueId,\n} from '@tldraw/editor'\nimport { Box2d, Vec2d, VecLike } from '@tldraw/primitives'\nimport { compact } from '@tldraw/utils'\n\n/**\n * When the clipboard has excalidraw content, paste it into the scene.\n *\n * @param editor - The editor instance.\n * @param clipboard - The clipboard model.\n * @param point - (optional) The point at which to paste the text.\n * @internal\n */\nexport async function pasteExcalidrawContent(editor: Editor, clipboard: any, point?: VecLike) {\n\tconst { elements, files } = clipboard\n\n\tconst tldrawContent: TLContent = {\n\t\tshapes: [],\n\t\trootShapeIds: [],\n\t\tassets: [],\n\t\tschema: editor.store.schema.serialize(),\n\t}\n\n\tconst groupShapeIdToChildren = new Map<string, TLShapeId[]>()\n\tconst rotatedElements = new Map<TLShapeId, number>()\n\n\tconst { currentPageId } = editor\n\n\tconst excElementIdsToTldrawShapeIds = new Map<string, TLShapeId>()\n\tconst rootShapeIds: TLShapeId[] = []\n\n\tconst skipIds = new Set<string>()\n\n\telements.forEach((element: any) => {\n\t\texcElementIdsToTldrawShapeIds.set(element.id, createShapeId())\n\n\t\tif (element.boundElements !== null) {\n\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\tskipIds.add(boundElement.id)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\tlet index = 'a1'\n\n\tfor (const element of elements) {\n\t\tif (skipIds.has(element.id)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tconst id = excElementIdsToTldrawShapeIds.get(element.id)!\n\n\t\tconst base = {\n\t\t\tid,\n\t\t\ttypeName: 'shape',\n\t\t\tparentId: currentPageId,\n\t\t\tindex,\n\t\t\tx: element.x,\n\t\t\ty: element.y,\n\t\t\trotation: 0,\n\t\t\tisLocked: element.locked,\n\t\t\topacity: getOpacity(element.opacity),\n\t\t} as const\n\n\t\tif (element.angle !== 0) {\n\t\t\trotatedElements.set(id, element.angle)\n\t\t}\n\n\t\tif (element.groupIds && element.groupIds.length > 0) {\n\t\t\tif (groupShapeIdToChildren.has(element.groupIds[0])) {\n\t\t\t\tgroupShapeIdToChildren.get(element.groupIds[0])?.push(id)\n\t\t\t} else {\n\t\t\t\tgroupShapeIdToChildren.set(element.groupIds[0], [id])\n\t\t\t}\n\t\t} else {\n\t\t\trootShapeIds.push(id)\n\t\t}\n\n\t\tswitch (element.type) {\n\t\t\tcase 'rectangle':\n\t\t\tcase 'ellipse':\n\t\t\tcase 'diamond': {\n\t\t\t\tlet text = ''\n\t\t\t\tlet align: TLDefaultHorizontalAlignStyle = 'middle'\n\n\t\t\t\tif (element.boundElements !== null) {\n\t\t\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\t\t\tconst labelElement = elements.find((elm: any) => elm.id === boundElement.id)\n\t\t\t\t\t\t\tif (labelElement) {\n\t\t\t\t\t\t\t\ttext = labelElement.text\n\t\t\t\t\t\t\t\talign = textAlignToAlignTypes[labelElement.textAlign]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst colorToUse =\n\t\t\t\t\telement.backgroundColor === 'transparent' ? element.strokeColor : element.backgroundColor\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'geo',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tgeo: element.type,\n\t\t\t\t\t\turl: element.link ?? '',\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth] ?? 'draw',\n\t\t\t\t\t\tcolor: colorsToColors[colorToUse] ?? 'black',\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\talign,\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tfill: getFill(element),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'freedraw': {\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'draw',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth],\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tsegments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'free',\n\t\t\t\t\t\t\t\tpoints: element.points.map(([x, y, z = 0.5]: number[]) => ({\n\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'line': {\n\t\t\t\tconst start = element.points[0]\n\t\t\t\tconst end = element.points[element.points.length - 1]\n\t\t\t\tconst indices = getIndices(element.points.length)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth],\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tspline: element.roundness ? 'cubic' : 'line',\n\t\t\t\t\t\thandles: {\n\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\tid: 'start',\n\t\t\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\t\t\tindex: indices[0],\n\t\t\t\t\t\t\t\tx: start[0],\n\t\t\t\t\t\t\t\ty: start[1],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\tid: 'end',\n\t\t\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\t\t\tindex: indices[indices.length - 1],\n\t\t\t\t\t\t\t\tx: end[0],\n\t\t\t\t\t\t\t\ty: end[1],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...Object.fromEntries(\n\t\t\t\t\t\t\t\telement.points.slice(1, -1).map(([x, y]: number[], i: number) => {\n\t\t\t\t\t\t\t\t\tconst id = uniqueId()\n\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\t\t\t\t\t\tindex: indices[i + 1],\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'arrow': {\n\t\t\t\tlet text = ''\n\n\t\t\t\tif (element.boundElements !== null) {\n\t\t\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\t\t\tconst labelElement = elements.find((elm: any) => elm.id === boundElement.id)\n\t\t\t\t\t\t\tif (labelElement) {\n\t\t\t\t\t\t\t\ttext = labelElement.text\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst start = element.points[0]\n\t\t\t\tconst end = element.points[element.points.length - 1]\n\n\t\t\t\tconst startTargetId = excElementIdsToTldrawShapeIds.get(element.startBinding?.elementId)\n\t\t\t\tconst endTargetId = excElementIdsToTldrawShapeIds.get(element.endBinding?.elementId)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'arrow',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tbend: getBend(element, start, end),\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth] ?? 'm',\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tstart: startTargetId\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\ttype: 'binding',\n\t\t\t\t\t\t\t\t\tboundShapeId: startTargetId,\n\t\t\t\t\t\t\t\t\tnormalizedAnchor: { x: 0.5, y: 0.5 },\n\t\t\t\t\t\t\t\t\tisExact: false,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\ttype: 'point',\n\t\t\t\t\t\t\t\t\tx: start[0],\n\t\t\t\t\t\t\t\t\ty: start[1],\n\t\t\t\t\t\t\t  },\n\t\t\t\t\t\tend: endTargetId\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\ttype: 'binding',\n\t\t\t\t\t\t\t\t\tboundShapeId: endTargetId,\n\t\t\t\t\t\t\t\t\tnormalizedAnchor: { x: 0.5, y: 0.5 },\n\t\t\t\t\t\t\t\t\tisExact: false,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\ttype: 'point',\n\t\t\t\t\t\t\t\t\tx: end[0],\n\t\t\t\t\t\t\t\t\ty: end[1],\n\t\t\t\t\t\t\t  },\n\t\t\t\t\t\tarrowheadEnd: arrowheadsToArrowheadTypes[element.endArrowhead] ?? 'none',\n\t\t\t\t\t\tarrowheadStart: arrowheadsToArrowheadTypes[element.startArrowhead] ?? 'none',\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'text': {\n\t\t\t\tconst { size, scale } = getFontSizeAndScale(element.fontSize)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tscale,\n\t\t\t\t\t\tfont: fontFamilyToFontType[element.fontFamily] ?? 'draw',\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\ttext: element.text,\n\t\t\t\t\t\talign: textAlignToAlignTypes[element.textAlign],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'image': {\n\t\t\t\tconst file = files[element.fileId]\n\t\t\t\tif (!file) break\n\n\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId()\n\t\t\t\ttldrawContent.assets.push({\n\t\t\t\t\tid: assetId,\n\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tname: element.id ?? 'Untitled',\n\t\t\t\t\t\tisAnimated: false,\n\t\t\t\t\t\tmimeType: file.mimeType,\n\t\t\t\t\t\tsrc: file.dataURL,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tassetId,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tindex = getIndexAbove(index)\n\t}\n\n\tconst p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : undefined)\n\n\teditor.mark('paste')\n\n\teditor.putContent(tldrawContent, {\n\t\tpoint: p,\n\t\tselect: false,\n\t\tpreserveIds: true,\n\t})\n\tfor (const groupedShapeIds of groupShapeIdToChildren.values()) {\n\t\tif (groupedShapeIds.length > 1) {\n\t\t\teditor.groupShapes(groupedShapeIds)\n\t\t\tconst groupShape = editor.getShapeById(groupedShapeIds[0])\n\t\t\tif (groupShape?.parentId && isShapeId(groupShape.parentId)) {\n\t\t\t\trootShapeIds.push(groupShape.parentId)\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const [id, angle] of rotatedElements) {\n\t\teditor.select(id)\n\t\teditor.rotateShapesBy([id], angle)\n\t}\n\n\tconst rootShapes = compact(rootShapeIds.map((id) => editor.getShapeById(id)))\n\tconst bounds = Box2d.Common(rootShapes.map((s) => editor.getPageBounds(s)!))\n\tconst viewPortCenter = editor.viewportPageBounds.center\n\teditor.updateShapes(\n\t\trootShapes.map((s) => {\n\t\t\tconst delta = {\n\t\t\t\tx: (s.x ?? 0) - (bounds.x + bounds.w / 2),\n\t\t\t\ty: (s.y ?? 0) - (bounds.y + bounds.h / 2),\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tid: s.id,\n\t\t\t\ttype: s.type,\n\t\t\t\tx: viewPortCenter.x + delta.x,\n\t\t\t\ty: viewPortCenter.y + delta.y,\n\t\t\t}\n\t\t})\n\t)\n\teditor.setSelectedIds(rootShapeIds)\n}\n\n/* --------------- Translating Helpers --------_------ */\n\nconst getOpacity = (opacity: number): TLOpacityType => {\n\tconst t = opacity / 100\n\tif (t < 0.2) {\n\t\treturn 0.1\n\t} else if (t < 0.4) {\n\t\treturn 0.25\n\t} else if (t < 0.6) {\n\t\treturn 0.5\n\t} else if (t < 0.8) {\n\t\treturn 0.75\n\t}\n\n\treturn 1\n}\n\nconst strokeWidthsToSizes: Record<number, TLDefaultSizeStyle> = {\n\t1: 's',\n\t2: 'm',\n\t3: 'l',\n\t4: 'xl',\n}\n\nconst fontSizesToSizes: Record<number, TLDefaultSizeStyle> = {\n\t16: 's',\n\t20: 'm',\n\t28: 'l',\n\t36: 'xl',\n}\n\nfunction getFontSizeAndScale(fontSize: number): { size: TLDefaultSizeStyle; scale: number } {\n\tconst size = fontSizesToSizes[fontSize]\n\tif (size) {\n\t\treturn { size, scale: 1 }\n\t}\n\tif (fontSize < 16) {\n\t\treturn { size: 's', scale: fontSize / 16 }\n\t}\n\tif (fontSize > 36) {\n\t\treturn { size: 'xl', scale: fontSize / 36 }\n\t}\n\treturn { size: 'm', scale: 1 }\n}\n\nconst fontFamilyToFontType: Record<number, TLDefaultFontStyle> = {\n\t1: 'draw',\n\t2: 'sans',\n\t3: 'mono',\n}\n\nconst colorsToColors: Record<string, TLDefaultColorStyle> = {\n\t'#ffffff': 'grey',\n\t// Strokes\n\t'#000000': 'black',\n\t'#343a40': 'black',\n\t'#495057': 'grey',\n\t'#c92a2a': 'red',\n\t'#a61e4d': 'light-red',\n\t'#862e9c': 'violet',\n\t'#5f3dc4': 'light-violet',\n\t'#364fc7': 'blue',\n\t'#1864ab': 'light-blue',\n\t'#0b7285': 'light-green',\n\t'#087f5b': 'light-green',\n\t'#2b8a3e': 'green',\n\t'#5c940d': 'light-green',\n\t'#e67700': 'yellow',\n\t'#d9480f': 'orange',\n\t// Backgrounds\n\t'#ced4da': 'grey',\n\t'#868e96': 'grey',\n\t'#fa5252': 'light-red',\n\t'#e64980': 'red',\n\t'#be4bdb': 'light-violet',\n\t'#7950f2': 'violet',\n\t'#4c6ef5': 'blue',\n\t'#228be6': 'light-blue',\n\t'#15aabf': 'light-green',\n\t'#12b886': 'green',\n\t'#40c057': 'green',\n\t'#82c91e': 'light-green',\n\t'#fab005': 'yellow',\n\t'#fd7e14': 'orange',\n\t'#212529': 'grey',\n}\n\nconst strokeStylesToStrokeTypes: Record<string, TLDefaultDashStyle> = {\n\tsolid: 'draw',\n\tdashed: 'dashed',\n\tdotted: 'dotted',\n}\n\nconst fillStylesToFillType: Record<string, TLDefaultFillStyle> = {\n\t'cross-hatch': 'pattern',\n\thachure: 'pattern',\n\tsolid: 'solid',\n}\n\nconst textAlignToAlignTypes: Record<string, TLDefaultHorizontalAlignStyle> = {\n\tleft: 'start',\n\tcenter: 'middle',\n\tright: 'end',\n}\n\nconst arrowheadsToArrowheadTypes: Record<string, TLArrowShapeArrowheadStyle> = {\n\tarrow: 'arrow',\n\tdot: 'dot',\n\ttriangle: 'triangle',\n\tbar: 'pipe',\n}\n\nfunction getBend(element: any, startPoint: any, endPoint: any) {\n\tlet bend = 0\n\tif (element.points.length > 2) {\n\t\tconst start = new Vec2d(startPoint[0], startPoint[1])\n\t\tconst end = new Vec2d(endPoint[0], endPoint[1])\n\t\tconst handle = new Vec2d(element.points[1][0], element.points[1][1])\n\t\tconst delta = Vec2d.Sub(end, start)\n\t\tconst v = Vec2d.Per(delta)\n\n\t\tconst med = Vec2d.Med(end, start)\n\t\tconst A = Vec2d.Sub(med, v)\n\t\tconst B = Vec2d.Add(med, v)\n\n\t\tconst point = Vec2d.NearestPointOnLineSegment(A, B, handle, false)\n\t\tbend = Vec2d.Dist(point, med)\n\t\tif (Vec2d.Clockwise(point, end, med)) bend *= -1\n\t}\n\treturn bend\n}\n\nconst getDash = (element: any): TLDefaultDashStyle => {\n\tlet dash: TLDefaultDashStyle = strokeStylesToStrokeTypes[element.strokeStyle] ?? 'draw'\n\tif (dash === 'draw' && element.roughness === 0) {\n\t\tdash = 'solid'\n\t}\n\treturn dash\n}\n\nconst getFill = (element: any): TLDefaultFillStyle => {\n\tif (element.backgroundColor === 'transparent') {\n\t\treturn 'none'\n\t}\n\treturn fillStylesToFillType[element.fillStyle] ?? 'solid'\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}