{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FrameShapeUtil, downloadDataURLAsFile, getSvgAsDataUrl, getSvgAsImage, useEditor } from \"@tldraw/editor\";\nimport { useCallback } from \"react\";\nimport { useToasts } from \"./useToastsProvider.mjs\";\nimport { useTranslation } from \"./useTranslation/useTranslation.mjs\";\nfunction useExportAs() {\n  var editor = useEditor();\n  var _useToasts = useToasts(),\n    addToast = _useToasts.addToast;\n  var msg = useTranslation();\n  return useCallback( /*#__PURE__*/function () {\n    var _exportAs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var ids,\n        format,\n        svg,\n        name,\n        first,\n        _first$props$name,\n        dataURL,\n        image,\n        _dataURL,\n        data,\n        _dataURL2,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            ids = _args.length > 0 && _args[0] !== undefined ? _args[0] : editor.selectedIds;\n            format = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"png\";\n            if (ids.length === 0) {\n              ids = _toConsumableArray(editor.currentPageShapeIds);\n            }\n            if (!(ids.length === 0)) {\n              _context.next = 5;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 5:\n            _context.next = 7;\n            return editor.getSvg(ids, {\n              scale: 1,\n              background: editor.instanceState.exportBackground\n            });\n          case 7:\n            svg = _context.sent;\n            if (svg) {\n              _context.next = 10;\n              break;\n            }\n            throw new Error(\"Could not construct SVG.\");\n          case 10:\n            name = \"shapes\";\n            if (ids.length === 1) {\n              first = editor.getShapeById(ids[0]);\n              if (editor.isShapeOfType(first, FrameShapeUtil)) {\n                name = (_first$props$name = first.props.name) !== null && _first$props$name !== void 0 ? _first$props$name : \"frame\";\n              } else {\n                name = first.id.replace(/:/, \"_\");\n              }\n            }\n            _context.t0 = format;\n            _context.next = _context.t0 === \"svg\" ? 15 : _context.t0 === \"webp\" ? 20 : _context.t0 === \"png\" ? 20 : _context.t0 === \"json\" ? 30 : 35;\n            break;\n          case 15:\n            _context.next = 17;\n            return getSvgAsDataUrl(svg);\n          case 17:\n            dataURL = _context.sent;\n            downloadDataURLAsFile(dataURL, \"\".concat(name || \"shapes\", \".svg\"));\n            return _context.abrupt(\"return\");\n          case 20:\n            _context.next = 22;\n            return getSvgAsImage(svg, {\n              type: format,\n              quality: 1,\n              scale: 2\n            });\n          case 22:\n            image = _context.sent;\n            if (image) {\n              _context.next = 26;\n              break;\n            }\n            addToast({\n              id: \"export-fail\",\n              // icon: 'error',\n              title: msg(\"toast.error.export-fail.title\"),\n              description: msg(\"toast.error.export-fail.desc\")\n            });\n            return _context.abrupt(\"return\");\n          case 26:\n            _dataURL = URL.createObjectURL(image);\n            downloadDataURLAsFile(_dataURL, \"\".concat(name || \"shapes\", \".\").concat(format));\n            URL.revokeObjectURL(_dataURL);\n            return _context.abrupt(\"return\");\n          case 30:\n            data = editor.getContent(ids);\n            _dataURL2 = URL.createObjectURL(new Blob([JSON.stringify(data, null, 4)], {\n              type: \"application/json\"\n            }));\n            downloadDataURLAsFile(_dataURL2, \"\".concat(name || \"shapes\", \".json\"));\n            URL.revokeObjectURL(_dataURL2);\n            return _context.abrupt(\"return\");\n          case 35:\n            throw new Error(\"Export type \".concat(format, \" not supported.\"));\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    function exportAs() {\n      return _exportAs.apply(this, arguments);\n    }\n    return exportAs;\n  }(), [editor, addToast, msg]);\n}\nexport { useExportAs };","map":{"version":3,"names":["FrameShapeUtil","downloadDataURLAsFile","getSvgAsDataUrl","getSvgAsImage","useEditor","useCallback","useToasts","useTranslation","useExportAs","editor","_useToasts","addToast","msg","_exportAs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ids","format","svg","name","first","_first$props$name","dataURL","image","_dataURL","data","_dataURL2","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","selectedIds","_toConsumableArray","currentPageShapeIds","abrupt","getSvg","scale","background","instanceState","exportBackground","sent","Error","getShapeById","isShapeOfType","props","id","replace","t0","concat","type","quality","title","description","URL","createObjectURL","revokeObjectURL","getContent","Blob","JSON","stringify","stop","exportAs","apply"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/useExportAs.ts"],"sourcesContent":["import {\n\tFrameShapeUtil,\n\tTLExportType,\n\tTLShapeId,\n\tdownloadDataURLAsFile,\n\tgetSvgAsDataUrl,\n\tgetSvgAsImage,\n\tuseEditor,\n} from '@tldraw/editor'\nimport { useCallback } from 'react'\nimport { useToasts } from './useToastsProvider'\nimport { useTranslation } from './useTranslation/useTranslation'\n\n/** @public */\nexport function useExportAs() {\n\tconst editor = useEditor()\n\tconst { addToast } = useToasts()\n\tconst msg = useTranslation()\n\n\treturn useCallback(\n\t\tasync function exportAs(ids: TLShapeId[] = editor.selectedIds, format: TLExportType = 'png') {\n\t\t\tif (ids.length === 0) {\n\t\t\t\tids = [...editor.currentPageShapeIds]\n\t\t\t}\n\n\t\t\tif (ids.length === 0) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst svg = await editor.getSvg(ids, {\n\t\t\t\tscale: 1,\n\t\t\t\tbackground: editor.instanceState.exportBackground,\n\t\t\t})\n\n\t\t\tif (!svg) throw new Error('Could not construct SVG.')\n\n\t\t\tlet name = 'shapes'\n\n\t\t\tif (ids.length === 1) {\n\t\t\t\tconst first = editor.getShapeById(ids[0])!\n\t\t\t\tif (editor.isShapeOfType(first, FrameShapeUtil)) {\n\t\t\t\t\tname = first.props.name ?? 'frame'\n\t\t\t\t} else {\n\t\t\t\t\tname = first.id.replace(/:/, '_')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (format) {\n\t\t\t\tcase 'svg': {\n\t\t\t\t\tconst dataURL = await getSvgAsDataUrl(svg)\n\t\t\t\t\tdownloadDataURLAsFile(dataURL, `${name || 'shapes'}.svg`)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcase 'webp':\n\t\t\t\tcase 'png': {\n\t\t\t\t\tconst image = await getSvgAsImage(svg, {\n\t\t\t\t\t\ttype: format,\n\t\t\t\t\t\tquality: 1,\n\t\t\t\t\t\tscale: 2,\n\t\t\t\t\t})\n\n\t\t\t\t\tif (!image) {\n\t\t\t\t\t\taddToast({\n\t\t\t\t\t\t\tid: 'export-fail',\n\t\t\t\t\t\t\t// icon: 'error',\n\t\t\t\t\t\t\ttitle: msg('toast.error.export-fail.title'),\n\t\t\t\t\t\t\tdescription: msg('toast.error.export-fail.desc'),\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dataURL = URL.createObjectURL(image)\n\n\t\t\t\t\tdownloadDataURLAsFile(dataURL, `${name || 'shapes'}.${format}`)\n\n\t\t\t\t\tURL.revokeObjectURL(dataURL)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tcase 'json': {\n\t\t\t\t\tconst data = editor.getContent(ids)\n\t\t\t\t\tconst dataURL = URL.createObjectURL(\n\t\t\t\t\t\tnew Blob([JSON.stringify(data, null, 4)], { type: 'application/json' })\n\t\t\t\t\t)\n\n\t\t\t\t\tdownloadDataURLAsFile(dataURL, `${name || 'shapes'}.json`)\n\n\t\t\t\t\tURL.revokeObjectURL(dataURL)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Export type ${format} not supported.`)\n\t\t\t}\n\t\t},\n\t\t[editor, addToast, msg]\n\t)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}