import { isShape } from "@tldraw/tlschema";
import { computed, isUninitialized, RESET_VALUE } from "signia";
const parentsToChildrenWithIndexes = (store) => {
  const shapeIds = store.query.ids("shape");
  function fromScratch() {
    const result = {};
    shapeIds.value.forEach((id) => {
      const shape = store.get(id);
      if (!result[shape.parentId]) {
        result[shape.parentId] = [];
      }
      result[shape.parentId].push([id, shape.index]);
    });
    Object.values(result).forEach((arr) => arr.sort((a, b) => a[1] < b[1] ? -1 : 1));
    return result;
  }
  return computed(
    "parentsToChildrenWithIndexes",
    (lastValue, lastComputedEpoch) => {
      if (isUninitialized(lastValue)) {
        return fromScratch();
      }
      const diff = store.history.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE) {
        return fromScratch();
      }
      if (diff.length === 0)
        return lastValue;
      let newValue = null;
      const ensureNewArray = (parentId) => {
        if (!newValue) {
          newValue = { ...lastValue };
        }
        if (!newValue[parentId]) {
          newValue[parentId] = [];
        } else if (newValue[parentId] === lastValue[parentId]) {
          newValue[parentId] = [...newValue[parentId]];
        }
      };
      const toSort = /* @__PURE__ */ new Set();
      let changes;
      for (let i = 0, n = diff.length; i < n; i++) {
        changes = diff[i];
        for (const record of Object.values(changes.added)) {
          if (!isShape(record))
            continue;
          ensureNewArray(record.parentId);
          newValue[record.parentId].push([record.id, record.index]);
          toSort.add(newValue[record.parentId]);
        }
        for (const [from, to] of Object.values(changes.updated)) {
          if (!isShape(to))
            continue;
          if (!isShape(from))
            continue;
          if (from.parentId !== to.parentId) {
            ensureNewArray(from.parentId);
            ensureNewArray(to.parentId);
            newValue[from.parentId].splice(
              newValue[from.parentId].findIndex((i2) => i2[0] === to.id),
              1
            );
            newValue[to.parentId].push([to.id, to.index]);
            toSort.add(newValue[to.parentId]);
          } else if (from.index !== to.index) {
            ensureNewArray(to.parentId);
            const idx = newValue[to.parentId].findIndex((i2) => i2[0] === to.id);
            newValue[to.parentId][idx] = [to.id, to.index];
            toSort.add(newValue[to.parentId]);
          }
        }
        for (const record of Object.values(changes.removed)) {
          if (!isShape(record))
            continue;
          ensureNewArray(record.parentId);
          newValue[record.parentId].splice(
            newValue[record.parentId].findIndex((i2) => i2[0] === record.id),
            1
          );
        }
      }
      for (const arr of toSort) {
        arr.sort((a, b) => a[1] < b[1] ? -1 : 1);
      }
      return newValue ?? lastValue;
    }
  );
};
export {
  parentsToChildrenWithIndexes
};
//# sourceMappingURL=parentsToChildrenWithIndexes.mjs.map
