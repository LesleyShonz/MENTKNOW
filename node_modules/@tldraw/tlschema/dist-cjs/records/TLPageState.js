"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TLPageState_exports = {};
__export(TLPageState_exports, {
  InstancePageStateRecordType: () => InstancePageStateRecordType,
  instancePageStateMigrations: () => instancePageStateMigrations,
  instancePageStateValidator: () => instancePageStateValidator,
  instancePageStateVersions: () => Versions
});
module.exports = __toCommonJS(TLPageState_exports);
var import_store = require("@tldraw/store");
var import_validate = require("@tldraw/validate");
var import_id_validator = require("../misc/id-validator");
var import_TLBaseShape = require("../shapes/TLBaseShape");
var import_TLCamera = require("./TLCamera");
var import_TLInstance = require("./TLInstance");
var import_TLPage = require("./TLPage");
const instancePageStateValidator = import_validate.T.model(
  "instance_page_state",
  import_validate.T.object({
    typeName: import_validate.T.literal("instance_page_state"),
    id: (0, import_id_validator.idValidator)("instance_page_state"),
    pageId: import_TLPage.pageIdValidator,
    selectedIds: import_validate.T.arrayOf(import_TLBaseShape.shapeIdValidator),
    hintingIds: import_validate.T.arrayOf(import_TLBaseShape.shapeIdValidator),
    erasingIds: import_validate.T.arrayOf(import_TLBaseShape.shapeIdValidator),
    hoveredId: import_TLBaseShape.shapeIdValidator.nullable(),
    editingId: import_TLBaseShape.shapeIdValidator.nullable(),
    croppingId: import_TLBaseShape.shapeIdValidator.nullable(),
    focusLayerId: import_TLBaseShape.shapeIdValidator.nullable()
  })
);
const Versions = {
  AddCroppingId: 1,
  RemoveInstanceIdAndCameraId: 2
};
const instancePageStateMigrations = (0, import_store.defineMigrations)({
  currentVersion: Versions.RemoveInstanceIdAndCameraId,
  migrators: {
    [Versions.AddCroppingId]: {
      up(instance) {
        return { ...instance, croppingId: null };
      },
      down({ croppingId: _croppingId, ...instance }) {
        return instance;
      }
    },
    [Versions.RemoveInstanceIdAndCameraId]: {
      up({ instanceId: _, cameraId: __, ...instance }) {
        return instance;
      },
      down(instance) {
        return {
          ...instance,
          instanceId: import_TLInstance.TLINSTANCE_ID,
          cameraId: import_TLCamera.CameraRecordType.createId("void")
        };
      }
    }
  }
});
const InstancePageStateRecordType = (0, import_store.createRecordType)(
  "instance_page_state",
  {
    migrations: instancePageStateMigrations,
    validator: instancePageStateValidator,
    scope: "session"
  }
).withDefaultProperties(
  () => ({
    editingId: null,
    croppingId: null,
    selectedIds: [],
    hoveredId: null,
    erasingIds: [],
    hintingIds: [],
    focusLayerId: null
  })
);
//# sourceMappingURL=TLPageState.js.map
