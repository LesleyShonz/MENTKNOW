{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{DocumentRecordType,InstancePresenceRecordType,PageRecordType,createPresenceStateDerivation,createTLStore,defaultShapes,getUserPreferences}from\"@tldraw/tldraw\";import{useEffect,useRef,useMemo,useState}from\"react\";import{computed,react,transact}from\"signia\";import YPartyKitProvider from\"y-partykit/provider\";import*as Y from\"yjs\";export function useYjsStore(_ref){var _ref$roomId=_ref.roomId,roomId=_ref$roomId===void 0?\"example\":_ref$roomId,_ref$hostUrl=_ref.hostUrl,hostUrl=_ref$hostUrl===void 0?\"yjs.threepointone.partykit.dev\":_ref$hostUrl;var _useState=useState(function(){return createTLStore({shapes:defaultShapes});}),_useState2=_slicedToArray(_useState,1),store=_useState2[0];var _useState3=useState({status:\"loading\"}),_useState4=_slicedToArray(_useState3,2),storeWithStatus=_useState4[0],setStoreWithStatus=_useState4[1];var _useMemo=useMemo(function(){var doc=new Y.Doc({gc:true});return{doc:doc,room:new YPartyKitProvider(hostUrl,roomId,doc,{connect:true}),yRecords:doc.getMap(\"tl_\".concat(roomId))};},[hostUrl,roomId]),doc=_useMemo.doc,room=_useMemo.room,yRecords=_useMemo.yRecords;var rDidConnect=useRef(false);useEffect(function(){var unsubs=[];// We'll use this flag to prevent repeating subscriptions if our connection drops and reconnects.\nroom.on(\"status\",function(_ref2){var status=_ref2.status;// If we're disconnected, set the store status to 'synced-remote' and the connection status to 'offline'\nif(status===\"connecting\"||status===\"disconnected\"){setStoreWithStatus({store:store,status:\"synced-remote\",connectionStatus:\"offline\"});return;}if(status!==\"connected\")return;if(rDidConnect.current){setStoreWithStatus({store:store,status:\"synced-remote\",connectionStatus:\"online\"});return;}// Ok, we're connecting for the first time. Let's get started!\nrDidConnect.current=true;// Initialize the store with the yjs doc recordsâ€”or, if the yjs doc\n// is empty, initialize the yjs doc with the default store records.\nif(yRecords.size===0){// Create the initial store records\ntransact(function(){store.clear();store.put([DocumentRecordType.create({id:\"document:document\"}),PageRecordType.create({id:\"page:page\",name:\"Page 1\",index:\"a1\"})]);});// Sync the store records to the yjs doc\ndoc.transact(function(){var _iterator=_createForOfIteratorHelper(store.allRecords()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var record=_step.value;yRecords.set(record.id,record);}}catch(err){_iterator.e(err);}finally{_iterator.f();}});}else{// Replace the store records with the yjs doc records\ntransact(function(){store.clear();store.put(Array.from(yRecords.values()));});}/* -------------------- Document -------------------- */ // Sync store changes to the yjs doc\nunsubs.push(store.listen(function syncStoreChangesToYjsDoc(_ref3){var changes=_ref3.changes;doc.transact(function(){Object.values(changes.added).forEach(function(record){yRecords.set(record.id,record);});Object.values(changes.updated).forEach(function(_ref4){var _ref5=_slicedToArray(_ref4,2),_=_ref5[0],record=_ref5[1];yRecords.set(record.id,record);});Object.values(changes.removed).forEach(function(record){yRecords.delete(record.id);});});},{source:\"user\",scope:\"document\"}// only sync user's document changes\n));// Sync the yjs doc changes to the store\nvar handleChange=function handleChange(events,transaction){if(transaction.local)return;var toRemove=[];var toPut=[];events.forEach(function(event){event.changes.keys.forEach(function(change,id){switch(change.action){case\"add\":case\"update\":{toPut.push(yRecords.get(id));break;}case\"delete\":{toRemove.push(id);break;}}});});// put / remove the records in the store\nstore.mergeRemoteChanges(function(){if(toRemove.length)store.remove(toRemove);if(toPut.length)store.put(toPut);});};yRecords.observeDeep(handleChange);unsubs.push(function(){return yRecords.unobserveDeep(handleChange);});/* -------------------- Awareness ------------------- */ // Create the instance presence derivation\nvar yClientId=room.awareness.clientID.toString();var presenceId=InstancePresenceRecordType.createId(yClientId);var userPreferencesComputed=computed(\"ok\",function(){return getUserPreferences();});var presenceDerivation=createPresenceStateDerivation(userPreferencesComputed,presenceId)(store);// Set our initial presence from the derivation's current value\nroom.awareness.setLocalStateField(\"presence\",presenceDerivation.value);// When the derivation change, sync presence to to yjs awareness\nunsubs.push(react(\"when presence changes\",function(){var presence=presenceDerivation.value;requestAnimationFrame(function(){room.awareness.setLocalStateField(\"presence\",presence);});}));// Sync yjs awareness changes to the store\nvar handleUpdate=function handleUpdate(update){var states=room.awareness.getStates();var toRemove=[];var toPut=[];// Connect records to put / remove\nvar _iterator2=_createForOfIteratorHelper(update.added),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var clientId=_step2.value;var state=states.get(clientId);if(state!==null&&state!==void 0&&state.presence&&state.presence.id!==presenceId){toPut.push(state.presence);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}var _iterator3=_createForOfIteratorHelper(update.updated),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _clientId=_step3.value;var _state=states.get(_clientId);if(_state!==null&&_state!==void 0&&_state.presence&&_state.presence.id!==presenceId){toPut.push(_state.presence);}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(update.removed),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _clientId2=_step4.value;toRemove.push(InstancePresenceRecordType.createId(_clientId2.toString()));}// put / remove the records in the store\n}catch(err){_iterator4.e(err);}finally{_iterator4.f();}store.mergeRemoteChanges(function(){if(toRemove.length)store.remove(toRemove);if(toPut.length)store.put(toPut);});};room.awareness.on(\"update\",handleUpdate);unsubs.push(function(){return room.awareness.off(\"update\",handleUpdate);});// And we're done!\nsetStoreWithStatus({store:store,status:\"synced-remote\",connectionStatus:\"online\"});});return function(){unsubs.forEach(function(fn){return fn();});unsubs.length=0;};},[room,doc,store,yRecords]);return storeWithStatus;}","map":{"version":3,"names":["DocumentRecordType","InstancePresenceRecordType","PageRecordType","createPresenceStateDerivation","createTLStore","defaultShapes","getUserPreferences","useEffect","useRef","useMemo","useState","computed","react","transact","YPartyKitProvider","Y","useYjsStore","_ref","_ref$roomId","roomId","_ref$hostUrl","hostUrl","_useState","shapes","_useState2","_slicedToArray","store","_useState3","status","_useState4","storeWithStatus","setStoreWithStatus","_useMemo","doc","Doc","gc","room","connect","yRecords","getMap","concat","rDidConnect","unsubs","on","_ref2","connectionStatus","current","size","clear","put","create","id","name","index","_iterator","_createForOfIteratorHelper","allRecords","_step","s","n","done","record","value","set","err","e","f","Array","from","values","push","listen","syncStoreChangesToYjsDoc","_ref3","changes","Object","added","forEach","updated","_ref4","_ref5","_","removed","delete","source","scope","handleChange","events","transaction","local","toRemove","toPut","event","keys","change","action","get","mergeRemoteChanges","length","remove","observeDeep","unobserveDeep","yClientId","awareness","clientID","toString","presenceId","createId","userPreferencesComputed","presenceDerivation","setLocalStateField","presence","requestAnimationFrame","handleUpdate","update","states","getStates","_iterator2","_step2","clientId","state","_iterator3","_step3","_iterator4","_step4","off","fn"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/src/useYjsStore.ts"],"sourcesContent":["import {\n  DocumentRecordType,\n  InstancePresenceRecordType,\n  PageRecordType,\n  TLDocument,\n  TLInstancePresence,\n  TLPageId,\n  TLRecord,\n  TLStoreWithStatus,\n  createPresenceStateDerivation,\n  createTLStore,\n  defaultShapes,\n  getUserPreferences\n} from \"@tldraw/tldraw\";\nimport { useEffect, useRef, useMemo, useState } from \"react\";\nimport { computed, react, transact } from \"signia\";\nimport YPartyKitProvider from \"y-partykit/provider\";\nimport * as Y from \"yjs\";\n\nexport function useYjsStore({\n  roomId = \"example\",\n  hostUrl = \"yjs.threepointone.partykit.dev\"\n}: Partial<{ hostUrl: string; roomId: string; version: number }>) {\n  const [store] = useState(() => createTLStore({ shapes: defaultShapes }));\n  const [storeWithStatus, setStoreWithStatus] = useState<TLStoreWithStatus>({\n    status: \"loading\"\n  });\n\n  const { doc, room, yRecords } = useMemo(() => {\n    const doc = new Y.Doc({ gc: true });\n    return {\n      doc,\n      room: new YPartyKitProvider(hostUrl, roomId, doc, { connect: true }),\n      yRecords: doc.getMap<TLRecord>(`tl_${roomId}`)\n    };\n  }, [hostUrl, roomId]);\n\n  const rDidConnect = useRef(false);\n\n  useEffect(() => {\n    const unsubs: (() => void)[] = [];\n\n    // We'll use this flag to prevent repeating subscriptions if our connection drops and reconnects.\n\n    room.on(\n      \"status\",\n      ({ status }: { status: \"connecting\" | \"disconnected\" | \"connected\" }) => {\n        // If we're disconnected, set the store status to 'synced-remote' and the connection status to 'offline'\n        if (status === \"connecting\" || status === \"disconnected\") {\n          setStoreWithStatus({\n            store,\n            status: \"synced-remote\",\n            connectionStatus: \"offline\"\n          });\n          return;\n        }\n\n        if (status !== \"connected\") return;\n\n        if (rDidConnect.current) {\n          setStoreWithStatus({\n            store,\n            status: \"synced-remote\",\n            connectionStatus: \"online\"\n          });\n          return;\n        }\n\n        // Ok, we're connecting for the first time. Let's get started!\n        rDidConnect.current = true;\n\n        // Initialize the store with the yjs doc recordsâ€”or, if the yjs doc\n        // is empty, initialize the yjs doc with the default store records.\n        if (yRecords.size === 0) {\n          // Create the initial store records\n          transact(() => {\n            store.clear();\n            store.put([\n              DocumentRecordType.create({\n                id: \"document:document\" as TLDocument[\"id\"]\n              }),\n              PageRecordType.create({\n                id: \"page:page\" as TLPageId,\n                name: \"Page 1\",\n                index: \"a1\"\n              })\n            ]);\n          });\n\n          // Sync the store records to the yjs doc\n          doc.transact(() => {\n            for (const record of store.allRecords()) {\n              yRecords.set(record.id, record);\n            }\n          });\n        } else {\n          // Replace the store records with the yjs doc records\n          transact(() => {\n            store.clear();\n            store.put(Array.from(yRecords.values()));\n          });\n        }\n\n        /* -------------------- Document -------------------- */\n\n        // Sync store changes to the yjs doc\n        unsubs.push(\n          store.listen(\n            function syncStoreChangesToYjsDoc({ changes }) {\n              doc.transact(() => {\n                Object.values(changes.added).forEach((record) => {\n                  yRecords.set(record.id, record);\n                });\n\n                Object.values(changes.updated).forEach(([_, record]) => {\n                  yRecords.set(record.id, record);\n                });\n\n                Object.values(changes.removed).forEach((record) => {\n                  yRecords.delete(record.id);\n                });\n              });\n            },\n            { source: \"user\", scope: \"document\" } // only sync user's document changes\n          )\n        );\n\n        // Sync the yjs doc changes to the store\n        const handleChange = (\n          events: Y.YEvent<any>[],\n          transaction: Y.Transaction\n        ) => {\n          if (transaction.local) return;\n\n          const toRemove: TLRecord[\"id\"][] = [];\n          const toPut: TLRecord[] = [];\n\n          events.forEach((event) => {\n            event.changes.keys.forEach((change, id) => {\n              switch (change.action) {\n                case \"add\":\n                case \"update\": {\n                  toPut.push(yRecords.get(id)!);\n                  break;\n                }\n                case \"delete\": {\n                  toRemove.push(id as TLRecord[\"id\"]);\n                  break;\n                }\n              }\n            });\n          });\n\n          // put / remove the records in the store\n          store.mergeRemoteChanges(() => {\n            if (toRemove.length) store.remove(toRemove);\n            if (toPut.length) store.put(toPut);\n          });\n        };\n\n        yRecords.observeDeep(handleChange);\n        unsubs.push(() => yRecords.unobserveDeep(handleChange));\n\n        /* -------------------- Awareness ------------------- */\n\n        // Create the instance presence derivation\n        const yClientId = room.awareness.clientID.toString();\n        const presenceId = InstancePresenceRecordType.createId(yClientId);\n        const userPreferencesComputed = computed(\"ok\", () =>\n          getUserPreferences()\n        );\n        const presenceDerivation = createPresenceStateDerivation(\n          userPreferencesComputed,\n          presenceId\n        )(store);\n\n        // Set our initial presence from the derivation's current value\n        room.awareness.setLocalStateField(\"presence\", presenceDerivation.value);\n\n        // When the derivation change, sync presence to to yjs awareness\n        unsubs.push(\n          react(\"when presence changes\", () => {\n            const presence = presenceDerivation.value;\n            requestAnimationFrame(() => {\n              room.awareness.setLocalStateField(\"presence\", presence);\n            });\n          })\n        );\n\n        // Sync yjs awareness changes to the store\n        const handleUpdate = (update: {\n          added: number[];\n          updated: number[];\n          removed: number[];\n        }) => {\n          const states = room.awareness.getStates() as Map<\n            number,\n            { presence: TLInstancePresence }\n          >;\n\n          const toRemove: TLInstancePresence[\"id\"][] = [];\n          const toPut: TLInstancePresence[] = [];\n\n          // Connect records to put / remove\n          for (const clientId of update.added) {\n            const state = states.get(clientId);\n            if (state?.presence && state.presence.id !== presenceId) {\n              toPut.push(state.presence);\n            }\n          }\n\n          for (const clientId of update.updated) {\n            const state = states.get(clientId);\n            if (state?.presence && state.presence.id !== presenceId) {\n              toPut.push(state.presence);\n            }\n          }\n\n          for (const clientId of update.removed) {\n            toRemove.push(\n              InstancePresenceRecordType.createId(clientId.toString())\n            );\n          }\n\n          // put / remove the records in the store\n          store.mergeRemoteChanges(() => {\n            if (toRemove.length) store.remove(toRemove);\n            if (toPut.length) store.put(toPut);\n          });\n        };\n\n        room.awareness.on(\"update\", handleUpdate);\n        unsubs.push(() => room.awareness.off(\"update\", handleUpdate));\n\n        // And we're done!\n        setStoreWithStatus({\n          store,\n          status: \"synced-remote\",\n          connectionStatus: \"online\"\n        });\n      }\n    );\n\n    return () => {\n      unsubs.forEach((fn) => fn());\n      unsubs.length = 0;\n    };\n  }, [room, doc, store, yRecords]);\n\n  return storeWithStatus;\n}\n"],"mappings":"4TAAA,OACEA,kBAAkB,CAClBC,0BAA0B,CAC1BC,cAAc,CAMdC,6BAA6B,CAC7BC,aAAa,CACbC,aAAa,CACbC,kBAAkB,KACb,gBAAgB,CACvB,OAASC,SAAS,CAAEC,MAAM,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CAC5D,OAASC,QAAQ,CAAEC,KAAK,CAAEC,QAAQ,KAAQ,QAAQ,CAClD,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CACnD,MAAO,GAAK,CAAAC,CAAC,KAAM,KAAK,CAExB,MAAO,SAAS,CAAAC,WAAWA,CAAAC,IAAA,CAGuC,KAAAC,WAAA,CAAAD,IAAA,CAFhEE,MAAM,CAANA,MAAM,CAAAD,WAAA,UAAG,SAAS,CAAAA,WAAA,CAAAE,YAAA,CAAAH,IAAA,CAClBI,OAAO,CAAPA,OAAO,CAAAD,YAAA,UAAG,gCAAgC,CAAAA,YAAA,CAE1C,IAAAE,SAAA,CAAgBZ,QAAQ,CAAC,iBAAM,CAAAN,aAAa,CAAC,CAAEmB,MAAM,CAAElB,aAAc,CAAC,CAAC,GAAC,CAAAmB,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAAjEI,KAAK,CAAAF,UAAA,IACZ,IAAAG,UAAA,CAA8CjB,QAAQ,CAAoB,CACxEkB,MAAM,CAAE,SACV,CAAC,CAAC,CAAAC,UAAA,CAAAJ,cAAA,CAAAE,UAAA,IAFKG,eAAe,CAAAD,UAAA,IAAEE,kBAAkB,CAAAF,UAAA,IAI1C,IAAAG,QAAA,CAAgCvB,OAAO,CAAC,UAAM,CAC5C,GAAM,CAAAwB,GAAG,CAAG,GAAI,CAAAlB,CAAC,CAACmB,GAAG,CAAC,CAAEC,EAAE,CAAE,IAAK,CAAC,CAAC,CACnC,MAAO,CACLF,GAAG,CAAHA,GAAG,CACHG,IAAI,CAAE,GAAI,CAAAtB,iBAAiB,CAACO,OAAO,CAAEF,MAAM,CAAEc,GAAG,CAAE,CAAEI,OAAO,CAAE,IAAK,CAAC,CAAC,CACpEC,QAAQ,CAAEL,GAAG,CAACM,MAAM,OAAAC,MAAA,CAAiBrB,MAAM,CAAE,CAC/C,CAAC,CACH,CAAC,CAAE,CAACE,OAAO,CAAEF,MAAM,CAAC,CAAC,CAPbc,GAAG,CAAAD,QAAA,CAAHC,GAAG,CAAEG,IAAI,CAAAJ,QAAA,CAAJI,IAAI,CAAEE,QAAQ,CAAAN,QAAA,CAARM,QAAQ,CAS3B,GAAM,CAAAG,WAAW,CAAGjC,MAAM,CAAC,KAAK,CAAC,CAEjCD,SAAS,CAAC,UAAM,CACd,GAAM,CAAAmC,MAAsB,CAAG,EAAE,CAEjC;AAEAN,IAAI,CAACO,EAAE,CACL,QAAQ,CACR,SAAAC,KAAA,CAAyE,IAAtE,CAAAhB,MAAM,CAAAgB,KAAA,CAANhB,MAAM,CACP;AACA,GAAIA,MAAM,GAAK,YAAY,EAAIA,MAAM,GAAK,cAAc,CAAE,CACxDG,kBAAkB,CAAC,CACjBL,KAAK,CAALA,KAAK,CACLE,MAAM,CAAE,eAAe,CACvBiB,gBAAgB,CAAE,SACpB,CAAC,CAAC,CACF,OACF,CAEA,GAAIjB,MAAM,GAAK,WAAW,CAAE,OAE5B,GAAIa,WAAW,CAACK,OAAO,CAAE,CACvBf,kBAAkB,CAAC,CACjBL,KAAK,CAALA,KAAK,CACLE,MAAM,CAAE,eAAe,CACvBiB,gBAAgB,CAAE,QACpB,CAAC,CAAC,CACF,OACF,CAEA;AACAJ,WAAW,CAACK,OAAO,CAAG,IAAI,CAE1B;AACA;AACA,GAAIR,QAAQ,CAACS,IAAI,GAAK,CAAC,CAAE,CACvB;AACAlC,QAAQ,CAAC,UAAM,CACba,KAAK,CAACsB,KAAK,CAAC,CAAC,CACbtB,KAAK,CAACuB,GAAG,CAAC,CACRjD,kBAAkB,CAACkD,MAAM,CAAC,CACxBC,EAAE,CAAE,mBACN,CAAC,CAAC,CACFjD,cAAc,CAACgD,MAAM,CAAC,CACpBC,EAAE,CAAE,WAAuB,CAC3BC,IAAI,CAAE,QAAQ,CACdC,KAAK,CAAE,IACT,CAAC,CAAC,CACH,CAAC,CACJ,CAAC,CAAC,CAEF;AACApB,GAAG,CAACpB,QAAQ,CAAC,UAAM,KAAAyC,SAAA,CAAAC,0BAAA,CACI7B,KAAK,CAAC8B,UAAU,CAAC,CAAC,EAAAC,KAAA,KAAvC,IAAAH,SAAA,CAAAI,CAAA,KAAAD,KAAA,CAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,EAAyC,IAA9B,CAAAC,MAAM,CAAAJ,KAAA,CAAAK,KAAA,CACfxB,QAAQ,CAACyB,GAAG,CAACF,MAAM,CAACV,EAAE,CAAEU,MAAM,CAAC,CACjC,CAAC,OAAAG,GAAA,EAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA,WAAAV,SAAA,CAAAY,CAAA,IACH,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACArD,QAAQ,CAAC,UAAM,CACba,KAAK,CAACsB,KAAK,CAAC,CAAC,CACbtB,KAAK,CAACuB,GAAG,CAACkB,KAAK,CAACC,IAAI,CAAC9B,QAAQ,CAAC+B,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1C,CAAC,CAAC,CACJ,CAEA,yDAEA;AACA3B,MAAM,CAAC4B,IAAI,CACT5C,KAAK,CAAC6C,MAAM,CACV,QAAS,CAAAC,wBAAwBA,CAAAC,KAAA,CAAc,IAAX,CAAAC,OAAO,CAAAD,KAAA,CAAPC,OAAO,CACzCzC,GAAG,CAACpB,QAAQ,CAAC,UAAM,CACjB8D,MAAM,CAACN,MAAM,CAACK,OAAO,CAACE,KAAK,CAAC,CAACC,OAAO,CAAC,SAAChB,MAAM,CAAK,CAC/CvB,QAAQ,CAACyB,GAAG,CAACF,MAAM,CAACV,EAAE,CAAEU,MAAM,CAAC,CACjC,CAAC,CAAC,CAEFc,MAAM,CAACN,MAAM,CAACK,OAAO,CAACI,OAAO,CAAC,CAACD,OAAO,CAAC,SAAAE,KAAA,CAAiB,KAAAC,KAAA,CAAAvD,cAAA,CAAAsD,KAAA,IAAfE,CAAC,CAAAD,KAAA,IAAEnB,MAAM,CAAAmB,KAAA,IAChD1C,QAAQ,CAACyB,GAAG,CAACF,MAAM,CAACV,EAAE,CAAEU,MAAM,CAAC,CACjC,CAAC,CAAC,CAEFc,MAAM,CAACN,MAAM,CAACK,OAAO,CAACQ,OAAO,CAAC,CAACL,OAAO,CAAC,SAAChB,MAAM,CAAK,CACjDvB,QAAQ,CAAC6C,MAAM,CAACtB,MAAM,CAACV,EAAE,CAAC,CAC5B,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CACD,CAAEiC,MAAM,CAAE,MAAM,CAAEC,KAAK,CAAE,UAAW,CAAE;AACxC,CACF,CAAC,CAED;AACA,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAChBC,MAAuB,CACvBC,WAA0B,CACvB,CACH,GAAIA,WAAW,CAACC,KAAK,CAAE,OAEvB,GAAM,CAAAC,QAA0B,CAAG,EAAE,CACrC,GAAM,CAAAC,KAAiB,CAAG,EAAE,CAE5BJ,MAAM,CAACV,OAAO,CAAC,SAACe,KAAK,CAAK,CACxBA,KAAK,CAAClB,OAAO,CAACmB,IAAI,CAAChB,OAAO,CAAC,SAACiB,MAAM,CAAE3C,EAAE,CAAK,CACzC,OAAQ2C,MAAM,CAACC,MAAM,EACnB,IAAK,KAAK,CACV,IAAK,QAAQ,CAAE,CACbJ,KAAK,CAACrB,IAAI,CAAChC,QAAQ,CAAC0D,GAAG,CAAC7C,EAAE,CAAE,CAAC,CAC7B,MACF,CACA,IAAK,QAAQ,CAAE,CACbuC,QAAQ,CAACpB,IAAI,CAACnB,EAAoB,CAAC,CACnC,MACF,CACF,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAEF;AACAzB,KAAK,CAACuE,kBAAkB,CAAC,UAAM,CAC7B,GAAIP,QAAQ,CAACQ,MAAM,CAAExE,KAAK,CAACyE,MAAM,CAACT,QAAQ,CAAC,CAC3C,GAAIC,KAAK,CAACO,MAAM,CAAExE,KAAK,CAACuB,GAAG,CAAC0C,KAAK,CAAC,CACpC,CAAC,CAAC,CACJ,CAAC,CAEDrD,QAAQ,CAAC8D,WAAW,CAACd,YAAY,CAAC,CAClC5C,MAAM,CAAC4B,IAAI,CAAC,iBAAM,CAAAhC,QAAQ,CAAC+D,aAAa,CAACf,YAAY,CAAC,GAAC,CAEvD,yDAEA;AACA,GAAM,CAAAgB,SAAS,CAAGlE,IAAI,CAACmE,SAAS,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC,CACpD,GAAM,CAAAC,UAAU,CAAGzG,0BAA0B,CAAC0G,QAAQ,CAACL,SAAS,CAAC,CACjE,GAAM,CAAAM,uBAAuB,CAAGjG,QAAQ,CAAC,IAAI,CAAE,iBAC7C,CAAAL,kBAAkB,CAAC,CAAC,EACtB,CAAC,CACD,GAAM,CAAAuG,kBAAkB,CAAG1G,6BAA6B,CACtDyG,uBAAuB,CACvBF,UACF,CAAC,CAAChF,KAAK,CAAC,CAER;AACAU,IAAI,CAACmE,SAAS,CAACO,kBAAkB,CAAC,UAAU,CAAED,kBAAkB,CAAC/C,KAAK,CAAC,CAEvE;AACApB,MAAM,CAAC4B,IAAI,CACT1D,KAAK,CAAC,uBAAuB,CAAE,UAAM,CACnC,GAAM,CAAAmG,QAAQ,CAAGF,kBAAkB,CAAC/C,KAAK,CACzCkD,qBAAqB,CAAC,UAAM,CAC1B5E,IAAI,CAACmE,SAAS,CAACO,kBAAkB,CAAC,UAAU,CAAEC,QAAQ,CAAC,CACzD,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CAED;AACA,GAAM,CAAAE,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,MAIrB,CAAK,CACJ,GAAM,CAAAC,MAAM,CAAG/E,IAAI,CAACmE,SAAS,CAACa,SAAS,CAAC,CAGvC,CAED,GAAM,CAAA1B,QAAoC,CAAG,EAAE,CAC/C,GAAM,CAAAC,KAA2B,CAAG,EAAE,CAEtC;AAAA,IAAA0B,UAAA,CAAA9D,0BAAA,CACuB2D,MAAM,CAACtC,KAAK,EAAA0C,MAAA,KAAnC,IAAAD,UAAA,CAAA3D,CAAA,KAAA4D,MAAA,CAAAD,UAAA,CAAA1D,CAAA,IAAAC,IAAA,EAAqC,IAA1B,CAAA2D,QAAQ,CAAAD,MAAA,CAAAxD,KAAA,CACjB,GAAM,CAAA0D,KAAK,CAAGL,MAAM,CAACnB,GAAG,CAACuB,QAAQ,CAAC,CAClC,GAAIC,KAAK,SAALA,KAAK,WAALA,KAAK,CAAET,QAAQ,EAAIS,KAAK,CAACT,QAAQ,CAAC5D,EAAE,GAAKuD,UAAU,CAAE,CACvDf,KAAK,CAACrB,IAAI,CAACkD,KAAK,CAACT,QAAQ,CAAC,CAC5B,CACF,CAAC,OAAA/C,GAAA,EAAAqD,UAAA,CAAApD,CAAA,CAAAD,GAAA,WAAAqD,UAAA,CAAAnD,CAAA,QAAAuD,UAAA,CAAAlE,0BAAA,CAEsB2D,MAAM,CAACpC,OAAO,EAAA4C,MAAA,KAArC,IAAAD,UAAA,CAAA/D,CAAA,KAAAgE,MAAA,CAAAD,UAAA,CAAA9D,CAAA,IAAAC,IAAA,EAAuC,IAA5B,CAAA2D,SAAQ,CAAAG,MAAA,CAAA5D,KAAA,CACjB,GAAM,CAAA0D,MAAK,CAAGL,MAAM,CAACnB,GAAG,CAACuB,SAAQ,CAAC,CAClC,GAAIC,MAAK,SAALA,MAAK,WAALA,MAAK,CAAET,QAAQ,EAAIS,MAAK,CAACT,QAAQ,CAAC5D,EAAE,GAAKuD,UAAU,CAAE,CACvDf,KAAK,CAACrB,IAAI,CAACkD,MAAK,CAACT,QAAQ,CAAC,CAC5B,CACF,CAAC,OAAA/C,GAAA,EAAAyD,UAAA,CAAAxD,CAAA,CAAAD,GAAA,WAAAyD,UAAA,CAAAvD,CAAA,QAAAyD,UAAA,CAAApE,0BAAA,CAEsB2D,MAAM,CAAChC,OAAO,EAAA0C,MAAA,KAArC,IAAAD,UAAA,CAAAjE,CAAA,KAAAkE,MAAA,CAAAD,UAAA,CAAAhE,CAAA,IAAAC,IAAA,EAAuC,IAA5B,CAAA2D,UAAQ,CAAAK,MAAA,CAAA9D,KAAA,CACjB4B,QAAQ,CAACpB,IAAI,CACXrE,0BAA0B,CAAC0G,QAAQ,CAACY,UAAQ,CAACd,QAAQ,CAAC,CAAC,CACzD,CAAC,CACH,CAEA;AAAA,OAAAzC,GAAA,EAAA2D,UAAA,CAAA1D,CAAA,CAAAD,GAAA,WAAA2D,UAAA,CAAAzD,CAAA,IACAxC,KAAK,CAACuE,kBAAkB,CAAC,UAAM,CAC7B,GAAIP,QAAQ,CAACQ,MAAM,CAAExE,KAAK,CAACyE,MAAM,CAACT,QAAQ,CAAC,CAC3C,GAAIC,KAAK,CAACO,MAAM,CAAExE,KAAK,CAACuB,GAAG,CAAC0C,KAAK,CAAC,CACpC,CAAC,CAAC,CACJ,CAAC,CAEDvD,IAAI,CAACmE,SAAS,CAAC5D,EAAE,CAAC,QAAQ,CAAEsE,YAAY,CAAC,CACzCvE,MAAM,CAAC4B,IAAI,CAAC,iBAAM,CAAAlC,IAAI,CAACmE,SAAS,CAACsB,GAAG,CAAC,QAAQ,CAAEZ,YAAY,CAAC,GAAC,CAE7D;AACAlF,kBAAkB,CAAC,CACjBL,KAAK,CAALA,KAAK,CACLE,MAAM,CAAE,eAAe,CACvBiB,gBAAgB,CAAE,QACpB,CAAC,CAAC,CACJ,CACF,CAAC,CAED,MAAO,WAAM,CACXH,MAAM,CAACmC,OAAO,CAAC,SAACiD,EAAE,QAAK,CAAAA,EAAE,CAAC,CAAC,GAAC,CAC5BpF,MAAM,CAACwD,MAAM,CAAG,CAAC,CACnB,CAAC,CACH,CAAC,CAAE,CAAC9D,IAAI,CAAEH,GAAG,CAAEP,KAAK,CAAEY,QAAQ,CAAC,CAAC,CAEhC,MAAO,CAAAR,eAAe,CACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}