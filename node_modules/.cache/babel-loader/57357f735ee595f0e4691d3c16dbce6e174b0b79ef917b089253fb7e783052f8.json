{"ast":null,"code":"// src/helpers.ts\nfunction isChild(x) {\n  return x && typeof x === \"object\" && \"parents\" in x;\n}\nfunction haveParentsChanged(child) {\n  for (var i = 0, n = child.parents.length; i < n; i++) {\n    child.parents[i].__unsafe__getWithoutCapture();\n    if (child.parents[i].lastChangedEpoch !== child.parentEpochs[i]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar detach = function detach(parent, child) {\n  if (!parent.children.remove(child)) {\n    return;\n  }\n  if (parent.children.isEmpty && isChild(parent)) {\n    for (var i = 0, n = parent.parents.length; i < n; i++) {\n      detach(parent.parents[i], parent);\n    }\n  }\n};\nvar attach = function attach(parent, child) {\n  if (!parent.children.add(child)) {\n    return;\n  }\n  if (isChild(parent)) {\n    for (var i = 0, n = parent.parents.length; i < n; i++) {\n      attach(parent.parents[i], parent);\n    }\n  }\n};\nfunction equals(a, b) {\n  var shallowEquals = a === b || Object.is(a, b) || Boolean(a && b && typeof a.equals === \"function\" && a.equals(b));\n  return shallowEquals;\n}\nvar EMPTY_ARRAY = Object.freeze([]);\nexport { EMPTY_ARRAY, attach, detach, equals, haveParentsChanged };","map":{"version":3,"names":["isChild","x","haveParentsChanged","child","i","n","parents","length","__unsafe__getWithoutCapture","lastChangedEpoch","parentEpochs","detach","parent","children","remove","isEmpty","attach","add","equals","a","b","shallowEquals","Object","is","Boolean","EMPTY_ARRAY","freeze"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/signia/src/helpers.ts"],"sourcesContent":["import { Child, Signal } from './types.js'\n\n/**\n * Get whether the given value is a child.\n *\n * @param x The value to check.\n * @returns True if the value is a child, false otherwise.\n */\nfunction isChild(x: any): x is Child {\n\treturn x && typeof x === 'object' && 'parents' in x\n}\n\n/**\n * Get whether a child's parents have changed.\n *\n * @param child The child to check.\n * @returns True if the child's parents have changed, false otherwise.\n */\nexport function haveParentsChanged(child: Child) {\n\tfor (let i = 0, n = child.parents.length; i < n; i++) {\n\t\t// Get the parent's value without capturing it.\n\t\tchild.parents[i].__unsafe__getWithoutCapture()\n\n\t\t// If the parent's epoch does not match the child's view of the parent's epoch, then the parent has changed.\n\t\tif (child.parents[i].lastChangedEpoch !== child.parentEpochs[i]) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n/**\n * Detach a child from a parent.\n *\n * @param parent The parent to detach from.\n * @param child The child to detach.\n */\nexport const detach = (parent: Signal<any>, child: Child) => {\n\t// If the child is not attached to the parent, do nothing.\n\tif (!parent.children.remove(child)) {\n\t\treturn\n\t}\n\n\t// If the parent has no more children, then detach the parent from its parents.\n\tif (parent.children.isEmpty && isChild(parent)) {\n\t\tfor (let i = 0, n = parent.parents.length; i < n; i++) {\n\t\t\tdetach(parent.parents[i], parent)\n\t\t}\n\t}\n}\n\n/**\n * Attach a child to a parent.\n *\n * @param parent The parent to attach to.\n * @param child The child to attach.\n */\nexport const attach = (parent: Signal<any>, child: Child) => {\n\t// If the child is already attached to the parent, do nothing.\n\tif (!parent.children.add(child)) {\n\t\treturn\n\t}\n\n\t// If the parent itself is a child, add the parent to the parent's parents.\n\tif (isChild(parent)) {\n\t\tfor (let i = 0, n = parent.parents.length; i < n; i++) {\n\t\t\tattach(parent.parents[i], parent)\n\t\t}\n\t}\n}\n\n/**\n * Get whether two values are equal (insofar as signia is concerned).\n *\n * @param a The first value.\n * @param b The second value.\n */\nexport function equals(a: any, b: any): boolean {\n\tconst shallowEquals =\n\t\ta === b || Object.is(a, b) || Boolean(a && b && typeof a.equals === 'function' && a.equals(b))\n\treturn shallowEquals\n}\n\nexport declare function assertNever(x: never): never\n\n/** @public */\nexport const EMPTY_ARRAY: [] = Object.freeze([]) as any\n"],"mappings":";AAQA,SAASA,QAAQC,CAAA,EAAoB;EACpC,OAAOA,CAAA,IAAK,OAAOA,CAAA,KAAM,YAAY,aAAaA,CAAA;AACnD;AAQO,SAASC,mBAAmBC,KAAA,EAAc;EAChD,SAASC,CAAA,GAAI,GAAGC,CAAA,GAAIF,KAAA,CAAMG,OAAA,CAAQC,MAAA,EAAQH,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;IAErDD,KAAA,CAAMG,OAAA,CAAQF,CAAC,EAAEI,2BAAA,CAA4B;IAG7C,IAAIL,KAAA,CAAMG,OAAA,CAAQF,CAAC,EAAEK,gBAAA,KAAqBN,KAAA,CAAMO,YAAA,CAAaN,CAAC,GAAG;MAChE,OAAO;IACR;EACD;EAEA,OAAO;AACR;AAQO,IAAMO,MAAA,GAAS,SAATA,OAAUC,MAAA,EAAqBT,KAAA,EAAiB;EAE5D,IAAI,CAACS,MAAA,CAAOC,QAAA,CAASC,MAAA,CAAOX,KAAK,GAAG;IACnC;EACD;EAGA,IAAIS,MAAA,CAAOC,QAAA,CAASE,OAAA,IAAWf,OAAA,CAAQY,MAAM,GAAG;IAC/C,SAASR,CAAA,GAAI,GAAGC,CAAA,GAAIO,MAAA,CAAON,OAAA,CAAQC,MAAA,EAAQH,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;MACtDO,MAAA,CAAOC,MAAA,CAAON,OAAA,CAAQF,CAAC,GAAGQ,MAAM;IACjC;EACD;AACD;AAQO,IAAMI,MAAA,GAAS,SAATA,OAAUJ,MAAA,EAAqBT,KAAA,EAAiB;EAE5D,IAAI,CAACS,MAAA,CAAOC,QAAA,CAASI,GAAA,CAAId,KAAK,GAAG;IAChC;EACD;EAGA,IAAIH,OAAA,CAAQY,MAAM,GAAG;IACpB,SAASR,CAAA,GAAI,GAAGC,CAAA,GAAIO,MAAA,CAAON,OAAA,CAAQC,MAAA,EAAQH,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;MACtDY,MAAA,CAAOJ,MAAA,CAAON,OAAA,CAAQF,CAAC,GAAGQ,MAAM;IACjC;EACD;AACD;AAQO,SAASM,OAAOC,CAAA,EAAQC,CAAA,EAAiB;EAC/C,IAAMC,aAAA,GACLF,CAAA,KAAMC,CAAA,IAAKE,MAAA,CAAOC,EAAA,CAAGJ,CAAA,EAAGC,CAAC,KAAKI,OAAA,CAAQL,CAAA,IAAKC,CAAA,IAAK,OAAOD,CAAA,CAAED,MAAA,KAAW,cAAcC,CAAA,CAAED,MAAA,CAAOE,CAAC,CAAC;EAC9F,OAAOC,aAAA;AACR;AAKO,IAAMI,WAAA,GAAkBH,MAAA,CAAOI,MAAA,CAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}