{"ast":null,"code":"// src/useAtom.ts\nimport { useMemo } from \"react\";\nimport { atom } from \"signia\";\nfunction useAtom(name, valueOrInitialiser, options) {\n  return useMemo(function () {\n    var initialValue = typeof valueOrInitialiser === \"function\" ? valueOrInitialiser() : valueOrInitialiser;\n    return atom(\"useAtom(\".concat(name, \")\"), initialValue, options);\n  }, []);\n}\nexport { useAtom };","map":{"version":3,"names":["useMemo","atom","useAtom","name","valueOrInitialiser","options","initialValue","concat"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/signia-react/src/useAtom.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { atom, Atom, AtomOptions } from 'signia'\n\n/**\n * Creates a new atom and returns it. The atom will be created only once.\n *\n * See [[signia.atom]]\n *\n * @example\n * ```ts\n * const Counter = track(function Counter () {\n *   const count = useAtom('count', 0)\n *   const increment = useCallback(() => count.set(count.value + 1), [count])\n *   return <button onClick={increment}>{count.value}</button>\n * })\n * ```\n *\n * @public\n */\nexport function useAtom<Value, Diff = unknown>(\n\t/**\n\t * The name of the atom. This does not need to be globally unique. It is used for debugging and performance profiling.\n\t */\n\tname: string,\n\t/**\n\t * The initial value of the atom. If this is a function, it will be called to get the initial value.\n\t */\n\tvalueOrInitialiser: Value | (() => Value),\n\t/**\n\t * Options for the atom.\n\t */\n\toptions?: AtomOptions<Value, Diff>\n): Atom<Value, Diff> {\n\treturn useMemo(() => {\n\t\tconst initialValue =\n\t\t\ttypeof valueOrInitialiser === 'function' ? (valueOrInitialiser as any)() : valueOrInitialiser\n\n\t\treturn atom(`useAtom(${name})`, initialValue, options)\n\t}, [])\n}\n"],"mappings":";AAAA,SAASA,OAAA,QAAe;AACxB,SAASC,IAAA,QAA+B;AAkBjC,SAASC,QAIfC,IAAA,EAIAC,kBAAA,EAIAC,OAAA,EACoB;EACpB,OAAOL,OAAA,CAAQ,YAAM;IACpB,IAAMM,YAAA,GACL,OAAOF,kBAAA,KAAuB,aAAcA,kBAAA,CAA2B,IAAIA,kBAAA;IAE5E,OAAOH,IAAA,YAAAM,MAAA,CAAgBJ,IAAA,QAASG,YAAA,EAAcD,OAAO;EACtD,GAAG,EAAE;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}