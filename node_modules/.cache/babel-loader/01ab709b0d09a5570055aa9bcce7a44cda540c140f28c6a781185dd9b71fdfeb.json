{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { LANGUAGES } from \"@tldraw/tlschema\";\nimport { DEFAULT_TRANSLATION } from \"./defaultTranslation.mjs\";\nvar EN_TRANSLATION = {\n  locale: \"en\",\n  label: \"English\",\n  messages: DEFAULT_TRANSLATION\n};\nfunction fetchTranslation(_x, _x2) {\n  return _fetchTranslation.apply(this, arguments);\n}\nfunction _fetchTranslation() {\n  _fetchTranslation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(locale, assetUrls) {\n    var mainRes, language, res, messages, missing, key;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(assetUrls.translations.en);\n        case 2:\n          mainRes = _context.sent;\n          if (mainRes.ok) {\n            _context.next = 6;\n            break;\n          }\n          console.warn(\"No main translations found.\");\n          return _context.abrupt(\"return\", EN_TRANSLATION);\n        case 6:\n          if (!(locale === \"en\")) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt(\"return\", EN_TRANSLATION);\n        case 8:\n          language = LANGUAGES.find(function (t) {\n            return t.locale === locale;\n          });\n          if (language) {\n            _context.next = 12;\n            break;\n          }\n          console.warn(\"No translation found for locale \".concat(locale));\n          return _context.abrupt(\"return\", EN_TRANSLATION);\n        case 12:\n          _context.next = 14;\n          return fetch(assetUrls.translations[language.locale]);\n        case 14:\n          res = _context.sent;\n          _context.next = 17;\n          return res.json();\n        case 17:\n          messages = _context.sent;\n          if (messages) {\n            _context.next = 21;\n            break;\n          }\n          console.warn(\"No messages found for locale \".concat(locale));\n          return _context.abrupt(\"return\", EN_TRANSLATION);\n        case 21:\n          missing = [];\n          for (key in EN_TRANSLATION) {\n            if (!messages[key]) {\n              missing.push(key);\n            }\n          }\n          if (missing.length > 0 && process.env.NODE_ENV === \"development\") {\n            console.warn(\"Language \".concat(locale, \": missing messages for keys:\\n\").concat(missing.join(\"\\n\")));\n          }\n          return _context.abrupt(\"return\", {\n            locale: locale,\n            label: language.label,\n            messages: _objectSpread(_objectSpread({}, EN_TRANSLATION.messages), messages)\n          });\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetchTranslation.apply(this, arguments);\n}\nexport { fetchTranslation };","map":{"version":3,"names":["LANGUAGES","DEFAULT_TRANSLATION","EN_TRANSLATION","locale","label","messages","fetchTranslation","_x","_x2","_fetchTranslation","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","assetUrls","mainRes","language","res","missing","key","wrap","_callee$","_context","prev","next","fetch","translations","en","sent","ok","console","warn","abrupt","find","t","concat","json","push","length","process","env","NODE_ENV","join","_objectSpread","stop"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/useTranslation/translations.ts"],"sourcesContent":["import { LANGUAGES } from '@tldraw/tlschema'\nimport { TLUiAssetUrls } from '../../assetUrls'\nimport { TLUiTranslationKey } from './TLUiTranslationKey'\nimport { DEFAULT_TRANSLATION } from './defaultTranslation'\n\n// The default language (english) must have a value for every message.\n// Other languages may have missing messages. If the application finds\n// a missing message for the current language, it will use the english\n// translation instead.\n\n/* ----------------- (do not change) ---------------- */\n\n/** @public */\nexport type TLUiTranslation = {\n\treadonly locale: string\n\treadonly label: string\n\treadonly messages: Record<TLUiTranslationKey, string>\n}\n\nconst EN_TRANSLATION: TLUiTranslation = {\n\tlocale: 'en',\n\tlabel: 'English',\n\tmessages: DEFAULT_TRANSLATION as TLUiTranslation['messages'],\n}\n\n/** @internal */\nexport async function fetchTranslation(\n\tlocale: TLUiTranslation['locale'],\n\tassetUrls: TLUiAssetUrls\n): Promise<TLUiTranslation> {\n\tconst mainRes = await fetch(assetUrls.translations.en)\n\n\tif (!mainRes.ok) {\n\t\tconsole.warn(`No main translations found.`)\n\t\treturn EN_TRANSLATION\n\t}\n\n\tif (locale === 'en') {\n\t\treturn EN_TRANSLATION\n\t}\n\n\tconst language = LANGUAGES.find((t) => t.locale === locale)\n\n\tif (!language) {\n\t\tconsole.warn(`No translation found for locale ${locale}`)\n\t\treturn EN_TRANSLATION\n\t}\n\n\tconst res = await fetch(assetUrls.translations[language.locale])\n\tconst messages: TLUiTranslation['messages'] = await res.json()\n\n\tif (!messages) {\n\t\tconsole.warn(`No messages found for locale ${locale}`)\n\t\treturn EN_TRANSLATION\n\t}\n\n\tconst missing: string[] = []\n\n\tfor (const key in EN_TRANSLATION) {\n\t\tif (!messages[key as TLUiTranslationKey]) {\n\t\t\tmissing.push(key)\n\t\t}\n\t}\n\n\tif (missing.length > 0 && process.env.NODE_ENV === 'development') {\n\t\tconsole.warn(`Language ${locale}: missing messages for keys:\\n${missing.join('\\n')}`)\n\t}\n\n\treturn {\n\t\tlocale,\n\t\tlabel: language.label,\n\t\tmessages: { ...EN_TRANSLATION.messages, ...messages },\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}