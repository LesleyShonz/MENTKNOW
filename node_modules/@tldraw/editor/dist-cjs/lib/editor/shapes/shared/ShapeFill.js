"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ShapeFill_exports = {};
__export(ShapeFill_exports, {
  ShapeFill: () => ShapeFill,
  getShapeFillSvg: () => getShapeFillSvg,
  getSvgWithShapeFill: () => getSvgWithShapeFill
});
module.exports = __toCommonJS(ShapeFill_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var React = __toESM(require("react"));
var import_signia_react = require("signia-react");
var import_constants = require("../../../constants");
var import_useEditor = require("../../../hooks/useEditor");
const ShapeFill = React.memo(function ShapeFill2({ d, color, fill }) {
  switch (fill) {
    case "none": {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { className: "tl-hitarea-stroke", fill: "none", d });
    }
    case "solid": {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-semi)`, d });
    }
    case "semi": {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-solid)`, d });
    }
    case "pattern": {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PatternFill, { color, fill, d });
    }
  }
});
const PatternFill = function PatternFill2({ d, color }) {
  const editor = (0, import_useEditor.useEditor)();
  const zoomLevel = (0, import_signia_react.useValue)("zoomLevel", () => editor.zoomLevel, [editor]);
  const isDarkMode = (0, import_signia_react.useValue)("isDarkMode", () => editor.isDarkMode, [editor]);
  const intZoom = Math.ceil(zoomLevel);
  const teenyTiny = editor.zoomLevel <= 0.18;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-pattern)`, d }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "path",
      {
        fill: teenyTiny ? `var(--palette-${color}-semi)` : `url(#${import_constants.HASH_PATERN_ZOOM_NAMES[intZoom + (isDarkMode ? "_dark" : "_light")]})`,
        d
      }
    )
  ] });
};
function getShapeFillSvg({
  d,
  color,
  fill,
  colors
}) {
  if (fill === "none") {
    return;
  }
  if (fill === "pattern") {
    const gEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const path1El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1El.setAttribute("d", d);
    path1El.setAttribute("fill", colors.pattern[color]);
    const path2El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2El.setAttribute("d", d);
    path2El.setAttribute("fill", `url(#hash_pattern)`);
    gEl.appendChild(path1El);
    gEl.appendChild(path2El);
    return gEl;
  }
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  switch (fill) {
    case "semi": {
      path.setAttribute("fill", colors.solid);
      break;
    }
    case "solid": {
      {
        path.setAttribute("fill", colors.semi[color]);
      }
      break;
    }
  }
  return path;
}
function getSvgWithShapeFill(foregroundPath, backgroundPath) {
  if (backgroundPath) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g.appendChild(backgroundPath);
    g.appendChild(foregroundPath);
    return g;
  } else {
    return foregroundPath;
  }
}
//# sourceMappingURL=ShapeFill.js.map
