import { StateNode } from "../../StateNode.mjs";
class PointingHandle extends StateNode {
  static id = "pointing_handle";
  info = {};
  onEnter = (info) => {
    this.info = info;
    const initialTerminal = info.shape.props[info.handle.id];
    if (initialTerminal?.type === "binding") {
      this.editor.setHintingIds([initialTerminal.boundShapeId]);
    }
    this.editor.setCursor({ type: "grabbing" });
  };
  onExit = () => {
    this.editor.setHintingIds([]);
    this.editor.setCursor({ type: "default" });
  };
  onPointerUp = () => {
    this.parent.transition("idle", this.info);
  };
  onPointerMove = () => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("dragging_handle", this.info);
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    this.parent.transition("idle", {});
  }
}
export {
  PointingHandle
};
//# sourceMappingURL=PointingHandle.mjs.map
