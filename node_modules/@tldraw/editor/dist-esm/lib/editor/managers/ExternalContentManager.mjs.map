{
  "version": 3,
  "sources": ["../../../../src/lib/editor/managers/ExternalContentManager.ts"],
  "sourcesContent": ["import { Vec2d, VecLike } from '@tldraw/primitives'\nimport {\n\tAssetRecordType,\n\tEmbedDefinition,\n\tTLAsset,\n\tTLAssetId,\n\tTLEmbedShape,\n\tTLShapePartial,\n\tTLTextShape,\n\tTLTextShapeProps,\n\tcreateShapeId,\n} from '@tldraw/tlschema'\nimport { compact, getHashForString } from '@tldraw/utils'\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from '../../constants'\nimport {\n\tACCEPTED_IMG_TYPE,\n\tACCEPTED_VID_TYPE,\n\tcontainBoxSize,\n\tgetFileMetaData,\n\tgetImageSizeFromSrc,\n\tgetResizedImageDataUrl,\n\tgetVideoSizeFromSrc,\n\tisImage,\n} from '../../utils/assets'\nimport { truncateStringWithEllipsis } from '../../utils/dom'\nimport { getEmbedInfo } from '../../utils/embeds'\nimport { Editor } from '../Editor'\nimport { FONT_FAMILIES, FONT_SIZES, TEXT_PROPS } from '../shapes/shared/default-shape-constants'\nimport { INDENT } from '../shapes/text/TextHelpers'\nimport { TextShapeUtil } from '../shapes/text/TextShapeUtil'\n\n/** @public */\nexport type TLExternalContent =\n\t| {\n\t\t\ttype: 'text'\n\t\t\tpoint?: VecLike\n\t\t\ttext: string\n\t  }\n\t| {\n\t\t\ttype: 'files'\n\t\t\tfiles: File[]\n\t\t\tpoint?: VecLike\n\t\t\tignoreParent: boolean\n\t  }\n\t| {\n\t\t\ttype: 'url'\n\t\t\turl: string\n\t\t\tpoint?: VecLike\n\t  }\n\t| {\n\t\t\ttype: 'svg-text'\n\t\t\ttext: string\n\t\t\tpoint?: VecLike\n\t  }\n\t| {\n\t\t\ttype: 'embed'\n\t\t\turl: string\n\t\t\tpoint?: VecLike\n\t\t\tembed: EmbedDefinition\n\t  }\n\n/** @public */\nexport class ExternalContentManager {\n\tconstructor(public editor: Editor) {}\n\n\thandleContent = async (info: TLExternalContent) => {\n\t\tswitch (info.type) {\n\t\t\tcase 'text': {\n\t\t\t\treturn await this.handleText(this.editor, info)\n\t\t\t}\n\t\t\tcase 'files': {\n\t\t\t\treturn await this.handleFiles(this.editor, info)\n\t\t\t}\n\t\t\tcase 'embed': {\n\t\t\t\treturn await this.handleEmbed(this.editor, info)\n\t\t\t}\n\t\t\tcase 'svg-text': {\n\t\t\t\treturn await this.handleSvgText(this.editor, info)\n\t\t\t}\n\t\t\tcase 'url': {\n\t\t\t\treturn await this.handleUrl(this.editor, info)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handle svg text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleSvgText = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance.\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleSvgText(\n\t\teditor: Editor,\n\t\t{ point, text }: Extract<TLExternalContent, { type: 'svg-text' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst svg = new DOMParser().parseFromString(text, 'image/svg+xml').querySelector('svg')\n\t\tif (!svg) {\n\t\t\tthrow new Error('No <svg/> element present')\n\t\t}\n\n\t\tlet width = parseFloat(svg.getAttribute('width') || '0')\n\t\tlet height = parseFloat(svg.getAttribute('height') || '0')\n\n\t\tif (!(width && height)) {\n\t\t\tdocument.body.appendChild(svg)\n\t\t\tconst box = svg.getBoundingClientRect()\n\t\t\tdocument.body.removeChild(svg)\n\n\t\t\twidth = box.width\n\t\t\theight = box.height\n\t\t}\n\n\t\tconst asset = await this.createAssetFromFile(\n\t\t\teditor,\n\t\t\tnew File([text], 'asset.svg', { type: 'image/svg+xml' })\n\t\t)\n\n\t\tthis.createShapesForAssets(editor, [asset], position)\n\t}\n\n\t/**\n\t * Handle embed info from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleEmbed = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleEmbed(\n\t\teditor: Editor,\n\t\t{ point, url, embed }: Extract<TLExternalContent, { type: 'embed' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst { width, height } = embed\n\n\t\tconst shapePartial: TLShapePartial<TLEmbedShape> = {\n\t\t\tid: createShapeId(),\n\t\t\ttype: 'embed',\n\t\t\tx: position.x - (width || 450) / 2,\n\t\t\ty: position.y - (height || 450) / 2,\n\t\t\tprops: {\n\t\t\t\tw: width,\n\t\t\t\th: height,\n\t\t\t\turl,\n\t\t\t},\n\t\t}\n\n\t\teditor.createShapes([shapePartial], true)\n\t}\n\n\t/**\n\t * Handle files from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleFiles = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleFiles(\n\t\teditor: Editor,\n\t\t{ point, files }: Extract<TLExternalContent, { type: 'files' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst pagePoint = new Vec2d(position.x, position.y)\n\n\t\tconst assets: TLAsset[] = []\n\n\t\tawait Promise.all(\n\t\t\tfiles.map(async (file, i) => {\n\t\t\t\t// Use mime type instead of file ext, this is because\n\t\t\t\t// window.navigator.clipboard does not preserve file names\n\t\t\t\t// of copied files.\n\t\t\t\tif (!file.type) throw new Error('No mime type')\n\n\t\t\t\t// We can only accept certain extensions (either images or a videos)\n\t\t\t\tif (!ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).includes(file.type)) {\n\t\t\t\t\tconsole.warn(`${file.name} not loaded - Extension not allowed.`)\n\t\t\t\t\treturn null\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst asset = await this.createAssetFromFile(editor, file)\n\n\t\t\t\t\tif (!asset) throw Error('Could not create an asset')\n\n\t\t\t\t\tassets[i] = asset\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\n\t\tthis.createShapesForAssets(editor, compact(assets), pagePoint)\n\t}\n\n\t/**\n\t * Handle plain text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleText = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleText(editor: Editor, { point, text }: Extract<TLExternalContent, { type: 'text' }>) {\n\t\tconst p =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst defaultProps = editor.getShapeUtil(TextShapeUtil).defaultProps()\n\n\t\tconst textToPaste = stripTrailingWhitespace(\n\t\t\tstripCommonMinimumIndentation(replaceTabsWithSpaces(text))\n\t\t)\n\n\t\t// Measure the text with default values\n\t\tlet w: number\n\t\tlet h: number\n\t\tlet autoSize: boolean\n\t\tlet align = 'middle' as TLTextShapeProps['align']\n\n\t\tconst isMultiLine = textToPaste.split('\\n').length > 1\n\n\t\t// check whether the text contains the most common characters in RTL languages\n\t\tconst isRtl = rtlRegex.test(textToPaste)\n\n\t\tif (isMultiLine) {\n\t\t\talign = isMultiLine ? (isRtl ? 'end' : 'start') : 'middle'\n\t\t}\n\n\t\tconst rawSize = editor.textMeasure.measureText(textToPaste, {\n\t\t\t...TEXT_PROPS,\n\t\t\tfontFamily: FONT_FAMILIES[defaultProps.font],\n\t\t\tfontSize: FONT_SIZES[defaultProps.size],\n\t\t\twidth: 'fit-content',\n\t\t})\n\n\t\tconst minWidth = Math.min(\n\t\t\tisMultiLine ? editor.viewportPageBounds.width * 0.9 : 920,\n\t\t\tMath.max(200, editor.viewportPageBounds.width * 0.9)\n\t\t)\n\n\t\tif (rawSize.w > minWidth) {\n\t\t\tconst shrunkSize = editor.textMeasure.measureText(textToPaste, {\n\t\t\t\t...TEXT_PROPS,\n\t\t\t\tfontFamily: FONT_FAMILIES[defaultProps.font],\n\t\t\t\tfontSize: FONT_SIZES[defaultProps.size],\n\t\t\t\twidth: minWidth + 'px',\n\t\t\t})\n\t\t\tw = shrunkSize.w\n\t\t\th = shrunkSize.h\n\t\t\tautoSize = false\n\t\t\talign = isRtl ? 'end' : 'start'\n\t\t} else {\n\t\t\t// autosize is fine\n\t\t\tw = rawSize.w\n\t\t\th = rawSize.h\n\t\t\tautoSize = true\n\t\t}\n\n\t\tif (p.y - h / 2 < editor.viewportPageBounds.minY + 40) {\n\t\t\tp.y = editor.viewportPageBounds.minY + 40 + h / 2\n\t\t}\n\n\t\teditor.createShapes<TLTextShape>([\n\t\t\t{\n\t\t\t\tid: createShapeId(),\n\t\t\t\ttype: 'text',\n\t\t\t\tx: p.x - w / 2,\n\t\t\t\ty: p.y - h / 2,\n\t\t\t\tprops: {\n\t\t\t\t\ttext: textToPaste,\n\t\t\t\t\t// if the text has more than one line, align it to the left\n\t\t\t\t\talign,\n\t\t\t\t\tautoSize,\n\t\t\t\t\tw,\n\t\t\t\t},\n\t\t\t},\n\t\t])\n\t}\n\n\t/**\n\t * Handle urls from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleUrl = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\thandleUrl = async (\n\t\teditor: Editor,\n\t\t{ point, url }: Extract<TLExternalContent, { type: 'url' }>\n\t) => {\n\t\t// try to paste as an embed first\n\t\tconst embedInfo = getEmbedInfo(url)\n\n\t\tif (embedInfo) {\n\t\t\treturn this.handleEmbed(editor, {\n\t\t\t\ttype: 'embed',\n\t\t\t\turl: embedInfo.url,\n\t\t\t\tpoint,\n\t\t\t\tembed: embedInfo.definition,\n\t\t\t})\n\t\t}\n\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(url))\n\n\t\t// Use an existing asset if we have one, or else else create a new one\n\t\tlet asset = editor.getAssetById(assetId) as TLAsset\n\t\tlet shouldAlsoCreateAsset = false\n\t\tif (!asset) {\n\t\t\tshouldAlsoCreateAsset = true\n\t\t\tasset = await this.createAssetFromUrl(editor, url)\n\t\t}\n\n\t\teditor.batch(() => {\n\t\t\tif (shouldAlsoCreateAsset) {\n\t\t\t\teditor.createAssets([asset])\n\t\t\t}\n\n\t\t\tthis.createShapesForAssets(editor, [asset], position)\n\t\t})\n\t}\n\n\tasync createShapesForAssets(editor: Editor, assets: TLAsset[], position: VecLike) {\n\t\tif (!assets.length) return\n\n\t\tconst currentPoint = Vec2d.From(position)\n\t\tconst paritals: TLShapePartial[] = []\n\n\t\tfor (const asset of assets) {\n\t\t\tswitch (asset.type) {\n\t\t\t\tcase 'bookmark': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'bookmark',\n\t\t\t\t\t\tx: currentPoint.x - 150,\n\t\t\t\t\t\ty: currentPoint.y - 160,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\turl: asset.props.src,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += 300\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'image': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\tx: currentPoint.x - asset.props.w / 2,\n\t\t\t\t\t\ty: currentPoint.y - asset.props.h / 2,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\tw: asset.props.w,\n\t\t\t\t\t\t\th: asset.props.h,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += asset.props.w\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'video': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'video',\n\t\t\t\t\t\tx: currentPoint.x - asset.props.w / 2,\n\t\t\t\t\t\ty: currentPoint.y - asset.props.h / 2,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\tw: asset.props.w,\n\t\t\t\t\t\t\th: asset.props.h,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += asset.props.w\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\teditor.batch(() => {\n\t\t\t// Create any assets\n\t\t\tconst assetsToCreate = assets.filter((asset) => !editor.getAssetById(asset.id))\n\t\t\tif (assetsToCreate.length) {\n\t\t\t\teditor.createAssets(assetsToCreate)\n\t\t\t}\n\n\t\t\t// Create the shapes\n\t\t\teditor.createShapes(paritals, true)\n\n\t\t\t// Re-position shapes so that the center of the group is at the provided point\n\t\t\tconst { viewportPageBounds } = editor\n\t\t\tlet { selectedPageBounds } = editor\n\n\t\t\tif (selectedPageBounds) {\n\t\t\t\tconst offset = selectedPageBounds!.center.sub(position)\n\n\t\t\t\teditor.updateShapes(\n\t\t\t\t\tparitals.map((partial) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: partial.id,\n\t\t\t\t\t\t\ttype: partial.type,\n\t\t\t\t\t\t\tx: partial.x! - offset.x,\n\t\t\t\t\t\t\ty: partial.y! - offset.y,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t// Zoom out to fit the shapes, if necessary\n\t\t\tselectedPageBounds = editor.selectedPageBounds\n\t\t\tif (selectedPageBounds && !viewportPageBounds.contains(selectedPageBounds)) {\n\t\t\t\teditor.zoomToSelection()\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Override this method to change how assets are created from files.\n\t *\n\t * @param editor - The editor instance\n\t * @param file - The file to create the asset from.\n\t */\n\tasync createAssetFromFile(_editor: Editor, file: File): Promise<TLAsset> {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.onerror = () => reject(reader.error)\n\t\t\treader.onload = async () => {\n\t\t\t\tlet dataUrl = reader.result as string\n\n\t\t\t\tconst isImageType = isImage(file.type)\n\t\t\t\tconst sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc\n\n\t\t\t\t// Hack to make .mov videos work via dataURL.\n\t\t\t\tif (file.type === 'video/quicktime' && dataUrl.includes('video/quicktime')) {\n\t\t\t\t\tdataUrl = dataUrl.replace('video/quicktime', 'video/mp4')\n\t\t\t\t}\n\n\t\t\t\tconst originalSize = await sizeFn(dataUrl)\n\t\t\t\tconst size = containBoxSize(originalSize, { w: MAX_ASSET_WIDTH, h: MAX_ASSET_HEIGHT })\n\n\t\t\t\tif (size !== originalSize && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n\t\t\t\t\t// If we created a new size and the type is an image, rescale the image\n\t\t\t\t\tdataUrl = await getResizedImageDataUrl(dataUrl, size.w, size.h)\n\t\t\t\t}\n\n\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(dataUrl))\n\n\t\t\t\tconst metadata = await getFileMetaData(file)\n\n\t\t\t\tconst asset: Extract<TLAsset, { type: 'image' | 'video' }> = {\n\t\t\t\t\tid: assetId,\n\t\t\t\t\ttype: isImageType ? 'image' : 'video',\n\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tname: file.name,\n\t\t\t\t\t\tsrc: dataUrl,\n\t\t\t\t\t\tw: size.w,\n\t\t\t\t\t\th: size.h,\n\t\t\t\t\t\tmimeType: file.type,\n\t\t\t\t\t\tisAnimated: metadata.isAnimated,\n\t\t\t\t\t},\n\t\t\t\t}\n\n\t\t\t\tresolve(asset)\n\t\t\t}\n\n\t\t\treader.readAsDataURL(file)\n\t\t})\n\t}\n\n\t/**\n\t * Override me to change the way assets are created from urls.\n\t *\n\t * @param editor - The editor instance\n\t * @param url - The url to create the asset from\n\t */\n\tasync createAssetFromUrl(_editor: Editor, url: string): Promise<TLAsset> {\n\t\tlet meta: { image: string; title: string; description: string }\n\n\t\ttry {\n\t\t\tconst resp = await fetch(url, { method: 'GET', mode: 'no-cors' })\n\t\t\tconst html = await resp.text()\n\t\t\tconst doc = new DOMParser().parseFromString(html, 'text/html')\n\t\t\tmeta = {\n\t\t\t\timage: doc.head.querySelector('meta[property=\"og:image\"]')?.getAttribute('content') ?? '',\n\t\t\t\ttitle:\n\t\t\t\t\tdoc.head.querySelector('meta[property=\"og:title\"]')?.getAttribute('content') ??\n\t\t\t\t\ttruncateStringWithEllipsis(url, 32),\n\t\t\t\tdescription:\n\t\t\t\t\tdoc.head.querySelector('meta[property=\"og:description\"]')?.getAttribute('content') ?? '',\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tmeta = { image: '', title: truncateStringWithEllipsis(url, 32), description: '' }\n\t\t}\n\n\t\t// Create the bookmark asset from the meta\n\t\treturn {\n\t\t\tid: AssetRecordType.createId(getHashForString(url)),\n\t\t\ttypeName: 'asset',\n\t\t\ttype: 'bookmark',\n\t\t\tprops: {\n\t\t\t\tsrc: url,\n\t\t\t\tdescription: meta.description,\n\t\t\t\timage: meta.image,\n\t\t\t\ttitle: meta.title,\n\t\t\t},\n\t\t}\n\t}\n}\n\n/* --------------------- Helpers -------------------- */\n\nconst rtlRegex = /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/\n\n/**\n * Replace any tabs with double spaces.\n * @param text - The text to replace tabs in.\n * @internal\n */\nfunction replaceTabsWithSpaces(text: string) {\n\treturn text.replace(/\\t/g, INDENT)\n}\n\n/**\n * Strip common minimum indentation from each line.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripCommonMinimumIndentation(text: string): string {\n\t// Split the text into individual lines\n\tconst lines = text.split('\\n')\n\n\t// remove any leading lines that are only whitespace or newlines\n\twhile (lines[0].trim().length === 0) {\n\t\tlines.shift()\n\t}\n\n\tlet minIndentation = Infinity\n\tfor (const line of lines) {\n\t\tif (line.trim().length > 0) {\n\t\t\tconst indentation = line.length - line.trimStart().length\n\t\t\tminIndentation = Math.min(minIndentation, indentation)\n\t\t}\n\t}\n\n\treturn lines.map((line) => line.slice(minIndentation)).join('\\n')\n}\n\n/**\n * Strip trailing whitespace from each line and remove any trailing newlines.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripTrailingWhitespace(text: string): string {\n\treturn text.replace(/[ \\t]+$/gm, '').replace(/\\n+$/, '')\n}\n"],
  "mappings": "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",
  "names": []
}
