{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { openDB } from \"idb\";\nvar STORE_PREFIX = \"TLDRAW_DOCUMENT_v2\";\nvar dbNameIndexKey = \"TLDRAW_DB_NAME_INDEX_v2\";\nvar Table = {\n  Records: \"records\",\n  Schema: \"schema\",\n  SessionState: \"session_state\"\n};\nfunction withDb(_x, _x2) {\n  return _withDb.apply(this, arguments);\n}\nfunction _withDb() {\n  _withDb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(storeId, cb) {\n    var db;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          addDbName(storeId);\n          _context.next = 3;\n          return openDB(storeId, 3, {\n            upgrade: function upgrade(database) {\n              if (!database.objectStoreNames.contains(Table.Records)) {\n                database.createObjectStore(Table.Records);\n              }\n              if (!database.objectStoreNames.contains(Table.Schema)) {\n                database.createObjectStore(Table.Schema);\n              }\n              if (!database.objectStoreNames.contains(Table.SessionState)) {\n                database.createObjectStore(Table.SessionState);\n              }\n            }\n          });\n        case 3:\n          db = _context.sent;\n          _context.prev = 4;\n          _context.next = 7;\n          return cb(db);\n        case 7:\n          return _context.abrupt(\"return\", _context.sent);\n        case 8:\n          _context.prev = 8;\n          db.close();\n          return _context.finish(8);\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4,, 8, 11]]);\n  }));\n  return _withDb.apply(this, arguments);\n}\nfunction loadDataFromStore(_x3) {\n  return _loadDataFromStore.apply(this, arguments);\n}\nfunction _loadDataFromStore() {\n  _loadDataFromStore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {\n    var persistenceKey, sessionId, didCancel, storeId;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          persistenceKey = _ref.persistenceKey, sessionId = _ref.sessionId, didCancel = _ref.didCancel;\n          storeId = STORE_PREFIX + persistenceKey;\n          if (getAllIndexDbNames().includes(storeId)) {\n            _context3.next = 4;\n            break;\n          }\n          return _context3.abrupt(\"return\", void 0);\n        case 4:\n          _context3.next = 6;\n          return pruneSessionState({\n            persistenceKey: persistenceKey,\n            didCancel: didCancel\n          });\n        case 6:\n          _context3.next = 8;\n          return withDb(storeId, /*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(db) {\n              var _yield$sessionStateSt;\n              var tx, recordsStore, schemaStore, sessionStateStore, sessionStateSnapshot, _all$sort$pop, all, result;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!(didCancel !== null && didCancel !== void 0 && didCancel())) {\n                      _context2.next = 2;\n                      break;\n                    }\n                    return _context2.abrupt(\"return\", void 0);\n                  case 2:\n                    tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], \"readonly\");\n                    recordsStore = tx.objectStore(Table.Records);\n                    schemaStore = tx.objectStore(Table.Schema);\n                    sessionStateStore = tx.objectStore(Table.SessionState);\n                    if (!sessionId) {\n                      _context2.next = 21;\n                      break;\n                    }\n                    _context2.next = 9;\n                    return sessionStateStore.get(sessionId);\n                  case 9:\n                    _context2.t2 = _yield$sessionStateSt = _context2.sent;\n                    _context2.t1 = _context2.t2 === null;\n                    if (_context2.t1) {\n                      _context2.next = 13;\n                      break;\n                    }\n                    _context2.t1 = _yield$sessionStateSt === void 0;\n                  case 13:\n                    if (!_context2.t1) {\n                      _context2.next = 17;\n                      break;\n                    }\n                    _context2.t3 = void 0;\n                    _context2.next = 18;\n                    break;\n                  case 17:\n                    _context2.t3 = _yield$sessionStateSt.snapshot;\n                  case 18:\n                    _context2.t0 = _context2.t3;\n                    _context2.next = 22;\n                    break;\n                  case 21:\n                    _context2.t0 = null;\n                  case 22:\n                    sessionStateSnapshot = _context2.t0;\n                    if (sessionStateSnapshot) {\n                      _context2.next = 28;\n                      break;\n                    }\n                    _context2.next = 26;\n                    return sessionStateStore.getAll();\n                  case 26:\n                    all = _context2.sent;\n                    sessionStateSnapshot = (_all$sort$pop = all.sort(function (a, b) {\n                      return a.updatedAt - b.updatedAt;\n                    }).pop()) === null || _all$sort$pop === void 0 ? void 0 : _all$sort$pop.snapshot;\n                  case 28:\n                    _context2.next = 30;\n                    return recordsStore.getAll();\n                  case 30:\n                    _context2.t4 = _context2.sent;\n                    _context2.next = 33;\n                    return schemaStore.get(Table.Schema);\n                  case 33:\n                    _context2.t5 = _context2.sent;\n                    _context2.t6 = sessionStateSnapshot;\n                    result = {\n                      records: _context2.t4,\n                      schema: _context2.t5,\n                      sessionStateSnapshot: _context2.t6\n                    };\n                    if (!(didCancel !== null && didCancel !== void 0 && didCancel())) {\n                      _context2.next = 39;\n                      break;\n                    }\n                    tx.abort();\n                    return _context2.abrupt(\"return\", void 0);\n                  case 39:\n                    _context2.next = 41;\n                    return tx.done;\n                  case 41:\n                    return _context2.abrupt(\"return\", result);\n                  case 42:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function (_x7) {\n              return _ref5.apply(this, arguments);\n            };\n          }());\n        case 8:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _loadDataFromStore.apply(this, arguments);\n}\nfunction storeChangesInIndexedDb(_x4) {\n  return _storeChangesInIndexedDb.apply(this, arguments);\n}\nfunction _storeChangesInIndexedDb() {\n  _storeChangesInIndexedDb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref2) {\n    var persistenceKey, schema, changes, sessionId, sessionStateSnapshot, didCancel, storeId;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          persistenceKey = _ref2.persistenceKey, schema = _ref2.schema, changes = _ref2.changes, sessionId = _ref2.sessionId, sessionStateSnapshot = _ref2.sessionStateSnapshot, didCancel = _ref2.didCancel;\n          storeId = STORE_PREFIX + persistenceKey;\n          _context5.next = 4;\n          return withDb(storeId, /*#__PURE__*/function () {\n            var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(db) {\n              var tx, recordsStore, schemaStore, sessionStateStore, _i, _Object$entries, _Object$entries$_i, id, record, _i2, _Object$values, _Object$values$_i, _prev, updated, _i3, _Object$keys, _id;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], \"readwrite\");\n                    recordsStore = tx.objectStore(Table.Records);\n                    schemaStore = tx.objectStore(Table.Schema);\n                    sessionStateStore = tx.objectStore(Table.SessionState);\n                    _i = 0, _Object$entries = Object.entries(changes.added);\n                  case 5:\n                    if (!(_i < _Object$entries.length)) {\n                      _context4.next = 12;\n                      break;\n                    }\n                    _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), id = _Object$entries$_i[0], record = _Object$entries$_i[1];\n                    _context4.next = 9;\n                    return recordsStore.put(record, id);\n                  case 9:\n                    _i++;\n                    _context4.next = 5;\n                    break;\n                  case 12:\n                    _i2 = 0, _Object$values = Object.values(changes.updated);\n                  case 13:\n                    if (!(_i2 < _Object$values.length)) {\n                      _context4.next = 20;\n                      break;\n                    }\n                    _Object$values$_i = _slicedToArray(_Object$values[_i2], 2), _prev = _Object$values$_i[0], updated = _Object$values$_i[1];\n                    _context4.next = 17;\n                    return recordsStore.put(updated, updated.id);\n                  case 17:\n                    _i2++;\n                    _context4.next = 13;\n                    break;\n                  case 20:\n                    _i3 = 0, _Object$keys = Object.keys(changes.removed);\n                  case 21:\n                    if (!(_i3 < _Object$keys.length)) {\n                      _context4.next = 28;\n                      break;\n                    }\n                    _id = _Object$keys[_i3];\n                    _context4.next = 25;\n                    return recordsStore.delete(_id);\n                  case 25:\n                    _i3++;\n                    _context4.next = 21;\n                    break;\n                  case 28:\n                    schemaStore.put(schema.serialize(), Table.Schema);\n                    if (sessionStateSnapshot && sessionId) {\n                      sessionStateStore.put({\n                        snapshot: sessionStateSnapshot,\n                        updatedAt: Date.now(),\n                        id: sessionId\n                      }, sessionId);\n                    } else if (sessionStateSnapshot || sessionId) {\n                      console.error(\"sessionStateSnapshot and instanceId must be provided together\");\n                    }\n                    if (!(didCancel !== null && didCancel !== void 0 && didCancel())) {\n                      _context4.next = 32;\n                      break;\n                    }\n                    return _context4.abrupt(\"return\", tx.abort());\n                  case 32:\n                    _context4.next = 34;\n                    return tx.done;\n                  case 34:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n            return function (_x8) {\n              return _ref6.apply(this, arguments);\n            };\n          }());\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _storeChangesInIndexedDb.apply(this, arguments);\n}\nfunction storeSnapshotInIndexedDb(_x5) {\n  return _storeSnapshotInIndexedDb.apply(this, arguments);\n}\nfunction _storeSnapshotInIndexedDb() {\n  _storeSnapshotInIndexedDb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(_ref3) {\n    var persistenceKey, schema, snapshot, sessionId, sessionStateSnapshot, didCancel, storeId;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          persistenceKey = _ref3.persistenceKey, schema = _ref3.schema, snapshot = _ref3.snapshot, sessionId = _ref3.sessionId, sessionStateSnapshot = _ref3.sessionStateSnapshot, didCancel = _ref3.didCancel;\n          storeId = STORE_PREFIX + persistenceKey;\n          _context7.next = 4;\n          return withDb(storeId, /*#__PURE__*/function () {\n            var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(db) {\n              var tx, recordsStore, schemaStore, sessionStateStore, _i4, _Object$entries2, _Object$entries2$_i, id, record;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], \"readwrite\");\n                    recordsStore = tx.objectStore(Table.Records);\n                    schemaStore = tx.objectStore(Table.Schema);\n                    sessionStateStore = tx.objectStore(Table.SessionState);\n                    _context6.next = 6;\n                    return recordsStore.clear();\n                  case 6:\n                    _i4 = 0, _Object$entries2 = Object.entries(snapshot);\n                  case 7:\n                    if (!(_i4 < _Object$entries2.length)) {\n                      _context6.next = 14;\n                      break;\n                    }\n                    _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2), id = _Object$entries2$_i[0], record = _Object$entries2$_i[1];\n                    _context6.next = 11;\n                    return recordsStore.put(record, id);\n                  case 11:\n                    _i4++;\n                    _context6.next = 7;\n                    break;\n                  case 14:\n                    schemaStore.put(schema.serialize(), Table.Schema);\n                    if (sessionStateSnapshot && sessionId) {\n                      sessionStateStore.put({\n                        snapshot: sessionStateSnapshot,\n                        updatedAt: Date.now(),\n                        id: sessionId\n                      }, sessionId);\n                    } else if (sessionStateSnapshot || sessionId) {\n                      console.error(\"sessionStateSnapshot and instanceId must be provided together\");\n                    }\n                    if (!(didCancel !== null && didCancel !== void 0 && didCancel())) {\n                      _context6.next = 18;\n                      break;\n                    }\n                    return _context6.abrupt(\"return\", tx.abort());\n                  case 18:\n                    _context6.next = 20;\n                    return tx.done;\n                  case 20:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6);\n            }));\n            return function (_x9) {\n              return _ref7.apply(this, arguments);\n            };\n          }());\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _storeSnapshotInIndexedDb.apply(this, arguments);\n}\nfunction pruneSessionState(_x6) {\n  return _pruneSessionState.apply(this, arguments);\n}\nfunction _pruneSessionState() {\n  _pruneSessionState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref4) {\n    var persistenceKey, didCancel;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          persistenceKey = _ref4.persistenceKey, didCancel = _ref4.didCancel;\n          _context9.next = 3;\n          return withDb(STORE_PREFIX + persistenceKey, /*#__PURE__*/function () {\n            var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(db) {\n              var tx, sessionStateStore, all, toDelete, _iterator, _step, id;\n              return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                while (1) switch (_context8.prev = _context8.next) {\n                  case 0:\n                    tx = db.transaction([Table.SessionState], \"readwrite\");\n                    sessionStateStore = tx.objectStore(Table.SessionState);\n                    _context8.next = 4;\n                    return sessionStateStore.getAll();\n                  case 4:\n                    all = _context8.sent.sort(function (a, b) {\n                      return a.updatedAt - b.updatedAt;\n                    });\n                    if (!(all.length < 10)) {\n                      _context8.next = 9;\n                      break;\n                    }\n                    _context8.next = 8;\n                    return tx.done;\n                  case 8:\n                    return _context8.abrupt(\"return\");\n                  case 9:\n                    toDelete = all.slice(0, all.length - 10);\n                    _iterator = _createForOfIteratorHelper(toDelete);\n                    _context8.prev = 11;\n                    _iterator.s();\n                  case 13:\n                    if ((_step = _iterator.n()).done) {\n                      _context8.next = 19;\n                      break;\n                    }\n                    id = _step.value.id;\n                    _context8.next = 17;\n                    return sessionStateStore.delete(id);\n                  case 17:\n                    _context8.next = 13;\n                    break;\n                  case 19:\n                    _context8.next = 24;\n                    break;\n                  case 21:\n                    _context8.prev = 21;\n                    _context8.t0 = _context8[\"catch\"](11);\n                    _iterator.e(_context8.t0);\n                  case 24:\n                    _context8.prev = 24;\n                    _iterator.f();\n                    return _context8.finish(24);\n                  case 27:\n                    if (!(didCancel !== null && didCancel !== void 0 && didCancel())) {\n                      _context8.next = 29;\n                      break;\n                    }\n                    return _context8.abrupt(\"return\", tx.abort());\n                  case 29:\n                    _context8.next = 31;\n                    return tx.done;\n                  case 31:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }, _callee8, null, [[11, 21, 24, 27]]);\n            }));\n            return function (_x10) {\n              return _ref8.apply(this, arguments);\n            };\n          }());\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return _pruneSessionState.apply(this, arguments);\n}\nfunction getAllIndexDbNames() {\n  var _JSON$parse, _window;\n  var result = (_JSON$parse = JSON.parse(((_window = window) === null || _window === void 0 ? void 0 : _window.localStorage.getItem(dbNameIndexKey)) || \"[]\")) !== null && _JSON$parse !== void 0 ? _JSON$parse : [];\n  if (!Array.isArray(result)) {\n    return [];\n  }\n  return result;\n}\nfunction addDbName(name) {\n  var _window2;\n  var all = new Set(getAllIndexDbNames());\n  all.add(name);\n  (_window2 = window) === null || _window2 === void 0 || _window2.localStorage.setItem(dbNameIndexKey, JSON.stringify(_toConsumableArray(all)));\n}\nexport { getAllIndexDbNames, loadDataFromStore, storeChangesInIndexedDb, storeSnapshotInIndexedDb };","map":{"version":3,"names":["openDB","STORE_PREFIX","dbNameIndexKey","Table","Records","Schema","SessionState","withDb","_x","_x2","_withDb","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","storeId","cb","db","wrap","_callee$","_context","prev","next","addDbName","upgrade","database","objectStoreNames","contains","createObjectStore","sent","abrupt","close","finish","stop","loadDataFromStore","_x3","_loadDataFromStore","_callee3","_ref","persistenceKey","sessionId","didCancel","_callee3$","_context3","getAllIndexDbNames","includes","pruneSessionState","_ref5","_callee2","_yield$sessionStateSt","tx","recordsStore","schemaStore","sessionStateStore","sessionStateSnapshot","_all$sort$pop","all","result","_callee2$","_context2","transaction","objectStore","get","t2","t1","t3","snapshot","t0","getAll","sort","a","b","updatedAt","pop","t4","t5","t6","records","schema","abort","done","_x7","storeChangesInIndexedDb","_x4","_storeChangesInIndexedDb","_callee5","_ref2","changes","_callee5$","_context5","_ref6","_callee4","_i","_Object$entries","_Object$entries$_i","id","record","_i2","_Object$values","_Object$values$_i","_prev","updated","_i3","_Object$keys","_id","_callee4$","_context4","Object","entries","added","length","_slicedToArray","put","values","keys","removed","delete","serialize","Date","now","console","error","_x8","storeSnapshotInIndexedDb","_x5","_storeSnapshotInIndexedDb","_callee7","_ref3","_callee7$","_context7","_ref7","_callee6","_i4","_Object$entries2","_Object$entries2$_i","_callee6$","_context6","clear","_x9","_x6","_pruneSessionState","_callee9","_ref4","_callee9$","_context9","_ref8","_callee8","toDelete","_iterator","_step","_callee8$","_context8","slice","_createForOfIteratorHelper","s","n","value","e","f","_x10","_JSON$parse","_window","JSON","parse","window","localStorage","getItem","Array","isArray","name","_window2","Set","add","setItem","stringify","_toConsumableArray"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/sync/indexedDb.ts"],"sourcesContent":["import { RecordsDiff, SerializedSchema, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStoreSchema } from '@tldraw/tlschema'\nimport { IDBPDatabase, openDB } from 'idb'\nimport { TLSessionStateSnapshot } from '../../config/TLSessionStateSnapshot'\n\n// DO NOT CHANGE THESE WITHOUT ADDING MIGRATION LOGIC. DOING SO WOULD WIPE ALL EXISTING DATA.\nconst STORE_PREFIX = 'TLDRAW_DOCUMENT_v2'\nconst dbNameIndexKey = 'TLDRAW_DB_NAME_INDEX_v2'\n\nconst Table = {\n\tRecords: 'records',\n\tSchema: 'schema',\n\tSessionState: 'session_state',\n} as const\n\ntype StoreName = (typeof Table)[keyof typeof Table]\n\nasync function withDb<T>(storeId: string, cb: (db: IDBPDatabase<StoreName>) => Promise<T>) {\n\taddDbName(storeId)\n\tconst db = await openDB<StoreName>(storeId, 3, {\n\t\tupgrade(database) {\n\t\t\tif (!database.objectStoreNames.contains(Table.Records)) {\n\t\t\t\tdatabase.createObjectStore(Table.Records)\n\t\t\t}\n\t\t\tif (!database.objectStoreNames.contains(Table.Schema)) {\n\t\t\t\tdatabase.createObjectStore(Table.Schema)\n\t\t\t}\n\t\t\tif (!database.objectStoreNames.contains(Table.SessionState)) {\n\t\t\t\tdatabase.createObjectStore(Table.SessionState)\n\t\t\t}\n\t\t},\n\t})\n\ttry {\n\t\treturn await cb(db)\n\t} finally {\n\t\tdb.close()\n\t}\n}\n\ntype LoadResult = {\n\trecords: TLRecord[]\n\tschema?: SerializedSchema\n\tsessionStateSnapshot?: TLSessionStateSnapshot | null\n}\n\ntype SessionStateSnapshotRow = {\n\tid: string\n\tsnapshot: TLSessionStateSnapshot\n\tupdatedAt: number\n}\n\n/** @internal */\nexport async function loadDataFromStore({\n\tpersistenceKey,\n\tsessionId,\n\tdidCancel,\n}: {\n\tpersistenceKey: string\n\tsessionId?: string\n\tdidCancel?: () => boolean\n}): Promise<undefined | LoadResult> {\n\tconst storeId = STORE_PREFIX + persistenceKey\n\tif (!getAllIndexDbNames().includes(storeId)) return undefined\n\tawait pruneSessionState({ persistenceKey, didCancel })\n\treturn await withDb(storeId, async (db) => {\n\t\tif (didCancel?.()) return undefined\n\t\tconst tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], 'readonly')\n\t\tconst recordsStore = tx.objectStore(Table.Records)\n\t\tconst schemaStore = tx.objectStore(Table.Schema)\n\t\tconst sessionStateStore = tx.objectStore(Table.SessionState)\n\t\tlet sessionStateSnapshot = sessionId\n\t\t\t? ((await sessionStateStore.get(sessionId)) as SessionStateSnapshotRow | undefined)?.snapshot\n\t\t\t: null\n\t\tif (!sessionStateSnapshot) {\n\t\t\t// get the most recent session state\n\t\t\tconst all = (await sessionStateStore.getAll()) as SessionStateSnapshotRow[]\n\t\t\tsessionStateSnapshot = all.sort((a, b) => a.updatedAt - b.updatedAt).pop()?.snapshot\n\t\t}\n\t\tconst result = {\n\t\t\trecords: await recordsStore.getAll(),\n\t\t\tschema: await schemaStore.get(Table.Schema),\n\t\t\tsessionStateSnapshot,\n\t\t} satisfies LoadResult\n\t\tif (didCancel?.()) {\n\t\t\ttx.abort()\n\t\t\treturn undefined\n\t\t}\n\t\tawait tx.done\n\t\treturn result\n\t})\n}\n\n/** @internal */\nexport async function storeChangesInIndexedDb({\n\tpersistenceKey,\n\tschema,\n\tchanges,\n\tsessionId,\n\tsessionStateSnapshot,\n\tdidCancel,\n}: {\n\tpersistenceKey: string\n\tschema: TLStoreSchema\n\tchanges: RecordsDiff<any>\n\tsessionId?: string | null\n\tsessionStateSnapshot?: TLSessionStateSnapshot | null\n\tdidCancel?: () => boolean\n}) {\n\tconst storeId = STORE_PREFIX + persistenceKey\n\tawait withDb(storeId, async (db) => {\n\t\tconst tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], 'readwrite')\n\t\tconst recordsStore = tx.objectStore(Table.Records)\n\t\tconst schemaStore = tx.objectStore(Table.Schema)\n\t\tconst sessionStateStore = tx.objectStore(Table.SessionState)\n\n\t\tfor (const [id, record] of Object.entries(changes.added)) {\n\t\t\tawait recordsStore.put(record, id)\n\t\t}\n\n\t\tfor (const [_prev, updated] of Object.values(changes.updated)) {\n\t\t\tawait recordsStore.put(updated, updated.id)\n\t\t}\n\n\t\tfor (const id of Object.keys(changes.removed)) {\n\t\t\tawait recordsStore.delete(id)\n\t\t}\n\n\t\tschemaStore.put(schema.serialize(), Table.Schema)\n\t\tif (sessionStateSnapshot && sessionId) {\n\t\t\tsessionStateStore.put(\n\t\t\t\t{\n\t\t\t\t\tsnapshot: sessionStateSnapshot,\n\t\t\t\t\tupdatedAt: Date.now(),\n\t\t\t\t\tid: sessionId,\n\t\t\t\t} satisfies SessionStateSnapshotRow,\n\t\t\t\tsessionId\n\t\t\t)\n\t\t} else if (sessionStateSnapshot || sessionId) {\n\t\t\tconsole.error('sessionStateSnapshot and instanceId must be provided together')\n\t\t}\n\n\t\tif (didCancel?.()) return tx.abort()\n\n\t\tawait tx.done\n\t})\n}\n\n/** @internal */\nexport async function storeSnapshotInIndexedDb({\n\tpersistenceKey,\n\tschema,\n\tsnapshot,\n\tsessionId,\n\tsessionStateSnapshot,\n\tdidCancel,\n}: {\n\tpersistenceKey: string\n\tschema: TLStoreSchema\n\tsnapshot: StoreSnapshot<any>\n\tsessionId?: string | null\n\tsessionStateSnapshot?: TLSessionStateSnapshot | null\n\tdidCancel?: () => boolean\n}) {\n\tconst storeId = STORE_PREFIX + persistenceKey\n\tawait withDb(storeId, async (db) => {\n\t\tconst tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], 'readwrite')\n\t\tconst recordsStore = tx.objectStore(Table.Records)\n\t\tconst schemaStore = tx.objectStore(Table.Schema)\n\t\tconst sessionStateStore = tx.objectStore(Table.SessionState)\n\n\t\tawait recordsStore.clear()\n\n\t\tfor (const [id, record] of Object.entries(snapshot)) {\n\t\t\tawait recordsStore.put(record, id)\n\t\t}\n\n\t\tschemaStore.put(schema.serialize(), Table.Schema)\n\n\t\tif (sessionStateSnapshot && sessionId) {\n\t\t\tsessionStateStore.put(\n\t\t\t\t{\n\t\t\t\t\tsnapshot: sessionStateSnapshot,\n\t\t\t\t\tupdatedAt: Date.now(),\n\t\t\t\t\tid: sessionId,\n\t\t\t\t} satisfies SessionStateSnapshotRow,\n\t\t\t\tsessionId\n\t\t\t)\n\t\t} else if (sessionStateSnapshot || sessionId) {\n\t\t\tconsole.error('sessionStateSnapshot and instanceId must be provided together')\n\t\t}\n\n\t\tif (didCancel?.()) return tx.abort()\n\n\t\tawait tx.done\n\t})\n}\n\nasync function pruneSessionState({\n\tpersistenceKey,\n\tdidCancel,\n}: {\n\tpersistenceKey: string\n\tdidCancel?: () => boolean\n}) {\n\tawait withDb(STORE_PREFIX + persistenceKey, async (db) => {\n\t\tconst tx = db.transaction([Table.SessionState], 'readwrite')\n\t\tconst sessionStateStore = tx.objectStore(Table.SessionState)\n\t\tconst all = (await sessionStateStore.getAll()).sort((a, b) => a.updatedAt - b.updatedAt)\n\t\tif (all.length < 10) {\n\t\t\tawait tx.done\n\t\t\treturn\n\t\t}\n\t\tconst toDelete = all.slice(0, all.length - 10)\n\t\tfor (const { id } of toDelete) {\n\t\t\tawait sessionStateStore.delete(id)\n\t\t}\n\t\tif (didCancel?.()) return tx.abort()\n\t\tawait tx.done\n\t})\n}\n\n/** @internal */\nexport function getAllIndexDbNames(): string[] {\n\tconst result = JSON.parse(window?.localStorage.getItem(dbNameIndexKey) || '[]') ?? []\n\tif (!Array.isArray(result)) {\n\t\treturn []\n\t}\n\treturn result\n}\n\nfunction addDbName(name: string) {\n\tconst all = new Set(getAllIndexDbNames())\n\tall.add(name)\n\twindow?.localStorage.setItem(dbNameIndexKey, JSON.stringify([...all]))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}