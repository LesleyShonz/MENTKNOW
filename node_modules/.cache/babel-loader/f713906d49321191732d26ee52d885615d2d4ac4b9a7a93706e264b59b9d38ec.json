{"ast":null,"code":"var compareSchemas = function compareSchemas(a, b) {\n  if (a.schemaVersion > b.schemaVersion) {\n    return 1;\n  }\n  if (a.schemaVersion < b.schemaVersion) {\n    return -1;\n  }\n  if (a.storeVersion > b.storeVersion) {\n    return 1;\n  }\n  if (a.storeVersion < b.storeVersion) {\n    return -1;\n  }\n  for (var _i = 0, _Object$keys = Object.keys(a.recordVersions); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    var aRecordVersion = a.recordVersions[key];\n    var bRecordVersion = b.recordVersions[key];\n    if (aRecordVersion.version > bRecordVersion.version) {\n      return 1;\n    }\n    if (aRecordVersion.version < bRecordVersion.version) {\n      return -1;\n    }\n    if (\"subTypeVersions\" in aRecordVersion && !(\"subTypeVersions\" in bRecordVersion)) {\n      return 1;\n    }\n    if (!(\"subTypeVersions\" in aRecordVersion) && \"subTypeVersions\" in bRecordVersion) {\n      return -1;\n    }\n    if (!(\"subTypeVersions\" in aRecordVersion) || !(\"subTypeVersions\" in bRecordVersion)) {\n      continue;\n    }\n    for (var _i2 = 0, _Object$keys2 = Object.keys(aRecordVersion.subTypeVersions); _i2 < _Object$keys2.length; _i2++) {\n      var subType = _Object$keys2[_i2];\n      var aSubTypeVersion = aRecordVersion.subTypeVersions[subType];\n      var bSubTypeVersion = bRecordVersion.subTypeVersions[subType];\n      if (aSubTypeVersion > bSubTypeVersion) {\n        return 1;\n      }\n      if (aSubTypeVersion < bSubTypeVersion) {\n        return -1;\n      }\n    }\n  }\n  return 0;\n};\nexport { compareSchemas };","map":{"version":3,"names":["compareSchemas","a","b","schemaVersion","storeVersion","_i","_Object$keys","Object","keys","recordVersions","length","key","aRecordVersion","bRecordVersion","version","_i2","_Object$keys2","subTypeVersions","subType","aSubTypeVersion","bSubTypeVersion"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/store/src/lib/compareSchemas.ts"],"sourcesContent":["import { SerializedSchema } from './StoreSchema'\n\n/** @public */\nexport const compareSchemas = (a: SerializedSchema, b: SerializedSchema): 0 | 1 | -1 => {\n\tif (a.schemaVersion > b.schemaVersion) {\n\t\treturn 1\n\t}\n\tif (a.schemaVersion < b.schemaVersion) {\n\t\treturn -1\n\t}\n\tif (a.storeVersion > b.storeVersion) {\n\t\treturn 1\n\t}\n\tif (a.storeVersion < b.storeVersion) {\n\t\treturn -1\n\t}\n\tfor (const key of Object.keys(a.recordVersions)) {\n\t\tconst aRecordVersion = a.recordVersions[key]\n\t\tconst bRecordVersion = b.recordVersions[key]\n\t\tif (aRecordVersion.version > bRecordVersion.version) {\n\t\t\treturn 1\n\t\t}\n\t\tif (aRecordVersion.version < bRecordVersion.version) {\n\t\t\treturn -1\n\t\t}\n\t\tif ('subTypeVersions' in aRecordVersion && !('subTypeVersions' in bRecordVersion)) {\n\t\t\t// todo: this assumes that subtypes were added in an up migration rather than removed. We should probably\n\t\t\t// make sure that in either case the parent version is bumped\n\t\t\treturn 1\n\t\t}\n\n\t\tif (!('subTypeVersions' in aRecordVersion) && 'subTypeVersions' in bRecordVersion) {\n\t\t\t// todo: this assumes that subtypes were added in an up migration rather than removed. We should probably\n\t\t\t// make sure that in either case the parent version is bumped\n\t\t\treturn -1\n\t\t}\n\n\t\tif (!('subTypeVersions' in aRecordVersion) || !('subTypeVersions' in bRecordVersion)) {\n\t\t\t// this will never happen\n\t\t\tcontinue\n\t\t}\n\n\t\tfor (const subType of Object.keys(aRecordVersion.subTypeVersions)) {\n\t\t\tconst aSubTypeVersion = aRecordVersion.subTypeVersions[subType]\n\t\t\tconst bSubTypeVersion = bRecordVersion.subTypeVersions[subType]\n\t\t\tif (aSubTypeVersion > bSubTypeVersion) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\tif (aSubTypeVersion < bSubTypeVersion) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n"],"mappings":"AAGO,IAAMA,cAAA,GAAiB,SAAjBA,eAAkBC,CAAA,EAAqBC,CAAA,EAAoC;EACvF,IAAID,CAAA,CAAEE,aAAA,GAAgBD,CAAA,CAAEC,aAAA,EAAe;IACtC,OAAO;EACR;EACA,IAAIF,CAAA,CAAEE,aAAA,GAAgBD,CAAA,CAAEC,aAAA,EAAe;IACtC,OAAO;EACR;EACA,IAAIF,CAAA,CAAEG,YAAA,GAAeF,CAAA,CAAEE,YAAA,EAAc;IACpC,OAAO;EACR;EACA,IAAIH,CAAA,CAAEG,YAAA,GAAeF,CAAA,CAAEE,YAAA,EAAc;IACpC,OAAO;EACR;EACA,SAAAC,EAAA,MAAAC,YAAA,GAAkBC,MAAA,CAAOC,IAAA,CAAKP,CAAA,CAAEQ,cAAc,GAAAJ,EAAA,GAAAC,YAAA,CAAAI,MAAA,EAAAL,EAAA,IAAG;IAAjD,IAAWM,GAAA,GAAAL,YAAA,CAAAD,EAAA;IACV,IAAMO,cAAA,GAAiBX,CAAA,CAAEQ,cAAA,CAAeE,GAAG;IAC3C,IAAME,cAAA,GAAiBX,CAAA,CAAEO,cAAA,CAAeE,GAAG;IAC3C,IAAIC,cAAA,CAAeE,OAAA,GAAUD,cAAA,CAAeC,OAAA,EAAS;MACpD,OAAO;IACR;IACA,IAAIF,cAAA,CAAeE,OAAA,GAAUD,cAAA,CAAeC,OAAA,EAAS;MACpD,OAAO;IACR;IACA,IAAI,qBAAqBF,cAAA,IAAkB,EAAE,qBAAqBC,cAAA,GAAiB;MAGlF,OAAO;IACR;IAEA,IAAI,EAAE,qBAAqBD,cAAA,KAAmB,qBAAqBC,cAAA,EAAgB;MAGlF,OAAO;IACR;IAEA,IAAI,EAAE,qBAAqBD,cAAA,KAAmB,EAAE,qBAAqBC,cAAA,GAAiB;MAErF;IACD;IAEA,SAAAE,GAAA,MAAAC,aAAA,GAAsBT,MAAA,CAAOC,IAAA,CAAKI,cAAA,CAAeK,eAAe,GAAAF,GAAA,GAAAC,aAAA,CAAAN,MAAA,EAAAK,GAAA,IAAG;MAAnE,IAAWG,OAAA,GAAAF,aAAA,CAAAD,GAAA;MACV,IAAMI,eAAA,GAAkBP,cAAA,CAAeK,eAAA,CAAgBC,OAAO;MAC9D,IAAME,eAAA,GAAkBP,cAAA,CAAeI,eAAA,CAAgBC,OAAO;MAC9D,IAAIC,eAAA,GAAkBC,eAAA,EAAiB;QACtC,OAAO;MACR;MACA,IAAID,eAAA,GAAkBC,eAAA,EAAiB;QACtC,OAAO;MACR;IACD;EACD;EACA,OAAO;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}