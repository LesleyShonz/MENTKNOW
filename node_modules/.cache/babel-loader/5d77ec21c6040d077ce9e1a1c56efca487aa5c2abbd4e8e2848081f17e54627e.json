{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _migrators;\nvar _excluded = [\"isLocked\"],\n  _excluded2 = [\"opacity\"],\n  _excluded3 = [\"props\"],\n  _excluded4 = [\"opacity\"];\nimport { createRecordType, defineMigrations } from \"@tldraw/store\";\nimport { mapObjectMapValues } from \"@tldraw/utils\";\nimport { T } from \"@tldraw/validate\";\nimport { nanoid } from \"nanoid\";\nimport { createShapeValidator } from \"../shapes/TLBaseShape.mjs\";\nimport { StyleProp } from \"../styles/StyleProp.mjs\";\nvar Versions = {\n  AddIsLocked: 1,\n  HoistOpacity: 2\n};\nvar rootShapeMigrations = defineMigrations({\n  currentVersion: Versions.HoistOpacity,\n  migrators: (_migrators = {}, _defineProperty(_migrators, Versions.AddIsLocked, {\n    up: function up(record) {\n      return _objectSpread(_objectSpread({}, record), {}, {\n        isLocked: false\n      });\n    },\n    down: function down(record) {\n      var _ = record.isLocked,\n        rest = _objectWithoutProperties(record, _excluded);\n      return _objectSpread({}, rest);\n    }\n  }), _defineProperty(_migrators, Versions.HoistOpacity, {\n    up: function up(_ref) {\n      var _ref$props = _ref.props,\n        opacity = _ref$props.opacity,\n        props = _objectWithoutProperties(_ref$props, _excluded2),\n        record = _objectWithoutProperties(_ref, _excluded3);\n      return _objectSpread(_objectSpread({}, record), {}, {\n        opacity: Number(opacity !== null && opacity !== void 0 ? opacity : \"1\"),\n        props: props\n      });\n    },\n    down: function down(_ref2) {\n      var opacity = _ref2.opacity,\n        record = _objectWithoutProperties(_ref2, _excluded4);\n      return _objectSpread(_objectSpread({}, record), {}, {\n        props: _objectSpread(_objectSpread({}, record.props), {}, {\n          opacity: opacity < 0.175 ? \"0.1\" : opacity < 0.375 ? \"0.25\" : opacity < 0.625 ? \"0.5\" : opacity < 0.875 ? \"0.75\" : \"1\"\n        })\n      });\n    }\n  }), _migrators)\n});\nfunction isShape(record) {\n  if (!record) return false;\n  return record.typeName === \"shape\";\n}\nfunction isShapeId(id) {\n  if (!id) return false;\n  return id.startsWith(\"shape:\");\n}\nfunction createShapeId(id) {\n  return \"shape:\".concat(id !== null && id !== void 0 ? id : nanoid());\n}\nfunction getShapePropKeysByStyle(props) {\n  var propKeysByStyle = /* @__PURE__ */new Map();\n  for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      prop = _Object$entries$_i[1];\n    if (prop instanceof StyleProp) {\n      if (propKeysByStyle.has(prop)) {\n        throw new Error(\"Duplicate style prop \".concat(prop.id, \". Each style prop can only be used once within a shape.\"));\n      }\n      propKeysByStyle.set(prop, key);\n    }\n  }\n  return propKeysByStyle;\n}\nfunction createShapeRecordType(shapes) {\n  return createRecordType(\"shape\", {\n    migrations: defineMigrations({\n      currentVersion: rootShapeMigrations.currentVersion,\n      firstVersion: rootShapeMigrations.firstVersion,\n      migrators: rootShapeMigrations.migrators,\n      subTypeKey: \"type\",\n      subTypeMigrations: mapObjectMapValues(shapes, function (k, v) {\n        var _v$migrations;\n        return (_v$migrations = v.migrations) !== null && _v$migrations !== void 0 ? _v$migrations : defineMigrations({});\n      })\n    }),\n    scope: \"document\",\n    validator: T.model(\"shape\", T.union(\"type\", mapObjectMapValues(shapes, function (type, _ref3) {\n      var props = _ref3.props;\n      return createShapeValidator(type, props);\n    })))\n  }).withDefaultProperties(function () {\n    return {\n      x: 0,\n      y: 0,\n      rotation: 0,\n      isLocked: false,\n      opacity: 1\n    };\n  });\n}\nexport { Versions, createShapeId, createShapeRecordType, getShapePropKeysByStyle, isShape, isShapeId, rootShapeMigrations };","map":{"version":3,"names":["createRecordType","defineMigrations","mapObjectMapValues","T","nanoid","createShapeValidator","StyleProp","Versions","AddIsLocked","HoistOpacity","rootShapeMigrations","currentVersion","migrators","_migrators","_defineProperty","up","record","_objectSpread","isLocked","down","_","rest","_objectWithoutProperties","_excluded","_ref","_ref$props","props","opacity","_excluded2","_excluded3","Number","_ref2","_excluded4","isShape","typeName","isShapeId","id","startsWith","createShapeId","concat","getShapePropKeysByStyle","propKeysByStyle","Map","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","prop","has","Error","set","createShapeRecordType","shapes","migrations","firstVersion","subTypeKey","subTypeMigrations","k","v","_v$migrations","scope","validator","model","union","type","_ref3","withDefaultProperties","x","y","rotation"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/records/TLShape.ts"],"sourcesContent":["import { createRecordType, defineMigrations, RecordId, UnknownRecord } from '@tldraw/store'\nimport { mapObjectMapValues } from '@tldraw/utils'\nimport { T } from '@tldraw/validate'\nimport { nanoid } from 'nanoid'\nimport { SchemaShapeInfo } from '../createTLSchema'\nimport { TLArrowShape } from '../shapes/TLArrowShape'\nimport { createShapeValidator, TLBaseShape } from '../shapes/TLBaseShape'\nimport { TLBookmarkShape } from '../shapes/TLBookmarkShape'\nimport { TLDrawShape } from '../shapes/TLDrawShape'\nimport { TLEmbedShape } from '../shapes/TLEmbedShape'\nimport { TLFrameShape } from '../shapes/TLFrameShape'\nimport { TLGeoShape } from '../shapes/TLGeoShape'\nimport { TLGroupShape } from '../shapes/TLGroupShape'\nimport { TLHighlightShape } from '../shapes/TLHighlightShape'\nimport { TLImageShape } from '../shapes/TLImageShape'\nimport { TLLineShape } from '../shapes/TLLineShape'\nimport { TLNoteShape } from '../shapes/TLNoteShape'\nimport { TLTextShape } from '../shapes/TLTextShape'\nimport { TLVideoShape } from '../shapes/TLVideoShape'\nimport { StyleProp } from '../styles/StyleProp'\nimport { TLPageId } from './TLPage'\n\n/**\n * The default set of shapes that are available in the editor.\n *\n * @public */\nexport type TLDefaultShape =\n\t| TLArrowShape\n\t| TLBookmarkShape\n\t| TLDrawShape\n\t| TLEmbedShape\n\t| TLFrameShape\n\t| TLGeoShape\n\t| TLGroupShape\n\t| TLImageShape\n\t| TLLineShape\n\t| TLNoteShape\n\t| TLTextShape\n\t| TLVideoShape\n\t| TLHighlightShape\n\n/**\n * A type for a shape that is available in the editor but whose type is\n * unknownâ€”either one of the editor's default shapes or else a custom shape.\n *\n * @public */\nexport type TLUnknownShape = TLBaseShape<string, object>\n\n/**\n * The set of all shapes that are available in the editor, including unknown shapes.\n *\n * @public\n */\nexport type TLShape = TLDefaultShape | TLUnknownShape\n\n/** @public */\nexport type TLShapePartial<T extends TLShape = TLShape> = T extends T\n\t? {\n\t\t\tid: TLShapeId\n\t\t\ttype: T['type']\n\t\t\tprops?: Partial<T['props']>\n\t  } & Partial<Omit<T, 'type' | 'id' | 'props'>>\n\t: never\n\n/** @public */\nexport type TLShapeId = RecordId<TLUnknownShape>\n\n// evil type shit that will get deleted in the next PR\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void\n\t? I\n\t: never\n\ntype Identity<T> = { [K in keyof T]: T[K] }\n\n/** @public */\nexport type TLShapeProps = Identity<UnionToIntersection<TLDefaultShape['props']>>\n\n/** @public */\nexport type TLShapeProp = keyof TLShapeProps\n\n/** @public */\nexport type TLParentId = TLPageId | TLShapeId\n\nexport const Versions = {\n\tAddIsLocked: 1,\n\tHoistOpacity: 2,\n} as const\n\n/** @internal */\nexport const rootShapeMigrations = defineMigrations({\n\tcurrentVersion: Versions.HoistOpacity,\n\tmigrators: {\n\t\t[Versions.AddIsLocked]: {\n\t\t\tup: (record) => {\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tisLocked: false,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: (record) => {\n\t\t\t\tconst { isLocked: _, ...rest } = record\n\t\t\t\treturn {\n\t\t\t\t\t...rest,\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t[Versions.HoistOpacity]: {\n\t\t\tup: ({ props: { opacity, ...props }, ...record }) => {\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\topacity: Number(opacity ?? '1'),\n\t\t\t\t\tprops,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: ({ opacity, ...record }) => {\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...record.props,\n\t\t\t\t\t\topacity:\n\t\t\t\t\t\t\topacity < 0.175\n\t\t\t\t\t\t\t\t? '0.1'\n\t\t\t\t\t\t\t\t: opacity < 0.375\n\t\t\t\t\t\t\t\t? '0.25'\n\t\t\t\t\t\t\t\t: opacity < 0.625\n\t\t\t\t\t\t\t\t? '0.5'\n\t\t\t\t\t\t\t\t: opacity < 0.875\n\t\t\t\t\t\t\t\t? '0.75'\n\t\t\t\t\t\t\t\t: '1',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\n\n/** @public */\nexport function isShape(record?: UnknownRecord): record is TLShape {\n\tif (!record) return false\n\treturn record.typeName === 'shape'\n}\n\n/** @public */\nexport function isShapeId(id?: string): id is TLShapeId {\n\tif (!id) return false\n\treturn id.startsWith('shape:')\n}\n\n/** @public */\nexport function createShapeId(id?: string): TLShapeId {\n\treturn `shape:${id ?? nanoid()}` as TLShapeId\n}\n\n/** @internal */\nexport function getShapePropKeysByStyle(props: Record<string, T.Validatable<any>>) {\n\tconst propKeysByStyle = new Map<StyleProp<unknown>, string>()\n\tfor (const [key, prop] of Object.entries(props)) {\n\t\tif (prop instanceof StyleProp) {\n\t\t\tif (propKeysByStyle.has(prop)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Duplicate style prop ${prop.id}. Each style prop can only be used once within a shape.`\n\t\t\t\t)\n\t\t\t}\n\t\t\tpropKeysByStyle.set(prop, key)\n\t\t}\n\t}\n\treturn propKeysByStyle\n}\n\n/** @internal */\nexport function createShapeRecordType(shapes: Record<string, SchemaShapeInfo>) {\n\treturn createRecordType<TLShape>('shape', {\n\t\tmigrations: defineMigrations({\n\t\t\tcurrentVersion: rootShapeMigrations.currentVersion,\n\t\t\tfirstVersion: rootShapeMigrations.firstVersion,\n\t\t\tmigrators: rootShapeMigrations.migrators,\n\t\t\tsubTypeKey: 'type',\n\t\t\tsubTypeMigrations: mapObjectMapValues(shapes, (k, v) => v.migrations ?? defineMigrations({})),\n\t\t}),\n\t\tscope: 'document',\n\t\tvalidator: T.model(\n\t\t\t'shape',\n\t\t\tT.union(\n\t\t\t\t'type',\n\t\t\t\tmapObjectMapValues(shapes, (type, { props }) => createShapeValidator(type, props))\n\t\t\t)\n\t\t),\n\t}).withDefaultProperties(() => ({\n\t\tx: 0,\n\t\ty: 0,\n\t\trotation: 0,\n\t\tisLocked: false,\n\t\topacity: 1,\n\t}))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}