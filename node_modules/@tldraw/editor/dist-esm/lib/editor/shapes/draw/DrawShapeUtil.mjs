import { jsx, jsxs } from "react/jsx-runtime";
import {
  Box2d,
  getStrokeOutlinePoints,
  getStrokePoints,
  linesIntersect,
  pointInPolygon,
  setStrokePointRadii,
  toFixed,
  Vec2d
} from "@tldraw/primitives";
import { last, rng } from "@tldraw/utils";
import { SVGContainer } from "../../../components/SVGContainer.mjs";
import { getSvgPathFromStroke, getSvgPathFromStrokePoints } from "../../../utils/svg.mjs";
import { ShapeUtil } from "../ShapeUtil.mjs";
import { STROKE_SIZES } from "../shared/default-shape-constants.mjs";
import { getShapeFillSvg, ShapeFill } from "../shared/ShapeFill.mjs";
import { useForceSolid } from "../shared/useForceSolid.mjs";
import { getDrawShapeStrokeDashArray, getFreehandOptions, getPointsFromSegments } from "./getPath.mjs";
class DrawShapeUtil extends ShapeUtil {
  static type = "draw";
  hideResizeHandles = (shape) => getIsDot(shape);
  hideRotateHandle = (shape) => getIsDot(shape);
  hideSelectionBoundsBg = (shape) => getIsDot(shape);
  hideSelectionBoundsFg = (shape) => getIsDot(shape);
  defaultProps() {
    return {
      segments: [],
      color: "black",
      fill: "none",
      dash: "draw",
      size: "m",
      isComplete: false,
      isClosed: false,
      isPen: false
    };
  }
  isClosed = (shape) => shape.props.isClosed;
  getBounds(shape) {
    return Box2d.FromPoints(this.outline(shape));
  }
  getOutline(shape) {
    return getPointsFromSegments(shape.props.segments);
  }
  getCenter(shape) {
    return this.bounds(shape).center;
  }
  hitTestPoint(shape, point) {
    const outline = this.outline(shape);
    const zoomLevel = this.editor.zoomLevel;
    const offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel;
    if (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {
      if (shape.props.segments[0].points.some((pt) => Vec2d.Dist(point, pt) < offsetDist * 1.5)) {
        return true;
      }
    }
    if (this.isClosed(shape)) {
      return pointInPolygon(point, outline);
    }
    if (this.bounds(shape).containsPoint(point)) {
      for (let i = 0; i < outline.length; i++) {
        const C = outline[i];
        const D = outline[(i + 1) % outline.length];
        if (Vec2d.DistanceToLineSegment(C, D, point) < offsetDist)
          return true;
      }
    }
    return false;
  }
  hitTestLineSegment(shape, A, B) {
    const outline = this.outline(shape);
    if (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {
      const zoomLevel = this.editor.zoomLevel;
      const offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel;
      if (shape.props.segments[0].points.some(
        (pt) => Vec2d.DistanceToLineSegment(A, B, pt) < offsetDist * 1.5
      )) {
        return true;
      }
    }
    if (this.isClosed(shape)) {
      for (let i = 0; i < outline.length; i++) {
        const C = outline[i];
        const D = outline[(i + 1) % outline.length];
        if (linesIntersect(A, B, C, D))
          return true;
      }
    } else {
      for (let i = 0; i < outline.length - 1; i++) {
        const C = outline[i];
        const D = outline[i + 1];
        if (linesIntersect(A, B, C, D))
          return true;
      }
    }
    return false;
  }
  component(shape) {
    const forceSolid = useForceSolid();
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid);
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    if (!forceSolid && shape.props.dash === "draw" || strokePoints.length < 2) {
      setStrokePointRadii(strokePoints, options);
      const strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options);
      return /* @__PURE__ */ jsxs(SVGContainer, { id: shape.id, children: [
        /* @__PURE__ */ jsx(
          ShapeFill,
          {
            fill: shape.props.isClosed ? shape.props.fill : "none",
            color: shape.props.color,
            d: solidStrokePath
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: getSvgPathFromStroke(strokeOutlinePoints, true),
            strokeLinecap: "round",
            fill: `var(--palette-${shape.props.color})`
          }
        )
      ] });
    }
    return /* @__PURE__ */ jsxs(SVGContainer, { id: shape.id, children: [
      /* @__PURE__ */ jsx(
        ShapeFill,
        {
          color: shape.props.color,
          fill: shape.props.isClosed ? shape.props.fill : "none",
          d: solidStrokePath
        }
      ),
      /* @__PURE__ */ jsx(
        "path",
        {
          d: solidStrokePath,
          strokeLinecap: "round",
          fill: "none",
          stroke: `var(--palette-${shape.props.color})`,
          strokeWidth,
          strokeDasharray: getDrawShapeStrokeDashArray(shape, strokeWidth),
          strokeDashoffset: "0"
        }
      )
    ] });
  }
  indicator(shape) {
    const forceSolid = useForceSolid();
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
    const options = getFreehandOptions(shape.props, sw, showAsComplete, true);
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    return /* @__PURE__ */ jsx("path", { d: solidStrokePath });
  }
  toSvg(shape, _font, colors) {
    const { color } = shape.props;
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
    let sw = strokeWidth;
    if (!shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const options = getFreehandOptions(shape.props, sw, showAsComplete, false);
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    let foregroundPath;
    if (shape.props.dash === "draw" || strokePoints.length < 2) {
      setStrokePointRadii(strokePoints, options);
      const strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options);
      const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
      p.setAttribute("d", getSvgPathFromStroke(strokeOutlinePoints, true));
      p.setAttribute("fill", colors.fill[color]);
      p.setAttribute("stroke-linecap", "round");
      foregroundPath = p;
    } else {
      const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
      p.setAttribute("d", solidStrokePath);
      p.setAttribute("stroke", colors.fill[color]);
      p.setAttribute("fill", "none");
      p.setAttribute("stroke-linecap", "round");
      p.setAttribute("stroke-width", strokeWidth.toString());
      p.setAttribute("stroke-dasharray", getDrawShapeStrokeDashArray(shape, strokeWidth));
      p.setAttribute("stroke-dashoffset", "0");
      foregroundPath = p;
    }
    const fillPath = getShapeFillSvg({
      fill: shape.props.isClosed ? shape.props.fill : "none",
      d: solidStrokePath,
      color: shape.props.color,
      colors
    });
    if (fillPath) {
      const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g.appendChild(fillPath);
      g.appendChild(foregroundPath);
      return g;
    }
    return foregroundPath;
  }
  onResize = (shape, info) => {
    const { scaleX, scaleY } = info;
    const newSegments = [];
    for (const segment of shape.props.segments) {
      newSegments.push({
        ...segment,
        points: segment.points.map(({ x, y, z }) => {
          return {
            x: toFixed(scaleX * x),
            y: toFixed(scaleY * y),
            z
          };
        })
      });
    }
    return {
      props: {
        segments: newSegments
      }
    };
  };
  expandSelectionOutlinePx(shape) {
    const multiplier = shape.props.dash === "draw" ? 1.6 : 1;
    return STROKE_SIZES[shape.props.size] * multiplier / 2;
  }
}
function getDot(point, sw) {
  const r = (sw + 1) * 0.5;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getIsDot(shape) {
  return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
}
export {
  DrawShapeUtil
};
//# sourceMappingURL=DrawShapeUtil.mjs.map
