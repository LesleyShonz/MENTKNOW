{
  "version": 3,
  "sources": ["../../../src/lib/components/SelectionBg.tsx"],
  "sourcesContent": ["import { Matrix2d, toDomPrecision } from '@tldraw/primitives'\nimport * as React from 'react'\nimport { track } from 'signia-react'\nimport { TLPointerEventInfo } from '../editor/types/event-types'\nimport { useEditor } from '../hooks/useEditor'\nimport { releasePointerCapture, setPointerCapture } from '../utils/dom'\nimport { getPointerInfo } from '../utils/svg'\n\nexport const SelectionBg = track(function SelectionBg() {\n\tconst editor = useEditor()\n\n\tconst events = React.useMemo(() => {\n\t\tconst onPointerDown = (e: React.PointerEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\n\t\t\tsetPointerCapture(e.currentTarget, e)\n\n\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\ttype: 'pointer',\n\t\t\t\ttarget: 'selection',\n\t\t\t\tname: 'pointer_down',\n\t\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tconst onPointerMove = (e: React.PointerEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\n\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\ttype: 'pointer',\n\t\t\t\ttarget: 'selection',\n\t\t\t\tname: 'pointer_move',\n\t\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tconst onPointerUp = (e: React.PointerEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\n\t\t\treleasePointerCapture(e.currentTarget, e)\n\n\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\ttype: 'pointer',\n\t\t\t\ttarget: 'selection',\n\t\t\t\tname: 'pointer_up',\n\t\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tconst onPointerEnter = (e: React.PointerEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\n\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\ttype: 'pointer',\n\t\t\t\ttarget: 'selection',\n\t\t\t\tname: 'pointer_enter',\n\t\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tconst onPointerLeave = (e: React.PointerEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\n\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\ttype: 'pointer',\n\t\t\t\ttarget: 'selection',\n\t\t\t\tname: 'pointer_leave',\n\t\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\treturn {\n\t\t\tonPointerDown,\n\t\t\tonPointerMove,\n\t\t\tonPointerUp,\n\t\t\tonPointerEnter,\n\t\t\tonPointerLeave,\n\t\t}\n\t}, [editor])\n\n\tconst { selectionBounds: bounds, selectedIds } = editor\n\tif (!bounds) return null\n\n\tconst shouldDisplay = editor.isInAny(\n\t\t'select.idle',\n\t\t'select.brushing',\n\t\t'select.scribble_brushing',\n\t\t'select.pointing_shape',\n\t\t'select.pointing_selection',\n\t\t'text.resizing'\n\t)\n\n\tif (selectedIds.length === 1) {\n\t\tconst shape = editor.getShapeById(selectedIds[0])\n\t\tif (!shape) {\n\t\t\treturn null\n\t\t}\n\t\tconst util = editor.getShapeUtil(shape)\n\t\tif (util.hideSelectionBoundsBg(shape)) {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tconst transform = Matrix2d.toCssString(\n\t\tMatrix2d.Compose(\n\t\t\tMatrix2d.Translate(bounds.minX, bounds.minY),\n\t\t\tMatrix2d.Rotate(editor.selectionRotation)\n\t\t)\n\t)\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"tl-selection__bg\"\n\t\t\tdraggable={false}\n\t\t\tstyle={{\n\t\t\t\ttransform,\n\t\t\t\twidth: toDomPrecision(Math.max(1, bounds.width)),\n\t\t\t\theight: toDomPrecision(Math.max(1, bounds.height)),\n\t\t\t\tpointerEvents: shouldDisplay ? 'all' : 'none',\n\t\t\t\topacity: shouldDisplay ? 1 : 0,\n\t\t\t}}\n\t\t\t{...events}\n\t\t/>\n\t)\n})\n"],
  "mappings": "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",
  "names": ["SelectionBg"]
}
