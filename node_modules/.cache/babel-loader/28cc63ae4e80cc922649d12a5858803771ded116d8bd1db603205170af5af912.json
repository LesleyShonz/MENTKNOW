{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"typeName\", \"id\"];\nimport { isRecord } from \"./BaseRecord.mjs\";\nfunction defineMigrations(opts) {\n  var currentVersion = opts.currentVersion,\n    firstVersion = opts.firstVersion,\n    _opts$migrators = opts.migrators,\n    migrators = _opts$migrators === void 0 ? {} : _opts$migrators,\n    subTypeKey = opts.subTypeKey,\n    subTypeMigrations = opts.subTypeMigrations;\n  if (typeof currentVersion === \"number\" && typeof firstVersion === \"number\") {\n    if (currentVersion === firstVersion) {\n      throw Error(\"Current version is equal to initial version.\");\n    } else if (currentVersion < firstVersion) {\n      throw Error(\"Current version is lower than initial version.\");\n    }\n  }\n  return {\n    firstVersion: firstVersion !== null && firstVersion !== void 0 ? firstVersion : 0,\n    // defaults\n    currentVersion: currentVersion !== null && currentVersion !== void 0 ? currentVersion : 0,\n    // defaults\n    migrators: migrators,\n    subTypeKey: subTypeKey,\n    subTypeMigrations: subTypeMigrations\n  };\n}\nvar MigrationFailureReason = /* @__PURE__ */function (MigrationFailureReason2) {\n  MigrationFailureReason2[\"IncompatibleSubtype\"] = \"incompatible-subtype\";\n  MigrationFailureReason2[\"UnknownType\"] = \"unknown-type\";\n  MigrationFailureReason2[\"TargetVersionTooNew\"] = \"target-version-too-new\";\n  MigrationFailureReason2[\"TargetVersionTooOld\"] = \"target-version-too-old\";\n  MigrationFailureReason2[\"MigrationError\"] = \"migration-error\";\n  MigrationFailureReason2[\"UnrecognizedSubtype\"] = \"unrecognized-subtype\";\n  return MigrationFailureReason2;\n}(MigrationFailureReason || {});\nfunction getRecordVersion(record, serializedSchema) {\n  var persistedType = serializedSchema.recordVersions[record.typeName];\n  if (!persistedType) {\n    return {\n      rootVersion: 0\n    };\n  }\n  if (\"subTypeKey\" in persistedType) {\n    var subType = record[persistedType.subTypeKey];\n    var subTypeVersion = persistedType.subTypeVersions[subType];\n    return {\n      rootVersion: persistedType.version,\n      subTypeVersion: subTypeVersion\n    };\n  }\n  return {\n    rootVersion: persistedType.version\n  };\n}\nfunction compareRecordVersions(a, b) {\n  if (a.rootVersion > b.rootVersion) {\n    return 1;\n  }\n  if (a.rootVersion < b.rootVersion) {\n    return -1;\n  }\n  if (a.subTypeVersion != null && b.subTypeVersion != null) {\n    if (a.subTypeVersion > b.subTypeVersion) {\n      return 1;\n    }\n    if (a.subTypeVersion < b.subTypeVersion) {\n      return -1;\n    }\n  }\n  return 0;\n}\nfunction migrateRecord(_ref) {\n  var record = _ref.record,\n    migrations = _ref.migrations,\n    fromVersion = _ref.fromVersion,\n    toVersion = _ref.toVersion;\n  var currentVersion = fromVersion;\n  if (!isRecord(record)) throw new Error(\"[migrateRecord] object is not a record\");\n  var typeName = record.typeName,\n    id = record.id,\n    others = _objectWithoutProperties(record, _excluded);\n  var recordWithoutMeta = others;\n  while (currentVersion < toVersion) {\n    var nextVersion = currentVersion + 1;\n    var migrator = migrations.migrators[nextVersion];\n    if (!migrator) {\n      return {\n        type: \"error\",\n        reason: \"target-version-too-new\" /* TargetVersionTooNew */\n      };\n    }\n\n    recordWithoutMeta = migrator.up(recordWithoutMeta);\n    currentVersion = nextVersion;\n  }\n  while (currentVersion > toVersion) {\n    var _nextVersion = currentVersion - 1;\n    var _migrator = migrations.migrators[currentVersion];\n    if (!_migrator) {\n      return {\n        type: \"error\",\n        reason: \"target-version-too-old\" /* TargetVersionTooOld */\n      };\n    }\n\n    recordWithoutMeta = _migrator.down(recordWithoutMeta);\n    currentVersion = _nextVersion;\n  }\n  return {\n    type: \"success\",\n    value: _objectSpread(_objectSpread({}, recordWithoutMeta), {}, {\n      id: id,\n      typeName: typeName\n    })\n  };\n}\nfunction migrate(_ref2) {\n  var value = _ref2.value,\n    migrations = _ref2.migrations,\n    fromVersion = _ref2.fromVersion,\n    toVersion = _ref2.toVersion;\n  var currentVersion = fromVersion;\n  while (currentVersion < toVersion) {\n    var nextVersion = currentVersion + 1;\n    var migrator = migrations.migrators[nextVersion];\n    if (!migrator) {\n      return {\n        type: \"error\",\n        reason: \"target-version-too-new\" /* TargetVersionTooNew */\n      };\n    }\n\n    value = migrator.up(value);\n    currentVersion = nextVersion;\n  }\n  while (currentVersion > toVersion) {\n    var _nextVersion2 = currentVersion - 1;\n    var _migrator2 = migrations.migrators[currentVersion];\n    if (!_migrator2) {\n      return {\n        type: \"error\",\n        reason: \"target-version-too-old\" /* TargetVersionTooOld */\n      };\n    }\n\n    value = _migrator2.down(value);\n    currentVersion = _nextVersion2;\n  }\n  return {\n    type: \"success\",\n    value: value\n  };\n}\nexport { MigrationFailureReason, compareRecordVersions, defineMigrations, getRecordVersion, migrate, migrateRecord };","map":{"version":3,"names":["isRecord","defineMigrations","opts","currentVersion","firstVersion","_opts$migrators","migrators","subTypeKey","subTypeMigrations","Error","MigrationFailureReason","MigrationFailureReason2","getRecordVersion","record","serializedSchema","persistedType","recordVersions","typeName","rootVersion","subType","subTypeVersion","subTypeVersions","version","compareRecordVersions","a","b","migrateRecord","_ref","migrations","fromVersion","toVersion","id","others","_objectWithoutProperties","_excluded","recordWithoutMeta","nextVersion","migrator","type","reason","up","down","value","_objectSpread","migrate","_ref2"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/store/src/lib/migrate.ts"],"sourcesContent":["import { UnknownRecord, isRecord } from './BaseRecord'\nimport { SerializedSchema } from './StoreSchema'\n\ntype EMPTY_SYMBOL = symbol\n\n/** @public */\nexport function defineMigrations<\n\tFirstVersion extends number | EMPTY_SYMBOL = EMPTY_SYMBOL,\n\tCurrentVersion extends Exclude<number, 0> | EMPTY_SYMBOL = EMPTY_SYMBOL\n>(opts: {\n\tfirstVersion?: CurrentVersion extends number ? FirstVersion : never\n\tcurrentVersion?: CurrentVersion\n\tmigrators?: CurrentVersion extends number\n\t\t? FirstVersion extends number\n\t\t\t? CurrentVersion extends FirstVersion\n\t\t\t\t? { [version in Exclude<Range<1, CurrentVersion>, 0>]: Migration }\n\t\t\t\t: { [version in Exclude<Range<FirstVersion, CurrentVersion>, FirstVersion>]: Migration }\n\t\t\t: { [version in Exclude<Range<1, CurrentVersion>, 0>]: Migration }\n\t\t: never\n\tsubTypeKey?: string\n\tsubTypeMigrations?: Record<string, BaseMigrationsInfo>\n}): Migrations {\n\tconst { currentVersion, firstVersion, migrators = {}, subTypeKey, subTypeMigrations } = opts\n\n\t// Some basic guards against impossible version combinations, some of which will be caught by TypeScript\n\tif (typeof currentVersion === 'number' && typeof firstVersion === 'number') {\n\t\tif ((currentVersion as number) === (firstVersion as number)) {\n\t\t\tthrow Error(`Current version is equal to initial version.`)\n\t\t} else if (currentVersion < firstVersion) {\n\t\t\tthrow Error(`Current version is lower than initial version.`)\n\t\t}\n\t}\n\n\treturn {\n\t\tfirstVersion: (firstVersion as number) ?? 0, // defaults\n\t\tcurrentVersion: (currentVersion as number) ?? 0, // defaults\n\t\tmigrators,\n\t\tsubTypeKey,\n\t\tsubTypeMigrations,\n\t}\n}\n\n/** @public */\nexport type Migration<Before = any, After = any> = {\n\tup: (oldState: Before) => After\n\tdown: (newState: After) => Before\n}\n\ninterface BaseMigrationsInfo {\n\tfirstVersion: number\n\tcurrentVersion: number\n\tmigrators: { [version: number]: Migration }\n}\n\n/** @public */\nexport interface Migrations extends BaseMigrationsInfo {\n\tsubTypeKey?: string\n\tsubTypeMigrations?: Record<string, BaseMigrationsInfo>\n}\n\n/** @public */\nexport type MigrationResult<T> =\n\t| { type: 'success'; value: T }\n\t| { type: 'error'; reason: MigrationFailureReason }\n\n/** @public */\nexport enum MigrationFailureReason {\n\tIncompatibleSubtype = 'incompatible-subtype',\n\tUnknownType = 'unknown-type',\n\tTargetVersionTooNew = 'target-version-too-new',\n\tTargetVersionTooOld = 'target-version-too-old',\n\tMigrationError = 'migration-error',\n\tUnrecognizedSubtype = 'unrecognized-subtype',\n}\n\n/** @public */\nexport type RecordVersion = { rootVersion: number; subTypeVersion?: number }\n/** @public */\nexport function getRecordVersion(\n\trecord: UnknownRecord,\n\tserializedSchema: SerializedSchema\n): RecordVersion {\n\tconst persistedType = serializedSchema.recordVersions[record.typeName]\n\tif (!persistedType) {\n\t\treturn { rootVersion: 0 }\n\t}\n\tif ('subTypeKey' in persistedType) {\n\t\tconst subType = record[persistedType.subTypeKey as keyof typeof record]\n\t\tconst subTypeVersion = persistedType.subTypeVersions[subType]\n\t\treturn { rootVersion: persistedType.version, subTypeVersion }\n\t}\n\treturn { rootVersion: persistedType.version }\n}\n\n/** @public */\nexport function compareRecordVersions(a: RecordVersion, b: RecordVersion) {\n\tif (a.rootVersion > b.rootVersion) {\n\t\treturn 1\n\t}\n\tif (a.rootVersion < b.rootVersion) {\n\t\treturn -1\n\t}\n\tif (a.subTypeVersion != null && b.subTypeVersion != null) {\n\t\tif (a.subTypeVersion > b.subTypeVersion) {\n\t\t\treturn 1\n\t\t}\n\t\tif (a.subTypeVersion < b.subTypeVersion) {\n\t\t\treturn -1\n\t\t}\n\t}\n\treturn 0\n}\n\n/** @public */\nexport function migrateRecord<R extends UnknownRecord>({\n\trecord,\n\tmigrations,\n\tfromVersion,\n\ttoVersion,\n}: {\n\trecord: unknown\n\tmigrations: Migrations\n\tfromVersion: number\n\ttoVersion: number\n}): MigrationResult<R> {\n\tlet currentVersion = fromVersion\n\tif (!isRecord(record)) throw new Error('[migrateRecord] object is not a record')\n\tconst { typeName, id, ...others } = record\n\tlet recordWithoutMeta = others\n\n\twhile (currentVersion < toVersion) {\n\t\tconst nextVersion = currentVersion + 1\n\t\tconst migrator = migrations.migrators[nextVersion]\n\t\tif (!migrator) {\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\treason: MigrationFailureReason.TargetVersionTooNew,\n\t\t\t}\n\t\t}\n\t\trecordWithoutMeta = migrator.up(recordWithoutMeta) as any\n\t\tcurrentVersion = nextVersion\n\t}\n\n\twhile (currentVersion > toVersion) {\n\t\tconst nextVersion = currentVersion - 1\n\t\tconst migrator = migrations.migrators[currentVersion]\n\t\tif (!migrator) {\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\treason: MigrationFailureReason.TargetVersionTooOld,\n\t\t\t}\n\t\t}\n\t\trecordWithoutMeta = migrator.down(recordWithoutMeta) as any\n\t\tcurrentVersion = nextVersion\n\t}\n\n\treturn {\n\t\ttype: 'success',\n\t\tvalue: { ...recordWithoutMeta, id, typeName } as any,\n\t}\n}\n\n/** @public */\nexport function migrate<T>({\n\tvalue,\n\tmigrations,\n\tfromVersion,\n\ttoVersion,\n}: {\n\tvalue: unknown\n\tmigrations: Migrations\n\tfromVersion: number\n\ttoVersion: number\n}): MigrationResult<T> {\n\tlet currentVersion = fromVersion\n\n\twhile (currentVersion < toVersion) {\n\t\tconst nextVersion = currentVersion + 1\n\t\tconst migrator = migrations.migrators[nextVersion]\n\t\tif (!migrator) {\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\treason: MigrationFailureReason.TargetVersionTooNew,\n\t\t\t}\n\t\t}\n\t\tvalue = migrator.up(value)\n\t\tcurrentVersion = nextVersion\n\t}\n\n\twhile (currentVersion > toVersion) {\n\t\tconst nextVersion = currentVersion - 1\n\t\tconst migrator = migrations.migrators[currentVersion]\n\t\tif (!migrator) {\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\treason: MigrationFailureReason.TargetVersionTooOld,\n\t\t\t}\n\t\t}\n\t\tvalue = migrator.down(value)\n\t\tcurrentVersion = nextVersion\n\t}\n\n\treturn {\n\t\ttype: 'success',\n\t\tvalue: value as T,\n\t}\n}\n\ntype Range<From extends number, To extends number> = To extends From\n\t? From\n\t: To | Range<From, Decrement<To>>\n\ntype Decrement<n extends number> = n extends 0\n\t? never\n\t: n extends 1\n\t? 0\n\t: n extends 2\n\t? 1\n\t: n extends 3\n\t? 2\n\t: n extends 4\n\t? 3\n\t: n extends 5\n\t? 4\n\t: n extends 6\n\t? 5\n\t: n extends 7\n\t? 6\n\t: n extends 8\n\t? 7\n\t: n extends 9\n\t? 8\n\t: n extends 10\n\t? 9\n\t: n extends 11\n\t? 10\n\t: n extends 12\n\t? 11\n\t: n extends 13\n\t? 12\n\t: n extends 14\n\t? 13\n\t: n extends 15\n\t? 14\n\t: n extends 16\n\t? 15\n\t: n extends 17\n\t? 16\n\t: n extends 18\n\t? 17\n\t: n extends 19\n\t? 18\n\t: n extends 20\n\t? 19\n\t: n extends 21\n\t? 20\n\t: n extends 22\n\t? 21\n\t: n extends 23\n\t? 22\n\t: n extends 24\n\t? 23\n\t: n extends 25\n\t? 24\n\t: n extends 26\n\t? 25\n\t: n extends 27\n\t? 26\n\t: n extends 28\n\t? 27\n\t: n extends 29\n\t? 28\n\t: n extends 30\n\t? 29\n\t: n extends 31\n\t? 30\n\t: n extends 32\n\t? 31\n\t: n extends 33\n\t? 32\n\t: n extends 34\n\t? 33\n\t: n extends 35\n\t? 34\n\t: n extends 36\n\t? 35\n\t: n extends 37\n\t? 36\n\t: n extends 38\n\t? 37\n\t: n extends 39\n\t? 38\n\t: n extends 40\n\t? 39\n\t: n extends 41\n\t? 40\n\t: n extends 42\n\t? 41\n\t: n extends 43\n\t? 42\n\t: n extends 44\n\t? 43\n\t: n extends 45\n\t? 44\n\t: n extends 46\n\t? 45\n\t: n extends 47\n\t? 46\n\t: n extends 48\n\t? 47\n\t: n extends 49\n\t? 48\n\t: n extends 50\n\t? 49\n\t: n extends 51\n\t? 50\n\t: never\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}