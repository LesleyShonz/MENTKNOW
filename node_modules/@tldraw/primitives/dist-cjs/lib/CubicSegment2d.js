"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CubicSegment2d_exports = {};
__export(CubicSegment2d_exports, {
  CubicSegment2d: () => CubicSegment2d
});
module.exports = __toCommonJS(CubicSegment2d_exports);
var import_BaseSegment2d = require("./BaseSegment2d");
var import_Vec2d = require("./Vec2d");
class CubicSegment2d extends import_BaseSegment2d.BaseSegment2d {
  constructor(a, b, c, d, p = 25) {
    super({ a, b, c, d, p });
  }
  [Symbol.iterator] = function* () {
    const { a, b, c, d } = this.values;
    yield* [a, b, c, d];
  };
  getPath(head = true) {
    const { a, b, c, d } = this.values;
    if (import_Vec2d.Vec2d.Equals(a, d))
      return "";
    return `${head ? `M${a.x.toFixed(2)},${a.y.toFixed(2)}C` : ``}${b.x.toFixed(2)},${b.y.toFixed(
      2
    )} ${c.x.toFixed(2)},${c.y.toFixed(2)} ${d.x.toFixed(2)},${d.y.toFixed(2)}`;
  }
  getPoint(t) {
    const { a, b, c, d } = this.values;
    if (t <= 0)
      return import_Vec2d.Vec2d.From(a);
    if (t >= 1)
      return import_Vec2d.Vec2d.From(d);
    return new import_Vec2d.Vec2d(
      (1 - t) * (1 - t) * (1 - t) * a.x + 3 * ((1 - t) * (1 - t)) * t * b.x + 3 * (1 - t) * (t * t) * c.x + t * t * t * d.x,
      (1 - t) * (1 - t) * (1 - t) * a.y + 3 * ((1 - t) * (1 - t)) * t * b.y + 3 * (1 - t) * (t * t) * c.y + t * t * t * d.y
    );
  }
  getX(t) {
    const { a, b, c, d } = this.values;
    return (1 - t) * (1 - t) * (1 - t) * a.x + 3 * ((1 - t) * (1 - t)) * t * b.x + 3 * (1 - t) * (t * t) * c.x + t * t * t * d.x;
  }
  getY(t) {
    const { a, b, c, d } = this.values;
    return (1 - t) * (1 - t) * (1 - t) * a.y + 3 * ((1 - t) * (1 - t)) * t * b.y + 3 * (1 - t) * (t * t) * c.y + t * t * t * d.y;
  }
}
//# sourceMappingURL=CubicSegment2d.js.map
