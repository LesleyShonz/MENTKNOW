"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLinePath_exports = {};
__export(getLinePath_exports, {
  getLineDrawFreehandOptions: () => getLineDrawFreehandOptions,
  getLineDrawPath: () => getLineDrawPath,
  getLineDrawStrokeOutlinePoints: () => getLineDrawStrokeOutlinePoints,
  getLineIndicatorPath: () => getLineIndicatorPath,
  getLinePoints: () => getLinePoints,
  getLineSolidFreehandOptions: () => getLineSolidFreehandOptions,
  getLineSolidPath: () => getLineSolidPath,
  getLineSolidStrokeOutlinePoints: () => getLineSolidStrokeOutlinePoints,
  getLineStrokePoints: () => getLineStrokePoints
});
module.exports = __toCommonJS(getLinePath_exports);
var import_primitives = require("@tldraw/primitives");
var import_svg = require("../../../../utils/svg");
function getLinePoints(spline) {
  const { segments } = spline;
  const allPoints = [];
  for (let j = 0, k = segments.length; j < k; j++) {
    const segment = segments[j];
    const lut = segment.lut;
    const n = lut.length - 1;
    if (j > 0) {
      allPoints.push(import_primitives.Vec2d.Lrp(lut[0], lut[1], 0.25));
    } else {
      allPoints.push(lut[0]);
    }
    for (let i = 1; i < n; i++) {
      allPoints.push(lut[i]);
    }
    if (j < k - 1) {
      allPoints.push(import_primitives.Vec2d.Lrp(lut[n - 1], lut[n], 0.75));
    } else {
      allPoints.push(lut[n]);
    }
  }
  return allPoints;
}
function getLineDrawFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0.4,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: true,
    last: true
  };
}
function getLineSolidFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: false,
    last: true
  };
}
function getLineStrokePoints(shape, spline, strokeWidth) {
  const points = getLinePoints(spline);
  const options = getLineDrawFreehandOptions(strokeWidth);
  return (0, import_primitives.getStrokePoints)(points, options);
}
function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineDrawFreehandOptions(strokeWidth);
  return (0, import_primitives.getStrokeOutlinePoints)(
    (0, import_primitives.setStrokePointRadii)(getLineStrokePoints(shape, spline, strokeWidth), options),
    options
  );
}
function getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineSolidFreehandOptions(strokeWidth);
  return (0, import_primitives.getStrokeOutlinePoints)(getLineStrokePoints(shape, spline, strokeWidth), options);
}
function getLineDrawPath(shape, spline, strokeWidth) {
  const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
  return (0, import_svg.getSvgPathFromStroke)(stroke);
}
function getLineSolidPath(shape, spline, strokeWidth) {
  const outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth);
  return (0, import_svg.getSvgPathFromStroke)(outlinePoints);
}
function getLineIndicatorPath(shape, spline, strokeWidth) {
  if (shape.props.dash === "draw") {
    const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
    return (0, import_svg.getSvgPathFromStrokePoints)(strokePoints);
  }
  return spline.path;
}
//# sourceMappingURL=getLinePath.js.map
