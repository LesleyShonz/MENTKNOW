import { isShapeId } from "@tldraw/tlschema";
import { StateNode } from "../../StateNode.mjs";
class PointingCanvas extends StateNode {
  static id = "pointing_canvas";
  onEnter = () => {
    const { inputs } = this.editor;
    if (!inputs.shiftKey) {
      if (this.editor.selectedIds.length > 0) {
        this.editor.mark("selecting none");
        this.editor.selectNone();
      }
    }
  };
  _clickWasInsideFocusedGroup() {
    const { focusLayerId, inputs } = this.editor;
    if (!isShapeId(focusLayerId)) {
      return false;
    }
    const groupShape = this.editor.getShapeById(focusLayerId);
    if (!groupShape) {
      return false;
    }
    const clickPoint = this.editor.getPointInShapeSpace(groupShape, inputs.currentPagePoint);
    const util = this.editor.getShapeUtil(groupShape);
    return util.hitTestPoint(groupShape, clickPoint);
  }
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("brushing", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.parent.transition("idle", {});
  };
  complete() {
    const { shiftKey } = this.editor.inputs;
    if (!shiftKey) {
      this.editor.selectNone();
      if (!this._clickWasInsideFocusedGroup()) {
        this.editor.setFocusLayer(null);
      }
    }
    this.parent.transition("idle", {});
  }
}
export {
  PointingCanvas
};
//# sourceMappingURL=PointingCanvas.mjs.map
