{"ast":null,"code":"import { deepCopy } from \"@tldraw/utils\";\nfunction getTranslateCroppedImageChange(editor, shape, delta) {\n  if (!shape) {\n    throw Error(\"Needs to translate a cropped shape!\");\n  }\n  var oldCrop = shape.props.crop;\n  if (!oldCrop) {\n    return;\n  }\n  var flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? \"x\" : \"y\" : null;\n  if (flatten === \"x\") {\n    delta.x = 0;\n  } else if (flatten === \"y\") {\n    delta.y = 0;\n  }\n  delta.rot(-shape.rotation);\n  var w = 1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x) * shape.props.w;\n  var h = 1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y) * shape.props.h;\n  var yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y;\n  var xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x;\n  var newCrop = deepCopy(oldCrop);\n  newCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w));\n  newCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h));\n  newCrop.bottomRight.x = newCrop.topLeft.x + xCrop;\n  newCrop.bottomRight.y = newCrop.topLeft.y + yCrop;\n  var partial = {\n    id: shape.id,\n    type: shape.type,\n    props: {\n      crop: newCrop\n    }\n  };\n  return partial;\n}\nexport { getTranslateCroppedImageChange };","map":{"version":3,"names":["deepCopy","getTranslateCroppedImageChange","editor","shape","delta","Error","oldCrop","props","crop","flatten","inputs","shiftKey","Math","abs","x","y","rot","rotation","w","bottomRight","topLeft","h","yCrop","xCrop","newCrop","min","max","partial","id","type"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/Crop/children/crop_helpers.ts"],"sourcesContent":["import { Vec2d } from '@tldraw/primitives'\nimport { TLBaseShape, TLImageShapeCrop, TLShapePartial } from '@tldraw/tlschema'\nimport { deepCopy } from '@tldraw/utils'\nimport { Editor } from '../../../../../Editor'\n\nexport type ShapeWithCrop = TLBaseShape<string, { w: number; h: number; crop: TLImageShapeCrop }>\n\nexport function getTranslateCroppedImageChange(\n\teditor: Editor,\n\tshape: TLBaseShape<string, { w: number; h: number; crop: TLImageShapeCrop }>,\n\tdelta: Vec2d\n) {\n\tif (!shape) {\n\t\tthrow Error('Needs to translate a cropped shape!')\n\t}\n\n\tconst { crop: oldCrop } = shape.props\n\tif (!oldCrop) {\n\t\t// can't translate a shape that doesn't have an existing crop\n\t\treturn\n\t}\n\n\tconst flatten: 'x' | 'y' | null = editor.inputs.shiftKey\n\t\t? Math.abs(delta.x) < Math.abs(delta.y)\n\t\t\t? 'x'\n\t\t\t: 'y'\n\t\t: null\n\n\tif (flatten === 'x') {\n\t\tdelta.x = 0\n\t} else if (flatten === 'y') {\n\t\tdelta.y = 0\n\t}\n\n\tdelta.rot(-shape.rotation)\n\n\t// original (uncropped) width and height of shape\n\tconst w = (1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x)) * shape.props.w\n\tconst h = (1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y)) * shape.props.h\n\n\tconst yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y\n\tconst xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x\n\tconst newCrop = deepCopy(oldCrop)\n\n\tnewCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w))\n\tnewCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h))\n\n\tnewCrop.bottomRight.x = newCrop.topLeft.x + xCrop\n\tnewCrop.bottomRight.y = newCrop.topLeft.y + yCrop\n\n\tconst partial: TLShapePartial<typeof shape> = {\n\t\tid: shape.id,\n\t\ttype: shape.type,\n\t\tprops: {\n\t\t\tcrop: newCrop,\n\t\t},\n\t}\n\n\treturn partial\n}\n"],"mappings":"AAEA,SAASA,QAAA,QAAgB;AAKlB,SAASC,+BACfC,MAAA,EACAC,KAAA,EACAC,KAAA,EACC;EACD,IAAI,CAACD,KAAA,EAAO;IACX,MAAME,KAAA,CAAM,qCAAqC;EAClD;EAEA,IAAcC,OAAA,GAAYH,KAAA,CAAMI,KAAA,CAAxBC,IAAA;EACR,IAAI,CAACF,OAAA,EAAS;IAEb;EACD;EAEA,IAAMG,OAAA,GAA4BP,MAAA,CAAOQ,MAAA,CAAOC,QAAA,GAC7CC,IAAA,CAAKC,GAAA,CAAIT,KAAA,CAAMU,CAAC,IAAIF,IAAA,CAAKC,GAAA,CAAIT,KAAA,CAAMW,CAAC,IACnC,MACA,MACD;EAEH,IAAIN,OAAA,KAAY,KAAK;IACpBL,KAAA,CAAMU,CAAA,GAAI;EACX,WAAWL,OAAA,KAAY,KAAK;IAC3BL,KAAA,CAAMW,CAAA,GAAI;EACX;EAEAX,KAAA,CAAMY,GAAA,CAAI,CAACb,KAAA,CAAMc,QAAQ;EAGzB,IAAMC,CAAA,GAAK,KAAKZ,OAAA,CAAQa,WAAA,CAAYL,CAAA,GAAIR,OAAA,CAAQc,OAAA,CAAQN,CAAA,IAAMX,KAAA,CAAMI,KAAA,CAAMW,CAAA;EAC1E,IAAMG,CAAA,GAAK,KAAKf,OAAA,CAAQa,WAAA,CAAYJ,CAAA,GAAIT,OAAA,CAAQc,OAAA,CAAQL,CAAA,IAAMZ,KAAA,CAAMI,KAAA,CAAMc,CAAA;EAE1E,IAAMC,KAAA,GAAQhB,OAAA,CAAQa,WAAA,CAAYJ,CAAA,GAAIT,OAAA,CAAQc,OAAA,CAAQL,CAAA;EACtD,IAAMQ,KAAA,GAAQjB,OAAA,CAAQa,WAAA,CAAYL,CAAA,GAAIR,OAAA,CAAQc,OAAA,CAAQN,CAAA;EACtD,IAAMU,OAAA,GAAUxB,QAAA,CAASM,OAAO;EAEhCkB,OAAA,CAAQJ,OAAA,CAAQN,CAAA,GAAIF,IAAA,CAAKa,GAAA,CAAI,IAAIF,KAAA,EAAOX,IAAA,CAAKc,GAAA,CAAI,GAAGF,OAAA,CAAQJ,OAAA,CAAQN,CAAA,GAAIV,KAAA,CAAMU,CAAA,GAAII,CAAC,CAAC;EACpFM,OAAA,CAAQJ,OAAA,CAAQL,CAAA,GAAIH,IAAA,CAAKa,GAAA,CAAI,IAAIH,KAAA,EAAOV,IAAA,CAAKc,GAAA,CAAI,GAAGF,OAAA,CAAQJ,OAAA,CAAQL,CAAA,GAAIX,KAAA,CAAMW,CAAA,GAAIM,CAAC,CAAC;EAEpFG,OAAA,CAAQL,WAAA,CAAYL,CAAA,GAAIU,OAAA,CAAQJ,OAAA,CAAQN,CAAA,GAAIS,KAAA;EAC5CC,OAAA,CAAQL,WAAA,CAAYJ,CAAA,GAAIS,OAAA,CAAQJ,OAAA,CAAQL,CAAA,GAAIO,KAAA;EAE5C,IAAMK,OAAA,GAAwC;IAC7CC,EAAA,EAAIzB,KAAA,CAAMyB,EAAA;IACVC,IAAA,EAAM1B,KAAA,CAAM0B,IAAA;IACZtB,KAAA,EAAO;MACNC,IAAA,EAAMgB;IACP;EACD;EAEA,OAAOG,OAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}