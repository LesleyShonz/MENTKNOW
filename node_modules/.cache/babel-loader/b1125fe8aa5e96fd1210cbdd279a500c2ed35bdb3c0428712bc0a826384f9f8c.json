{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"store\", \"components\"],\n  _excluded2 = [\"store\", \"user\"];\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Store } from \"@tldraw/store\";\nimport { annotateError } from \"@tldraw/utils\";\nimport React, { memo, useCallback, useLayoutEffect, useMemo, useState, useSyncExternalStore } from \"react\";\nimport { useDefaultEditorAssetsWithOverrides } from \"./assetUrls.mjs\";\nimport { DefaultErrorFallback } from \"./components/DefaultErrorFallback.mjs\";\nimport { OptionalErrorBoundary } from \"./components/ErrorBoundary.mjs\";\nimport { createTLUser } from \"./config/createTLUser.mjs\";\nimport { Editor } from \"./editor/Editor.mjs\";\nimport { ContainerProvider, useContainer } from \"./hooks/useContainer.mjs\";\nimport { useCursor } from \"./hooks/useCursor.mjs\";\nimport { useDarkMode } from \"./hooks/useDarkMode.mjs\";\nimport { EditorContext } from \"./hooks/useEditor.mjs\";\nimport { EditorComponentsProvider, useEditorComponents } from \"./hooks/useEditorComponents.mjs\";\nimport { useEvent } from \"./hooks/useEvent.mjs\";\nimport { useForceUpdate } from \"./hooks/useForceUpdate.mjs\";\nimport { useLocalStore } from \"./hooks/useLocalStore.mjs\";\nimport { usePreloadAssets } from \"./hooks/usePreloadAssets.mjs\";\nimport { useSafariFocusOutFix } from \"./hooks/useSafariFocusOutFix.mjs\";\nimport { useZoomCss } from \"./hooks/useZoomCss.mjs\";\nvar EMPTY_SHAPES_ARRAY = [];\nvar EMPTY_TOOLS_ARRAY = [];\nvar TldrawEditor = memo(function TldrawEditor2(_ref) {\n  var _rest$shapes, _rest$tools;\n  var store = _ref.store,\n    components = _ref.components,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    container = _React$useState2[0],\n    setContainer = _React$useState2[1];\n  var user = useMemo(function () {\n    return createTLUser();\n  }, []);\n  var ErrorFallback = (components === null || components === void 0 ? void 0 : components.ErrorFallback) === void 0 ? DefaultErrorFallback : components === null || components === void 0 ? void 0 : components.ErrorFallback;\n  var withDefaults = _objectSpread(_objectSpread({}, rest), {}, {\n    shapes: (_rest$shapes = rest.shapes) !== null && _rest$shapes !== void 0 ? _rest$shapes : EMPTY_SHAPES_ARRAY,\n    tools: (_rest$tools = rest.tools) !== null && _rest$tools !== void 0 ? _rest$tools : EMPTY_TOOLS_ARRAY\n  });\n  return /* @__PURE__ */jsx(\"div\", {\n    ref: setContainer,\n    draggable: false,\n    className: \"tl-container tl-theme__light\",\n    tabIndex: 0,\n    children: /* @__PURE__ */jsx(OptionalErrorBoundary, {\n      fallback: ErrorFallback ? function (error) {\n        return /* @__PURE__ */jsx(ErrorFallback, {\n          error: error\n        });\n      } : null,\n      onError: function onError(error) {\n        return annotateError(error, {\n          tags: {\n            origin: \"react.tldraw-before-app\"\n          }\n        });\n      },\n      children: container && /* @__PURE__ */jsx(ContainerProvider, {\n        container: container,\n        children: /* @__PURE__ */jsx(EditorComponentsProvider, {\n          overrides: components,\n          children: store ? store instanceof Store ?\n          // Store is ready to go, whether externally synced or not\n          /* @__PURE__ */\n          jsx(TldrawEditorWithReadyStore, _objectSpread(_objectSpread({}, withDefaults), {}, {\n            store: store,\n            user: user\n          })) :\n          // Store is a synced store, so handle syncing stages internally\n          /* @__PURE__ */\n          jsx(TldrawEditorWithLoadingStore, _objectSpread(_objectSpread({}, withDefaults), {}, {\n            store: store,\n            user: user\n          })) :\n          // We have no store (it's undefined) so create one and possibly sync it\n          /* @__PURE__ */\n          jsx(TldrawEditorWithOwnStore, _objectSpread(_objectSpread({}, withDefaults), {}, {\n            store: store,\n            user: user\n          }))\n        })\n      })\n    })\n  });\n});\nfunction TldrawEditorWithOwnStore(props) {\n  var defaultName = props.defaultName,\n    initialData = props.initialData,\n    shapes = props.shapes,\n    persistenceKey = props.persistenceKey,\n    sessionId = props.sessionId,\n    user = props.user;\n  var syncedStore = useLocalStore({\n    shapes: shapes,\n    initialData: initialData,\n    persistenceKey: persistenceKey,\n    sessionId: sessionId,\n    defaultName: defaultName\n  });\n  return /* @__PURE__ */jsx(TldrawEditorWithLoadingStore, _objectSpread(_objectSpread({}, props), {}, {\n    store: syncedStore,\n    user: user\n  }));\n}\nvar TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading(_ref2) {\n  var store = _ref2.store,\n    user = _ref2.user,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  var container = useContainer();\n  useLayoutEffect(function () {\n    if (user.userPreferences.value.isDarkMode) {\n      container.classList.remove(\"tl-theme__light\");\n      container.classList.add(\"tl-theme__dark\");\n    }\n  }, [container, user.userPreferences.value.isDarkMode]);\n  switch (store.status) {\n    case \"error\":\n      {\n        throw store.error;\n      }\n    case \"loading\":\n      {\n        return /* @__PURE__ */jsx(LoadingScreen, {\n          children: \"Connecting...\"\n        });\n      }\n    case \"not-synced\":\n      {\n        break;\n      }\n    case \"synced-local\":\n      {\n        break;\n      }\n    case \"synced-remote\":\n      {\n        break;\n      }\n  }\n  return /* @__PURE__ */jsx(TldrawEditorWithReadyStore, _objectSpread(_objectSpread({}, rest), {}, {\n    store: store.store,\n    user: user\n  }));\n});\nfunction TldrawEditorWithReadyStore(_ref3) {\n  var onMount = _ref3.onMount,\n    children = _ref3.children,\n    store = _ref3.store,\n    tools = _ref3.tools,\n    shapes = _ref3.shapes,\n    autoFocus = _ref3.autoFocus,\n    user = _ref3.user,\n    assetUrls = _ref3.assetUrls;\n  var _useEditorComponents = useEditorComponents(),\n    ErrorFallback = _useEditorComponents.ErrorFallback;\n  var container = useContainer();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    editor = _useState2[0],\n    setEditor = _useState2[1];\n  useLayoutEffect(function () {\n    var editor2 = new Editor({\n      store: store,\n      shapes: shapes,\n      tools: tools,\n      getContainer: function getContainer() {\n        return container;\n      },\n      user: user\n    });\n    window.app = editor2;\n    window.editor = editor2;\n    setEditor(editor2);\n    return function () {\n      editor2.dispose();\n    };\n  }, [container, shapes, tools, store, user]);\n  React.useLayoutEffect(function () {\n    if (editor && autoFocus) editor.focus();\n  }, [editor, autoFocus]);\n  var onMountEvent = useEvent(function (editor2) {\n    var teardown = onMount === null || onMount === void 0 ? void 0 : onMount(editor2);\n    editor2.emit(\"mount\");\n    window.tldrawReady = true;\n    return teardown;\n  });\n  React.useLayoutEffect(function () {\n    if (editor) return onMountEvent === null || onMountEvent === void 0 ? void 0 : onMountEvent(editor);\n  }, [editor, onMountEvent]);\n  var crashingError = useSyncExternalStore(useCallback(function (onStoreChange) {\n    if (editor) {\n      editor.on(\"crash\", onStoreChange);\n      return function () {\n        return editor.off(\"crash\", onStoreChange);\n      };\n    }\n    return function () {};\n  }, [editor]), function () {\n    var _editor$crashingError;\n    return (_editor$crashingError = editor === null || editor === void 0 ? void 0 : editor.crashingError) !== null && _editor$crashingError !== void 0 ? _editor$crashingError : null;\n  });\n  var assets = useDefaultEditorAssetsWithOverrides(assetUrls);\n  var _usePreloadAssets = usePreloadAssets(assets),\n    preloadingComplete = _usePreloadAssets.done,\n    preloadingError = _usePreloadAssets.error;\n  if (preloadingError) {\n    return /* @__PURE__ */jsx(ErrorScreen, {\n      children: \"Could not load assets. Please refresh the page.\"\n    });\n  }\n  if (!preloadingComplete) {\n    return /* @__PURE__ */jsx(LoadingScreen, {\n      children: \"Loading assets...\"\n    });\n  }\n  if (!editor) {\n    return null;\n  }\n  return (\n    // the top-level tldraw component also renders an error boundary almost\n    // identical to this one. the reason we have two is because this one has\n    // access to `App`, which means that here we can enrich errors with data\n    // from app for reporting, and also still attempt to render the user's\n    // document in the event of an error to reassure them that their work is\n    // not lost.\n    /* @__PURE__ */\n    jsx(OptionalErrorBoundary, {\n      fallback: ErrorFallback ? function (error) {\n        return /* @__PURE__ */jsx(ErrorFallback, {\n          error: error,\n          editor: editor\n        });\n      } : null,\n      onError: function onError(error) {\n        return editor.annotateError(error, {\n          origin: \"react.tldraw\",\n          willCrashApp: true\n        });\n      },\n      children: crashingError ? /* @__PURE__ */jsx(Crash, {\n        crashingError: crashingError\n      }) : /* @__PURE__ */jsx(EditorContext.Provider, {\n        value: editor,\n        children: /* @__PURE__ */jsx(Layout, {\n          children: children\n        })\n      })\n    })\n  );\n}\nfunction Layout(_ref4) {\n  var children = _ref4.children;\n  useZoomCss();\n  useCursor();\n  useDarkMode();\n  useSafariFocusOutFix();\n  useForceUpdate();\n  return children;\n}\nfunction Crash(_ref5) {\n  var crashingError = _ref5.crashingError;\n  throw crashingError;\n}\nfunction LoadingScreen(_ref6) {\n  var children = _ref6.children;\n  var _useEditorComponents2 = useEditorComponents(),\n    Spinner = _useEditorComponents2.Spinner;\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: \"tl-loading\",\n    children: [Spinner ? /* @__PURE__ */jsx(Spinner, {}) : null, children]\n  });\n}\nfunction ErrorScreen(_ref7) {\n  var children = _ref7.children;\n  return /* @__PURE__ */jsx(\"div\", {\n    className: \"tl-loading\",\n    children: children\n  });\n}\nexport { ErrorScreen, LoadingScreen, TldrawEditor };","map":{"version":3,"names":["jsx","jsxs","Store","annotateError","React","memo","useCallback","useLayoutEffect","useMemo","useState","useSyncExternalStore","useDefaultEditorAssetsWithOverrides","DefaultErrorFallback","OptionalErrorBoundary","createTLUser","Editor","ContainerProvider","useContainer","useCursor","useDarkMode","EditorContext","EditorComponentsProvider","useEditorComponents","useEvent","useForceUpdate","useLocalStore","usePreloadAssets","useSafariFocusOutFix","useZoomCss","EMPTY_SHAPES_ARRAY","EMPTY_TOOLS_ARRAY","TldrawEditor","TldrawEditor2","_ref","_rest$shapes","_rest$tools","store","components","rest","_objectWithoutProperties","_excluded","_React$useState","_React$useState2","_slicedToArray","container","setContainer","user","ErrorFallback","withDefaults","_objectSpread","shapes","tools","ref","draggable","className","tabIndex","children","fallback","error","onError","tags","origin","overrides","TldrawEditorWithReadyStore","TldrawEditorWithLoadingStore","TldrawEditorWithOwnStore","props","defaultName","initialData","persistenceKey","sessionId","syncedStore","TldrawEditorBeforeLoading","_ref2","_excluded2","userPreferences","value","isDarkMode","classList","remove","add","status","LoadingScreen","_ref3","onMount","autoFocus","assetUrls","_useEditorComponents","_useState","_useState2","editor","setEditor","editor2","getContainer","window","app","dispose","focus","onMountEvent","teardown","emit","tldrawReady","crashingError","onStoreChange","on","off","_editor$crashingError","assets","_usePreloadAssets","preloadingComplete","done","preloadingError","ErrorScreen","willCrashApp","Crash","Provider","Layout","_ref4","_ref5","_ref6","_useEditorComponents2","Spinner","_ref7"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/TldrawEditor.tsx"],"sourcesContent":["import { Store, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStore } from '@tldraw/tlschema'\nimport { RecursivePartial, Required, annotateError } from '@tldraw/utils'\nimport React, {\n\tmemo,\n\tuseCallback,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseState,\n\tuseSyncExternalStore,\n} from 'react'\nimport { TLEditorAssetUrls, useDefaultEditorAssetsWithOverrides } from './assetUrls'\nimport { DefaultErrorFallback } from './components/DefaultErrorFallback'\nimport { OptionalErrorBoundary } from './components/ErrorBoundary'\nimport { TLUser, createTLUser } from './config/createTLUser'\nimport { AnyTLShapeInfo } from './config/defineShape'\nimport { Editor } from './editor/Editor'\nimport { TLStateNodeConstructor } from './editor/tools/StateNode'\nimport { ContainerProvider, useContainer } from './hooks/useContainer'\nimport { useCursor } from './hooks/useCursor'\nimport { useDarkMode } from './hooks/useDarkMode'\nimport { EditorContext } from './hooks/useEditor'\nimport {\n\tEditorComponentsProvider,\n\tTLEditorComponents,\n\tuseEditorComponents,\n} from './hooks/useEditorComponents'\nimport { useEvent } from './hooks/useEvent'\nimport { useForceUpdate } from './hooks/useForceUpdate'\nimport { useLocalStore } from './hooks/useLocalStore'\nimport { usePreloadAssets } from './hooks/usePreloadAssets'\nimport { useSafariFocusOutFix } from './hooks/useSafariFocusOutFix'\nimport { useZoomCss } from './hooks/useZoomCss'\nimport { TLStoreWithStatus } from './utils/sync/StoreWithStatus'\n\n/** @public */\nexport type TldrawEditorProps = {\n\tchildren?: any\n\t/** An array of shape utils to use in the editor. */\n\tshapes?: readonly AnyTLShapeInfo[]\n\t/** An array of tools to use in the editor. */\n\ttools?: readonly TLStateNodeConstructor[]\n\t/** Urls for where to find fonts and other assets. */\n\tassetUrls?: RecursivePartial<TLEditorAssetUrls>\n\t/** Whether to automatically focus the editor when it mounts. */\n\tautoFocus?: boolean\n\t/** Overrides for the tldraw user interface components. */\n\tcomponents?: Partial<TLEditorComponents>\n\t/**\n\t * Called when the editor has mounted.\n\t * @example\n\t * ```ts\n\t * function TldrawEditor() {\n\t * \treturn <Editor onMount={(editor) => editor.selectAll()} />\n\t * }\n\t * ```\n\t * @param editor - The editor instance.\n\t */\n\tonMount?: (editor: Editor) => (() => void) | undefined | void\n} & (\n\t| {\n\t\t\t/**\n\t\t\t * The Store instance to use for keeping the editor's data. This may be prepopulated, e.g. by loading\n\t\t\t * from a server or database.\n\t\t\t */\n\t\t\tstore: TLStore | TLStoreWithStatus\n\t  }\n\t| {\n\t\t\tstore?: undefined\n\t\t\t/**\n\t\t\t * The editor's initial data.\n\t\t\t */\n\t\t\tinitialData?: StoreSnapshot<TLRecord>\n\t\t\t/**\n\t\t\t * The id under which to sync and persist the editor's data. If none is given tldraw will not sync or persist\n\t\t\t * the editor's data.\n\t\t\t */\n\t\t\tpersistenceKey?: string\n\t\t\t/**\n\t\t\t * When tldraw reloads a document from local persistence, it will try to bring back the\n\t\t\t * editor UI state (e.g. camera position, which shapes are selected). It does this using a sessionId,\n\t\t\t * which by default is unique per browser tab. If you wish to have more fine-grained\n\t\t\t * control over this behavior, you can provide your own sessionId.\n\t\t\t *\n\t\t\t * If it can't find saved UI state for the given sessionId, it will use the most recently saved\n\t\t\t * UI state for the given persistenceKey if available.\n\t\t\t */\n\t\t\tsessionId?: string\n\t\t\t/**\n\t\t\t * The default initial document name. e.g. 'Untitled Document'\n\t\t\t */\n\t\t\tdefaultName?: string\n\t  }\n)\n\ndeclare global {\n\tinterface Window {\n\t\ttldrawReady: boolean\n\t}\n}\n\nconst EMPTY_SHAPES_ARRAY = [] as const\nconst EMPTY_TOOLS_ARRAY = [] as const\n\n/** @public */\nexport const TldrawEditor = memo(function TldrawEditor({\n\tstore,\n\tcomponents,\n\t...rest\n}: TldrawEditorProps) {\n\tconst [container, setContainer] = React.useState<HTMLDivElement | null>(null)\n\tconst user = useMemo(() => createTLUser(), [])\n\n\tconst ErrorFallback =\n\t\tcomponents?.ErrorFallback === undefined ? DefaultErrorFallback : components?.ErrorFallback\n\n\t// apply defaults. if you're using the bare @tldraw/editor package, we\n\t// default these to the \"tldraw zero\" configuration. We have different\n\t// defaults applied in @tldraw/tldraw.\n\tconst withDefaults = {\n\t\t...rest,\n\t\tshapes: rest.shapes ?? EMPTY_SHAPES_ARRAY,\n\t\ttools: rest.tools ?? EMPTY_TOOLS_ARRAY,\n\t}\n\n\treturn (\n\t\t<div ref={setContainer} draggable={false} className=\"tl-container tl-theme__light\" tabIndex={0}>\n\t\t\t<OptionalErrorBoundary\n\t\t\t\tfallback={ErrorFallback ? (error) => <ErrorFallback error={error} /> : null}\n\t\t\t\tonError={(error) => annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })}\n\t\t\t>\n\t\t\t\t{container && (\n\t\t\t\t\t<ContainerProvider container={container}>\n\t\t\t\t\t\t<EditorComponentsProvider overrides={components}>\n\t\t\t\t\t\t\t{store ? (\n\t\t\t\t\t\t\t\tstore instanceof Store ? (\n\t\t\t\t\t\t\t\t\t// Store is ready to go, whether externally synced or not\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithReadyStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t// Store is a synced store, so handle syncing stages internally\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithLoadingStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t// We have no store (it's undefined) so create one and possibly sync it\n\t\t\t\t\t\t\t\t<TldrawEditorWithOwnStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</EditorComponentsProvider>\n\t\t\t\t\t</ContainerProvider>\n\t\t\t\t)}\n\t\t\t</OptionalErrorBoundary>\n\t\t</div>\n\t)\n})\n\nfunction TldrawEditorWithOwnStore(\n\tprops: Required<TldrawEditorProps & { store: undefined; user: TLUser }, 'shapes' | 'tools'>\n) {\n\tconst { defaultName, initialData, shapes, persistenceKey, sessionId, user } = props\n\n\tconst syncedStore = useLocalStore({\n\t\tshapes,\n\t\tinitialData,\n\t\tpersistenceKey,\n\t\tsessionId,\n\t\tdefaultName,\n\t})\n\n\treturn <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />\n}\n\nconst TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({\n\tstore,\n\tuser,\n\t...rest\n}: Required<TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser }, 'shapes' | 'tools'>) {\n\tconst container = useContainer()\n\n\tuseLayoutEffect(() => {\n\t\tif (user.userPreferences.value.isDarkMode) {\n\t\t\tcontainer.classList.remove('tl-theme__light')\n\t\t\tcontainer.classList.add('tl-theme__dark')\n\t\t}\n\t}, [container, user.userPreferences.value.isDarkMode])\n\n\tswitch (store.status) {\n\t\tcase 'error': {\n\t\t\t// for error handling, we fall back to the default error boundary.\n\t\t\t// if users want to handle this error differently, they can render\n\t\t\t// their own error screen before the TldrawEditor component\n\t\t\tthrow store.error\n\t\t}\n\t\tcase 'loading': {\n\t\t\treturn <LoadingScreen>Connecting...</LoadingScreen>\n\t\t}\n\t\tcase 'not-synced': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-local': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-remote': {\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />\n})\n\nfunction TldrawEditorWithReadyStore({\n\tonMount,\n\tchildren,\n\tstore,\n\ttools,\n\tshapes,\n\tautoFocus,\n\tuser,\n\tassetUrls,\n}: Required<\n\tTldrawEditorProps & {\n\t\tstore: TLStore\n\t\tuser: TLUser\n\t},\n\t'shapes' | 'tools'\n>) {\n\tconst { ErrorFallback } = useEditorComponents()\n\tconst container = useContainer()\n\tconst [editor, setEditor] = useState<Editor | null>(null)\n\n\tuseLayoutEffect(() => {\n\t\tconst editor = new Editor({\n\t\t\tstore,\n\t\t\tshapes,\n\t\t\ttools,\n\t\t\tgetContainer: () => container,\n\t\t\tuser,\n\t\t})\n\t\t;(window as any).app = editor\n\t\t;(window as any).editor = editor\n\t\tsetEditor(editor)\n\n\t\treturn () => {\n\t\t\teditor.dispose()\n\t\t}\n\t}, [container, shapes, tools, store, user])\n\n\tReact.useLayoutEffect(() => {\n\t\tif (editor && autoFocus) editor.focus()\n\t}, [editor, autoFocus])\n\n\tconst onMountEvent = useEvent((editor: Editor) => {\n\t\tconst teardown = onMount?.(editor)\n\t\teditor.emit('mount')\n\t\twindow.tldrawReady = true\n\t\treturn teardown\n\t})\n\n\tReact.useLayoutEffect(() => {\n\t\tif (editor) return onMountEvent?.(editor)\n\t}, [editor, onMountEvent])\n\n\tconst crashingError = useSyncExternalStore(\n\t\tuseCallback(\n\t\t\t(onStoreChange) => {\n\t\t\t\tif (editor) {\n\t\t\t\t\teditor.on('crash', onStoreChange)\n\t\t\t\t\treturn () => editor.off('crash', onStoreChange)\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t},\n\t\t\t[editor]\n\t\t),\n\t\t() => editor?.crashingError ?? null\n\t)\n\n\tconst assets = useDefaultEditorAssetsWithOverrides(assetUrls)\n\tconst { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets)\n\n\tif (preloadingError) {\n\t\treturn <ErrorScreen>Could not load assets. Please refresh the page.</ErrorScreen>\n\t}\n\n\tif (!preloadingComplete) {\n\t\treturn <LoadingScreen>Loading assets...</LoadingScreen>\n\t}\n\n\tif (!editor) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t// the top-level tldraw component also renders an error boundary almost\n\t\t// identical to this one. the reason we have two is because this one has\n\t\t// access to `App`, which means that here we can enrich errors with data\n\t\t// from app for reporting, and also still attempt to render the user's\n\t\t// document in the event of an error to reassure them that their work is\n\t\t// not lost.\n\t\t<OptionalErrorBoundary\n\t\t\tfallback={ErrorFallback ? (error) => <ErrorFallback error={error} editor={editor} /> : null}\n\t\t\tonError={(error) =>\n\t\t\t\teditor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })\n\t\t\t}\n\t\t>\n\t\t\t{crashingError ? (\n\t\t\t\t<Crash crashingError={crashingError} />\n\t\t\t) : (\n\t\t\t\t<EditorContext.Provider value={editor}>\n\t\t\t\t\t<Layout>{children}</Layout>\n\t\t\t\t</EditorContext.Provider>\n\t\t\t)}\n\t\t</OptionalErrorBoundary>\n\t)\n}\n\nfunction Layout({ children }: { children: any }) {\n\tuseZoomCss()\n\tuseCursor()\n\tuseDarkMode()\n\tuseSafariFocusOutFix()\n\tuseForceUpdate()\n\n\treturn children\n}\n\nfunction Crash({ crashingError }: { crashingError: unknown }): null {\n\tthrow crashingError\n}\n\n/** @public */\nexport function LoadingScreen({ children }: { children: any }) {\n\tconst { Spinner } = useEditorComponents()\n\n\treturn (\n\t\t<div className=\"tl-loading\">\n\t\t\t{Spinner ? <Spinner /> : null}\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\n/** @public */\nexport function ErrorScreen({ children }: { children: any }) {\n\treturn <div className=\"tl-loading\">{children}</div>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}