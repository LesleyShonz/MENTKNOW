{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from \"../../shared/ShapeFill.mjs\";\nvar SolidStylePolygon = React.memo(function SolidStylePolygon2(_ref) {\n  var outline = _ref.outline,\n    lines = _ref.lines,\n    fill = _ref.fill,\n    color = _ref.color,\n    strokeWidth = _ref.strokeWidth;\n  var path = \"M\" + outline[0] + \"L\" + outline.slice(1) + \"Z\";\n  if (lines) {\n    var _iterator = _createForOfIteratorHelper(lines),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          A = _step$value[0],\n          B = _step$value[1];\n        path += \"M\".concat(A.x, \",\").concat(A.y, \"L\").concat(B.x, \",\").concat(B.y);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ShapeFill, {\n      d: path,\n      fill: fill,\n      color: color\n    }), /* @__PURE__ */jsx(\"path\", {\n      d: path,\n      stroke: \"var(--palette-\".concat(color),\n      strokeWidth: strokeWidth,\n      fill: \"none\"\n    })]\n  });\n});\nfunction SolidStylePolygonSvg(_ref2) {\n  var outline = _ref2.outline,\n    lines = _ref2.lines,\n    fill = _ref2.fill,\n    color = _ref2.color,\n    strokeWidth = _ref2.strokeWidth,\n    colors = _ref2.colors;\n  var pathData = \"M\" + outline[0] + \"L\" + outline.slice(1) + \"Z\";\n  var fillPathData = pathData;\n  var strokePathData = pathData;\n  if (lines) {\n    var _iterator2 = _createForOfIteratorHelper(lines),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          A = _step2$value[0],\n          B = _step2$value[1];\n        strokePathData += \"M\".concat(A.x, \",\").concat(A.y, \"L\").concat(B.x, \",\").concat(B.y);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  var strokeElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  strokeElement.setAttribute(\"d\", strokePathData);\n  strokeElement.setAttribute(\"stroke-width\", strokeWidth.toString());\n  strokeElement.setAttribute(\"stroke\", colors.fill[color]);\n  strokeElement.setAttribute(\"fill\", \"none\");\n  var fillElement = getShapeFillSvg({\n    d: fillPathData,\n    fill: fill,\n    color: color,\n    colors: colors\n  });\n  return getSvgWithShapeFill(strokeElement, fillElement);\n}\nexport { SolidStylePolygon, SolidStylePolygonSvg };","map":{"version":3,"names":["Fragment","jsx","jsxs","React","ShapeFill","getShapeFillSvg","getSvgWithShapeFill","SolidStylePolygon","memo","SolidStylePolygon2","_ref","outline","lines","fill","color","strokeWidth","path","slice","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","value","A","B","concat","x","y","err","e","f","children","d","stroke","SolidStylePolygonSvg","_ref2","colors","pathData","fillPathData","strokePathData","_iterator2","_step2","_step2$value","strokeElement","document","createElementNS","setAttribute","toString","fillElement"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/geo/components/SolidStylePolygon.tsx"],"sourcesContent":["import { VecLike } from '@tldraw/primitives'\nimport { TLGeoShape } from '@tldraw/tlschema'\nimport * as React from 'react'\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\n\nexport const SolidStylePolygon = React.memo(function SolidStylePolygon({\n\toutline,\n\tlines,\n\tfill,\n\tcolor,\n\tstrokeWidth,\n}: Pick<TLGeoShape['props'], 'fill' | 'color'> & {\n\toutline: VecLike[]\n\tlines?: VecLike[][]\n\tstrokeWidth: number\n}) {\n\tlet path = 'M' + outline[0] + 'L' + outline.slice(1) + 'Z'\n\n\tif (lines) {\n\t\tfor (const [A, B] of lines) {\n\t\t\tpath += `M${A.x},${A.y}L${B.x},${B.y}`\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={path} fill={fill} color={color} />\n\t\t\t<path d={path} stroke={`var(--palette-${color}`} strokeWidth={strokeWidth} fill=\"none\" />\n\t\t</>\n\t)\n})\n\nexport function SolidStylePolygonSvg({\n\toutline,\n\tlines,\n\tfill,\n\tcolor,\n\tstrokeWidth,\n\tcolors,\n}: Pick<TLGeoShape['props'], 'fill' | 'color'> & {\n\toutline: VecLike[]\n\tstrokeWidth: number\n\tcolors: TLExportColors\n\tlines?: VecLike[][]\n}) {\n\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1) + 'Z'\n\n\tconst fillPathData = pathData\n\tlet strokePathData = pathData\n\n\tif (lines) {\n\t\tfor (const [A, B] of lines) {\n\t\t\tstrokePathData += `M${A.x},${A.y}L${B.x},${B.y}`\n\t\t}\n\t}\n\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', strokePathData)\n\tstrokeElement.setAttribute('stroke-width', strokeWidth.toString())\n\tstrokeElement.setAttribute('stroke', colors.fill[color])\n\tstrokeElement.setAttribute('fill', 'none')\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td: fillPathData,\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}