{"ast":null,"code":"import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Trigger } from \"@radix-ui/react-dropdown-menu\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { useTranslation } from \"../../hooks/useTranslation/useTranslation.mjs\";\nimport { Button } from \"../primitives/Button.mjs\";\nimport * as DropdownMenu from \"../primitives/DropdownMenu.mjs\";\nvar DropdownPicker = React.memo(function DropdownPicker2(_ref) {\n  var id = _ref.id,\n    label = _ref.label,\n    uiType = _ref.uiType,\n    style = _ref.style,\n    items = _ref.items,\n    value = _ref.value,\n    onValueChange = _ref.onValueChange;\n  var msg = useTranslation();\n  var icon = React.useMemo(function () {\n    var _items$find;\n    return (_items$find = items.find(function (item) {\n      return value.type === \"shared\" && item.value === value.value;\n    })) === null || _items$find === void 0 ? void 0 : _items$find.icon;\n  }, [items, value]);\n  return /* @__PURE__ */jsxs(DropdownMenu.Root, {\n    id: \"style panel \".concat(id),\n    children: [/* @__PURE__ */jsx(Trigger, {\n      asChild: true,\n      children: /* @__PURE__ */jsx(Button, {\n        \"data-testid\": \"style.\".concat(uiType),\n        title: value.type === \"mixed\" ? msg(\"style-panel.mixed\") : msg(\"\".concat(uiType, \"-style.\").concat(value.value)),\n        label: label,\n        icon: icon !== null && icon !== void 0 ? icon : \"mixed\"\n      })\n    }), /* @__PURE__ */jsx(DropdownMenu.Content, {\n      side: \"left\",\n      align: \"center\",\n      alignOffset: 0,\n      children: /* @__PURE__ */jsx(\"div\", {\n        className: classNames(\"tlui-button-grid\", {\n          \"tlui-button-grid__two\": items.length < 3,\n          \"tlui-button-grid__three\": items.length == 3,\n          \"tlui-button-grid__four\": items.length >= 4\n        }),\n        children: items.map(function (item) {\n          return /* @__PURE__ */jsx(DropdownMenu.Item, {\n            className: \"tlui-button-grid__button\",\n            \"data-testid\": \"style.\".concat(uiType, \".\").concat(item.value),\n            title: msg(\"\".concat(uiType, \"-style.\").concat(item.value)),\n            icon: item.icon,\n            onClick: function onClick() {\n              return onValueChange(style, item.value, false);\n            }\n          }, item.value);\n        })\n      })\n    })]\n  });\n});\nexport { DropdownPicker };","map":{"version":3,"names":["jsx","jsxs","Trigger","classNames","React","useTranslation","Button","DropdownMenu","DropdownPicker","memo","DropdownPicker2","_ref","id","label","uiType","style","items","value","onValueChange","msg","icon","useMemo","_items$find","find","item","type","Root","concat","children","asChild","title","Content","side","align","alignOffset","className","length","map","Item","onClick"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/StylePanel/DropdownPicker.tsx"],"sourcesContent":["import { Trigger } from '@radix-ui/react-dropdown-menu'\nimport { SharedStyle, StyleProp } from '@tldraw/editor'\nimport classNames from 'classnames'\nimport * as React from 'react'\nimport { TLUiTranslationKey } from '../../hooks/useTranslation/TLUiTranslationKey'\nimport { useTranslation } from '../../hooks/useTranslation/useTranslation'\nimport { TLUiIconType } from '../../icon-types'\nimport { Button } from '../primitives/Button'\nimport * as DropdownMenu from '../primitives/DropdownMenu'\nimport { StyleValuesForUi } from './styles'\n\ninterface DropdownPickerProps<T extends string> {\n\tid: string\n\tlabel?: TLUiTranslationKey\n\tuiType: string\n\tstyle: StyleProp<T>\n\tvalue: SharedStyle<T>\n\titems: StyleValuesForUi<T>\n\tonValueChange: (style: StyleProp<T>, value: T, squashing: boolean) => void\n}\n\nexport const DropdownPicker = React.memo(function DropdownPicker<T extends string>({\n\tid,\n\tlabel,\n\tuiType,\n\tstyle,\n\titems,\n\tvalue,\n\tonValueChange,\n}: DropdownPickerProps<T>) {\n\tconst msg = useTranslation()\n\n\tconst icon = React.useMemo(\n\t\t() => items.find((item) => value.type === 'shared' && item.value === value.value)?.icon,\n\t\t[items, value]\n\t)\n\n\treturn (\n\t\t<DropdownMenu.Root id={`style panel ${id}`}>\n\t\t\t<Trigger asChild>\n\t\t\t\t<Button\n\t\t\t\t\tdata-testid={`style.${uiType}`}\n\t\t\t\t\ttitle={\n\t\t\t\t\t\tvalue.type === 'mixed'\n\t\t\t\t\t\t\t? msg('style-panel.mixed')\n\t\t\t\t\t\t\t: msg(`${uiType}-style.${value.value}` as TLUiTranslationKey)\n\t\t\t\t\t}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\ticon={(icon as TLUiIconType) ?? 'mixed'}\n\t\t\t\t/>\n\t\t\t</Trigger>\n\t\t\t<DropdownMenu.Content side=\"left\" align=\"center\" alignOffset={0}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames('tlui-button-grid', {\n\t\t\t\t\t\t'tlui-button-grid__two': items.length < 3,\n\t\t\t\t\t\t'tlui-button-grid__three': items.length == 3,\n\t\t\t\t\t\t'tlui-button-grid__four': items.length >= 4,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{items.map((item) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<DropdownMenu.Item\n\t\t\t\t\t\t\t\tclassName=\"tlui-button-grid__button\"\n\t\t\t\t\t\t\t\tdata-testid={`style.${uiType}.${item.value}`}\n\t\t\t\t\t\t\t\ttitle={msg(`${uiType}-style.${item.value}` as TLUiTranslationKey)}\n\t\t\t\t\t\t\t\tkey={item.value}\n\t\t\t\t\t\t\t\ticon={item.icon as TLUiIconType}\n\t\t\t\t\t\t\t\tonClick={() => onValueChange(style, item.value, false)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</DropdownMenu.Content>\n\t\t</DropdownMenu.Root>\n\t)\n})\n"],"mappings":"AAsCE,SAEEA,GAAA,EAFFC,IAAA;AAtCF,SAASC,OAAA,QAAe;AAExB,OAAOC,UAAA,MAAgB;AACvB,YAAYC,KAAA,MAAW;AAEvB,SAASC,cAAA,QAAsB;AAE/B,SAASC,MAAA,QAAc;AACvB,YAAYC,YAAA,MAAkB;AAavB,IAAMC,cAAA,GAAiBJ,KAAA,CAAMK,IAAA,CAAK,SAASC,gBAAAC,IAAA,EAQvB;EAAA,IAP1BC,EAAA,GAAAD,IAAA,CAAAC,EAAA;IACAC,KAAA,GAAAF,IAAA,CAAAE,KAAA;IACAC,MAAA,GAAAH,IAAA,CAAAG,MAAA;IACAC,KAAA,GAAAJ,IAAA,CAAAI,KAAA;IACAC,KAAA,GAAAL,IAAA,CAAAK,KAAA;IACAC,KAAA,GAAAN,IAAA,CAAAM,KAAA;IACAC,aAAA,GAAAP,IAAA,CAAAO,aAAA;EAEA,IAAMC,GAAA,GAAMd,cAAA,CAAe;EAE3B,IAAMe,IAAA,GAAOhB,KAAA,CAAMiB,OAAA,CAClB;IAAA,IAAAC,WAAA;IAAA,QAAAA,WAAA,GAAMN,KAAA,CAAMO,IAAA,CAAK,UAACC,IAAA;MAAA,OAASP,KAAA,CAAMQ,IAAA,KAAS,YAAYD,IAAA,CAAKP,KAAA,KAAUA,KAAA,CAAMA,KAAK;IAAA,gBAAAK,WAAA,uBAA1EA,WAAA,CAA6EF,IAAA;EAAA,GACnF,CAACJ,KAAA,EAAOC,KAAK,CACd;EAEA,OACC,eAAAhB,IAAA,CAACM,YAAA,CAAamB,IAAA,EAAb;IAAkBd,EAAA,iBAAAe,MAAA,CAAmBf,EAAA;IACrCgB,QAAA,kBAAA5B,GAAA,CAACE,OAAA;MAAQ2B,OAAA,EAAO;MACfD,QAAA,iBAAA5B,GAAA,CAACM,MAAA;QACA,wBAAAqB,MAAA,CAAsBb,MAAA;QACtBgB,KAAA,EACCb,KAAA,CAAMQ,IAAA,KAAS,UACZN,GAAA,CAAI,mBAAmB,IACvBA,GAAA,IAAAQ,MAAA,CAAOb,MAAA,aAAAa,MAAA,CAAgBV,KAAA,CAAMA,KAAA,CAA6B;QAE9DJ,KAAA,EAAAA,KAAA;QACAO,IAAA,EAAOA,IAAA,aAAAA,IAAA,cAAAA,IAAA,GAAyB;MAAA,CACjC;IAAA,CACD,GACA,eAAApB,GAAA,CAACO,YAAA,CAAawB,OAAA,EAAb;MAAqBC,IAAA,EAAK;MAAOC,KAAA,EAAM;MAASC,WAAA,EAAa;MAC7DN,QAAA,iBAAA5B,GAAA,CAAC;QACAmC,SAAA,EAAWhC,UAAA,CAAW,oBAAoB;UACzC,yBAAyBa,KAAA,CAAMoB,MAAA,GAAS;UACxC,2BAA2BpB,KAAA,CAAMoB,MAAA,IAAU;UAC3C,0BAA0BpB,KAAA,CAAMoB,MAAA,IAAU;QAC3C,CAAC;QAEAR,QAAA,EAAAZ,KAAA,CAAMqB,GAAA,CAAI,UAACb,IAAA,EAAS;UACpB,OACC,eAAAxB,GAAA,CAACO,YAAA,CAAa+B,IAAA,EAAb;YACAH,SAAA,EAAU;YACV,wBAAAR,MAAA,CAAsBb,MAAA,OAAAa,MAAA,CAAUH,IAAA,CAAKP,KAAA;YACrCa,KAAA,EAAOX,GAAA,IAAAQ,MAAA,CAAOb,MAAA,aAAAa,MAAA,CAAgBH,IAAA,CAAKP,KAAA,CAA6B;YAEhEG,IAAA,EAAMI,IAAA,CAAKJ,IAAA;YACXmB,OAAA,EAAS,SAAAA,QAAA;cAAA,OAAMrB,aAAA,CAAcH,KAAA,EAAOS,IAAA,CAAKP,KAAA,EAAO,KAAK;YAAA;UAAA,GAFhDO,IAAA,CAAKP,KAGX;QAEF,CAAC;MAAA,CACF;IAAA,CACD;EAAA,CACD;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}