{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Matrix2d, Vec2d } from \"@tldraw/primitives\";\nimport { PageRecordType, isPageId } from \"@tldraw/tlschema\";\nimport { compact } from \"@tldraw/utils\";\nimport { DragAndDropManager } from \"../../../managers/DragAndDropManager.mjs\";\nimport { StateNode } from \"../../StateNode.mjs\";\nvar Translating = /*#__PURE__*/function (_StateNode) {\n  _inherits(Translating, _StateNode);\n  var _super = _createSuper(Translating);\n  function Translating() {\n    var _this;\n    _classCallCheck(this, Translating);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"info\", {});\n    _defineProperty(_assertThisInitialized(_this), \"selectionSnapshot\", {});\n    _defineProperty(_assertThisInitialized(_this), \"snapshot\", {});\n    _defineProperty(_assertThisInitialized(_this), \"markId\", \"\");\n    _defineProperty(_assertThisInitialized(_this), \"isCloning\", false);\n    _defineProperty(_assertThisInitialized(_this), \"isCreating\", false);\n    _defineProperty(_assertThisInitialized(_this), \"editAfterComplete\", false);\n    _defineProperty(_assertThisInitialized(_this), \"dragAndDropManager\", new DragAndDropManager(_this.editor));\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function (info) {\n      var _info$isCreating = info.isCreating,\n        isCreating = _info$isCreating === void 0 ? false : _info$isCreating,\n        _info$editAfterComple = info.editAfterComplete,\n        editAfterComplete = _info$editAfterComple === void 0 ? false : _info$editAfterComple;\n      _this.info = info;\n      _this.isCreating = isCreating;\n      _this.editAfterComplete = editAfterComplete;\n      _this.markId = isCreating ? \"creating\" : _this.editor.mark(\"translating\");\n      _this.handleEnter(info);\n      _this.editor.on(\"tick\", _this.updateParent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateParent\", function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n        snapshot = _assertThisInitialize.snapshot;\n      _this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, _this.updateParentTransforms);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onExit\", function () {\n      _this.editor.off(\"tick\", _this.updateParent);\n      _this.selectionSnapshot = {};\n      _this.snapshot = {};\n      _this.editor.snaps.clear();\n      _this.editor.setCursor({\n        type: \"default\"\n      });\n      _this.dragAndDropManager.clear();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function () {\n      _this.updateShapes();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function () {\n      if (_this.editor.inputs.altKey && !_this.isCloning) {\n        _this.startCloning();\n        return;\n      }\n      _this.updateShapes();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function () {\n      if (!_this.editor.inputs.altKey && _this.isCloning) {\n        _this.stopCloning();\n        return;\n      }\n      _this.updateShapes();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onComplete\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.cancel();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateParentTransforms\", function () {\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n        editor = _assertThisInitialize2.editor,\n        shapeSnapshots = _assertThisInitialize2.snapshot.shapeSnapshots;\n      var movingShapes = [];\n      shapeSnapshots.forEach(function (shapeSnapshot) {\n        var shape = editor.getShapeById(shapeSnapshot.shape.id);\n        if (!shape) return null;\n        movingShapes.push(shape);\n        var parentTransform = isPageId(shape.parentId) ? null : Matrix2d.Inverse(editor.getPageTransformById(shape.parentId));\n        shapeSnapshot.parentTransform = parentTransform;\n      });\n    });\n    return _this;\n  }\n  _createClass(Translating, [{\n    key: \"reset\",\n    value: function reset() {\n      this.editor.bailToMark(this.markId);\n    }\n  }, {\n    key: \"startCloning\",\n    value: function startCloning() {\n      if (this.isCreating) return;\n      this.isCloning = true;\n      this.reset();\n      this.markId = this.editor.mark(\"translating\");\n      this.editor.duplicateShapes();\n      this.snapshot = getTranslatingSnapshot(this.editor);\n      this.handleStart();\n      this.updateShapes();\n    }\n  }, {\n    key: \"stopCloning\",\n    value: function stopCloning() {\n      this.isCloning = false;\n      this.snapshot = this.selectionSnapshot;\n      this.reset();\n      this.markId = this.editor.mark(\"translating\");\n      this.updateShapes();\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.updateShapes();\n      this.dragAndDropManager.dropShapes(this.snapshot.movingShapes);\n      this.handleEnd();\n      if (this.editor.instanceState.isToolLocked && this.info.onInteractionEnd) {\n        this.editor.setSelectedTool(this.info.onInteractionEnd);\n      } else {\n        if (this.editAfterComplete) {\n          var onlySelected = this.editor.onlySelectedShape;\n          if (onlySelected) {\n            this.editor.setEditingId(onlySelected.id);\n            this.editor.setSelectedTool(\"select\");\n            this.editor.root.current.value.transition(\"editing_shape\", {});\n          }\n        } else {\n          this.parent.transition(\"idle\", {});\n        }\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.reset();\n      if (this.info.onInteractionEnd) {\n        this.editor.setSelectedTool(this.info.onInteractionEnd);\n      } else {\n        this.parent.transition(\"idle\", this.info);\n      }\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter(info) {\n      this.isCloning = false;\n      this.info = info;\n      this.editor.setCursor({\n        type: \"move\"\n      });\n      this.selectionSnapshot = getTranslatingSnapshot(this.editor);\n      if (!this.isCreating) {\n        if (this.editor.inputs.altKey) {\n          this.startCloning();\n          return;\n        }\n      }\n      this.snapshot = this.selectionSnapshot;\n      this.handleStart();\n      this.updateShapes();\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this2 = this;\n      var movingShapes = this.snapshot.movingShapes;\n      var changes = [];\n      movingShapes.forEach(function (shape) {\n        var _util$onTranslateStar;\n        var util = _this2.editor.getShapeUtil(shape);\n        var change = (_util$onTranslateStar = util.onTranslateStart) === null || _util$onTranslateStar === void 0 ? void 0 : _util$onTranslateStar.call(util, shape);\n        if (change) {\n          changes.push(change);\n        }\n      });\n      if (changes.length > 0) {\n        this.editor.updateShapes(changes);\n      }\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd() {\n      var _this3 = this;\n      var movingShapes = this.snapshot.movingShapes;\n      var changes = [];\n      movingShapes.forEach(function (shape) {\n        var _util$onTranslateEnd;\n        var current = _this3.editor.getShapeById(shape.id);\n        var util = _this3.editor.getShapeUtil(shape);\n        var change = (_util$onTranslateEnd = util.onTranslateEnd) === null || _util$onTranslateEnd === void 0 ? void 0 : _util$onTranslateEnd.call(util, shape, current);\n        if (change) {\n          changes.push(change);\n        }\n      });\n      if (changes.length > 0) {\n        this.editor.updateShapes(changes);\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange() {\n      var _this4 = this;\n      var movingShapes = this.snapshot.movingShapes;\n      var changes = [];\n      movingShapes.forEach(function (shape) {\n        var _util$onTranslate;\n        var current = _this4.editor.getShapeById(shape.id);\n        var util = _this4.editor.getShapeUtil(shape);\n        var change = (_util$onTranslate = util.onTranslate) === null || _util$onTranslate === void 0 ? void 0 : _util$onTranslate.call(util, shape, current);\n        if (change) {\n          changes.push(change);\n        }\n      });\n      if (changes.length > 0) {\n        this.editor.updateShapes(changes);\n      }\n    }\n  }, {\n    key: \"updateShapes\",\n    value: function updateShapes() {\n      var snapshot = this.snapshot;\n      this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);\n      moveShapesToPoint({\n        editor: this.editor,\n        shapeSnapshots: snapshot.shapeSnapshots,\n        averagePagePoint: snapshot.averagePagePoint,\n        initialSelectionPageBounds: snapshot.initialPageBounds,\n        initialSelectionSnapPoints: snapshot.initialSnapPoints\n      });\n      this.handleChange();\n    }\n  }]);\n  return Translating;\n}(StateNode);\n_defineProperty(Translating, \"id\", \"translating\");\nfunction getTranslatingSnapshot(editor) {\n  var movingShapes = [];\n  var pagePoints = [];\n  var shapeSnapshots = compact(editor.selectedIds.map(function (id) {\n    var shape = editor.getShapeById(id);\n    if (!shape) return null;\n    movingShapes.push(shape);\n    var pagePoint = editor.getPagePointById(id);\n    if (!pagePoint) return null;\n    pagePoints.push(pagePoint);\n    var parentTransform = PageRecordType.isId(shape.parentId) ? null : Matrix2d.Inverse(editor.getPageTransformById(shape.parentId));\n    return {\n      shape: shape,\n      pagePoint: pagePoint,\n      parentTransform: parentTransform\n    };\n  }));\n  return {\n    averagePagePoint: Vec2d.Average(pagePoints),\n    movingShapes: movingShapes,\n    shapeSnapshots: shapeSnapshots,\n    initialPageBounds: editor.selectedPageBounds,\n    initialSnapPoints: editor.selectedIds.length === 1 ? editor.snaps.snapPointsCache.get(editor.selectedIds[0]) : editor.selectedPageBounds ? editor.selectedPageBounds.snapPoints.map(function (p, i) {\n      return {\n        id: \"selection:\" + i,\n        x: p.x,\n        y: p.y\n      };\n    }) : []\n  };\n}\nfunction moveShapesToPoint(_ref) {\n  var editor = _ref.editor,\n    snapshots = _ref.shapeSnapshots,\n    averagePagePoint = _ref.averagePagePoint,\n    initialSelectionPageBounds = _ref.initialSelectionPageBounds,\n    initialSelectionSnapPoints = _ref.initialSelectionSnapPoints;\n  var inputs = editor.inputs,\n    isGridMode = editor.isGridMode,\n    gridSize = editor.gridSize;\n  var delta = Vec2d.Sub(inputs.currentPagePoint, inputs.originPagePoint);\n  var flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? \"x\" : \"y\" : null;\n  if (flatten === \"x\") {\n    delta.x = 0;\n  } else if (flatten === \"y\") {\n    delta.y = 0;\n  }\n  editor.snaps.clear();\n  var shouldSnap = (editor.isSnapMode ? !inputs.ctrlKey : inputs.ctrlKey) && editor.inputs.pointerVelocity.len() < 0.5;\n  if (shouldSnap) {\n    var _editor$snaps$snapTra = editor.snaps.snapTranslate({\n        dragDelta: delta,\n        initialSelectionPageBounds: initialSelectionPageBounds,\n        lockedAxis: flatten,\n        initialSelectionSnapPoints: initialSelectionSnapPoints\n      }),\n      nudge = _editor$snaps$snapTra.nudge;\n    delta.add(nudge);\n  }\n  var averageSnappedPoint = Vec2d.Add(averagePagePoint, delta);\n  if (isGridMode && !inputs.ctrlKey) {\n    averageSnappedPoint.snapToGrid(gridSize);\n  }\n  var averageSnap = Vec2d.Sub(averageSnappedPoint, averagePagePoint);\n  editor.updateShapes(compact(snapshots.map(function (_ref2) {\n    var shape = _ref2.shape,\n      pagePoint = _ref2.pagePoint,\n      parentTransform = _ref2.parentTransform;\n    var newPagePoint = Vec2d.Add(pagePoint, averageSnap);\n    var newLocalPoint = parentTransform ? Matrix2d.applyToPoint(parentTransform, newPagePoint) : newPagePoint;\n    return {\n      id: shape.id,\n      type: shape.type,\n      x: newLocalPoint.x,\n      y: newLocalPoint.y\n    };\n  })), true);\n}\nexport { Translating, moveShapesToPoint };","map":{"version":3,"names":["Matrix2d","Vec2d","PageRecordType","isPageId","compact","DragAndDropManager","StateNode","Translating","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","editor","info","_info$isCreating","isCreating","_info$editAfterComple","editAfterComplete","markId","mark","handleEnter","on","updateParent","_assertThisInitialize","snapshot","dragAndDropManager","updateDroppingNode","movingShapes","updateParentTransforms","off","selectionSnapshot","snaps","clear","setCursor","type","updateShapes","inputs","altKey","isCloning","startCloning","stopCloning","complete","cancel","_assertThisInitialize2","shapeSnapshots","forEach","shapeSnapshot","shape","getShapeById","id","push","parentTransform","parentId","Inverse","getPageTransformById","_createClass","key","value","reset","bailToMark","duplicateShapes","getTranslatingSnapshot","handleStart","dropShapes","handleEnd","instanceState","isToolLocked","onInteractionEnd","setSelectedTool","onlySelected","onlySelectedShape","setEditingId","root","current","transition","parent","_this2","changes","_util$onTranslateStar","util","getShapeUtil","change","onTranslateStart","_this3","_util$onTranslateEnd","onTranslateEnd","handleChange","_this4","_util$onTranslate","onTranslate","moveShapesToPoint","averagePagePoint","initialSelectionPageBounds","initialPageBounds","initialSelectionSnapPoints","initialSnapPoints","pagePoints","selectedIds","map","pagePoint","getPagePointById","isId","Average","selectedPageBounds","snapPointsCache","get","snapPoints","p","i","x","y","_ref","snapshots","isGridMode","gridSize","delta","Sub","currentPagePoint","originPagePoint","flatten","shiftKey","Math","abs","shouldSnap","isSnapMode","ctrlKey","pointerVelocity","len","_editor$snaps$snapTra","snapTranslate","dragDelta","lockedAxis","nudge","add","averageSnappedPoint","Add","snapToGrid","averageSnap","_ref2","newPagePoint","newLocalPoint","applyToPoint"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/Translating.ts"],"sourcesContent":["import { Box2d, Matrix2d, Matrix2dModel, Vec2d } from '@tldraw/primitives'\nimport { PageRecordType, TLShape, TLShapePartial, isPageId } from '@tldraw/tlschema'\nimport { compact } from '@tldraw/utils'\nimport type { Editor } from '../../../Editor'\nimport { DragAndDropManager } from '../../../managers/DragAndDropManager'\nimport { SnapPoint } from '../../../managers/SnapManager'\nimport { TLEventHandlers, TLPointerEventInfo } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\n\nexport class Translating extends StateNode {\n\tstatic override id = 'translating'\n\n\tinfo = {} as TLPointerEventInfo & {\n\t\ttarget: 'shape'\n\t\tisCreating?: boolean\n\t\teditAfterComplete?: boolean\n\t\tonInteractionEnd?: string\n\t}\n\n\tselectionSnapshot: TranslatingSnapshot = {} as any\n\n\tsnapshot: TranslatingSnapshot = {} as any\n\n\tmarkId = ''\n\n\tisCloning = false\n\tisCreating = false\n\teditAfterComplete = false\n\n\tdragAndDropManager = new DragAndDropManager(this.editor)\n\n\tonEnter = (\n\t\tinfo: TLPointerEventInfo & {\n\t\t\ttarget: 'shape'\n\t\t\tisCreating?: boolean\n\t\t\teditAfterComplete?: boolean\n\t\t\tonInteractionEnd?: string\n\t\t}\n\t) => {\n\t\tconst { isCreating = false, editAfterComplete = false } = info\n\n\t\tthis.info = info\n\t\tthis.isCreating = isCreating\n\t\tthis.editAfterComplete = editAfterComplete\n\n\t\tthis.markId = isCreating ? 'creating' : this.editor.mark('translating')\n\t\tthis.handleEnter(info)\n\t\tthis.editor.on('tick', this.updateParent)\n\t}\n\n\tupdateParent = () => {\n\t\tconst { snapshot } = this\n\t\tthis.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms)\n\t}\n\n\tonExit = () => {\n\t\tthis.editor.off('tick', this.updateParent)\n\t\tthis.selectionSnapshot = {} as any\n\t\tthis.snapshot = {} as any\n\t\tthis.editor.snaps.clear()\n\t\tthis.editor.setCursor({ type: 'default' })\n\t\tthis.dragAndDropManager.clear()\n\t}\n\n\tonPointerMove = () => {\n\t\tthis.updateShapes()\n\t}\n\n\tonKeyDown = () => {\n\t\tif (this.editor.inputs.altKey && !this.isCloning) {\n\t\t\tthis.startCloning()\n\t\t\treturn\n\t\t}\n\n\t\t// need to update in case user pressed a different modifier key\n\t\tthis.updateShapes()\n\t}\n\n\tonKeyUp: TLEventHandlers['onKeyUp'] = () => {\n\t\tif (!this.editor.inputs.altKey && this.isCloning) {\n\t\t\tthis.stopCloning()\n\t\t\treturn\n\t\t}\n\n\t\t// need to update in case user pressed a different modifier key\n\t\tthis.updateShapes()\n\t}\n\n\tonPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\tonComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\tonCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\treset() {\n\t\tthis.editor.bailToMark(this.markId)\n\t}\n\n\tprotected startCloning() {\n\t\tif (this.isCreating) return\n\n\t\tthis.isCloning = true\n\t\tthis.reset()\n\t\tthis.markId = this.editor.mark('translating')\n\n\t\tthis.editor.duplicateShapes()\n\n\t\tthis.snapshot = getTranslatingSnapshot(this.editor)\n\t\tthis.handleStart()\n\t\tthis.updateShapes()\n\t}\n\n\tprotected stopCloning() {\n\t\tthis.isCloning = false\n\t\tthis.snapshot = this.selectionSnapshot\n\t\tthis.reset()\n\t\tthis.markId = this.editor.mark('translating')\n\t\tthis.updateShapes()\n\t}\n\n\tprotected complete() {\n\t\tthis.updateShapes()\n\t\tthis.dragAndDropManager.dropShapes(this.snapshot.movingShapes)\n\t\tthis.handleEnd()\n\n\t\tif (this.editor.instanceState.isToolLocked && this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd)\n\t\t} else {\n\t\t\tif (this.editAfterComplete) {\n\t\t\t\tconst onlySelected = this.editor.onlySelectedShape\n\t\t\t\tif (onlySelected) {\n\t\t\t\t\tthis.editor.setEditingId(onlySelected.id)\n\t\t\t\t\tthis.editor.setSelectedTool('select')\n\t\t\t\t\tthis.editor.root.current.value!.transition('editing_shape', {})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.parent.transition('idle', {})\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate cancel() {\n\t\tthis.reset()\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd)\n\t\t} else {\n\t\t\tthis.parent.transition('idle', this.info)\n\t\t}\n\t}\n\n\tprotected handleEnter(info: TLPointerEventInfo & { target: 'shape' }) {\n\t\tthis.isCloning = false\n\t\tthis.info = info\n\n\t\tthis.editor.setCursor({ type: 'move' })\n\t\tthis.selectionSnapshot = getTranslatingSnapshot(this.editor)\n\n\t\t// Don't clone on create; otherwise clone on altKey\n\t\tif (!this.isCreating) {\n\t\t\tif (this.editor.inputs.altKey) {\n\t\t\t\tthis.startCloning()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tthis.snapshot = this.selectionSnapshot\n\t\tthis.handleStart()\n\t\tthis.updateShapes()\n\t}\n\n\tprotected handleStart() {\n\t\tconst { movingShapes } = this.snapshot\n\n\t\tconst changes: TLShapePartial[] = []\n\n\t\tmovingShapes.forEach((shape) => {\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst change = util.onTranslateStart?.(shape)\n\t\t\tif (change) {\n\t\t\t\tchanges.push(change)\n\t\t\t}\n\t\t})\n\n\t\tif (changes.length > 0) {\n\t\t\tthis.editor.updateShapes(changes)\n\t\t}\n\t}\n\n\tprotected handleEnd() {\n\t\tconst { movingShapes } = this.snapshot\n\n\t\tconst changes: TLShapePartial[] = []\n\n\t\tmovingShapes.forEach((shape) => {\n\t\t\tconst current = this.editor.getShapeById(shape.id)!\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst change = util.onTranslateEnd?.(shape, current)\n\t\t\tif (change) {\n\t\t\t\tchanges.push(change)\n\t\t\t}\n\t\t})\n\n\t\tif (changes.length > 0) {\n\t\t\tthis.editor.updateShapes(changes)\n\t\t}\n\t}\n\n\tprotected handleChange() {\n\t\tconst { movingShapes } = this.snapshot\n\n\t\tconst changes: TLShapePartial[] = []\n\n\t\tmovingShapes.forEach((shape) => {\n\t\t\tconst current = this.editor.getShapeById(shape.id)!\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst change = util.onTranslate?.(shape, current)\n\t\t\tif (change) {\n\t\t\t\tchanges.push(change)\n\t\t\t}\n\t\t})\n\n\t\tif (changes.length > 0) {\n\t\t\tthis.editor.updateShapes(changes)\n\t\t}\n\t}\n\n\tprotected updateShapes() {\n\t\tconst { snapshot } = this\n\t\tthis.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms)\n\n\t\tmoveShapesToPoint({\n\t\t\teditor: this.editor,\n\t\t\tshapeSnapshots: snapshot.shapeSnapshots,\n\t\t\taveragePagePoint: snapshot.averagePagePoint,\n\t\t\tinitialSelectionPageBounds: snapshot.initialPageBounds,\n\t\t\tinitialSelectionSnapPoints: snapshot.initialSnapPoints,\n\t\t})\n\n\t\tthis.handleChange()\n\t}\n\n\tprotected updateParentTransforms = () => {\n\t\tconst {\n\t\t\teditor,\n\t\t\tsnapshot: { shapeSnapshots },\n\t\t} = this\n\t\tconst movingShapes: TLShape[] = []\n\n\t\tshapeSnapshots.forEach((shapeSnapshot) => {\n\t\t\tconst shape = editor.getShapeById(shapeSnapshot.shape.id)\n\t\t\tif (!shape) return null\n\t\t\tmovingShapes.push(shape)\n\n\t\t\tconst parentTransform = isPageId(shape.parentId)\n\t\t\t\t? null\n\t\t\t\t: Matrix2d.Inverse(editor.getPageTransformById(shape.parentId)!)\n\n\t\t\tshapeSnapshot.parentTransform = parentTransform\n\t\t})\n\t}\n}\n\nfunction getTranslatingSnapshot(editor: Editor) {\n\tconst movingShapes: TLShape[] = []\n\tconst pagePoints: Vec2d[] = []\n\n\tconst shapeSnapshots = compact(\n\t\teditor.selectedIds.map((id): null | MovingShapeSnapshot => {\n\t\t\tconst shape = editor.getShapeById(id)\n\t\t\tif (!shape) return null\n\t\t\tmovingShapes.push(shape)\n\n\t\t\tconst pagePoint = editor.getPagePointById(id)\n\t\t\tif (!pagePoint) return null\n\t\t\tpagePoints.push(pagePoint)\n\n\t\t\tconst parentTransform = PageRecordType.isId(shape.parentId)\n\t\t\t\t? null\n\t\t\t\t: Matrix2d.Inverse(editor.getPageTransformById(shape.parentId)!)\n\n\t\t\treturn {\n\t\t\t\tshape,\n\t\t\t\tpagePoint,\n\t\t\t\tparentTransform,\n\t\t\t}\n\t\t})\n\t)\n\n\treturn {\n\t\taveragePagePoint: Vec2d.Average(pagePoints),\n\t\tmovingShapes,\n\t\tshapeSnapshots,\n\t\tinitialPageBounds: editor.selectedPageBounds!,\n\t\tinitialSnapPoints:\n\t\t\teditor.selectedIds.length === 1\n\t\t\t\t? editor.snaps.snapPointsCache.get(editor.selectedIds[0])!\n\t\t\t\t: editor.selectedPageBounds\n\t\t\t\t? editor.selectedPageBounds.snapPoints.map((p, i) => ({\n\t\t\t\t\t\tid: 'selection:' + i,\n\t\t\t\t\t\tx: p.x,\n\t\t\t\t\t\ty: p.y,\n\t\t\t\t  }))\n\t\t\t\t: [],\n\t}\n}\n\nexport type TranslatingSnapshot = ReturnType<typeof getTranslatingSnapshot>\n\nexport interface MovingShapeSnapshot {\n\tshape: TLShape\n\tpagePoint: Vec2d\n\tparentTransform: Matrix2dModel | null\n}\n\nexport function moveShapesToPoint({\n\teditor,\n\tshapeSnapshots: snapshots,\n\taveragePagePoint,\n\tinitialSelectionPageBounds,\n\tinitialSelectionSnapPoints,\n}: {\n\teditor: Editor\n\tshapeSnapshots: MovingShapeSnapshot[]\n\taveragePagePoint: Vec2d\n\tinitialSelectionPageBounds: Box2d\n\tinitialSelectionSnapPoints: SnapPoint[]\n}) {\n\tconst { inputs, isGridMode, gridSize } = editor\n\n\tconst delta = Vec2d.Sub(inputs.currentPagePoint, inputs.originPagePoint)\n\n\tconst flatten: 'x' | 'y' | null = editor.inputs.shiftKey\n\t\t? Math.abs(delta.x) < Math.abs(delta.y)\n\t\t\t? 'x'\n\t\t\t: 'y'\n\t\t: null\n\n\tif (flatten === 'x') {\n\t\tdelta.x = 0\n\t} else if (flatten === 'y') {\n\t\tdelta.y = 0\n\t}\n\n\t// Provisional snapping\n\teditor.snaps.clear()\n\n\tconst shouldSnap =\n\t\t(editor.isSnapMode ? !inputs.ctrlKey : inputs.ctrlKey) &&\n\t\teditor.inputs.pointerVelocity.len() < 0.5 // ...and if the user is not dragging fast\n\n\tif (shouldSnap) {\n\t\tconst { nudge } = editor.snaps.snapTranslate({\n\t\t\tdragDelta: delta,\n\t\t\tinitialSelectionPageBounds,\n\t\t\tlockedAxis: flatten,\n\t\t\tinitialSelectionSnapPoints,\n\t\t})\n\n\t\tdelta.add(nudge)\n\t}\n\n\tconst averageSnappedPoint = Vec2d.Add(averagePagePoint, delta)\n\n\tif (isGridMode && !inputs.ctrlKey) {\n\t\taverageSnappedPoint.snapToGrid(gridSize)\n\t}\n\n\tconst averageSnap = Vec2d.Sub(averageSnappedPoint, averagePagePoint)\n\n\teditor.updateShapes(\n\t\tcompact(\n\t\t\tsnapshots.map(({ shape, pagePoint, parentTransform }): TLShapePartial | null => {\n\t\t\t\tconst newPagePoint = Vec2d.Add(pagePoint, averageSnap)\n\t\t\t\tconst newLocalPoint = parentTransform\n\t\t\t\t\t? Matrix2d.applyToPoint(parentTransform, newPagePoint)\n\t\t\t\t\t: newPagePoint\n\n\t\t\t\treturn {\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\ttype: shape.type,\n\t\t\t\t\tx: newLocalPoint.x,\n\t\t\t\t\ty: newLocalPoint.y,\n\t\t\t\t}\n\t\t\t})\n\t\t),\n\t\ttrue\n\t)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}