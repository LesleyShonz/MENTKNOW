{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AssetRecordType } from \"@tldraw/tlschema\";\nimport { getHashForString } from \"@tldraw/utils\";\nimport uniq from \"lodash.uniq\";\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from \"../constants.mjs\";\nimport { isAnimated } from \"./is-gif-animated.mjs\";\nimport { findChunk, isPng, parsePhys } from \"./png.mjs\";\nvar ACCEPTED_IMG_TYPE = [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/svg+xml\"];\nvar ACCEPTED_VID_TYPE = [\"video/mp4\", \"video/quicktime\"];\nvar ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(\", \");\nvar isImage = function isImage(ext) {\n  return ACCEPTED_IMG_TYPE.includes(ext);\n};\nfunction getVideoSizeFromSrc(_x) {\n  return _getVideoSizeFromSrc.apply(this, arguments);\n}\nfunction _getVideoSizeFromSrc() {\n  _getVideoSizeFromSrc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(src) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return new Promise(function (resolve, reject) {\n            var video = document.createElement(\"video\");\n            video.onloadeddata = function () {\n              return resolve({\n                w: video.videoWidth,\n                h: video.videoHeight\n              });\n            };\n            video.onerror = function (e) {\n              console.error(e);\n              reject(new Error(\"Could not get video size\"));\n            };\n            video.crossOrigin = \"anonymous\";\n            video.src = src;\n          });\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getVideoSizeFromSrc.apply(this, arguments);\n}\nfunction base64ToFile(_x2) {\n  return _base64ToFile.apply(this, arguments);\n}\nfunction _base64ToFile() {\n  _base64ToFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dataURL) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", fetch(dataURL).then(function (result) {\n            return result.arrayBuffer();\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _base64ToFile.apply(this, arguments);\n}\nfunction getImageSizeFromSrc(_x3) {\n  return _getImageSizeFromSrc.apply(this, arguments);\n}\nfunction _getImageSizeFromSrc() {\n  _getImageSizeFromSrc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(dataURL) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return new Promise(function (resolve, reject) {\n            var img = new Image();\n            img.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n              var blob, view, physChunk, physData, pixelRatio;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return base64ToFile(dataURL);\n                  case 3:\n                    blob = _context3.sent;\n                    view = new DataView(blob);\n                    if (!isPng(view, 0)) {\n                      _context3.next = 13;\n                      break;\n                    }\n                    physChunk = findChunk(view, \"pHYs\");\n                    if (!physChunk) {\n                      _context3.next = 13;\n                      break;\n                    }\n                    physData = parsePhys(view, physChunk.dataOffset);\n                    if (!(physData.unit === 0 && physData.ppux === physData.ppuy)) {\n                      _context3.next = 13;\n                      break;\n                    }\n                    pixelRatio = Math.round(physData.ppux / 2834.5);\n                    resolve({\n                      w: img.width / pixelRatio,\n                      h: img.height / pixelRatio\n                    });\n                    return _context3.abrupt(\"return\");\n                  case 13:\n                    resolve({\n                      w: img.width,\n                      h: img.height\n                    });\n                    _context3.next = 20;\n                    break;\n                  case 16:\n                    _context3.prev = 16;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.error(_context3.t0);\n                    resolve({\n                      w: img.width,\n                      h: img.height\n                    });\n                  case 20:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3, null, [[0, 16]]);\n            }));\n            img.onerror = function (err) {\n              console.error(err);\n              reject(new Error(\"Could not get image size\"));\n            };\n            img.crossOrigin = \"anonymous\";\n            img.src = dataURL;\n          });\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _getImageSizeFromSrc.apply(this, arguments);\n}\nfunction getResizedImageDataUrl(_x4, _x5, _x6) {\n  return _getResizedImageDataUrl.apply(this, arguments);\n}\nfunction _getResizedImageDataUrl() {\n  _getResizedImageDataUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dataURLForImage, width, height) {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return new Promise(function (resolve) {\n            var img = new Image();\n            img.onload = function () {\n              var canvas = document.createElement(\"canvas\");\n              var ctx = canvas.getContext(\"2d\");\n              if (!ctx) return;\n              canvas.width = width * 2;\n              canvas.height = height * 2;\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n              var newDataURL = canvas.toDataURL();\n              resolve(newDataURL);\n            };\n            img.crossOrigin = \"anonymous\";\n            img.src = dataURLForImage;\n          });\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _getResizedImageDataUrl.apply(this, arguments);\n}\nfunction getMediaAssetFromFile(_x7) {\n  return _getMediaAssetFromFile.apply(this, arguments);\n}\nfunction _getMediaAssetFromFile() {\n  _getMediaAssetFromFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(file) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onerror = function () {\n              return reject(reader.error);\n            };\n            reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n              var dataUrl, isImageType, sizeFn, originalSize, size, assetId, metadata, asset;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    dataUrl = reader.result;\n                    isImageType = isImage(file.type);\n                    sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc;\n                    if (file.type === \"video/quicktime\" && dataUrl.includes(\"video/quicktime\")) {\n                      dataUrl = dataUrl.replace(\"video/quicktime\", \"video/mp4\");\n                    }\n                    _context6.next = 6;\n                    return sizeFn(dataUrl);\n                  case 6:\n                    originalSize = _context6.sent;\n                    size = containBoxSize(originalSize, {\n                      w: MAX_ASSET_WIDTH,\n                      h: MAX_ASSET_HEIGHT\n                    });\n                    if (!(size !== originalSize && (file.type === \"image/jpeg\" || file.type === \"image/png\"))) {\n                      _context6.next = 12;\n                      break;\n                    }\n                    _context6.next = 11;\n                    return getResizedImageDataUrl(dataUrl, size.w, size.h);\n                  case 11:\n                    dataUrl = _context6.sent;\n                  case 12:\n                    assetId = AssetRecordType.createId(getHashForString(dataUrl));\n                    _context6.next = 15;\n                    return getFileMetaData(file);\n                  case 15:\n                    metadata = _context6.sent;\n                    asset = {\n                      id: assetId,\n                      type: isImageType ? \"image\" : \"video\",\n                      typeName: \"asset\",\n                      props: {\n                        name: file.name,\n                        src: dataUrl,\n                        w: size.w,\n                        h: size.h,\n                        mimeType: file.type,\n                        isAnimated: metadata.isAnimated\n                      }\n                    };\n                    resolve(asset);\n                  case 18:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6);\n            }));\n            reader.readAsDataURL(file);\n          });\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _getMediaAssetFromFile.apply(this, arguments);\n}\nfunction getFileMetaData(_x8) {\n  return _getFileMetaData.apply(this, arguments);\n}\nfunction _getFileMetaData() {\n  _getFileMetaData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(file) {\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!(file.type === \"image/gif\")) {\n            _context8.next = 4;\n            break;\n          }\n          _context8.next = 3;\n          return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onerror = function () {\n              return reject(reader.error);\n            };\n            reader.onload = function () {\n              resolve({\n                isAnimated: reader.result ? isAnimated(reader.result) : false\n              });\n            };\n            reader.readAsArrayBuffer(file);\n          });\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 4:\n          return _context8.abrupt(\"return\", {\n            isAnimated: isImage(file.type) ? false : true\n          });\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _getFileMetaData.apply(this, arguments);\n}\nfunction containBoxSize(originalSize, containBoxSize2) {\n  var overByXScale = originalSize.w / containBoxSize2.w;\n  var overByYScale = originalSize.h / containBoxSize2.h;\n  if (overByXScale <= 1 && overByYScale <= 1) {\n    return originalSize;\n  } else if (overByXScale > overByYScale) {\n    return {\n      w: originalSize.w / overByXScale,\n      h: originalSize.h / overByXScale\n    };\n  } else {\n    return {\n      w: originalSize.w / overByYScale,\n      h: originalSize.h / overByYScale\n    };\n  }\n}\nvar isValidHttpURL = function isValidHttpURL(url) {\n  try {\n    var u = new URL(url);\n    return u.protocol === \"http:\" || u.protocol === \"https:\";\n  } catch (e) {\n    return false;\n  }\n};\nvar getValidHttpURLList = function getValidHttpURLList(url) {\n  var urls = url.split(/[\\n\\s]/);\n  var _iterator = _createForOfIteratorHelper(urls),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var url2 = _step.value;\n      try {\n        var u = new URL(url2);\n        if (!(u.protocol === \"http:\" || u.protocol === \"https:\")) {\n          return;\n        }\n      } catch (e) {\n        return;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return uniq(urls);\n};\nvar isSvgText = function isSvgText(text) {\n  return /^<svg/.test(text);\n};\nfunction dataUrlToFile(url, filename, mimeType) {\n  return fetch(url).then(function (res) {\n    return res.arrayBuffer();\n  }).then(function (buf) {\n    return new File([buf], filename, {\n      type: mimeType\n    });\n  });\n}\nexport { ACCEPTED_ASSET_TYPE, ACCEPTED_IMG_TYPE, ACCEPTED_VID_TYPE, base64ToFile, containBoxSize, dataUrlToFile, getFileMetaData, getImageSizeFromSrc, getMediaAssetFromFile, getResizedImageDataUrl, getValidHttpURLList, getVideoSizeFromSrc, isImage, isSvgText, isValidHttpURL };","map":{"version":3,"names":["AssetRecordType","getHashForString","uniq","MAX_ASSET_HEIGHT","MAX_ASSET_WIDTH","isAnimated","findChunk","isPng","parsePhys","ACCEPTED_IMG_TYPE","ACCEPTED_VID_TYPE","ACCEPTED_ASSET_TYPE","concat","join","isImage","ext","includes","getVideoSizeFromSrc","_x","_getVideoSizeFromSrc","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","src","wrap","_callee$","_context","prev","next","Promise","resolve","reject","video","document","createElement","onloadeddata","w","videoWidth","h","videoHeight","onerror","e","console","error","Error","crossOrigin","abrupt","sent","stop","base64ToFile","_x2","_base64ToFile","_callee2","dataURL","_callee2$","_context2","fetch","then","result","arrayBuffer","getImageSizeFromSrc","_x3","_getImageSizeFromSrc","_callee4","_callee4$","_context4","img","Image","onload","_callee3","blob","view","physChunk","physData","pixelRatio","_callee3$","_context3","DataView","dataOffset","unit","ppux","ppuy","Math","round","width","height","t0","err","getResizedImageDataUrl","_x4","_x5","_x6","_getResizedImageDataUrl","_callee5","dataURLForImage","_callee5$","_context5","canvas","ctx","getContext","drawImage","newDataURL","toDataURL","getMediaAssetFromFile","_x7","_getMediaAssetFromFile","_callee7","file","_callee7$","_context7","reader","FileReader","_callee6","dataUrl","isImageType","sizeFn","originalSize","size","assetId","metadata","asset","_callee6$","_context6","type","replace","containBoxSize","createId","getFileMetaData","id","typeName","props","name","mimeType","readAsDataURL","_x8","_getFileMetaData","_callee8","_callee8$","_context8","readAsArrayBuffer","containBoxSize2","overByXScale","overByYScale","isValidHttpURL","url","u","URL","protocol","getValidHttpURLList","urls","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","url2","value","f","isSvgText","text","test","dataUrlToFile","filename","res","buf","File"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/assets.ts"],"sourcesContent":["import { AssetRecordType, TLAsset, TLAssetId } from '@tldraw/tlschema'\nimport { getHashForString } from '@tldraw/utils'\nimport uniq from 'lodash.uniq'\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from '../constants'\nimport { isAnimated } from './is-gif-animated'\nimport { findChunk, isPng, parsePhys } from './png'\n\n/** @public */\nexport const ACCEPTED_IMG_TYPE = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml']\n/** @public */\nexport const ACCEPTED_VID_TYPE = ['video/mp4', 'video/quicktime']\n/** @public */\nexport const ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(', ')\n\n/** @public */\nexport const isImage = (ext: string) => ACCEPTED_IMG_TYPE.includes(ext)\n\n/**\n * Get the size of a video from its source.\n *\n * @param src - The source of the video.\n * @public\n */\nexport async function getVideoSizeFromSrc(src: string): Promise<{ w: number; h: number }> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst video = document.createElement('video')\n\t\tvideo.onloadeddata = () => resolve({ w: video.videoWidth, h: video.videoHeight })\n\t\tvideo.onerror = (e) => {\n\t\t\tconsole.error(e)\n\t\t\treject(new Error('Could not get video size'))\n\t\t}\n\t\tvideo.crossOrigin = 'anonymous'\n\t\tvideo.src = src\n\t})\n}\n\n/**\n * @param dataURL - The file as a string.\n * @internal\n *\n * from https://stackoverflow.com/a/53817185\n */\nexport async function base64ToFile(dataURL: string) {\n\treturn fetch(dataURL).then(function (result) {\n\t\treturn result.arrayBuffer()\n\t})\n}\n\n/**\n * Get the size of an image from its source.\n *\n * @param dataURL - The file as a string.\n * @public\n */\nexport async function getImageSizeFromSrc(dataURL: string): Promise<{ w: number; h: number }> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst img = new Image()\n\t\timg.onload = async () => {\n\t\t\ttry {\n\t\t\t\tconst blob = await base64ToFile(dataURL)\n\t\t\t\tconst view = new DataView(blob)\n\t\t\t\tif (isPng(view, 0)) {\n\t\t\t\t\tconst physChunk = findChunk(view, 'pHYs')\n\t\t\t\t\tif (physChunk) {\n\t\t\t\t\t\tconst physData = parsePhys(view, physChunk.dataOffset)\n\t\t\t\t\t\tif (physData.unit === 0 && physData.ppux === physData.ppuy) {\n\t\t\t\t\t\t\tconst pixelRatio = Math.round(physData.ppux / 2834.5)\n\t\t\t\t\t\t\tresolve({ w: img.width / pixelRatio, h: img.height / pixelRatio })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err)\n\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t}\n\t\t}\n\t\timg.onerror = (err) => {\n\t\t\tconsole.error(err)\n\t\t\treject(new Error('Could not get image size'))\n\t\t}\n\t\timg.crossOrigin = 'anonymous'\n\t\timg.src = dataURL\n\t})\n}\n\n/**\n * Get the size of an image from its source.\n *\n * @param dataURLForImage - The image file as a string.\n * @param width - The desired width.\n * @param height - The desired height.\n * @public\n */\nexport async function getResizedImageDataUrl(\n\tdataURLForImage: string,\n\twidth: number,\n\theight: number\n): Promise<string> {\n\treturn await new Promise((resolve) => {\n\t\tconst img = new Image()\n\t\timg.onload = () => {\n\t\t\t// Initialize the canvas and it's size\n\t\t\tconst canvas = document.createElement('canvas')\n\t\t\tconst ctx = canvas.getContext('2d')\n\n\t\t\tif (!ctx) return\n\n\t\t\t// Set width and height\n\t\t\tcanvas.width = width * 2\n\t\t\tcanvas.height = height * 2\n\n\t\t\t// Draw image and export to a data-uri\n\t\t\tctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n\t\t\tconst newDataURL = canvas.toDataURL()\n\n\t\t\t// Do something with the result, like overwrite original\n\t\t\tresolve(newDataURL)\n\t\t}\n\t\timg.crossOrigin = 'anonymous'\n\t\timg.src = dataURLForImage\n\t})\n}\n\n/**\n * Get an asset from a file.\n *\n * @param file - The file.\n * @returns An image or video asset partial.\n * @public\n */\nexport async function getMediaAssetFromFile(file: File): Promise<TLAsset> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.onerror = () => reject(reader.error)\n\t\treader.onload = async () => {\n\t\t\tlet dataUrl = reader.result as string\n\n\t\t\tconst isImageType = isImage(file.type)\n\t\t\tconst sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc\n\n\t\t\t// Hack to make .mov videos work via dataURL.\n\t\t\tif (file.type === 'video/quicktime' && dataUrl.includes('video/quicktime')) {\n\t\t\t\tdataUrl = dataUrl.replace('video/quicktime', 'video/mp4')\n\t\t\t}\n\n\t\t\tconst originalSize = await sizeFn(dataUrl)\n\t\t\tconst size = containBoxSize(originalSize, { w: MAX_ASSET_WIDTH, h: MAX_ASSET_HEIGHT })\n\n\t\t\tif (size !== originalSize && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n\t\t\t\t// If we created a new size and the type is an image, rescale the image\n\t\t\t\tdataUrl = await getResizedImageDataUrl(dataUrl, size.w, size.h)\n\t\t\t}\n\n\t\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(dataUrl))\n\n\t\t\tconst metadata = await getFileMetaData(file)\n\n\t\t\tconst asset: TLAsset = {\n\t\t\t\tid: assetId,\n\t\t\t\ttype: isImageType ? 'image' : 'video',\n\t\t\t\ttypeName: 'asset',\n\t\t\t\tprops: {\n\t\t\t\t\tname: file.name,\n\t\t\t\t\tsrc: dataUrl,\n\t\t\t\t\tw: size.w,\n\t\t\t\t\th: size.h,\n\t\t\t\t\tmimeType: file.type,\n\t\t\t\t\tisAnimated: metadata.isAnimated,\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tresolve(asset)\n\t\t}\n\n\t\treader.readAsDataURL(file)\n\t})\n}\n\n/**\n * Get some metadata about the file\n *\n * @param file - The file.\n * @public\n */\nexport async function getFileMetaData(file: File): Promise<{ isAnimated: boolean }> {\n\tif (file.type === 'image/gif') {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.onerror = () => reject(reader.error)\n\t\t\treader.onload = () => {\n\t\t\t\tresolve({\n\t\t\t\t\tisAnimated: reader.result ? isAnimated(reader.result as ArrayBuffer) : false,\n\t\t\t\t})\n\t\t\t}\n\t\t\treader.readAsArrayBuffer(file)\n\t\t})\n\t}\n\n\treturn {\n\t\tisAnimated: isImage(file.type) ? false : true,\n\t}\n}\n\ntype BoxWidthHeight = {\n\tw: number\n\th: number\n}\n\n/**\n * Contains the size within the given box size\n *\n * @param originalSize - The size of the asset\n * @param containBoxSize - The container size\n * @returns Adjusted size\n * @public\n */\nexport function containBoxSize(\n\toriginalSize: BoxWidthHeight,\n\tcontainBoxSize: BoxWidthHeight\n): BoxWidthHeight {\n\tconst overByXScale = originalSize.w / containBoxSize.w\n\tconst overByYScale = originalSize.h / containBoxSize.h\n\n\tif (overByXScale <= 1 && overByYScale <= 1) {\n\t\treturn originalSize\n\t} else if (overByXScale > overByYScale) {\n\t\treturn {\n\t\t\tw: originalSize.w / overByXScale,\n\t\t\th: originalSize.h / overByXScale,\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tw: originalSize.w / overByYScale,\n\t\t\th: originalSize.h / overByYScale,\n\t\t}\n\t}\n}\n\n/** @public */\nexport const isValidHttpURL = (url: string) => {\n\ttry {\n\t\tconst u = new URL(url)\n\t\treturn u.protocol === 'http:' || u.protocol === 'https:'\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\n/** @public */\nexport const getValidHttpURLList = (url: string) => {\n\tconst urls = url.split(/[\\n\\s]/)\n\tfor (const url of urls) {\n\t\ttry {\n\t\t\tconst u = new URL(url)\n\t\t\tif (!(u.protocol === 'http:' || u.protocol === 'https:')) {\n\t\t\t\treturn\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn\n\t\t}\n\t}\n\treturn uniq(urls)\n}\n\n/** @public */\nexport const isSvgText = (text: string) => {\n\treturn /^<svg/.test(text)\n}\n\n/** @public */\nexport function dataUrlToFile(url: string, filename: string, mimeType: string) {\n\treturn fetch(url)\n\t\t.then(function (res) {\n\t\t\treturn res.arrayBuffer()\n\t\t})\n\t\t.then(function (buf) {\n\t\t\treturn new File([buf], filename, { type: mimeType })\n\t\t})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}