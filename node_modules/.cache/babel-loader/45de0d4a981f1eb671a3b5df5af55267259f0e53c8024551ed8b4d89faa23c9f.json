{"ast":null,"code":"import { Vec2d } from \"@tldraw/primitives\";\nfunction resizeBox(shape, info) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var newPoint = info.newPoint,\n    handle = info.handle,\n    scaleX = info.scaleX,\n    scaleY = info.scaleY;\n  var _opts$minWidth = opts.minWidth,\n    minWidth = _opts$minWidth === void 0 ? 1 : _opts$minWidth,\n    _opts$maxWidth = opts.maxWidth,\n    maxWidth = _opts$maxWidth === void 0 ? Infinity : _opts$maxWidth,\n    _opts$minHeight = opts.minHeight,\n    minHeight = _opts$minHeight === void 0 ? 1 : _opts$minHeight,\n    _opts$maxHeight = opts.maxHeight,\n    maxHeight = _opts$maxHeight === void 0 ? Infinity : _opts$maxHeight;\n  var w = shape.props.w * scaleX;\n  var h = shape.props.h * scaleY;\n  var offset = new Vec2d(0, 0);\n  if (w > 0) {\n    if (w < minWidth) {\n      switch (handle) {\n        case \"top_left\":\n        case \"left\":\n        case \"bottom_left\":\n          {\n            offset.x = w - minWidth;\n            break;\n          }\n        case \"top\":\n        case \"bottom\":\n          {\n            offset.x = (w - minWidth) / 2;\n            break;\n          }\n        default:\n          {\n            offset.x = 0;\n          }\n      }\n      w = minWidth;\n    }\n  } else {\n    offset.x = w;\n    w = -w;\n    if (w < minWidth) {\n      switch (handle) {\n        case \"top_left\":\n        case \"left\":\n        case \"bottom_left\":\n          {\n            offset.x = -w;\n            break;\n          }\n        default:\n          {\n            offset.x = -minWidth;\n          }\n      }\n      w = minWidth;\n    }\n  }\n  if (h > 0) {\n    if (h < minHeight) {\n      switch (handle) {\n        case \"top_left\":\n        case \"top\":\n        case \"top_right\":\n          {\n            offset.y = h - minHeight;\n            break;\n          }\n        case \"right\":\n        case \"left\":\n          {\n            offset.y = (h - minHeight) / 2;\n            break;\n          }\n        default:\n          {\n            offset.y = 0;\n          }\n      }\n      h = minHeight;\n    }\n  } else {\n    offset.y = h;\n    h = -h;\n    if (h < minHeight) {\n      switch (handle) {\n        case \"top_left\":\n        case \"top\":\n        case \"top_right\":\n          {\n            offset.y = -h;\n            break;\n          }\n        default:\n          {\n            offset.y = -minHeight;\n          }\n      }\n      h = minHeight;\n    }\n  }\n  var _offset$rot$add = offset.rot(shape.rotation).add(newPoint),\n    x = _offset$rot$add.x,\n    y = _offset$rot$add.y;\n  return {\n    x: x,\n    y: y,\n    props: {\n      w: Math.min(maxWidth, w),\n      h: Math.min(maxHeight, h)\n    }\n  };\n}\nexport { resizeBox };","map":{"version":3,"names":["Vec2d","resizeBox","shape","info","opts","arguments","length","undefined","newPoint","handle","scaleX","scaleY","_opts$minWidth","minWidth","_opts$maxWidth","maxWidth","Infinity","_opts$minHeight","minHeight","_opts$maxHeight","maxHeight","w","props","h","offset","x","y","_offset$rot$add","rot","rotation","add","Math","min"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/shared/resizeBox.ts"],"sourcesContent":["import { Box2d, Vec2d } from '@tldraw/primitives'\nimport { Vec2dModel } from '@tldraw/tlschema'\nimport { TLResizeHandle } from '../../types/selection-types'\nimport { TLBaseBoxShape } from '../BaseBoxShapeUtil'\nimport { TLResizeMode } from '../ShapeUtil'\n\nexport type ResizeBoxOptions = Partial<{\n\tminWidth: number\n\tmaxWidth: number\n\tminHeight: number\n\tmaxHeight: number\n}>\n\nexport function resizeBox(\n\tshape: TLBaseBoxShape,\n\tinfo: {\n\t\tnewPoint: Vec2dModel\n\t\thandle: TLResizeHandle\n\t\tmode: TLResizeMode\n\t\tscaleX: number\n\t\tscaleY: number\n\t\tinitialBounds: Box2d\n\t\tinitialShape: TLBaseBoxShape\n\t},\n\topts = {} as ResizeBoxOptions\n) {\n\tconst { newPoint, handle, scaleX, scaleY } = info\n\tconst { minWidth = 1, maxWidth = Infinity, minHeight = 1, maxHeight = Infinity } = opts\n\n\tlet w = shape.props.w * scaleX\n\tlet h = shape.props.h * scaleY\n\n\tconst offset = new Vec2d(0, 0)\n\n\tif (w > 0) {\n\t\tif (w < minWidth) {\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left':\n\t\t\t\tcase 'left':\n\t\t\t\tcase 'bottom_left': {\n\t\t\t\t\toffset.x = w - minWidth\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'top':\n\t\t\t\tcase 'bottom': {\n\t\t\t\t\toffset.x = (w - minWidth) / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\toffset.x = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\tw = minWidth\n\t\t}\n\t} else {\n\t\toffset.x = w\n\t\tw = -w\n\t\tif (w < minWidth) {\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left':\n\t\t\t\tcase 'left':\n\t\t\t\tcase 'bottom_left': {\n\t\t\t\t\toffset.x = -w\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\toffset.x = -minWidth\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = minWidth\n\t\t}\n\t}\n\n\tif (h > 0) {\n\t\tif (h < minHeight) {\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left':\n\t\t\t\tcase 'top':\n\t\t\t\tcase 'top_right': {\n\t\t\t\t\toffset.y = h - minHeight\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'right':\n\t\t\t\tcase 'left': {\n\t\t\t\t\toffset.y = (h - minHeight) / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\toffset.y = 0\n\t\t\t\t}\n\t\t\t}\n\n\t\t\th = minHeight\n\t\t}\n\t} else {\n\t\toffset.y = h\n\t\th = -h\n\t\tif (h < minHeight) {\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left':\n\t\t\t\tcase 'top':\n\t\t\t\tcase 'top_right': {\n\t\t\t\t\toffset.y = -h\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\toffset.y = -minHeight\n\t\t\t\t}\n\t\t\t}\n\t\t\th = minHeight\n\t\t}\n\t}\n\n\tconst { x, y } = offset.rot(shape.rotation).add(newPoint)\n\n\treturn {\n\t\tx,\n\t\ty,\n\t\tprops: {\n\t\t\tw: Math.min(maxWidth, w),\n\t\t\th: Math.min(maxHeight, h),\n\t\t},\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}