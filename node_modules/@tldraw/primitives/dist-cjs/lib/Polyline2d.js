"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Polyline2d_exports = {};
__export(Polyline2d_exports, {
  Polyline2d: () => Polyline2d
});
module.exports = __toCommonJS(Polyline2d_exports);
var import_BaseSpline2d = require("./BaseSpline2d");
var import_LineSegment2d = require("./LineSegment2d");
class Polyline2d extends import_BaseSpline2d.BaseSpline2d {
  constructor(points, k = 1.2, p = 20) {
    super(points, k, p);
    this.segments = this.getSegmentsFromPoints(points, p);
  }
  segments;
  getSegmentsFromPoints(points, p = 50) {
    const segments = [];
    for (let i = 0; i < points.length - 1; i++) {
      segments.push(new import_LineSegment2d.LineSegment2d(points[i], points[i + 1], p));
    }
    return segments;
  }
  static FromPoints(points) {
    return new Polyline2d(points);
  }
}
//# sourceMappingURL=Polyline2d.js.map
