{
  "version": 3,
  "sources": ["../../../src/lib/utils/data.ts"],
  "sourcesContent": ["import { isPlainObject } from 'is-plain-object'\nimport { nanoid } from 'nanoid'\n\n/**\n * Generate a unique id.\n *\n * @example\n *\n * ```ts\n * const id = uniqueId()\n * ```\n *\n * @public\n */\nexport function uniqueId() {\n\treturn nanoid()\n}\n\nconst serializableTypes = new Set(['string', 'number', 'boolean', 'undefined'])\n\n/**\n * Get whether a value is serializable.\n *\n * @example\n *\n * ```ts\n * const A = isSerializable(1) // true\n * const B = isSerializable('a') // true\n * const C = isSerializable(true) // true\n * const D = isSerializable(undefined) // false\n * ```\n *\n * @param value - The value to check.\n * @public\n */\nexport function isSerializable(value: any): boolean {\n\tif (serializableTypes.has(typeof value) || value === null) return true\n\tif (Array.isArray(value)) return value.every(isSerializable)\n\tif (isPlainObject(value)) return Object.values(value).every(isSerializable)\n\treturn false\n}\n\n/**\n * Convert a file to base64.\n *\n * @example\n *\n * ```ts\n * const A = fileToBase64('./test.png')\n * ```\n *\n * @param value - The file as a blob.\n * @public\n */\nexport function fileToBase64(file: Blob): Promise<string> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (file) {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.readAsDataURL(file)\n\t\t\treader.onload = () => resolve(reader.result as string)\n\t\t\treader.onerror = (error) => reject(error)\n\t\t\treader.onabort = (error) => reject(error)\n\t\t}\n\t})\n}\n\n/**\n * Get an incremented name (e.g. New page (2)) from a name (e.g. New page), based on an array of\n * existing names.\n *\n * @param name - The name to increment.\n * @param others - The array of existing names.\n * @public\n */\nexport function getIncrementedName(name: string, others: string[]) {\n\tlet result = name\n\tconst set = new Set(others)\n\n\twhile (set.has(result)) {\n\t\tresult = /^.*(\\d+)$/.exec(result)?.[1]\n\t\t\t? result.replace(/(\\d+)(?=\\D?)$/, (m) => {\n\t\t\t\t\treturn (+m + 1).toString()\n\t\t\t  })\n\t\t\t: `${result} 1`\n\t}\n\n\treturn result\n}\n\n/** @public */\nexport const checkFlag = (flag: boolean | (() => boolean) | undefined) =>\n\ttypeof flag === 'boolean' ? flag : flag?.()\n\n/** @public */\nexport function snapToGrid(n: number, gridSize: number) {\n\treturn Math.round(n / gridSize) * gridSize\n}\n\nconst VALID_URL_REGEX = new RegExp(\n\t/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n)\n\n/** @public */\nexport function isValidUrl(url: string) {\n\treturn VALID_URL_REGEX.test(url)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA8B;AAC9B,oBAAuB;AAahB,SAAS,WAAW;AAC1B,aAAO,sBAAO;AACf;AAEA,MAAM,oBAAoB,oBAAI,IAAI,CAAC,UAAU,UAAU,WAAW,WAAW,CAAC;AAiBvE,SAAS,eAAe,OAAqB;AACnD,MAAI,kBAAkB,IAAI,OAAO,KAAK,KAAK,UAAU;AAAM,WAAO;AAClE,MAAI,MAAM,QAAQ,KAAK;AAAG,WAAO,MAAM,MAAM,cAAc;AAC3D,UAAI,sCAAc,KAAK;AAAG,WAAO,OAAO,OAAO,KAAK,EAAE,MAAM,cAAc;AAC1E,SAAO;AACR;AAcO,SAAS,aAAa,MAA6B;AACzD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,QAAI,MAAM;AACT,YAAM,SAAS,IAAI,WAAW;AAC9B,aAAO,cAAc,IAAI;AACzB,aAAO,SAAS,MAAM,QAAQ,OAAO,MAAgB;AACrD,aAAO,UAAU,CAAC,UAAU,OAAO,KAAK;AACxC,aAAO,UAAU,CAAC,UAAU,OAAO,KAAK;AAAA,IACzC;AAAA,EACD,CAAC;AACF;AAUO,SAAS,mBAAmB,MAAc,QAAkB;AAClE,MAAI,SAAS;AACb,QAAM,MAAM,IAAI,IAAI,MAAM;AAE1B,SAAO,IAAI,IAAI,MAAM,GAAG;AACvB,aAAS,YAAY,KAAK,MAAM,IAAI,CAAC,IAClC,OAAO,QAAQ,iBAAiB,CAAC,MAAM;AACvC,cAAQ,CAAC,IAAI,GAAG,SAAS;AAAA,IACzB,CAAC,IACD,GAAG;AAAA,EACP;AAEA,SAAO;AACR;AAGO,MAAM,YAAY,CAAC,SACzB,OAAO,SAAS,YAAY,OAAO,OAAO;AAGpC,SAAS,WAAW,GAAW,UAAkB;AACvD,SAAO,KAAK,MAAM,IAAI,QAAQ,IAAI;AACnC;AAEA,MAAM,kBAAkB,IAAI;AAAA,EAC3B;AACD;AAGO,SAAS,WAAW,KAAa;AACvC,SAAO,gBAAgB,KAAK,GAAG;AAChC;",
  "names": []
}
