{"ast":null,"code":"import { getStrokeOutlinePoints, getStrokePoints, setStrokePointRadii, Vec2d } from \"@tldraw/primitives\";\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from \"../../../../utils/svg.mjs\";\nfunction getLinePoints(spline) {\n  var segments = spline.segments;\n  var allPoints = [];\n  for (var j = 0, k = segments.length; j < k; j++) {\n    var segment = segments[j];\n    var lut = segment.lut;\n    var n = lut.length - 1;\n    if (j > 0) {\n      allPoints.push(Vec2d.Lrp(lut[0], lut[1], 0.25));\n    } else {\n      allPoints.push(lut[0]);\n    }\n    for (var i = 1; i < n; i++) {\n      allPoints.push(lut[i]);\n    }\n    if (j < k - 1) {\n      allPoints.push(Vec2d.Lrp(lut[n - 1], lut[n], 0.75));\n    } else {\n      allPoints.push(lut[n]);\n    }\n  }\n  return allPoints;\n}\nfunction getLineDrawFreehandOptions(strokeWidth) {\n  return {\n    size: strokeWidth,\n    thinning: 0.4,\n    streamline: 0,\n    smoothing: 0.5,\n    simulatePressure: true,\n    last: true\n  };\n}\nfunction getLineSolidFreehandOptions(strokeWidth) {\n  return {\n    size: strokeWidth,\n    thinning: 0,\n    streamline: 0,\n    smoothing: 0.5,\n    simulatePressure: false,\n    last: true\n  };\n}\nfunction getLineStrokePoints(shape, spline, strokeWidth) {\n  var points = getLinePoints(spline);\n  var options = getLineDrawFreehandOptions(strokeWidth);\n  return getStrokePoints(points, options);\n}\nfunction getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {\n  var options = getLineDrawFreehandOptions(strokeWidth);\n  return getStrokeOutlinePoints(setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options), options);\n}\nfunction getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth) {\n  var options = getLineSolidFreehandOptions(strokeWidth);\n  return getStrokeOutlinePoints(getLineStrokePoints(shape, spline, strokeWidth), options);\n}\nfunction getLineDrawPath(shape, spline, strokeWidth) {\n  var stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);\n  return getSvgPathFromStroke(stroke);\n}\nfunction getLineSolidPath(shape, spline, strokeWidth) {\n  var outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth);\n  return getSvgPathFromStroke(outlinePoints);\n}\nfunction getLineIndicatorPath(shape, spline, strokeWidth) {\n  if (shape.props.dash === \"draw\") {\n    var strokePoints = getLineStrokePoints(shape, spline, strokeWidth);\n    return getSvgPathFromStrokePoints(strokePoints);\n  }\n  return spline.path;\n}\nexport { getLineDrawFreehandOptions, getLineDrawPath, getLineDrawStrokeOutlinePoints, getLineIndicatorPath, getLinePoints, getLineSolidFreehandOptions, getLineSolidPath, getLineSolidStrokeOutlinePoints, getLineStrokePoints };","map":{"version":3,"names":["getStrokeOutlinePoints","getStrokePoints","setStrokePointRadii","Vec2d","getSvgPathFromStroke","getSvgPathFromStrokePoints","getLinePoints","spline","segments","allPoints","j","k","length","segment","lut","n","push","Lrp","i","getLineDrawFreehandOptions","strokeWidth","size","thinning","streamline","smoothing","simulatePressure","last","getLineSolidFreehandOptions","getLineStrokePoints","shape","points","options","getLineDrawStrokeOutlinePoints","getLineSolidStrokeOutlinePoints","getLineDrawPath","stroke","getLineSolidPath","outlinePoints","getLineIndicatorPath","props","dash","strokePoints","path"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/line/components/getLinePath.ts"],"sourcesContent":["import {\n\tCubicSpline2d,\n\tgetStrokeOutlinePoints,\n\tgetStrokePoints,\n\tPolyline2d,\n\tsetStrokePointRadii,\n\tVec2d,\n} from '@tldraw/primitives'\nimport { TLLineShape } from '@tldraw/tlschema'\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from '../../../../utils/svg'\n\nexport function getLinePoints(spline: CubicSpline2d | Polyline2d) {\n\tconst { segments } = spline\n\n\tconst allPoints: Vec2d[] = []\n\n\tfor (let j = 0, k = segments.length; j < k; j++) {\n\t\tconst segment = segments[j]\n\t\tconst lut = segment.lut\n\n\t\tconst n = lut.length - 1\n\n\t\tif (j > 0) {\n\t\t\tallPoints.push(Vec2d.Lrp(lut[0], lut[1], 0.25))\n\t\t} else {\n\t\t\tallPoints.push(lut[0])\n\t\t}\n\n\t\tfor (let i = 1; i < n; i++) {\n\t\t\tallPoints.push(lut[i])\n\t\t}\n\n\t\tif (j < k - 1) {\n\t\t\tallPoints.push(Vec2d.Lrp(lut[n - 1], lut[n], 0.75))\n\t\t} else {\n\t\t\tallPoints.push(lut[n])\n\t\t}\n\t}\n\n\treturn allPoints\n}\n\nexport function getLineDrawFreehandOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: strokeWidth,\n\t\tthinning: 0.4,\n\t\tstreamline: 0,\n\t\tsmoothing: 0.5,\n\t\tsimulatePressure: true,\n\t\tlast: true,\n\t}\n}\n\nexport function getLineSolidFreehandOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: strokeWidth,\n\t\tthinning: 0,\n\t\tstreamline: 0,\n\t\tsmoothing: 0.5,\n\t\tsimulatePressure: false,\n\t\tlast: true,\n\t}\n}\n\nexport function getLineStrokePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst points = getLinePoints(spline)\n\n\tconst options = getLineDrawFreehandOptions(strokeWidth)\n\n\treturn getStrokePoints(points, options)\n}\n\nexport function getLineDrawStrokeOutlinePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst options = getLineDrawFreehandOptions(strokeWidth)\n\treturn getStrokeOutlinePoints(\n\t\tsetStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),\n\t\toptions\n\t)\n}\n\nexport function getLineSolidStrokeOutlinePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst options = getLineSolidFreehandOptions(strokeWidth)\n\treturn getStrokeOutlinePoints(getLineStrokePoints(shape, spline, strokeWidth), options)\n}\n\nexport function getLineDrawPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth)\n\treturn getSvgPathFromStroke(stroke)\n}\n\nexport function getLineSolidPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth)\n\treturn getSvgPathFromStroke(outlinePoints)\n}\n\nexport function getLineIndicatorPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tif (shape.props.dash === 'draw') {\n\t\tconst strokePoints = getLineStrokePoints(shape, spline, strokeWidth)\n\t\treturn getSvgPathFromStrokePoints(strokePoints)\n\t}\n\n\treturn spline.path\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}