{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { rangeIntersection } from \"@tldraw/primitives\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nfunction PointsSnapLine(_ref) {\n  var points = _ref.points,\n    zoom = _ref.zoom;\n  var l = 2.5 / zoom;\n  var minX = points.reduce(function (acc, p) {\n    return Math.min(acc, p.x);\n  }, Infinity);\n  var maxX = points.reduce(function (acc, p) {\n    return Math.max(acc, p.x);\n  }, -Infinity);\n  var minY = points.reduce(function (acc, p) {\n    return Math.min(acc, p.y);\n  }, Infinity);\n  var maxY = points.reduce(function (acc, p) {\n    return Math.max(acc, p.y);\n  }, -Infinity);\n  var useNWtoSEdireciton = points.some(function (p) {\n    return p.x === minX && p.y === minY;\n  });\n  var firstX, firstY, secondX, secondY;\n  if (useNWtoSEdireciton) {\n    firstX = minX;\n    firstY = minY;\n    secondX = maxX;\n    secondY = maxY;\n  } else {\n    firstX = minX;\n    firstY = maxY;\n    secondX = maxX;\n    secondY = minY;\n  }\n  return /* @__PURE__ */jsxs(\"g\", {\n    className: \"tl-snap-line\",\n    children: [/* @__PURE__ */jsx(\"line\", {\n      x1: firstX,\n      y1: firstY,\n      x2: secondX,\n      y2: secondY\n    }), points.map(function (p, i) {\n      return /* @__PURE__ */jsx(\"g\", {\n        transform: \"translate(\".concat(p.x, \",\").concat(p.y, \")\"),\n        children: /* @__PURE__ */jsx(\"path\", {\n          className: \"tl-snap-point\",\n          d: \"M \".concat(-l, \",\").concat(-l, \" L \").concat(l, \",\").concat(l, \" M \").concat(-l, \",\").concat(l, \" L \").concat(l, \",\").concat(-l)\n        })\n      }, i);\n    })]\n  });\n}\nfunction GapsSnapLine(_ref2) {\n  var gaps = _ref2.gaps,\n    direction = _ref2.direction,\n    zoom = _ref2.zoom;\n  var l = 3.5 / zoom;\n  var edgeIntersection = [-Infinity, Infinity];\n  var nextEdgeIntersection = null;\n  var horizontal = direction === \"horizontal\";\n  var _iterator = _createForOfIteratorHelper(gaps),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var gap = _step.value;\n      nextEdgeIntersection = rangeIntersection(edgeIntersection[0], edgeIntersection[1], horizontal ? gap.startEdge[0].y : gap.startEdge[0].x, horizontal ? gap.startEdge[1].y : gap.startEdge[1].x);\n      if (nextEdgeIntersection) {\n        edgeIntersection = nextEdgeIntersection;\n      } else {\n        continue;\n      }\n      nextEdgeIntersection = rangeIntersection(edgeIntersection[0], edgeIntersection[1], horizontal ? gap.endEdge[0].y : gap.endEdge[0].x, horizontal ? gap.endEdge[1].y : gap.endEdge[1].x);\n      if (nextEdgeIntersection) {\n        edgeIntersection = nextEdgeIntersection;\n      } else {\n        continue;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (edgeIntersection === null) {\n    return null;\n  }\n  var midPoint = (edgeIntersection[0] + edgeIntersection[1]) / 2;\n  return /* @__PURE__ */jsx(\"g\", {\n    className: \"tl-snap-line\",\n    children: gaps.map(function (_ref3, i) {\n      var startEdge = _ref3.startEdge,\n        endEdge = _ref3.endEdge;\n      return /* @__PURE__ */jsx(React.Fragment, {\n        children: horizontal ?\n        // horizontal gap\n        /* @__PURE__ */\n        jsxs(Fragment, {\n          children: [/* @__PURE__ */jsx(\"line\", {\n            x1: startEdge[0].x,\n            y1: midPoint - 2 * l,\n            x2: startEdge[1].x,\n            y2: midPoint + 2 * l\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: endEdge[0].x,\n            y1: midPoint - 2 * l,\n            x2: endEdge[1].x,\n            y2: midPoint + 2 * l\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: startEdge[0].x,\n            y1: midPoint,\n            x2: endEdge[0].x,\n            y2: midPoint\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: (startEdge[0].x + endEdge[0].x) / 2,\n            y1: midPoint - l,\n            x2: (startEdge[0].x + endEdge[0].x) / 2,\n            y2: midPoint + l\n          })]\n        }) :\n        // vertical gap\n        /* @__PURE__ */\n        jsxs(Fragment, {\n          children: [/* @__PURE__ */jsx(\"line\", {\n            x1: midPoint - 2 * l,\n            y1: startEdge[0].y,\n            x2: midPoint + 2 * l,\n            y2: startEdge[1].y\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: midPoint - 2 * l,\n            y1: endEdge[0].y,\n            x2: midPoint + 2 * l,\n            y2: endEdge[1].y\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: midPoint,\n            y1: startEdge[0].y,\n            x2: midPoint,\n            y2: endEdge[0].y\n          }), /* @__PURE__ */jsx(\"line\", {\n            x1: midPoint - l,\n            y1: (startEdge[0].y + endEdge[0].y) / 2,\n            x2: midPoint + l,\n            y2: (startEdge[0].y + endEdge[0].y) / 2\n          })]\n        })\n      }, i);\n    })\n  });\n}\nvar DefaultSnapLine = function DefaultSnapLine(_ref4) {\n  var className = _ref4.className,\n    line = _ref4.line,\n    zoom = _ref4.zoom;\n  return /* @__PURE__ */jsx(\"svg\", {\n    className: classNames(\"tl-overlays__item\", className),\n    children: line.type === \"points\" ? /* @__PURE__ */jsx(PointsSnapLine, _objectSpread(_objectSpread({}, line), {}, {\n      zoom: zoom\n    })) : line.type === \"gaps\" ? /* @__PURE__ */jsx(GapsSnapLine, _objectSpread(_objectSpread({}, line), {}, {\n      zoom: zoom\n    })) : null\n  });\n};\nexport { DefaultSnapLine };","map":{"version":3,"names":["Fragment","jsx","jsxs","rangeIntersection","classNames","React","PointsSnapLine","_ref","points","zoom","l","minX","reduce","acc","p","Math","min","x","Infinity","maxX","max","minY","y","maxY","useNWtoSEdireciton","some","firstX","firstY","secondX","secondY","className","children","x1","y1","x2","y2","map","i","transform","concat","d","GapsSnapLine","_ref2","gaps","direction","edgeIntersection","nextEdgeIntersection","horizontal","_iterator","_createForOfIteratorHelper","_step","s","n","done","gap","value","startEdge","endEdge","err","e","f","midPoint","_ref3","DefaultSnapLine","_ref4","line"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/components/DefaultSnapLine.tsx"],"sourcesContent":["import { rangeIntersection } from '@tldraw/primitives'\nimport classNames from 'classnames'\nimport * as React from 'react'\nimport {\n\ttype GapsSnapLine,\n\ttype PointsSnapLine,\n\ttype SnapLine,\n} from '../editor/managers/SnapManager'\n\nfunction PointsSnapLine({ points, zoom }: { zoom: number } & PointsSnapLine) {\n\tconst l = 2.5 / zoom\n\n\tconst minX = points.reduce((acc, p) => Math.min(acc, p.x), Infinity)\n\tconst maxX = points.reduce((acc, p) => Math.max(acc, p.x), -Infinity)\n\tconst minY = points.reduce((acc, p) => Math.min(acc, p.y), Infinity)\n\tconst maxY = points.reduce((acc, p) => Math.max(acc, p.y), -Infinity)\n\n\tconst useNWtoSEdireciton = points.some((p) => p.x === minX && p.y === minY)\n\tlet firstX: number, firstY: number, secondX: number, secondY: number\n\tif (useNWtoSEdireciton) {\n\t\tfirstX = minX\n\t\tfirstY = minY\n\t\tsecondX = maxX\n\t\tsecondY = maxY\n\t} else {\n\t\tfirstX = minX\n\t\tfirstY = maxY\n\t\tsecondX = maxX\n\t\tsecondY = minY\n\t}\n\n\treturn (\n\t\t<g className=\"tl-snap-line\">\n\t\t\t<line x1={firstX} y1={firstY} x2={secondX} y2={secondY} />\n\t\t\t{points.map((p, i) => (\n\t\t\t\t<g transform={`translate(${p.x},${p.y})`} key={i}>\n\t\t\t\t\t<path\n\t\t\t\t\t\tclassName=\"tl-snap-point\"\n\t\t\t\t\t\td={`M ${-l},${-l} L ${l},${l} M ${-l},${l} L ${l},${-l}`}\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t))}\n\t\t</g>\n\t)\n}\n\nfunction GapsSnapLine({ gaps, direction, zoom }: { zoom: number } & GapsSnapLine) {\n\tconst l = 3.5 / zoom\n\n\tlet edgeIntersection: number[] | null = [-Infinity, +Infinity]\n\tlet nextEdgeIntersection: number[] | null = null\n\n\tconst horizontal = direction === 'horizontal'\n\n\t// find intersection of all gaps so we can render a straight line through it;\n\t// some range intersections may return null, in which case we skip that gap.\n\tfor (const gap of gaps) {\n\t\tnextEdgeIntersection = rangeIntersection(\n\t\t\tedgeIntersection[0],\n\t\t\tedgeIntersection[1],\n\t\t\thorizontal ? gap.startEdge[0].y : gap.startEdge[0].x,\n\t\t\thorizontal ? gap.startEdge[1].y : gap.startEdge[1].x\n\t\t)\n\n\t\tif (nextEdgeIntersection) {\n\t\t\tedgeIntersection = nextEdgeIntersection\n\t\t} else {\n\t\t\tcontinue\n\t\t}\n\n\t\tnextEdgeIntersection = rangeIntersection(\n\t\t\tedgeIntersection[0],\n\t\t\tedgeIntersection[1],\n\t\t\thorizontal ? gap.endEdge[0].y : gap.endEdge[0].x,\n\t\t\thorizontal ? gap.endEdge[1].y : gap.endEdge[1].x\n\t\t)\n\n\t\tif (nextEdgeIntersection) {\n\t\t\tedgeIntersection = nextEdgeIntersection\n\t\t} else {\n\t\t\tcontinue\n\t\t}\n\t}\n\n\tif (edgeIntersection === null) {\n\t\treturn null\n\t}\n\n\tconst midPoint = (edgeIntersection[0] + edgeIntersection[1]) / 2\n\n\treturn (\n\t\t<g className=\"tl-snap-line\">\n\t\t\t{gaps.map(({ startEdge, endEdge }, i) => (\n\t\t\t\t<React.Fragment key={i}>\n\t\t\t\t\t{horizontal ? (\n\t\t\t\t\t\t// horizontal gap\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{/* start edge */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={startEdge[0].x}\n\t\t\t\t\t\t\t\ty1={midPoint - 2 * l}\n\t\t\t\t\t\t\t\tx2={startEdge[1].x}\n\t\t\t\t\t\t\t\ty2={midPoint + 2 * l}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* end edge */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={endEdge[0].x}\n\t\t\t\t\t\t\t\ty1={midPoint - 2 * l}\n\t\t\t\t\t\t\t\tx2={endEdge[1].x}\n\t\t\t\t\t\t\t\ty2={midPoint + 2 * l}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* joining line */}\n\t\t\t\t\t\t\t<line x1={startEdge[0].x} y1={midPoint} x2={endEdge[0].x} y2={midPoint} />\n\t\t\t\t\t\t\t{/* center point marker */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={(startEdge[0].x + endEdge[0].x) / 2}\n\t\t\t\t\t\t\t\ty1={midPoint - l}\n\t\t\t\t\t\t\t\tx2={(startEdge[0].x + endEdge[0].x) / 2}\n\t\t\t\t\t\t\t\ty2={midPoint + l}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t// vertical gap\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{/* start edge */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={midPoint - 2 * l}\n\t\t\t\t\t\t\t\ty1={startEdge[0].y}\n\t\t\t\t\t\t\t\tx2={midPoint + 2 * l}\n\t\t\t\t\t\t\t\ty2={startEdge[1].y}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* end edge */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={midPoint - 2 * l}\n\t\t\t\t\t\t\t\ty1={endEdge[0].y}\n\t\t\t\t\t\t\t\tx2={midPoint + 2 * l}\n\t\t\t\t\t\t\t\ty2={endEdge[1].y}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* joining line */}\n\t\t\t\t\t\t\t<line x1={midPoint} y1={startEdge[0].y} x2={midPoint} y2={endEdge[0].y} />\n\t\t\t\t\t\t\t{/* center point marker */}\n\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\tx1={midPoint - l}\n\t\t\t\t\t\t\t\ty1={(startEdge[0].y + endEdge[0].y) / 2}\n\t\t\t\t\t\t\t\tx2={midPoint + l}\n\t\t\t\t\t\t\t\ty2={(startEdge[0].y + endEdge[0].y) / 2}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</React.Fragment>\n\t\t\t))}\n\t\t</g>\n\t)\n}\n\nexport type TLSnapLineComponent = (props: {\n\tclassName?: string\n\tline: SnapLine\n\tzoom: number\n}) => any\n\nexport const DefaultSnapLine: TLSnapLineComponent = ({ className, line, zoom }) => {\n\treturn (\n\t\t<svg className={classNames('tl-overlays__item', className)}>\n\t\t\t{line.type === 'points' ? (\n\t\t\t\t<PointsSnapLine {...line} zoom={zoom} />\n\t\t\t) : line.type === 'gaps' ? (\n\t\t\t\t<GapsSnapLine {...line} zoom={zoom} />\n\t\t\t) : null}\n\t\t</svg>\n\t)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}