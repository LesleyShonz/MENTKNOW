{
  "version": 3,
  "sources": ["../../src/lib/LineSegment2d.ts"],
  "sourcesContent": ["import { BaseSegment2d } from './BaseSegment2d'\nimport { Box2d } from './Box2d'\nimport { Vec2d, VecLike } from './Vec2d'\n\n/** @public */\nexport interface LineSegment2dModel {\n\ta: VecLike\n\tb: VecLike\n\tp: number\n}\n\n/** @public */\nexport class LineSegment2d extends BaseSegment2d<LineSegment2dModel> {\n\tconstructor(public a: VecLike, public b: VecLike, p = 2) {\n\t\tsuper({ a, b, p })\n\t\tthis.values.p = Math.max(10, Math.ceil(this.length / 20))\n\t}\n\n\toverride get length() {\n\t\treturn Vec2d.Dist(this.a, this.b)\n\t}\n\n\tget tangent() {\n\t\treturn Vec2d.Tan(this.a, this.b)\n\t}\n\n\tget angle() {\n\t\treturn Vec2d.Angle(this.a, this.b)\n\t}\n\n\toverride get bounds() {\n\t\treturn Box2d.FromPoints([this.a, this.b])\n\t}\n\n\tgetX(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\treturn a.x + (b.x - a.x) * t\n\t}\n\n\tgetY(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\treturn a.y + (b.y - a.y) * t\n\t}\n\n\tgetPoint(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\tif (t <= 0) return Vec2d.From(a)\n\t\tif (t >= 1) return Vec2d.From(b)\n\n\t\treturn Vec2d.Lrp(a, b, t)\n\t}\n\n\tgetPath(head = true) {\n\t\tconst { a, b } = this.values\n\n\t\tif (Vec2d.Equals(a, b)) return ''\n\n\t\treturn head ? `M${a.x},${a.y}L${b.x},${b.y}` : `${b.x},${b.y}`\n\t}\n\n\toverride getNormal() {\n\t\tconst { a, b } = this.values\n\n\t\treturn Vec2d.Sub(a, b).per().uni().toFixed()\n\t}\n\n\t/**\n\t * Get the closest point on the segment to an arbitrary point.\n\t *\n\t * @param point - The arbitrary point.\n\t * @public\n\t */\n\toverride getClosestPointTo(point: VecLike) {\n\t\tconst { a, b } = this.values\n\n\t\tconst closestPoint = Vec2d.NearestPointOnLineSegment(a, b, point)\n\n\t\tconst closestDistance = closestPoint.dist(point)\n\n\t\treturn { point: closestPoint, distance: closestDistance }\n\t}\n\n\tstatic Length(A: LineSegment2d) {\n\t\treturn Vec2d.Dist(A.a, A.b)\n\t}\n\n\tstatic Tangent(A: LineSegment2d) {\n\t\treturn Vec2d.Tan(A.a, A.b)\n\t}\n\n\tstatic Angle(A: LineSegment2d) {\n\t\treturn Vec2d.Angle(A.a, A.b)\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA8B;AAC9B,mBAAsB;AACtB,mBAA+B;AAUxB,MAAM,sBAAsB,mCAAkC;AAAA,EACpE,YAAmB,GAAmB,GAAY,IAAI,GAAG;AACxD,UAAM,EAAE,GAAG,GAAG,EAAE,CAAC;AADC;AAAmB;AAErC,SAAK,OAAO,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,SAAS,EAAE,CAAC;AAAA,EACzD;AAAA,EAEA,IAAa,SAAS;AACrB,WAAO,mBAAM,KAAK,KAAK,GAAG,KAAK,CAAC;AAAA,EACjC;AAAA,EAEA,IAAI,UAAU;AACb,WAAO,mBAAM,IAAI,KAAK,GAAG,KAAK,CAAC;AAAA,EAChC;AAAA,EAEA,IAAI,QAAQ;AACX,WAAO,mBAAM,MAAM,KAAK,GAAG,KAAK,CAAC;AAAA,EAClC;AAAA,EAEA,IAAa,SAAS;AACrB,WAAO,mBAAM,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;AAAA,EACzC;AAAA,EAEA,KAAK,GAAW;AACf,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,WAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;AAAA,EAC5B;AAAA,EAEA,KAAK,GAAW;AACf,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,WAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;AAAA,EAC5B;AAAA,EAEA,SAAS,GAAW;AACnB,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,QAAI,KAAK;AAAG,aAAO,mBAAM,KAAK,CAAC;AAC/B,QAAI,KAAK;AAAG,aAAO,mBAAM,KAAK,CAAC;AAE/B,WAAO,mBAAM,IAAI,GAAG,GAAG,CAAC;AAAA,EACzB;AAAA,EAEA,QAAQ,OAAO,MAAM;AACpB,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,QAAI,mBAAM,OAAO,GAAG,CAAC;AAAG,aAAO;AAE/B,WAAO,OAAO,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,GAAG,EAAE,KAAK,EAAE;AAAA,EAC5D;AAAA,EAES,YAAY;AACpB,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,WAAO,mBAAM,IAAI,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,kBAAkB,OAAgB;AAC1C,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK;AAEtB,UAAM,eAAe,mBAAM,0BAA0B,GAAG,GAAG,KAAK;AAEhE,UAAM,kBAAkB,aAAa,KAAK,KAAK;AAE/C,WAAO,EAAE,OAAO,cAAc,UAAU,gBAAgB;AAAA,EACzD;AAAA,EAEA,OAAO,OAAO,GAAkB;AAC/B,WAAO,mBAAM,KAAK,EAAE,GAAG,EAAE,CAAC;AAAA,EAC3B;AAAA,EAEA,OAAO,QAAQ,GAAkB;AAChC,WAAO,mBAAM,IAAI,EAAE,GAAG,EAAE,CAAC;AAAA,EAC1B;AAAA,EAEA,OAAO,MAAM,GAAkB;AAC9B,WAAO,mBAAM,MAAM,EAAE,GAAG,EAAE,CAAC;AAAA,EAC5B;AACD;",
  "names": []
}
