{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ArrowShapeUtil, BookmarkShapeUtil, EmbedShapeUtil, GeoShapeUtil, TextShapeUtil, getValidHttpURLList, isSvgText, isValidHttpURL, useEditor } from \"@tldraw/editor\";\nimport { isNonNull } from \"@tldraw/utils\";\nimport { compressToBase64, decompressFromBase64 } from \"lz-string\";\nimport { useCallback, useEffect } from \"react\";\nimport { pasteExcalidrawContent } from \"./clipboard/pasteExcalidrawContent.mjs\";\nimport { pasteFiles } from \"./clipboard/pasteFiles.mjs\";\nimport { pasteTldrawContent } from \"./clipboard/pasteTldrawContent.mjs\";\nimport { pasteUrl } from \"./clipboard/pasteUrl.mjs\";\nimport { useEditorIsFocused } from \"./useEditorIsFocused.mjs\";\nimport { useEvents } from \"./useEventsProvider.mjs\";\nvar INPUTS = [\"input\", \"select\", \"textarea\"];\nfunction disallowClipboardEvents(editor) {\n  var _document = document,\n    activeElement = _document.activeElement;\n  return editor.isMenuOpen || activeElement && (activeElement.getAttribute(\"contenteditable\") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1);\n}\nfunction blobAsString(_x) {\n  return _blobAsString.apply(this, arguments);\n}\nfunction _blobAsString() {\n  _blobAsString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(blob) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.addEventListener(\"loadend\", function () {\n              var text = reader.result;\n              resolve(text);\n            });\n            reader.addEventListener(\"error\", function () {\n              reject(reader.error);\n            });\n            reader.readAsText(blob);\n          }));\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee4);\n  }));\n  return _blobAsString.apply(this, arguments);\n}\nfunction stripHtml(html) {\n  var doc = document.implementation.createHTMLDocument(\"\");\n  doc.documentElement.innerHTML = html.trim();\n  return doc.body.textContent || doc.body.innerText || \"\";\n}\nvar isFile = function isFile(item) {\n  return item.types.find(function (i) {\n    return i.match(/^image\\//);\n  });\n};\nvar handleText = function handleText(editor, data, point) {\n  var validUrlList = getValidHttpURLList(data);\n  if (validUrlList) {\n    var _iterator = _createForOfIteratorHelper(validUrlList),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var url = _step.value;\n        pasteUrl(editor, url, point);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (isValidHttpURL(data)) {\n    pasteUrl(editor, data, point);\n  } else if (isSvgText(data)) {\n    editor.mark(\"paste\");\n    editor.putExternalContent({\n      type: \"svg-text\",\n      text: data,\n      point: point\n    });\n  } else {\n    editor.mark(\"paste\");\n    editor.putExternalContent({\n      type: \"text\",\n      text: data,\n      point: point\n    });\n  }\n};\nvar handlePasteFromEventClipboardData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(editor, clipboardData, point) {\n    var things, _loop, _i, _Object$values;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(editor.editingId !== null)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 2:\n          if (clipboardData) {\n            _context2.next = 4;\n            break;\n          }\n          throw Error(\"No clipboard data\");\n        case 4:\n          things = [];\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var item;\n            return _regeneratorRuntime().wrap(function _loop$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  item = _Object$values[_i];\n                  _context.t0 = item.kind;\n                  _context.next = _context.t0 === \"file\" ? 4 : _context.t0 === \"string\" ? 6 : 8;\n                  break;\n                case 4:\n                  things.push({\n                    type: \"file\",\n                    source: new Promise(function (r) {\n                      return r(item.getAsFile());\n                    })\n                  });\n                  return _context.abrupt(\"break\", 8);\n                case 6:\n                  if (item.type === \"text/html\") {\n                    things.push({\n                      type: \"html\",\n                      source: new Promise(function (r) {\n                        return item.getAsString(r);\n                      })\n                    });\n                  } else if (item.type === \"text/plain\") {\n                    things.push({\n                      type: \"text\",\n                      source: new Promise(function (r) {\n                        return item.getAsString(r);\n                      })\n                    });\n                  } else {\n                    things.push({\n                      type: item.type,\n                      source: new Promise(function (r) {\n                        return item.getAsString(r);\n                      })\n                    });\n                  }\n                  return _context.abrupt(\"break\", 8);\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _loop);\n          });\n          _i = 0, _Object$values = Object.values(clipboardData.items);\n        case 7:\n          if (!(_i < _Object$values.length)) {\n            _context2.next = 12;\n            break;\n          }\n          return _context2.delegateYield(_loop(), \"t0\", 9);\n        case 9:\n          _i++;\n          _context2.next = 7;\n          break;\n        case 12:\n          handleClipboardThings(editor, things, point);\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return function handlePasteFromEventClipboardData(_x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar handlePasteFromClipboardApi = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(editor, clipboardItems, point) {\n    var things, _iterator2, _step2, _loop2;\n    return _regeneratorRuntime().wrap(function _callee2$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          things = [];\n          _iterator2 = _createForOfIteratorHelper(clipboardItems);\n          _context4.prev = 2;\n          _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n            var item, _iterator3, _step3, type;\n            return _regeneratorRuntime().wrap(function _loop2$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  item = _step2.value;\n                  if (isFile(item)) {\n                    _iterator3 = _createForOfIteratorHelper(item.types);\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        type = _step3.value;\n                        if (type.match(/^image\\//)) {\n                          things.push({\n                            type: \"blob\",\n                            source: item.getType(type)\n                          });\n                        }\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n                  }\n                  if (item.types.includes(\"text/html\")) {\n                    things.push({\n                      type: \"html\",\n                      source: new Promise(function (r) {\n                        return item.getType(\"text/html\").then(function (blob) {\n                          return blobAsString(blob).then(r);\n                        });\n                      })\n                    });\n                  }\n                  if (item.types.includes(\"text/uri-list\")) {\n                    things.push({\n                      type: \"url\",\n                      source: new Promise(function (r) {\n                        return item.getType(\"text/uri-list\").then(function (blob) {\n                          return blobAsString(blob).then(r);\n                        });\n                      })\n                    });\n                  }\n                  if (item.types.includes(\"text/plain\")) {\n                    things.push({\n                      type: \"text\",\n                      source: new Promise(function (r) {\n                        return item.getType(\"text/plain\").then(function (blob) {\n                          return blobAsString(blob).then(r);\n                        });\n                      })\n                    });\n                  }\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _loop2);\n          });\n          _iterator2.s();\n        case 5:\n          if ((_step2 = _iterator2.n()).done) {\n            _context4.next = 9;\n            break;\n          }\n          return _context4.delegateYield(_loop2(), \"t0\", 7);\n        case 7:\n          _context4.next = 5;\n          break;\n        case 9:\n          _context4.next = 14;\n          break;\n        case 11:\n          _context4.prev = 11;\n          _context4.t1 = _context4[\"catch\"](2);\n          _iterator2.e(_context4.t1);\n        case 14:\n          _context4.prev = 14;\n          _iterator2.f();\n          return _context4.finish(14);\n        case 17:\n          _context4.next = 19;\n          return handleClipboardThings(editor, things, point);\n        case 19:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee2, null, [[2, 11, 14, 17]]);\n  }));\n  return function handlePasteFromClipboardApi(_x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction handleClipboardThings(_x8, _x9, _x10) {\n  return _handleClipboardThings.apply(this, arguments);\n}\nfunction _handleClipboardThings() {\n  _handleClipboardThings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(editor, things, point) {\n    var files, fileBlobs, urls, results, _iterator4, _step4, result, _iterator5, _step5, _result, _iterator6, _step6, _result2, rootNode, bodyNode, isHtmlSingleLink, href, _iterator7, _step7, _result3, _iterator8, _step8, _result4;\n    return _regeneratorRuntime().wrap(function _callee5$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          files = things.filter(function (t) {\n            return (t.type === \"file\" || t.type === \"blob\") && t.source !== null;\n          });\n          if (!files.length) {\n            _context7.next = 9;\n            break;\n          }\n          _context7.next = 4;\n          return Promise.all(files.map(function (t) {\n            return t.source;\n          }));\n        case 4:\n          fileBlobs = _context7.sent;\n          urls = fileBlobs.filter(Boolean).map(function (blob) {\n            return URL.createObjectURL(blob);\n          });\n          _context7.next = 8;\n          return pasteFiles(editor, urls, point);\n        case 8:\n          return _context7.abrupt(\"return\", _context7.sent);\n        case 9:\n          _context7.next = 11;\n          return Promise.all(things.filter(function (t) {\n            return t.type !== \"file\";\n          }).map(function (t) {\n            return new Promise(function (r) {\n              var thing = t;\n              if (thing.type === \"file\") {\n                r({\n                  type: \"error\",\n                  data: null,\n                  reason: \"unexpected file\"\n                });\n                return;\n              }\n              thing.source.then(function (text) {\n                var _text$match;\n                var tldrawHtmlComment = (_text$match = text.match(/<tldraw[^>]*>(.*)<\\/tldraw>/)) === null || _text$match === void 0 ? void 0 : _text$match[1];\n                if (tldrawHtmlComment) {\n                  try {\n                    var jsonComment = decompressFromBase64(tldrawHtmlComment);\n                    if (jsonComment === null) {\n                      r({\n                        type: \"error\",\n                        data: jsonComment,\n                        reason: \"found tldraw data comment but could not parse base64\"\n                      });\n                      return;\n                    } else {\n                      var json = JSON.parse(jsonComment);\n                      if (json.type !== \"application/tldraw\") {\n                        r({\n                          type: \"error\",\n                          data: json,\n                          reason: \"found tldraw data comment but JSON was of a different type: \".concat(json.type)\n                        });\n                      }\n                      if (typeof json.data === \"string\") {\n                        r({\n                          type: \"error\",\n                          data: json,\n                          reason: \"found tldraw json but data was a string instead of a TLClipboardModel object\"\n                        });\n                        return;\n                      }\n                      r({\n                        type: \"tldraw\",\n                        data: json.data\n                      });\n                      return;\n                    }\n                  } catch (e) {\n                    r({\n                      type: \"error\",\n                      data: tldrawHtmlComment,\n                      reason: \"found tldraw json but data was a string instead of a TLClipboardModel object\"\n                    });\n                    return;\n                  }\n                } else {\n                  if (thing.type === \"html\") {\n                    r({\n                      type: \"text\",\n                      data: text,\n                      subtype: \"html\"\n                    });\n                    return;\n                  }\n                  if (thing.type === \"url\") {\n                    r({\n                      type: \"text\",\n                      data: text,\n                      subtype: \"url\"\n                    });\n                    return;\n                  }\n                  try {\n                    var _json = JSON.parse(text);\n                    if (_json.type === \"excalidraw/clipboard\") {\n                      r({\n                        type: \"excalidraw\",\n                        data: _json\n                      });\n                      return;\n                    } else {\n                      r({\n                        type: \"text\",\n                        data: text,\n                        subtype: \"json\"\n                      });\n                      return;\n                    }\n                  } catch (e) {\n                    r({\n                      type: \"text\",\n                      data: text,\n                      subtype: \"text\"\n                    });\n                    return;\n                  }\n                }\n                r({\n                  type: \"error\",\n                  data: text,\n                  reason: \"unhandled case\"\n                });\n              });\n            });\n          }));\n        case 11:\n          results = _context7.sent;\n          _iterator4 = _createForOfIteratorHelper(results);\n          _context7.prev = 13;\n          _iterator4.s();\n        case 15:\n          if ((_step4 = _iterator4.n()).done) {\n            _context7.next = 22;\n            break;\n          }\n          result = _step4.value;\n          if (!(result.type === \"tldraw\")) {\n            _context7.next = 20;\n            break;\n          }\n          pasteTldrawContent(editor, result.data, point);\n          return _context7.abrupt(\"return\");\n        case 20:\n          _context7.next = 15;\n          break;\n        case 22:\n          _context7.next = 27;\n          break;\n        case 24:\n          _context7.prev = 24;\n          _context7.t0 = _context7[\"catch\"](13);\n          _iterator4.e(_context7.t0);\n        case 27:\n          _context7.prev = 27;\n          _iterator4.f();\n          return _context7.finish(27);\n        case 30:\n          _iterator5 = _createForOfIteratorHelper(results);\n          _context7.prev = 31;\n          _iterator5.s();\n        case 33:\n          if ((_step5 = _iterator5.n()).done) {\n            _context7.next = 40;\n            break;\n          }\n          _result = _step5.value;\n          if (!(_result.type === \"excalidraw\")) {\n            _context7.next = 38;\n            break;\n          }\n          pasteExcalidrawContent(editor, _result.data, point);\n          return _context7.abrupt(\"return\");\n        case 38:\n          _context7.next = 33;\n          break;\n        case 40:\n          _context7.next = 45;\n          break;\n        case 42:\n          _context7.prev = 42;\n          _context7.t1 = _context7[\"catch\"](31);\n          _iterator5.e(_context7.t1);\n        case 45:\n          _context7.prev = 45;\n          _iterator5.f();\n          return _context7.finish(45);\n        case 48:\n          _iterator6 = _createForOfIteratorHelper(results);\n          _context7.prev = 49;\n          _iterator6.s();\n        case 51:\n          if ((_step6 = _iterator6.n()).done) {\n            _context7.next = 66;\n            break;\n          }\n          _result2 = _step6.value;\n          if (!(_result2.type === \"text\" && _result2.subtype === \"html\")) {\n            _context7.next = 64;\n            break;\n          }\n          rootNode = new DOMParser().parseFromString(_result2.data, \"text/html\");\n          bodyNode = rootNode.querySelector(\"body\");\n          isHtmlSingleLink = bodyNode && Array.from(bodyNode.children).filter(function (el) {\n            return el.nodeType === 1;\n          }).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === \"A\" && bodyNode.firstElementChild.hasAttribute(\"href\") && bodyNode.firstElementChild.getAttribute(\"href\") !== \"\";\n          if (!isHtmlSingleLink) {\n            _context7.next = 61;\n            break;\n          }\n          href = bodyNode.firstElementChild.getAttribute(\"href\");\n          handleText(editor, href, point);\n          return _context7.abrupt(\"return\");\n        case 61:\n          if (!(!results.some(function (r) {\n            return r.type === \"text\" && r.subtype !== \"html\";\n          }) && _result2.data.trim())) {\n            _context7.next = 64;\n            break;\n          }\n          handleText(editor, stripHtml(_result2.data), point);\n          return _context7.abrupt(\"return\");\n        case 64:\n          _context7.next = 51;\n          break;\n        case 66:\n          _context7.next = 71;\n          break;\n        case 68:\n          _context7.prev = 68;\n          _context7.t2 = _context7[\"catch\"](49);\n          _iterator6.e(_context7.t2);\n        case 71:\n          _context7.prev = 71;\n          _iterator6.f();\n          return _context7.finish(71);\n        case 74:\n          _iterator7 = _createForOfIteratorHelper(results);\n          _context7.prev = 75;\n          _iterator7.s();\n        case 77:\n          if ((_step7 = _iterator7.n()).done) {\n            _context7.next = 84;\n            break;\n          }\n          _result3 = _step7.value;\n          if (!(_result3.type === \"text\" && _result3.subtype === \"url\")) {\n            _context7.next = 82;\n            break;\n          }\n          pasteUrl(editor, _result3.data, point);\n          return _context7.abrupt(\"return\");\n        case 82:\n          _context7.next = 77;\n          break;\n        case 84:\n          _context7.next = 89;\n          break;\n        case 86:\n          _context7.prev = 86;\n          _context7.t3 = _context7[\"catch\"](75);\n          _iterator7.e(_context7.t3);\n        case 89:\n          _context7.prev = 89;\n          _iterator7.f();\n          return _context7.finish(89);\n        case 92:\n          _iterator8 = _createForOfIteratorHelper(results);\n          _context7.prev = 93;\n          _iterator8.s();\n        case 95:\n          if ((_step8 = _iterator8.n()).done) {\n            _context7.next = 102;\n            break;\n          }\n          _result4 = _step8.value;\n          if (!(_result4.type === \"text\" && _result4.subtype === \"text\" && _result4.data.trim())) {\n            _context7.next = 100;\n            break;\n          }\n          handleText(editor, _result4.data, point);\n          return _context7.abrupt(\"return\");\n        case 100:\n          _context7.next = 95;\n          break;\n        case 102:\n          _context7.next = 107;\n          break;\n        case 104:\n          _context7.prev = 104;\n          _context7.t4 = _context7[\"catch\"](93);\n          _iterator8.e(_context7.t4);\n        case 107:\n          _context7.prev = 107;\n          _iterator8.f();\n          return _context7.finish(107);\n        case 110:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee5, null, [[13, 24, 27, 30], [31, 42, 45, 48], [49, 68, 71, 74], [75, 86, 89, 92], [93, 104, 107, 110]]);\n  }));\n  return _handleClipboardThings.apply(this, arguments);\n}\nvar handleNativeOrMenuCopy = function handleNativeOrMenuCopy(editor) {\n  var content = editor.getContent();\n  if (!content) {\n    if (navigator && navigator.clipboard) {\n      navigator.clipboard.writeText(\"\");\n    }\n    return;\n  }\n  var stringifiedClipboard = compressToBase64(JSON.stringify({\n    type: \"application/tldraw\",\n    kind: \"content\",\n    data: content\n  }));\n  if (typeof navigator === \"undefined\") {\n    return;\n  } else {\n    var _navigator$clipboard;\n    var textItems = content.shapes.map(function (shape) {\n      if (editor.isShapeOfType(shape, TextShapeUtil) || editor.isShapeOfType(shape, GeoShapeUtil) || editor.isShapeOfType(shape, ArrowShapeUtil)) {\n        return shape.props.text;\n      }\n      if (editor.isShapeOfType(shape, BookmarkShapeUtil) || editor.isShapeOfType(shape, EmbedShapeUtil)) {\n        return shape.props.url;\n      }\n      return null;\n    }).filter(isNonNull);\n    if ((_navigator$clipboard = navigator.clipboard) !== null && _navigator$clipboard !== void 0 && _navigator$clipboard.write) {\n      var htmlBlob = new Blob([\"<tldraw>\".concat(stringifiedClipboard, \"</tldraw>\")], {\n        type: \"text/html\"\n      });\n      var textContent = textItems.join(\" \");\n      if (textContent === \"\") {\n        textContent = \" \";\n      }\n      navigator.clipboard.write([new ClipboardItem({\n        \"text/html\": htmlBlob,\n        // What is this second blob used for?\n        \"text/plain\": new Blob([textContent], {\n          type: \"text/plain\"\n        })\n      })]);\n    } else if (navigator.clipboard.writeText) {\n      navigator.clipboard.writeText(\"<tldraw>\".concat(stringifiedClipboard, \"</tldraw>\"));\n    }\n  }\n};\nfunction useMenuClipboardEvents() {\n  var editor = useEditor();\n  var trackEvent = useEvents();\n  var copy = useCallback(function onCopy(source) {\n    if (editor.selectedIds.length === 0) return;\n    handleNativeOrMenuCopy(editor);\n    trackEvent(\"copy\", {\n      source: source\n    });\n  }, [editor, trackEvent]);\n  var cut = useCallback(function onCut(source) {\n    if (editor.selectedIds.length === 0) return;\n    handleNativeOrMenuCopy(editor);\n    editor.deleteShapes();\n    trackEvent(\"cut\", {\n      source: source\n    });\n  }, [editor, trackEvent]);\n  var paste = useCallback( /*#__PURE__*/function () {\n    var _onPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, source, point) {\n      return _regeneratorRuntime().wrap(function _callee3$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!(editor.editingId !== null || disallowClipboardEvents(editor))) {\n              _context5.next = 2;\n              break;\n            }\n            return _context5.abrupt(\"return\");\n          case 2:\n            if (Array.isArray(data) && data[0] instanceof ClipboardItem) {\n              handlePasteFromClipboardApi(editor, data, point);\n              trackEvent(\"paste\", {\n                source: \"menu\"\n              });\n            } else {\n              navigator.clipboard.read().then(function (clipboardItems) {\n                paste(clipboardItems, source, point);\n              });\n            }\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee3);\n    }));\n    function onPaste(_x11, _x12, _x13) {\n      return _onPaste.apply(this, arguments);\n    }\n    return onPaste;\n  }(), [editor, trackEvent]);\n  return {\n    copy: copy,\n    cut: cut,\n    paste: paste\n  };\n}\nfunction useNativeClipboardEvents() {\n  var editor = useEditor();\n  var trackEvent = useEvents();\n  var appIsFocused = useEditorIsFocused();\n  useEffect(function () {\n    if (!appIsFocused) return;\n    var copy = function copy() {\n      if (editor.selectedIds.length === 0 || editor.editingId !== null || disallowClipboardEvents(editor)) return;\n      handleNativeOrMenuCopy(editor);\n      trackEvent(\"copy\", {\n        source: \"kbd\"\n      });\n    };\n    function cut() {\n      if (editor.selectedIds.length === 0 || editor.editingId !== null || disallowClipboardEvents(editor)) return;\n      handleNativeOrMenuCopy(editor);\n      editor.deleteShapes();\n      trackEvent(\"cut\", {\n        source: \"kbd\"\n      });\n    }\n    var disablingMiddleClickPaste = false;\n    var pointerUpHandler = function pointerUpHandler(e) {\n      if (e.button === 1) {\n        disablingMiddleClickPaste = true;\n        requestAnimationFrame(function () {\n          disablingMiddleClickPaste = false;\n        });\n      }\n    };\n    var paste = function paste(event) {\n      if (disablingMiddleClickPaste) {\n        event.stopPropagation();\n        return;\n      }\n      if (editor.editingId !== null || disallowClipboardEvents(editor)) return;\n      if (event.clipboardData && !editor.inputs.shiftKey) {\n        handlePasteFromEventClipboardData(editor, event.clipboardData);\n      } else {\n        navigator.clipboard.read().then(function (clipboardItems) {\n          if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {\n            handlePasteFromClipboardApi(editor, clipboardItems, editor.inputs.currentPagePoint);\n          }\n        });\n      }\n      trackEvent(\"paste\", {\n        source: \"kbd\"\n      });\n    };\n    document.addEventListener(\"copy\", copy);\n    document.addEventListener(\"cut\", cut);\n    document.addEventListener(\"paste\", paste);\n    document.addEventListener(\"pointerup\", pointerUpHandler);\n    return function () {\n      document.removeEventListener(\"copy\", copy);\n      document.removeEventListener(\"cut\", cut);\n      document.removeEventListener(\"paste\", paste);\n      document.removeEventListener(\"pointerup\", pointerUpHandler);\n    };\n  }, [editor, trackEvent, appIsFocused]);\n}\nexport { useMenuClipboardEvents, useNativeClipboardEvents };","map":{"version":3,"names":["ArrowShapeUtil","BookmarkShapeUtil","EmbedShapeUtil","GeoShapeUtil","TextShapeUtil","getValidHttpURLList","isSvgText","isValidHttpURL","useEditor","isNonNull","compressToBase64","decompressFromBase64","useCallback","useEffect","pasteExcalidrawContent","pasteFiles","pasteTldrawContent","pasteUrl","useEditorIsFocused","useEvents","INPUTS","disallowClipboardEvents","editor","_document","document","activeElement","isMenuOpen","getAttribute","indexOf","tagName","toLowerCase","blobAsString","_x","_blobAsString","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","blob","wrap","_callee4$","_context6","prev","next","abrupt","Promise","resolve","reject","reader","FileReader","addEventListener","text","result","error","readAsText","stop","stripHtml","html","doc","implementation","createHTMLDocument","documentElement","innerHTML","trim","body","textContent","innerText","isFile","item","types","find","i","match","handleText","data","point","validUrlList","_iterator","_createForOfIteratorHelper","_step","s","n","done","url","value","err","e","f","putExternalContent","type","handlePasteFromEventClipboardData","_ref","_callee","clipboardData","things","_loop","_i","_Object$values","_callee$","_context2","editingId","Error","_loop$","_context","t0","kind","push","source","r","getAsFile","getAsString","Object","values","items","length","delegateYield","handleClipboardThings","_x2","_x3","_x4","handlePasteFromClipboardApi","_ref2","_callee2","clipboardItems","_iterator2","_step2","_loop2","_callee2$","_context4","_iterator3","_step3","_loop2$","_context3","getType","includes","then","t1","finish","sent","_x5","_x6","_x7","_x8","_x9","_x10","_handleClipboardThings","_callee5","files","fileBlobs","urls","results","_iterator4","_step4","_iterator5","_step5","_result","_iterator6","_step6","_result2","rootNode","bodyNode","isHtmlSingleLink","href","_iterator7","_step7","_result3","_iterator8","_step8","_result4","_callee5$","_context7","filter","t","all","map","Boolean","URL","createObjectURL","thing","reason","_text$match","tldrawHtmlComment","jsonComment","json","JSON","parse","concat","subtype","DOMParser","parseFromString","querySelector","Array","from","children","el","nodeType","firstElementChild","hasAttribute","some","t2","t3","t4","handleNativeOrMenuCopy","content","getContent","navigator","clipboard","writeText","stringifiedClipboard","stringify","_navigator$clipboard","textItems","shapes","shape","isShapeOfType","props","write","htmlBlob","Blob","join","ClipboardItem","useMenuClipboardEvents","trackEvent","copy","onCopy","selectedIds","cut","onCut","deleteShapes","paste","_onPaste","_callee3","_callee3$","_context5","isArray","read","onPaste","_x11","_x12","_x13","useNativeClipboardEvents","appIsFocused","disablingMiddleClickPaste","pointerUpHandler","button","requestAnimationFrame","event","stopPropagation","inputs","shiftKey","currentPagePoint","removeEventListener"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/useClipboardEvents.ts"],"sourcesContent":["import {\n\tArrowShapeUtil,\n\tBookmarkShapeUtil,\n\tEditor,\n\tEmbedShapeUtil,\n\tGeoShapeUtil,\n\tTLContent,\n\tTextShapeUtil,\n\tgetValidHttpURLList,\n\tisSvgText,\n\tisValidHttpURL,\n\tuseEditor,\n} from '@tldraw/editor'\nimport { VecLike } from '@tldraw/primitives'\nimport { isNonNull } from '@tldraw/utils'\nimport { compressToBase64, decompressFromBase64 } from 'lz-string'\nimport { useCallback, useEffect } from 'react'\nimport { pasteExcalidrawContent } from './clipboard/pasteExcalidrawContent'\nimport { pasteFiles } from './clipboard/pasteFiles'\nimport { pasteTldrawContent } from './clipboard/pasteTldrawContent'\nimport { pasteUrl } from './clipboard/pasteUrl'\nimport { useEditorIsFocused } from './useEditorIsFocused'\nimport { TLUiEventSource, useEvents } from './useEventsProvider'\n\nconst INPUTS = ['input', 'select', 'textarea']\n\n/**\n * Get whether to disallow clipboard events.\n *\n * @param editor - The editor instance.\n * @internal\n */\nfunction disallowClipboardEvents(editor: Editor) {\n\tconst { activeElement } = document\n\treturn (\n\t\teditor.isMenuOpen ||\n\t\t(activeElement &&\n\t\t\t(activeElement.getAttribute('contenteditable') ||\n\t\t\t\tINPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1))\n\t)\n}\n\n/**\n * Get a blob as a string.\n *\n * @param blob - The blob to get as a string.\n * @internal\n */\nasync function blobAsString(blob: Blob) {\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.addEventListener('loadend', () => {\n\t\t\tconst text = reader.result\n\t\t\tresolve(text as string)\n\t\t})\n\t\treader.addEventListener('error', () => {\n\t\t\treject(reader.error)\n\t\t})\n\t\treader.readAsText(blob)\n\t})\n}\n\n/**\n * Strip HTML tags from a string.\n * @param html - The HTML to strip.\n * @internal\n */\nfunction stripHtml(html: string) {\n\t// See <https://github.com/developit/preact-markup/blob/4788b8d61b4e24f83688710746ee36e7464f7bbc/src/parse-markup.js#L60-L69>\n\tconst doc = document.implementation.createHTMLDocument('')\n\tdoc.documentElement.innerHTML = html.trim()\n\treturn doc.body.textContent || doc.body.innerText || ''\n}\n\n/**\n * Whether a ClipboardItem is a file.\n * @param item - The ClipboardItem to check.\n * @internal\n */\nconst isFile = (item: ClipboardItem) => {\n\treturn item.types.find((i) => i.match(/^image\\//))\n}\n\n/**\n * Handle text pasted into the editor.\n * @param editor - The editor instance.\n * @param data - The text to paste.\n * @param point - (optional) The point at which to paste the text.\n * @internal\n */\nconst handleText = (editor: Editor, data: string, point?: VecLike) => {\n\tconst validUrlList = getValidHttpURLList(data)\n\tif (validUrlList) {\n\t\tfor (const url of validUrlList) {\n\t\t\tpasteUrl(editor, url, point)\n\t\t}\n\t} else if (isValidHttpURL(data)) {\n\t\tpasteUrl(editor, data, point)\n\t} else if (isSvgText(data)) {\n\t\teditor.mark('paste')\n\t\teditor.putExternalContent({\n\t\t\ttype: 'svg-text',\n\t\t\ttext: data,\n\t\t\tpoint,\n\t\t})\n\t} else {\n\t\teditor.mark('paste')\n\t\teditor.putExternalContent({\n\t\t\ttype: 'text',\n\t\t\ttext: data,\n\t\t\tpoint,\n\t\t})\n\t}\n}\n\n/**\n * Something found on the clipboard, either through the event's clipboard data or the browser's clipboard API.\n * @internal\n */\ntype ClipboardThing =\n\t| {\n\t\t\ttype: 'file'\n\t\t\tsource: Promise<File | null>\n\t  }\n\t| {\n\t\t\ttype: 'blob'\n\t\t\tsource: Promise<Blob | null>\n\t  }\n\t| {\n\t\t\ttype: 'url'\n\t\t\tsource: Promise<string>\n\t  }\n\t| {\n\t\t\ttype: 'html'\n\t\t\tsource: Promise<string>\n\t  }\n\t| {\n\t\t\ttype: 'text'\n\t\t\tsource: Promise<string>\n\t  }\n\t| {\n\t\t\ttype: string\n\t\t\tsource: Promise<string>\n\t  }\n\n/**\n * The result of processing a `ClipboardThing`.\n * @internal\n */\ntype ClipboardResult =\n\t| {\n\t\t\ttype: 'tldraw'\n\t\t\tdata: TLContent\n\t  }\n\t| {\n\t\t\ttype: 'excalidraw'\n\t\t\tdata: any\n\t  }\n\t| {\n\t\t\ttype: 'text'\n\t\t\tdata: string\n\t\t\tsubtype: 'json' | 'html' | 'text' | 'url'\n\t  }\n\t| {\n\t\t\ttype: 'error'\n\t\t\tdata: string | null\n\t\t\treason: string\n\t  }\n\n/**\n * Handle a paste using event clipboard data. This is the \"original\"\n * paste method that uses the clipboard data from the paste event.\n * https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData\n *\n * @param editor - The editor\n * @param clipboardData - The clipboard data\n * @param point - (optional) The point to paste at\n * @internal\n */\nconst handlePasteFromEventClipboardData = async (\n\teditor: Editor,\n\tclipboardData: DataTransfer,\n\tpoint?: VecLike\n) => {\n\t// Do not paste while in any editing state\n\tif (editor.editingId !== null) return\n\n\tif (!clipboardData) {\n\t\tthrow Error('No clipboard data')\n\t}\n\n\tconst things: ClipboardThing[] = []\n\n\tfor (const item of Object.values(clipboardData.items)) {\n\t\tswitch (item.kind) {\n\t\t\tcase 'file': {\n\t\t\t\t// files are always blobs\n\t\t\t\tthings.push({\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tsource: new Promise((r) => r(item.getAsFile())) as Promise<File | null>,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'string': {\n\t\t\t\t// strings can be text or html\n\t\t\t\tif (item.type === 'text/html') {\n\t\t\t\t\tthings.push({\n\t\t\t\t\t\ttype: 'html',\n\t\t\t\t\t\tsource: new Promise((r) => item.getAsString(r)) as Promise<string>,\n\t\t\t\t\t})\n\t\t\t\t} else if (item.type === 'text/plain') {\n\t\t\t\t\tthings.push({\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\tsource: new Promise((r) => item.getAsString(r)) as Promise<string>,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tthings.push({ type: item.type, source: new Promise((r) => item.getAsString(r)) })\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\thandleClipboardThings(editor, things, point)\n}\n\n/**\n * Handle a paste using items retrieved from the Clipboard API.\n * https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem\n *\n * @param editor - The editor\n * @param clipboardItems - The clipboard items to handle\n * @param point - (optional) The point to paste at\n * @internal\n */\nconst handlePasteFromClipboardApi = async (\n\teditor: Editor,\n\tclipboardItems: ClipboardItem[],\n\tpoint?: VecLike\n) => {\n\t// We need to populate the array of clipboard things\n\t// based on the ClipboardItems from the Clipboard API.\n\t// This is done in a different way than when using\n\t// the clipboard data from the paste event.\n\n\tconst things: ClipboardThing[] = []\n\n\tfor (const item of clipboardItems) {\n\t\tif (isFile(item)) {\n\t\t\tfor (const type of item.types) {\n\t\t\t\tif (type.match(/^image\\//)) {\n\t\t\t\t\tthings.push({ type: 'blob', source: item.getType(type) })\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (item.types.includes('text/html')) {\n\t\t\tthings.push({\n\t\t\t\ttype: 'html',\n\t\t\t\tsource: new Promise<string>((r) =>\n\t\t\t\t\titem.getType('text/html').then((blob) => blobAsString(blob).then(r))\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\n\t\tif (item.types.includes('text/uri-list')) {\n\t\t\tthings.push({\n\t\t\t\ttype: 'url',\n\t\t\t\tsource: new Promise<string>((r) =>\n\t\t\t\t\titem.getType('text/uri-list').then((blob) => blobAsString(blob).then(r))\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\n\t\tif (item.types.includes('text/plain')) {\n\t\t\tthings.push({\n\t\t\t\ttype: 'text',\n\t\t\t\tsource: new Promise<string>((r) =>\n\t\t\t\t\titem.getType('text/plain').then((blob) => blobAsString(blob).then(r))\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\treturn await handleClipboardThings(editor, things, point)\n}\n\nasync function handleClipboardThings(editor: Editor, things: ClipboardThing[], point?: VecLike) {\n\t// 1. Handle files\n\t//\n\t// We need to handle files separately because if we want them to\n\t// be placed next to each other, we need to create them all at once.\n\n\tconst files = things.filter(\n\t\t(t) => (t.type === 'file' || t.type === 'blob') && t.source !== null\n\t) as Extract<ClipboardThing, { type: 'file' } | { type: 'blob' }>[]\n\n\t// Just paste the files, nothing else\n\tif (files.length) {\n\t\tconst fileBlobs = await Promise.all(files.map((t) => t.source!))\n\t\tconst urls = (fileBlobs.filter(Boolean) as (File | Blob)[]).map((blob) =>\n\t\t\tURL.createObjectURL(blob)\n\t\t)\n\t\treturn await pasteFiles(editor, urls, point)\n\t}\n\n\t// 2. Generate clipboard results for non-file things\n\t//\n\t// Getting the source from the items is async, however they must be accessed syncronously;\n\t// we can't await them in a loop. So we'll map them to promises and await them all at once,\n\t// then make decisions based on what we find.\n\n\tconst results = await Promise.all<ClipboardResult>(\n\t\tthings\n\t\t\t.filter((t) => t.type !== 'file')\n\t\t\t.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tnew Promise((r) => {\n\t\t\t\t\t\tconst thing = t as Exclude<ClipboardThing, { type: 'file' } | { type: 'blob' }>\n\n\t\t\t\t\t\tif (thing.type === 'file') {\n\t\t\t\t\t\t\tr({ type: 'error', data: null, reason: 'unexpected file' })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthing.source.then((text) => {\n\t\t\t\t\t\t\t// first, see if we can find tldraw content, which is JSON inside of an html comment\n\t\t\t\t\t\t\tconst tldrawHtmlComment = text.match(/<tldraw[^>]*>(.*)<\\/tldraw>/)?.[1]\n\n\t\t\t\t\t\t\tif (tldrawHtmlComment) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t// If we've found tldraw content in the html string, use that as JSON\n\t\t\t\t\t\t\t\t\tconst jsonComment = decompressFromBase64(tldrawHtmlComment)\n\t\t\t\t\t\t\t\t\tif (jsonComment === null) {\n\t\t\t\t\t\t\t\t\t\tr({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\t\t\tdata: jsonComment,\n\t\t\t\t\t\t\t\t\t\t\treason: `found tldraw data comment but could not parse base64`,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst json = JSON.parse(jsonComment)\n\t\t\t\t\t\t\t\t\t\tif (json.type !== 'application/tldraw') {\n\t\t\t\t\t\t\t\t\t\t\tr({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\t\t\t\tdata: json,\n\t\t\t\t\t\t\t\t\t\t\t\treason: `found tldraw data comment but JSON was of a different type: ${json.type}`,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (typeof json.data === 'string') {\n\t\t\t\t\t\t\t\t\t\t\tr({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\t\t\t\tdata: json,\n\t\t\t\t\t\t\t\t\t\t\t\treason:\n\t\t\t\t\t\t\t\t\t\t\t\t\t'found tldraw json but data was a string instead of a TLClipboardModel object',\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tr({ type: 'tldraw', data: json.data })\n\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\t\t\tr({\n\t\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\t\tdata: tldrawHtmlComment,\n\t\t\t\t\t\t\t\t\t\treason:\n\t\t\t\t\t\t\t\t\t\t\t'found tldraw json but data was a string instead of a TLClipboardModel object',\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (thing.type === 'html') {\n\t\t\t\t\t\t\t\t\tr({ type: 'text', data: text, subtype: 'html' })\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (thing.type === 'url') {\n\t\t\t\t\t\t\t\t\tr({ type: 'text', data: text, subtype: 'url' })\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// if we have not found a tldraw comment, Otherwise, try to parse the text as JSON directly.\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst json = JSON.parse(text)\n\t\t\t\t\t\t\t\t\tif (json.type === 'excalidraw/clipboard') {\n\t\t\t\t\t\t\t\t\t\t// If the clipboard contains content copied from excalidraw, then paste that\n\t\t\t\t\t\t\t\t\t\tr({ type: 'excalidraw', data: json })\n\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tr({ type: 'text', data: text, subtype: 'json' })\n\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t// If we could not parse the text as JSON, then it's just text\n\t\t\t\t\t\t\t\t\tr({ type: 'text', data: text, subtype: 'text' })\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tr({ type: 'error', data: text, reason: 'unhandled case' })\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t)\n\t)\n\n\t// 3.\n\t//\n\t// Now that we know what kind of stuff we're dealing with, we can actual create some content.\n\t// There are priorities here, so order matters: we've already handled images and files, which\n\t// take first priority; then we want to handle tldraw content, then excalidraw content, then\n\t// html content, then links, and finally text content.\n\n\t// Try to paste tldraw content\n\tfor (const result of results) {\n\t\tif (result.type === 'tldraw') {\n\t\t\tpasteTldrawContent(editor, result.data, point)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// Try to paste excalidraw content\n\tfor (const result of results) {\n\t\tif (result.type === 'excalidraw') {\n\t\t\tpasteExcalidrawContent(editor, result.data, point)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// Try to paste html content\n\tfor (const result of results) {\n\t\tif (result.type === 'text' && result.subtype === 'html') {\n\t\t\t// try to find a link\n\t\t\tconst rootNode = new DOMParser().parseFromString(result.data, 'text/html')\n\t\t\tconst bodyNode = rootNode.querySelector('body')\n\n\t\t\t// Edge on Windows 11 home appears to paste a link as a single <a/> in\n\t\t\t// the HTML document. If we're pasting a single like tag we'll just\n\t\t\t// assume the user meant to paste the URL.\n\t\t\tconst isHtmlSingleLink =\n\t\t\t\tbodyNode &&\n\t\t\t\tArray.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&\n\t\t\t\tbodyNode.firstElementChild &&\n\t\t\t\tbodyNode.firstElementChild.tagName === 'A' &&\n\t\t\t\tbodyNode.firstElementChild.hasAttribute('href') &&\n\t\t\t\tbodyNode.firstElementChild.getAttribute('href') !== ''\n\n\t\t\tif (isHtmlSingleLink) {\n\t\t\t\tconst href = bodyNode.firstElementChild.getAttribute('href')!\n\t\t\t\thandleText(editor, href, point)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If the html is NOT a link, and we have NO OTHER texty content, then paste the html as text\n\t\t\tif (!results.some((r) => r.type === 'text' && r.subtype !== 'html') && result.data.trim()) {\n\t\t\t\thandleText(editor, stripHtml(result.data), point)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\t// Try to paste a link\n\tfor (const result of results) {\n\t\tif (result.type === 'text' && result.subtype === 'url') {\n\t\t\tpasteUrl(editor, result.data, point)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// Finally, if we haven't bailed on anything yet, we can paste text content\n\tfor (const result of results) {\n\t\tif (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {\n\t\t\t// The clipboard may include multiple text items, but we only want to paste the first one\n\t\t\thandleText(editor, result.data, point)\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * When the user copies, write the contents to local storage and to the clipboard\n *\n * @param editor - The editor instance.\n * @public\n */\nconst handleNativeOrMenuCopy = (editor: Editor) => {\n\tconst content = editor.getContent()\n\tif (!content) {\n\t\tif (navigator && navigator.clipboard) {\n\t\t\tnavigator.clipboard.writeText('')\n\t\t}\n\t\treturn\n\t}\n\n\tconst stringifiedClipboard = compressToBase64(\n\t\tJSON.stringify({\n\t\t\ttype: 'application/tldraw',\n\t\t\tkind: 'content',\n\t\t\tdata: content,\n\t\t})\n\t)\n\n\tif (typeof navigator === 'undefined') {\n\t\treturn\n\t} else {\n\t\t// Extract the text from the clipboard\n\t\tconst textItems = content.shapes\n\t\t\t.map((shape) => {\n\t\t\t\tif (\n\t\t\t\t\teditor.isShapeOfType(shape, TextShapeUtil) ||\n\t\t\t\t\teditor.isShapeOfType(shape, GeoShapeUtil) ||\n\t\t\t\t\teditor.isShapeOfType(shape, ArrowShapeUtil)\n\t\t\t\t) {\n\t\t\t\t\treturn shape.props.text\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\teditor.isShapeOfType(shape, BookmarkShapeUtil) ||\n\t\t\t\t\teditor.isShapeOfType(shape, EmbedShapeUtil)\n\t\t\t\t) {\n\t\t\t\t\treturn shape.props.url\n\t\t\t\t}\n\t\t\t\treturn null\n\t\t\t})\n\t\t\t.filter(isNonNull)\n\n\t\tif (navigator.clipboard?.write) {\n\t\t\tconst htmlBlob = new Blob([`<tldraw>${stringifiedClipboard}</tldraw>`], {\n\t\t\t\ttype: 'text/html',\n\t\t\t})\n\n\t\t\tlet textContent = textItems.join(' ')\n\n\t\t\t// This is a bug in chrome android where it won't paste content if\n\t\t\t// the text/plain content is \"\" so we need to always add an empty\n\t\t\t// space 🤬\n\t\t\tif (textContent === '') {\n\t\t\t\ttextContent = ' '\n\t\t\t}\n\n\t\t\tnavigator.clipboard.write([\n\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t'text/html': htmlBlob,\n\t\t\t\t\t// What is this second blob used for?\n\t\t\t\t\t'text/plain': new Blob([textContent], { type: 'text/plain' }),\n\t\t\t\t}),\n\t\t\t])\n\t\t} else if (navigator.clipboard.writeText) {\n\t\t\tnavigator.clipboard.writeText(`<tldraw>${stringifiedClipboard}</tldraw>`)\n\t\t}\n\t}\n}\n\n/** @public */\nexport function useMenuClipboardEvents() {\n\tconst editor = useEditor()\n\tconst trackEvent = useEvents()\n\n\tconst copy = useCallback(\n\t\tfunction onCopy(source: TLUiEventSource) {\n\t\t\tif (editor.selectedIds.length === 0) return\n\n\t\t\thandleNativeOrMenuCopy(editor)\n\t\t\ttrackEvent('copy', { source })\n\t\t},\n\t\t[editor, trackEvent]\n\t)\n\n\tconst cut = useCallback(\n\t\tfunction onCut(source: TLUiEventSource) {\n\t\t\tif (editor.selectedIds.length === 0) return\n\n\t\t\thandleNativeOrMenuCopy(editor)\n\t\t\teditor.deleteShapes()\n\t\t\ttrackEvent('cut', { source })\n\t\t},\n\t\t[editor, trackEvent]\n\t)\n\n\tconst paste = useCallback(\n\t\tasync function onPaste(\n\t\t\tdata: DataTransfer | ClipboardItem[],\n\t\t\tsource: TLUiEventSource,\n\t\t\tpoint?: VecLike\n\t\t) {\n\t\t\t// If we're editing a shape, or we are focusing an editable input, then\n\t\t\t// we would want the user's paste interaction to go to that element or\n\t\t\t// input instead; e.g. when pasting text into a text shape's content\n\t\t\tif (editor.editingId !== null || disallowClipboardEvents(editor)) return\n\n\t\t\tif (Array.isArray(data) && data[0] instanceof ClipboardItem) {\n\t\t\t\thandlePasteFromClipboardApi(editor, data, point)\n\t\t\t\ttrackEvent('paste', { source: 'menu' })\n\t\t\t} else {\n\t\t\t\t// Read it first and then recurse, kind of weird\n\t\t\t\tnavigator.clipboard.read().then((clipboardItems) => {\n\t\t\t\t\tpaste(clipboardItems, source, point)\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\t[editor, trackEvent]\n\t)\n\n\treturn {\n\t\tcopy,\n\t\tcut,\n\t\tpaste,\n\t}\n}\n\n/** @public */\nexport function useNativeClipboardEvents() {\n\tconst editor = useEditor()\n\tconst trackEvent = useEvents()\n\n\tconst appIsFocused = useEditorIsFocused()\n\n\tuseEffect(() => {\n\t\tif (!appIsFocused) return\n\t\tconst copy = () => {\n\t\t\tif (\n\t\t\t\teditor.selectedIds.length === 0 ||\n\t\t\t\teditor.editingId !== null ||\n\t\t\t\tdisallowClipboardEvents(editor)\n\t\t\t)\n\t\t\t\treturn\n\t\t\thandleNativeOrMenuCopy(editor)\n\t\t\ttrackEvent('copy', { source: 'kbd' })\n\t\t}\n\n\t\tfunction cut() {\n\t\t\tif (\n\t\t\t\teditor.selectedIds.length === 0 ||\n\t\t\t\teditor.editingId !== null ||\n\t\t\t\tdisallowClipboardEvents(editor)\n\t\t\t)\n\t\t\t\treturn\n\t\t\thandleNativeOrMenuCopy(editor)\n\t\t\teditor.deleteShapes()\n\t\t\ttrackEvent('cut', { source: 'kbd' })\n\t\t}\n\n\t\tlet disablingMiddleClickPaste = false\n\t\tconst pointerUpHandler = (e: PointerEvent) => {\n\t\t\tif (e.button === 1) {\n\t\t\t\tdisablingMiddleClickPaste = true\n\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\tdisablingMiddleClickPaste = false\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tconst paste = (event: ClipboardEvent) => {\n\t\t\tif (disablingMiddleClickPaste) {\n\t\t\t\tevent.stopPropagation()\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If we're editing a shape, or we are focusing an editable input, then\n\t\t\t// we would want the user's paste interaction to go to that element or\n\t\t\t// input instead; e.g. when pasting text into a text shape's content\n\t\t\tif (editor.editingId !== null || disallowClipboardEvents(editor)) return\n\n\t\t\t// First try to use the clipboard data on the event\n\t\t\tif (event.clipboardData && !editor.inputs.shiftKey) {\n\t\t\t\thandlePasteFromEventClipboardData(editor, event.clipboardData)\n\t\t\t} else {\n\t\t\t\t// Or else use the clipboard API\n\t\t\t\tnavigator.clipboard.read().then((clipboardItems) => {\n\t\t\t\t\tif (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {\n\t\t\t\t\t\thandlePasteFromClipboardApi(editor, clipboardItems, editor.inputs.currentPagePoint)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\ttrackEvent('paste', { source: 'kbd' })\n\t\t}\n\n\t\tdocument.addEventListener('copy', copy)\n\t\tdocument.addEventListener('cut', cut)\n\t\tdocument.addEventListener('paste', paste)\n\t\tdocument.addEventListener('pointerup', pointerUpHandler)\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('copy', copy)\n\t\t\tdocument.removeEventListener('cut', cut)\n\t\t\tdocument.removeEventListener('paste', paste)\n\t\t\tdocument.removeEventListener('pointerup', pointerUpHandler)\n\t\t}\n\t}, [editor, trackEvent, appIsFocused])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}