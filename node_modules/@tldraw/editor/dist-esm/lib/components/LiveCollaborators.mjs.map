{
  "version": 3,
  "sources": ["../../../src/lib/components/LiveCollaborators.tsx"],
  "sourcesContent": ["import { useEffect, useRef, useState } from 'react'\nimport { track } from 'signia-react'\nimport { COLLABORATOR_CHECK_INTERVAL, COLLABORATOR_TIMEOUT } from '../constants'\nimport { useEditor } from '../hooks/useEditor'\nimport { useEditorComponents } from '../hooks/useEditorComponents'\nimport { usePeerIds } from '../hooks/usePeerIds'\nimport { usePresence } from '../hooks/usePresence'\n\nexport const LiveCollaborators = track(function Collaborators() {\n\tconst peerIds = usePeerIds()\n\treturn (\n\t\t<>\n\t\t\t{peerIds.map((id) => (\n\t\t\t\t<Collaborator key={id} userId={id} />\n\t\t\t))}\n\t\t</>\n\t)\n})\n\nconst Collaborator = track(function Collaborator({ userId }: { userId: string }) {\n\tconst editor = useEditor()\n\tconst { viewportPageBounds, zoomLevel } = editor\n\n\tconst {\n\t\tCollaboratorBrush,\n\t\tCollaboratorScribble,\n\t\tCollaboratorCursor,\n\t\tCollaboratorHint,\n\t\tCollaboratorShapeIndicator,\n\t} = useEditorComponents()\n\n\tconst latestPresence = usePresence(userId)\n\n\tconst [isTimedOut, setIsTimedOut] = useState(false)\n\tconst rLastSeen = useRef(-1)\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetIsTimedOut(Date.now() - rLastSeen.current > COLLABORATOR_TIMEOUT)\n\t\t}, COLLABORATOR_CHECK_INTERVAL)\n\n\t\treturn () => clearInterval(interval)\n\t}, [])\n\n\tif (!latestPresence) return null\n\n\t// We can do this on every render, it's free and would be the same as running a useEffect with a dependency on the timestamp\n\trLastSeen.current = latestPresence.lastActivityTimestamp\n\n\t// If the user has timed out\n\t// ... and we're not following them\n\t// ... and they're not highlighted\n\t// then we'll hide the contributor\n\tif (\n\t\tisTimedOut &&\n\t\teditor.instanceState.followingUserId !== userId &&\n\t\t!editor.instanceState.highlightedUserIds.includes(userId)\n\t)\n\t\treturn null\n\n\t// if the collaborator is on another page, ignore them\n\tif (latestPresence.currentPageId !== editor.currentPageId) return null\n\n\tconst { brush, scribble, selectedIds, userName, cursor, color, chatMessage } = latestPresence\n\n\t// Add a little padding to the top-left of the viewport\n\t// so that the cursor doesn't get cut off\n\tconst isCursorInViewport = !(\n\t\tcursor.x < viewportPageBounds.minX - 12 / zoomLevel ||\n\t\tcursor.y < viewportPageBounds.minY - 16 / zoomLevel ||\n\t\tcursor.x > viewportPageBounds.maxX - 12 / zoomLevel ||\n\t\tcursor.y > viewportPageBounds.maxY - 16 / zoomLevel\n\t)\n\n\treturn (\n\t\t<>\n\t\t\t{brush && CollaboratorBrush ? (\n\t\t\t\t<CollaboratorBrush\n\t\t\t\t\tclassName=\"tl-collaborator__brush\"\n\t\t\t\t\tkey={userId + '_brush'}\n\t\t\t\t\tbrush={brush}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\topacity={0.1}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t{isCursorInViewport && CollaboratorCursor ? (\n\t\t\t\t<CollaboratorCursor\n\t\t\t\t\tclassName=\"tl-collaborator__cursor\"\n\t\t\t\t\tkey={userId + '_cursor'}\n\t\t\t\t\tpoint={cursor}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\tzoom={zoomLevel}\n\t\t\t\t\tname={userName !== 'New User' ? userName : null}\n\t\t\t\t\tchatMessage={chatMessage}\n\t\t\t\t/>\n\t\t\t) : CollaboratorHint ? (\n\t\t\t\t<CollaboratorHint\n\t\t\t\t\tclassName=\"tl-collaborator__cursor-hint\"\n\t\t\t\t\tkey={userId + '_cursor_hint'}\n\t\t\t\t\tpoint={cursor}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\tzoom={zoomLevel}\n\t\t\t\t\tviewport={viewportPageBounds}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t{scribble && CollaboratorScribble ? (\n\t\t\t\t<CollaboratorScribble\n\t\t\t\t\tclassName=\"tl-collaborator__scribble\"\n\t\t\t\t\tkey={userId + '_scribble'}\n\t\t\t\t\tscribble={scribble}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\tzoom={zoomLevel}\n\t\t\t\t\topacity={scribble.color === 'laser' ? 0.5 : 0.1}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t{CollaboratorShapeIndicator &&\n\t\t\t\tselectedIds.map((shapeId) => (\n\t\t\t\t\t<CollaboratorShapeIndicator\n\t\t\t\t\t\tclassName=\"tl-collaborator__shape-indicator\"\n\t\t\t\t\t\tkey={userId + '_' + shapeId}\n\t\t\t\t\t\tid={shapeId}\n\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\topacity={0.5}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</>\n\t)\n})\n"],
  "mappings": "AAWE,mBAEE,KA8DF,YAhEA;AAXF,SAAS,WAAW,QAAQ,gBAAgB;AAC5C,SAAS,aAAa;AACtB,SAAS,6BAA6B,4BAA4B;AAClE,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAErB,MAAM,oBAAoB,MAAM,SAAS,gBAAgB;AAC/D,QAAM,UAAU,WAAW;AAC3B,SACC,gCACE,kBAAQ,IAAI,CAAC,OACb,oBAAC,gBAAsB,QAAQ,MAAZ,EAAgB,CACnC,GACF;AAEF,CAAC;AAED,MAAM,eAAe,MAAM,SAASA,cAAa,EAAE,OAAO,GAAuB;AAChF,QAAM,SAAS,UAAU;AACzB,QAAM,EAAE,oBAAoB,UAAU,IAAI;AAE1C,QAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD,IAAI,oBAAoB;AAExB,QAAM,iBAAiB,YAAY,MAAM;AAEzC,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,KAAK;AAClD,QAAM,YAAY,OAAO,EAAE;AAE3B,YAAU,MAAM;AACf,UAAM,WAAW,YAAY,MAAM;AAClC,oBAAc,KAAK,IAAI,IAAI,UAAU,UAAU,oBAAoB;AAAA,IACpE,GAAG,2BAA2B;AAE9B,WAAO,MAAM,cAAc,QAAQ;AAAA,EACpC,GAAG,CAAC,CAAC;AAEL,MAAI,CAAC;AAAgB,WAAO;AAG5B,YAAU,UAAU,eAAe;AAMnC,MACC,cACA,OAAO,cAAc,oBAAoB,UACzC,CAAC,OAAO,cAAc,mBAAmB,SAAS,MAAM;AAExD,WAAO;AAGR,MAAI,eAAe,kBAAkB,OAAO;AAAe,WAAO;AAElE,QAAM,EAAE,OAAO,UAAU,aAAa,UAAU,QAAQ,OAAO,YAAY,IAAI;AAI/E,QAAM,qBAAqB,EAC1B,OAAO,IAAI,mBAAmB,OAAO,KAAK,aAC1C,OAAO,IAAI,mBAAmB,OAAO,KAAK,aAC1C,OAAO,IAAI,mBAAmB,OAAO,KAAK,aAC1C,OAAO,IAAI,mBAAmB,OAAO,KAAK;AAG3C,SACC,iCACE;AAAA,aAAS,oBACT;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QAEV;AAAA,QACA;AAAA,QACA,SAAS;AAAA;AAAA,MAHJ,SAAS;AAAA,IAIf,IACG;AAAA,IACH,sBAAsB,qBACtB;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QAEV,OAAO;AAAA,QACP;AAAA,QACA,MAAM;AAAA,QACN,MAAM,aAAa,aAAa,WAAW;AAAA,QAC3C;AAAA;AAAA,MALK,SAAS;AAAA,IAMf,IACG,mBACH;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QAEV,OAAO;AAAA,QACP;AAAA,QACA,MAAM;AAAA,QACN,UAAU;AAAA;AAAA,MAJL,SAAS;AAAA,IAKf,IACG;AAAA,IACH,YAAY,uBACZ;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QAEV;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,SAAS,SAAS,UAAU,UAAU,MAAM;AAAA;AAAA,MAJvC,SAAS;AAAA,IAKf,IACG;AAAA,IACH,8BACA,YAAY,IAAI,CAAC,YAChB;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QAEV,IAAI;AAAA,QACJ;AAAA,QACA,SAAS;AAAA;AAAA,MAHJ,SAAS,MAAM;AAAA,IAIrB,CACA;AAAA,KACH;AAEF,CAAC;",
  "names": ["Collaborator"]
}
