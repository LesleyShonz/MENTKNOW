{"ast":null,"code":"/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\nimport * as set from './set.js';\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nexport var last = function last(arr) {\n  return arr[arr.length - 1];\n};\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport var create = function create() {\n  return (/** @type {Array<C>} */[]\n  );\n};\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport var copy = function copy(a) {\n  return (/** @type {Array<D>} */a.slice()\n  );\n};\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport var appendTo = function appendTo(dest, src) {\n  for (var i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n};\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport var from = Array.from;\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n * @template {ArrayLike<ITEM>} ARR\n *\n * @param {ARR} arr\n * @param {function(ITEM, number, ARR):boolean} f\n * @return {boolean}\n */\nexport var every = function every(arr, f) {\n  for (var i = 0; i < arr.length; i++) {\n    if (!f(arr[i], i, arr)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @template {ArrayLike<S>} ARR\n * @param {ARR} arr\n * @param {function(S, number, ARR):boolean} f\n * @return {boolean}\n */\nexport var some = function some(arr, f) {\n  for (var i = 0; i < arr.length; i++) {\n    if (f(arr[i], i, arr)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @template ELEM\n *\n * @param {ArrayLike<ELEM>} a\n * @param {ArrayLike<ELEM>} b\n * @return {boolean}\n */\nexport var equalFlat = function equalFlat(a, b) {\n  return a.length === b.length && every(a, function (item, index) {\n    return item === b[index];\n  });\n};\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport var flatten = function flatten(arr) {\n  return fold(arr, /** @type {Array<ELEM>} */[], function (acc, val) {\n    return acc.concat(val);\n  });\n};\n\n/**\n * @template T\n * @param {number} len\n * @param {function(number, Array<T>):T} f\n * @return {Array<T>}\n */\nexport var unfold = function unfold(len, f) {\n  var array = new Array(len);\n  for (var i = 0; i < len; i++) {\n    array[i] = f(i, array);\n  }\n  return array;\n};\n\n/**\n * @template T\n * @template RESULT\n * @param {Array<T>} arr\n * @param {RESULT} seed\n * @param {function(RESULT, T, number):RESULT} folder\n */\nexport var fold = function fold(arr, seed, folder) {\n  return arr.reduce(folder, seed);\n};\nexport var isArray = Array.isArray;\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {Array<T>}\n */\nexport var unique = function unique(arr) {\n  return from(set.from(arr));\n};\n\n/**\n * @template T\n * @template M\n * @param {ArrayLike<T>} arr\n * @param {function(T):M} mapper\n * @return {Array<T>}\n */\nexport var uniqueBy = function uniqueBy(arr, mapper) {\n  /**\n   * @type {Set<M>}\n   */\n  var happened = set.create();\n  /**\n   * @type {Array<T>}\n   */\n  var result = [];\n  for (var i = 0; i < arr.length; i++) {\n    var el = arr[i];\n    var mapped = mapper(el);\n    if (!happened.has(mapped)) {\n      happened.add(mapped);\n      result.push(el);\n    }\n  }\n  return result;\n};\n\n/**\n * @template {ArrayLike<any>} ARR\n * @template {function(ARR extends ArrayLike<infer T> ? T : never, number, ARR):any} MAPPER\n * @param {ARR} arr\n * @param {MAPPER} mapper\n * @return {Array<MAPPER extends function(...any): infer M ? M : never>}\n */\nexport var map = function map(arr, mapper) {\n  /**\n   * @type {Array<any>}\n   */\n  var res = Array(arr.length);\n  for (var i = 0; i < arr.length; i++) {\n    res[i] = mapper( /** @type {any} */arr[i], i, /** @type {any} */arr);\n  }\n  return (/** @type {any} */res\n  );\n};","map":{"version":3,"names":["set","last","arr","length","create","copy","a","slice","appendTo","dest","src","i","push","from","Array","every","f","some","equalFlat","b","item","index","flatten","fold","acc","val","concat","unfold","len","array","seed","folder","reduce","isArray","unique","uniqueBy","mapper","happened","result","el","mapped","has","add","map","res"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/lib0/array.js"],"sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\nimport * as set from './set.js'\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n * @template {ArrayLike<ITEM>} ARR\n *\n * @param {ARR} arr\n * @param {function(ITEM, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (!f(arr[i], i, arr)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @template {ArrayLike<S>} ARR\n * @param {ARR} arr\n * @param {function(S, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (f(arr[i], i, arr)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @template ELEM\n *\n * @param {ArrayLike<ELEM>} a\n * @param {ArrayLike<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => fold(arr, /** @type {Array<ELEM>} */ ([]), (acc, val) => acc.concat(val))\n\n/**\n * @template T\n * @param {number} len\n * @param {function(number, Array<T>):T} f\n * @return {Array<T>}\n */\nexport const unfold = (len, f) => {\n  const array = new Array(len)\n  for (let i = 0; i < len; i++) {\n    array[i] = f(i, array)\n  }\n  return array\n}\n\n/**\n * @template T\n * @template RESULT\n * @param {Array<T>} arr\n * @param {RESULT} seed\n * @param {function(RESULT, T, number):RESULT} folder\n */\nexport const fold = (arr, seed, folder) => arr.reduce(folder, seed)\n\nexport const isArray = Array.isArray\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {Array<T>}\n */\nexport const unique = arr => from(set.from(arr))\n\n/**\n * @template T\n * @template M\n * @param {ArrayLike<T>} arr\n * @param {function(T):M} mapper\n * @return {Array<T>}\n */\nexport const uniqueBy = (arr, mapper) => {\n  /**\n   * @type {Set<M>}\n   */\n  const happened = set.create()\n  /**\n   * @type {Array<T>}\n   */\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const el = arr[i]\n    const mapped = mapper(el)\n    if (!happened.has(mapped)) {\n      happened.add(mapped)\n      result.push(el)\n    }\n  }\n  return result\n}\n\n/**\n * @template {ArrayLike<any>} ARR\n * @template {function(ARR extends ArrayLike<infer T> ? T : never, number, ARR):any} MAPPER\n * @param {ARR} arr\n * @param {MAPPER} mapper\n * @return {Array<MAPPER extends function(...any): infer M ? M : never>}\n */\nexport const map = (arr, mapper) => {\n  /**\n   * @type {Array<any>}\n   */\n  const res = Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    res[i] = mapper(/** @type {any} */ (arr[i]), i, /** @type {any} */ (arr))\n  }\n  return /** @type {any} */ (res)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}