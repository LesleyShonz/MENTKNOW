"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ActiveAreaManager_exports = {};
__export(ActiveAreaManager_exports, {
  ActiveAreaManager: () => ActiveAreaManager,
  getActiveAreaPageSpace: () => getActiveAreaPageSpace,
  getActiveAreaScreenSpace: () => getActiveAreaScreenSpace
});
module.exports = __toCommonJS(ActiveAreaManager_exports);
var import_signia = require("signia");
const DEFAULT_OFFSETS = {
  top: 10,
  left: 10,
  bottom: 10,
  right: 10
};
function getActiveAreaScreenSpace(editor) {
  const containerEl = editor.getContainer();
  const el = containerEl.querySelector('*[data-tldraw-area="active-drawing"]');
  const out = {
    ...DEFAULT_OFFSETS,
    width: 0,
    height: 0
  };
  if (el && containerEl) {
    const cBbbox = containerEl.getBoundingClientRect();
    const bbox = el.getBoundingClientRect();
    out.top = bbox.top;
    out.left = bbox.left;
    out.bottom = cBbbox.height - bbox.bottom;
    out.right = cBbbox.width - bbox.right;
  }
  out.width = editor.viewportScreenBounds.width - out.left - out.right;
  out.height = editor.viewportScreenBounds.height - out.top - out.bottom;
  return out;
}
function getActiveAreaPageSpace(editor) {
  const out = getActiveAreaScreenSpace(editor);
  const z = editor.zoomLevel;
  out.left /= z;
  out.right /= z;
  out.top /= z;
  out.bottom /= z;
  out.width /= z;
  out.height /= z;
  return out;
}
class ActiveAreaManager {
  constructor(editor) {
    this.editor = editor;
    window.addEventListener("resize", this.updateOffsets);
    this.editor.disposables.add(this.dispose);
  }
  offsets = (0, import_signia.atom)("activeAreaOffsets", DEFAULT_OFFSETS);
  updateOffsets = () => {
    const offsets = getActiveAreaPageSpace(this.editor);
    this.offsets.set(offsets);
  };
  // Clear the listener
  dispose = () => {
    window.addEventListener("resize", this.updateOffsets);
  };
}
//# sourceMappingURL=ActiveAreaManager.js.map
