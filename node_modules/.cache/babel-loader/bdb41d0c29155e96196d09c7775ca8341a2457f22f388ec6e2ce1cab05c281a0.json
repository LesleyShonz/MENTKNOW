{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { EMBED_DEFINITIONS } from \"@tldraw/tlschema\";\nimport escapeStringRegexp from \"escape-string-regexp\";\nfunction matchEmbedUrl(url) {\n  var host = new URL(url).host.replace(\"www.\", \"\");\n  var _iterator = _createForOfIteratorHelper(EMBED_DEFINITIONS),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var localEmbedDef = _step.value;\n      if (checkHostnames(localEmbedDef.hostnames, host)) {\n        var originalUrl = localEmbedDef.fromEmbedUrl(url);\n        if (originalUrl) {\n          return {\n            definition: localEmbedDef,\n            url: originalUrl,\n            embedUrl: url\n          };\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nvar globlikeRegExp = function globlikeRegExp(input) {\n  return input.split(\"*\").map(function (str) {\n    return escapeStringRegexp(str);\n  }).join(\".+\");\n};\nvar checkHostnames = function checkHostnames(hostnames, targetHostname) {\n  return !!hostnames.find(function (hostname) {\n    var re = new RegExp(globlikeRegExp(hostname));\n    return targetHostname.match(re);\n  });\n};\nfunction matchUrl(url) {\n  var host = new URL(url).host.replace(\"www.\", \"\");\n  var _iterator2 = _createForOfIteratorHelper(EMBED_DEFINITIONS),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var localEmbedDef = _step2.value;\n      if (checkHostnames(localEmbedDef.hostnames, host)) {\n        var embedUrl = localEmbedDef.toEmbedUrl(url);\n        if (embedUrl) {\n          return {\n            definition: localEmbedDef,\n            embedUrl: embedUrl,\n            url: url\n          };\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nfunction getEmbedInfoUnsafely(inputUrl) {\n  var _matchUrl;\n  var result = (_matchUrl = matchUrl(inputUrl)) !== null && _matchUrl !== void 0 ? _matchUrl : matchEmbedUrl(inputUrl);\n  return result;\n}\nfunction getEmbedInfo(inputUrl) {\n  try {\n    return getEmbedInfoUnsafely(inputUrl);\n  } catch (e) {\n    console.error(e);\n  }\n  return void 0;\n}\nexport { getEmbedInfo, getEmbedInfoUnsafely, matchEmbedUrl, matchUrl };","map":{"version":3,"names":["EMBED_DEFINITIONS","escapeStringRegexp","matchEmbedUrl","url","host","URL","replace","_iterator","_createForOfIteratorHelper","_step","s","n","done","localEmbedDef","value","checkHostnames","hostnames","originalUrl","fromEmbedUrl","definition","embedUrl","err","e","f","globlikeRegExp","input","split","map","str","join","targetHostname","find","hostname","re","RegExp","match","matchUrl","_iterator2","_step2","toEmbedUrl","getEmbedInfoUnsafely","inputUrl","_matchUrl","result","getEmbedInfo","console","error"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/embeds.ts"],"sourcesContent":["import { EMBED_DEFINITIONS, EmbedDefinition } from '@tldraw/tlschema'\nimport escapeStringRegexp from 'escape-string-regexp'\n\n/** @public */\nexport function matchEmbedUrl(url: string) {\n\tconst host = new URL(url).host.replace('www.', '')\n\tfor (const localEmbedDef of EMBED_DEFINITIONS) {\n\t\tif (checkHostnames(localEmbedDef.hostnames, host)) {\n\t\t\tconst originalUrl = localEmbedDef.fromEmbedUrl(url)\n\t\t\tif (originalUrl) {\n\t\t\t\treturn {\n\t\t\t\t\tdefinition: localEmbedDef,\n\t\t\t\t\turl: originalUrl,\n\t\t\t\t\tembedUrl: url,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst globlikeRegExp = (input: string) => {\n\treturn input\n\t\t.split('*')\n\t\t.map((str) => escapeStringRegexp(str))\n\t\t.join('.+')\n}\n\nconst checkHostnames = (hostnames: readonly string[], targetHostname: string) => {\n\treturn !!hostnames.find((hostname) => {\n\t\tconst re = new RegExp(globlikeRegExp(hostname))\n\t\treturn targetHostname.match(re)\n\t})\n}\n\n/** @public */\nexport function matchUrl(url: string) {\n\tconst host = new URL(url).host.replace('www.', '')\n\tfor (const localEmbedDef of EMBED_DEFINITIONS) {\n\t\tif (checkHostnames(localEmbedDef.hostnames, host)) {\n\t\t\tconst embedUrl = localEmbedDef.toEmbedUrl(url)\n\n\t\t\tif (embedUrl) {\n\t\t\t\treturn {\n\t\t\t\t\tdefinition: localEmbedDef,\n\t\t\t\t\tembedUrl,\n\t\t\t\t\turl,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** @public */\nexport type TLEmbedResult =\n\t| {\n\t\t\tdefinition: EmbedDefinition\n\t\t\turl: string\n\t\t\tembedUrl: string\n\t  }\n\t| undefined\n\n/**\n * Tests whether an URL supports embedding and returns the result.\n *\n * @param inputUrl - The URL to match\n * @public\n */\nexport function getEmbedInfoUnsafely(inputUrl: string): TLEmbedResult {\n\tconst result = matchUrl(inputUrl) ?? matchEmbedUrl(inputUrl)\n\treturn result\n}\n\n/**\n * Tests whether an URL supports embedding and returns the result. If we encounter an error, we\n * return undefined.\n *\n * @param inputUrl - The URL to match\n * @public\n */\nexport function getEmbedInfo(inputUrl: string): TLEmbedResult {\n\ttry {\n\t\treturn getEmbedInfoUnsafely(inputUrl)\n\t} catch (e) {\n\t\t// Don't throw here! We'll throw it from the embed shape's shape util\n\t\tconsole.error(e)\n\t}\n\n\treturn undefined\n}\n"],"mappings":";AAAA,SAASA,iBAAA,QAA0C;AACnD,OAAOC,kBAAA,MAAwB;AAGxB,SAASC,cAAcC,GAAA,EAAa;EAC1C,IAAMC,IAAA,GAAO,IAAIC,GAAA,CAAIF,GAAG,EAAEC,IAAA,CAAKE,OAAA,CAAQ,QAAQ,EAAE;EAAA,IAAAC,SAAA,GAAAC,0BAAA,CACrBR,iBAAA;IAAAS,KAAA;EAAA;IAA5B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA+C;MAAA,IAApCC,aAAA,GAAAJ,KAAA,CAAAK,KAAA;MACV,IAAIC,cAAA,CAAeF,aAAA,CAAcG,SAAA,EAAWZ,IAAI,GAAG;QAClD,IAAMa,WAAA,GAAcJ,aAAA,CAAcK,YAAA,CAAaf,GAAG;QAClD,IAAIc,WAAA,EAAa;UAChB,OAAO;YACNE,UAAA,EAAYN,aAAA;YACZV,GAAA,EAAKc,WAAA;YACLG,QAAA,EAAUjB;UACX;QACD;MACD;IACD;EAAA,SAAAkB,GAAA;IAAAd,SAAA,CAAAe,CAAA,CAAAD,GAAA;EAAA;IAAAd,SAAA,CAAAgB,CAAA;EAAA;AACD;AAEA,IAAMC,cAAA,GAAiB,SAAjBA,eAAkBC,KAAA,EAAkB;EACzC,OAAOA,KAAA,CACLC,KAAA,CAAM,GAAG,EACTC,GAAA,CAAI,UAACC,GAAA;IAAA,OAAQ3B,kBAAA,CAAmB2B,GAAG,CAAC;EAAA,GACpCC,IAAA,CAAK,IAAI;AACZ;AAEA,IAAMd,cAAA,GAAiB,SAAjBA,eAAkBC,SAAA,EAA8Bc,cAAA,EAA2B;EAChF,OAAO,CAAC,CAACd,SAAA,CAAUe,IAAA,CAAK,UAACC,QAAA,EAAa;IACrC,IAAMC,EAAA,GAAK,IAAIC,MAAA,CAAOV,cAAA,CAAeQ,QAAQ,CAAC;IAC9C,OAAOF,cAAA,CAAeK,KAAA,CAAMF,EAAE;EAC/B,CAAC;AACF;AAGO,SAASG,SAASjC,GAAA,EAAa;EACrC,IAAMC,IAAA,GAAO,IAAIC,GAAA,CAAIF,GAAG,EAAEC,IAAA,CAAKE,OAAA,CAAQ,QAAQ,EAAE;EAAA,IAAA+B,UAAA,GAAA7B,0BAAA,CACrBR,iBAAA;IAAAsC,MAAA;EAAA;IAA5B,KAAAD,UAAA,CAAA3B,CAAA,MAAA4B,MAAA,GAAAD,UAAA,CAAA1B,CAAA,IAAAC,IAAA,GAA+C;MAAA,IAApCC,aAAA,GAAAyB,MAAA,CAAAxB,KAAA;MACV,IAAIC,cAAA,CAAeF,aAAA,CAAcG,SAAA,EAAWZ,IAAI,GAAG;QAClD,IAAMgB,QAAA,GAAWP,aAAA,CAAc0B,UAAA,CAAWpC,GAAG;QAE7C,IAAIiB,QAAA,EAAU;UACb,OAAO;YACND,UAAA,EAAYN,aAAA;YACZO,QAAA,EAAAA,QAAA;YACAjB,GAAA,EAAAA;UACD;QACD;MACD;IACD;EAAA,SAAAkB,GAAA;IAAAgB,UAAA,CAAAf,CAAA,CAAAD,GAAA;EAAA;IAAAgB,UAAA,CAAAd,CAAA;EAAA;AACD;AAiBO,SAASiB,qBAAqBC,QAAA,EAAiC;EAAA,IAAAC,SAAA;EACrE,IAAMC,MAAA,IAAAD,SAAA,GAASN,QAAA,CAASK,QAAQ,eAAAC,SAAA,cAAAA,SAAA,GAAKxC,aAAA,CAAcuC,QAAQ;EAC3D,OAAOE,MAAA;AACR;AASO,SAASC,aAAaH,QAAA,EAAiC;EAC7D,IAAI;IACH,OAAOD,oBAAA,CAAqBC,QAAQ;EACrC,SAASnB,CAAA,EAAP;IAEDuB,OAAA,CAAQC,KAAA,CAAMxB,CAAC;EAChB;EAEA,OAAO;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}