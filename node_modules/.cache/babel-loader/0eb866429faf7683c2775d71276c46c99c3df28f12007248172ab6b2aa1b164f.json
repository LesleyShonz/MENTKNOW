{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { Vec2d } from \"@tldraw/primitives\";\nimport * as React from \"react\";\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from \"../../shared/ShapeFill.mjs\";\nimport { getPerfectDashProps } from \"../../shared/getPerfectDashProps.mjs\";\nvar DashStylePolygon = React.memo(function DashStylePolygon2(_ref) {\n  var dash = _ref.dash,\n    fill = _ref.fill,\n    color = _ref.color,\n    strokeWidth = _ref.strokeWidth,\n    outline = _ref.outline,\n    lines = _ref.lines;\n  var innerPath = \"M\" + outline[0] + \"L\" + outline.slice(1) + \"Z\";\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ShapeFill, {\n      d: innerPath,\n      fill: fill,\n      color: color\n    }), lines && lines.map(function (l, i) {\n      return /* @__PURE__ */jsx(\"path\", {\n        className: \"tl-hitarea-stroke\",\n        fill: \"none\",\n        d: \"M\".concat(l[0].x, \",\").concat(l[0].y, \"L\").concat(l[1].x, \",\").concat(l[1].y)\n      }, \"line_bg_\".concat(i));\n    }), /* @__PURE__ */jsxs(\"g\", {\n      strokeWidth: strokeWidth,\n      stroke: \"var(--palette-\".concat(color, \")\"),\n      fill: \"none\",\n      pointerEvents: \"all\",\n      children: [Array.from(Array(outline.length)).map(function (_, i) {\n        var A = outline[i];\n        var B = outline[(i + 1) % outline.length];\n        var dist = Vec2d.Dist(A, B);\n        var _getPerfectDashProps = getPerfectDashProps(dist, strokeWidth, {\n            style: dash,\n            start: \"outset\",\n            end: \"outset\"\n          }),\n          strokeDasharray = _getPerfectDashProps.strokeDasharray,\n          strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n        return /* @__PURE__ */jsx(\"line\", {\n          x1: A.x,\n          y1: A.y,\n          x2: B.x,\n          y2: B.y,\n          strokeDasharray: strokeDasharray,\n          strokeDashoffset: strokeDashoffset\n        }, i);\n      }), lines && lines.map(function (_ref2, i) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          A = _ref3[0],\n          B = _ref3[1];\n        var dist = Vec2d.Dist(A, B);\n        var _getPerfectDashProps2 = getPerfectDashProps(dist, strokeWidth, {\n            style: dash,\n            start: \"skip\",\n            end: \"outset\",\n            snap: dash === \"dotted\" ? 4 : void 0\n          }),\n          strokeDasharray = _getPerfectDashProps2.strokeDasharray,\n          strokeDashoffset = _getPerfectDashProps2.strokeDashoffset;\n        return /* @__PURE__ */jsx(\"path\", {\n          d: \"M\".concat(A.x, \",\").concat(A.y, \"L\").concat(B.x, \",\").concat(B.y),\n          stroke: \"var(--palette-\".concat(color, \")\"),\n          strokeWidth: strokeWidth,\n          fill: \"none\",\n          strokeDasharray: strokeDasharray,\n          strokeDashoffset: strokeDashoffset\n        }, \"line_fg_\".concat(i));\n      })]\n    })]\n  });\n});\nfunction DashStylePolygonSvg(_ref4) {\n  var dash = _ref4.dash,\n    fill = _ref4.fill,\n    color = _ref4.color,\n    colors = _ref4.colors,\n    strokeWidth = _ref4.strokeWidth,\n    outline = _ref4.outline,\n    lines = _ref4.lines;\n  var strokeElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  strokeElement.setAttribute(\"stroke-width\", strokeWidth.toString());\n  strokeElement.setAttribute(\"stroke\", colors.fill[color]);\n  strokeElement.setAttribute(\"fill\", \"none\");\n  Array.from(Array(outline.length)).forEach(function (_, i) {\n    var A = outline[i];\n    var B = outline[(i + 1) % outline.length];\n    var dist = Vec2d.Dist(A, B);\n    var _getPerfectDashProps3 = getPerfectDashProps(dist, strokeWidth, {\n        style: dash\n      }),\n      strokeDasharray = _getPerfectDashProps3.strokeDasharray,\n      strokeDashoffset = _getPerfectDashProps3.strokeDashoffset;\n    var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    line.setAttribute(\"x1\", A.x.toString());\n    line.setAttribute(\"y1\", A.y.toString());\n    line.setAttribute(\"x2\", B.x.toString());\n    line.setAttribute(\"y2\", B.y.toString());\n    line.setAttribute(\"stroke-dasharray\", strokeDasharray.toString());\n    line.setAttribute(\"stroke-dashoffset\", strokeDashoffset.toString());\n    strokeElement.appendChild(line);\n  });\n  if (lines) {\n    var _iterator = _createForOfIteratorHelper(lines),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          A = _step$value[0],\n          B = _step$value[1];\n        var dist = Vec2d.Dist(A, B);\n        var _getPerfectDashProps4 = getPerfectDashProps(dist, strokeWidth, {\n            style: dash,\n            start: \"skip\",\n            end: \"skip\",\n            snap: dash === \"dotted\" ? 4 : 2\n          }),\n          strokeDasharray = _getPerfectDashProps4.strokeDasharray,\n          strokeDashoffset = _getPerfectDashProps4.strokeDashoffset;\n        var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        line.setAttribute(\"x1\", A.x.toString());\n        line.setAttribute(\"y1\", A.y.toString());\n        line.setAttribute(\"x2\", B.x.toString());\n        line.setAttribute(\"y2\", B.y.toString());\n        line.setAttribute(\"stroke-dasharray\", strokeDasharray.toString());\n        line.setAttribute(\"stroke-dashoffset\", strokeDashoffset.toString());\n        strokeElement.appendChild(line);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var fillElement = getShapeFillSvg({\n    d: \"M\" + outline[0] + \"L\" + outline.slice(1) + \"Z\",\n    fill: fill,\n    color: color,\n    colors: colors\n  });\n  return getSvgWithShapeFill(strokeElement, fillElement);\n}\nexport { DashStylePolygon, DashStylePolygonSvg };","map":{"version":3,"names":["Fragment","jsx","jsxs","Vec2d","React","ShapeFill","getShapeFillSvg","getSvgWithShapeFill","getPerfectDashProps","DashStylePolygon","memo","DashStylePolygon2","_ref","dash","fill","color","strokeWidth","outline","lines","innerPath","slice","children","d","map","l","i","className","concat","x","y","stroke","pointerEvents","Array","from","length","_","A","B","dist","Dist","_getPerfectDashProps","style","start","end","strokeDasharray","strokeDashoffset","x1","y1","x2","y2","_ref2","_ref3","_slicedToArray","_getPerfectDashProps2","snap","DashStylePolygonSvg","_ref4","colors","strokeElement","document","createElementNS","setAttribute","toString","forEach","_getPerfectDashProps3","line","appendChild","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","value","_getPerfectDashProps4","err","e","f","fillElement"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/geo/components/DashStylePolygon.tsx"],"sourcesContent":["import { Vec2d, VecLike } from '@tldraw/primitives'\nimport { TLGeoShape } from '@tldraw/tlschema'\nimport * as React from 'react'\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\nimport { getPerfectDashProps } from '../../shared/getPerfectDashProps'\n\nexport const DashStylePolygon = React.memo(function DashStylePolygon({\n\tdash,\n\tfill,\n\tcolor,\n\tstrokeWidth,\n\toutline,\n\tlines,\n}: Pick<TLGeoShape['props'], 'dash' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\toutline: VecLike[]\n\tlines?: VecLike[][]\n}) {\n\tconst innerPath = 'M' + outline[0] + 'L' + outline.slice(1) + 'Z'\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={innerPath} fill={fill} color={color} />\n\t\t\t{lines &&\n\t\t\t\tlines.map((l, i) => (\n\t\t\t\t\t<path\n\t\t\t\t\t\tkey={`line_bg_${i}`}\n\t\t\t\t\t\tclassName={'tl-hitarea-stroke'}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\td={`M${l[0].x},${l[0].y}L${l[1].x},${l[1].y}`}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t<g\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\tfill=\"none\"\n\t\t\t\tpointerEvents=\"all\"\n\t\t\t>\n\t\t\t\t{Array.from(Array(outline.length)).map((_, i) => {\n\t\t\t\t\tconst A = outline[i]\n\t\t\t\t\tconst B = outline[(i + 1) % outline.length]\n\n\t\t\t\t\tconst dist = Vec2d.Dist(A, B)\n\n\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {\n\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\tstart: 'outset',\n\t\t\t\t\t\tend: 'outset',\n\t\t\t\t\t})\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<line\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tx1={A.x}\n\t\t\t\t\t\t\ty1={A.y}\n\t\t\t\t\t\t\tx2={B.x}\n\t\t\t\t\t\t\ty2={B.y}\n\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t\t{lines &&\n\t\t\t\t\tlines.map(([A, B], i) => {\n\t\t\t\t\t\tconst dist = Vec2d.Dist(A, B)\n\n\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {\n\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\tstart: 'skip',\n\t\t\t\t\t\t\tend: 'outset',\n\t\t\t\t\t\t\tsnap: dash === 'dotted' ? 4 : undefined,\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tkey={`line_fg_${i}`}\n\t\t\t\t\t\t\t\td={`M${A.x},${A.y}L${B.x},${B.y}`}\n\t\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t</g>\n\t\t</>\n\t)\n})\n\nexport function DashStylePolygonSvg({\n\tdash,\n\tfill,\n\tcolor,\n\tcolors,\n\tstrokeWidth,\n\toutline,\n\tlines,\n}: Pick<TLGeoShape['props'], 'dash' | 'fill' | 'color'> & {\n\toutline: VecLike[]\n\tstrokeWidth: number\n\tcolors: TLExportColors\n\tlines?: VecLike[][]\n}) {\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\tstrokeElement.setAttribute('stroke-width', strokeWidth.toString())\n\tstrokeElement.setAttribute('stroke', colors.fill[color])\n\tstrokeElement.setAttribute('fill', 'none')\n\n\tArray.from(Array(outline.length)).forEach((_, i) => {\n\t\tconst A = outline[i]\n\t\tconst B = outline[(i + 1) % outline.length]\n\n\t\tconst dist = Vec2d.Dist(A, B)\n\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {\n\t\t\tstyle: dash,\n\t\t})\n\n\t\tconst line = document.createElementNS('http://www.w3.org/2000/svg', 'line')\n\t\tline.setAttribute('x1', A.x.toString())\n\t\tline.setAttribute('y1', A.y.toString())\n\t\tline.setAttribute('x2', B.x.toString())\n\t\tline.setAttribute('y2', B.y.toString())\n\t\tline.setAttribute('stroke-dasharray', strokeDasharray.toString())\n\t\tline.setAttribute('stroke-dashoffset', strokeDashoffset.toString())\n\n\t\tstrokeElement.appendChild(line)\n\t})\n\n\tif (lines) {\n\t\tfor (const [A, B] of lines) {\n\t\t\tconst dist = Vec2d.Dist(A, B)\n\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {\n\t\t\t\tstyle: dash,\n\t\t\t\tstart: 'skip',\n\t\t\t\tend: 'skip',\n\t\t\t\tsnap: dash === 'dotted' ? 4 : 2,\n\t\t\t})\n\n\t\t\tconst line = document.createElementNS('http://www.w3.org/2000/svg', 'line')\n\t\t\tline.setAttribute('x1', A.x.toString())\n\t\t\tline.setAttribute('y1', A.y.toString())\n\t\t\tline.setAttribute('x2', B.x.toString())\n\t\t\tline.setAttribute('y2', B.y.toString())\n\t\t\tline.setAttribute('stroke-dasharray', strokeDasharray.toString())\n\t\t\tline.setAttribute('stroke-dashoffset', strokeDashoffset.toString())\n\n\t\t\tstrokeElement.appendChild(line)\n\t\t}\n\t}\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td: 'M' + outline[0] + 'L' + outline.slice(1) + 'Z',\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}