{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Vec2d } from \"@tldraw/primitives\";\nimport { deepCopy } from \"@tldraw/utils\";\nimport { MIN_CROP_SIZE } from \"../../../../constants.mjs\";\nimport { ImageShapeUtil } from \"../../../shapes/image/ImageShapeUtil.mjs\";\nimport { StateNode } from \"../../StateNode.mjs\";\nimport { CursorTypeMap } from \"./PointingResizeHandle.mjs\";\nvar Cropping = /*#__PURE__*/function (_StateNode) {\n  _inherits(Cropping, _StateNode);\n  var _super = _createSuper(Cropping);\n  function Cropping() {\n    var _this;\n    _classCallCheck(this, Cropping);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"info\", {});\n    _defineProperty(_assertThisInitialized(_this), \"markId\", \"\");\n    _defineProperty(_assertThisInitialized(_this), \"snapshot\", {});\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function (info) {\n      _this.info = info;\n      _this.markId = _this.editor.mark(\"cropping\");\n      _this.snapshot = _this.createSnapshot();\n      _this.updateShapes();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function () {\n      _this.updateShapes();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onComplete\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.cancel();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getDefaultCrop\", function () {\n      return {\n        topLeft: {\n          x: 0,\n          y: 0\n        },\n        bottomRight: {\n          x: 1,\n          y: 1\n        }\n      };\n    });\n    return _this;\n  }\n  _createClass(Cropping, [{\n    key: \"updateCursor\",\n    value: function updateCursor() {\n      var selectedShape = this.editor.selectedShapes[0];\n      if (!selectedShape) return;\n      var cursorType = CursorTypeMap[this.info.handle];\n      this.editor.setCursor({\n        type: cursorType,\n        rotation: selectedShape.rotation\n      });\n    }\n  }, {\n    key: \"updateShapes\",\n    value: function updateShapes() {\n      var _props$crop;\n      var _this$snapshot = this.snapshot,\n        shape = _this$snapshot.shape,\n        cursorHandleOffset = _this$snapshot.cursorHandleOffset;\n      if (!shape) return;\n      var util = this.editor.getShapeUtil(ImageShapeUtil);\n      if (!util) return;\n      var props = shape.props;\n      var currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset);\n      var originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);\n      var change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation);\n      var crop = (_props$crop = props.crop) !== null && _props$crop !== void 0 ? _props$crop : this.getDefaultCrop();\n      var newCrop = deepCopy(crop);\n      var newPoint = new Vec2d(shape.x, shape.y);\n      var pointDelta = new Vec2d(0, 0);\n      var w = 1 / (crop.bottomRight.x - crop.topLeft.x) * props.w;\n      var h = 1 / (crop.bottomRight.y - crop.topLeft.y) * props.h;\n      var hasCropChanged = false;\n      switch (this.info.handle) {\n        case \"top\":\n        case \"top_left\":\n        case \"top_right\":\n          {\n            if (h < MIN_CROP_SIZE) break;\n            hasCropChanged = true;\n            newCrop.topLeft.y = newCrop.topLeft.y + change.y / h;\n            var heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);\n            if (heightAfterCrop < MIN_CROP_SIZE) {\n              newCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h;\n              pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;\n            } else {\n              if (newCrop.topLeft.y <= 0) {\n                newCrop.topLeft.y = 0;\n                pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;\n              } else {\n                pointDelta.y = change.y;\n              }\n            }\n            break;\n          }\n        case \"bottom\":\n        case \"bottom_left\":\n        case \"bottom_right\":\n          {\n            if (h < MIN_CROP_SIZE) break;\n            hasCropChanged = true;\n            newCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h);\n            var _heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);\n            if (_heightAfterCrop < MIN_CROP_SIZE) {\n              newCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h;\n            }\n            break;\n          }\n      }\n      switch (this.info.handle) {\n        case \"left\":\n        case \"top_left\":\n        case \"bottom_left\":\n          {\n            if (w < MIN_CROP_SIZE) break;\n            hasCropChanged = true;\n            newCrop.topLeft.x = newCrop.topLeft.x + change.x / w;\n            var widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);\n            if (widthAfterCrop < MIN_CROP_SIZE) {\n              newCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w;\n              pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;\n            } else {\n              if (newCrop.topLeft.x <= 0) {\n                newCrop.topLeft.x = 0;\n                pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;\n              } else {\n                pointDelta.x = change.x;\n              }\n            }\n            break;\n          }\n        case \"right\":\n        case \"top_right\":\n        case \"bottom_right\":\n          {\n            if (w < MIN_CROP_SIZE) break;\n            hasCropChanged = true;\n            newCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w);\n            var _widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);\n            if (_widthAfterCrop < MIN_CROP_SIZE) {\n              newCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w;\n            }\n            break;\n          }\n      }\n      if (!hasCropChanged) return;\n      newPoint.add(pointDelta.rot(shape.rotation));\n      var partial = {\n        id: shape.id,\n        type: shape.type,\n        x: newPoint.x,\n        y: newPoint.y,\n        props: {\n          crop: newCrop,\n          w: (newCrop.bottomRight.x - newCrop.topLeft.x) * w,\n          h: (newCrop.bottomRight.y - newCrop.topLeft.y) * h\n        }\n      };\n      this.editor.updateShapes([partial], true);\n      this.updateCursor();\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      if (this.info.onInteractionEnd) {\n        this.editor.setSelectedTool(this.info.onInteractionEnd, this.info);\n      } else {\n        this.editor.setCroppingId(null);\n        this.parent.transition(\"idle\", {});\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.editor.bailToMark(this.markId);\n      if (this.info.onInteractionEnd) {\n        this.editor.setSelectedTool(this.info.onInteractionEnd, this.info);\n      } else {\n        this.editor.setCroppingId(null);\n        this.parent.transition(\"idle\", {});\n      }\n    }\n  }, {\n    key: \"createSnapshot\",\n    value: function createSnapshot() {\n      var _this$editor = this.editor,\n        selectionRotation = _this$editor.selectionRotation,\n        originPagePoint = _this$editor.inputs.originPagePoint;\n      var shape = this.editor.onlySelectedShape;\n      var selectionBounds = this.editor.selectionBounds;\n      var dragHandlePoint = Vec2d.RotWith(selectionBounds.getHandlePoint(this.info.handle), selectionBounds.point, selectionRotation);\n      var cursorHandleOffset = Vec2d.Sub(originPagePoint, dragHandlePoint);\n      return {\n        shape: shape,\n        cursorHandleOffset: cursorHandleOffset\n      };\n    }\n  }]);\n  return Cropping;\n}(StateNode);\n_defineProperty(Cropping, \"id\", \"cropping\");\nexport { Cropping };","map":{"version":3,"names":["Vec2d","deepCopy","MIN_CROP_SIZE","ImageShapeUtil","StateNode","CursorTypeMap","Cropping","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","info","markId","editor","mark","snapshot","createSnapshot","updateShapes","complete","cancel","topLeft","x","y","bottomRight","_createClass","key","value","updateCursor","selectedShape","selectedShapes","cursorType","handle","setCursor","type","rotation","_props$crop","_this$snapshot","shape","cursorHandleOffset","util","getShapeUtil","props","currentPagePoint","inputs","clone","sub","originPagePoint","change","rot","crop","getDefaultCrop","newCrop","newPoint","pointDelta","w","h","hasCropChanged","heightAfterCrop","Math","min","widthAfterCrop","add","partial","id","onInteractionEnd","setSelectedTool","setCroppingId","parent","transition","bailToMark","_this$editor","selectionRotation","onlySelectedShape","selectionBounds","dragHandlePoint","RotWith","getHandlePoint","point","Sub"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/Cropping.ts"],"sourcesContent":["import { SelectionHandle, Vec2d } from '@tldraw/primitives'\nimport {\n\tTLBaseShape,\n\tTLImageShapeCrop,\n\tTLImageShapeProps,\n\tTLShape,\n\tTLShapePartial,\n} from '@tldraw/tlschema'\nimport { deepCopy } from '@tldraw/utils'\nimport { MIN_CROP_SIZE } from '../../../../constants'\nimport { ImageShapeUtil } from '../../../shapes/image/ImageShapeUtil'\nimport {\n\tTLEnterEventHandler,\n\tTLEventHandlers,\n\tTLPointerEventInfo,\n} from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\nimport { CursorTypeMap } from './PointingResizeHandle'\n\ntype Snapshot = ReturnType<Cropping['createSnapshot']>\n\nexport class Cropping extends StateNode {\n\tstatic override id = 'cropping'\n\n\tinfo = {} as TLPointerEventInfo & {\n\t\ttarget: 'selection'\n\t\thandle: SelectionHandle\n\t\tonInteractionEnd?: string\n\t}\n\n\tmarkId = ''\n\n\tprivate snapshot = {} as any as Snapshot\n\n\tonEnter: TLEnterEventHandler = (\n\t\tinfo: TLPointerEventInfo & {\n\t\t\ttarget: 'selection'\n\t\t\thandle: SelectionHandle\n\t\t\tonInteractionEnd?: string\n\t\t}\n\t) => {\n\t\tthis.info = info\n\t\tthis.markId = this.editor.mark('cropping')\n\t\tthis.snapshot = this.createSnapshot()\n\t\tthis.updateShapes()\n\t}\n\n\tonPointerMove: TLEventHandlers['onPointerMove'] = () => {\n\t\tthis.updateShapes()\n\t}\n\n\tonPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\tonComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\tonCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\tprivate updateCursor() {\n\t\tconst selectedShape = this.editor.selectedShapes[0]\n\t\tif (!selectedShape) return\n\n\t\tconst cursorType = CursorTypeMap[this.info.handle!]\n\t\tthis.editor.setCursor({\n\t\t\ttype: cursorType,\n\t\t\trotation: selectedShape.rotation,\n\t\t})\n\t}\n\n\tprivate getDefaultCrop = (): TLImageShapeCrop => ({\n\t\ttopLeft: { x: 0, y: 0 },\n\t\tbottomRight: { x: 1, y: 1 },\n\t})\n\n\tprivate updateShapes() {\n\t\tconst { shape, cursorHandleOffset } = this.snapshot\n\n\t\tif (!shape) return\n\t\tconst util = this.editor.getShapeUtil(ImageShapeUtil)\n\t\tif (!util) return\n\n\t\tconst props = shape.props as TLImageShapeProps\n\n\t\tconst currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset)\n\t\tconst originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset)\n\n\t\tconst change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation)\n\n\t\tconst crop = props.crop ?? this.getDefaultCrop()\n\t\tconst newCrop = deepCopy(crop)\n\n\t\tconst newPoint = new Vec2d(shape.x, shape.y)\n\t\tconst pointDelta = new Vec2d(0, 0)\n\n\t\t// original (uncropped) width and height of shape\n\t\tconst w = (1 / (crop.bottomRight.x - crop.topLeft.x)) * props.w\n\t\tconst h = (1 / (crop.bottomRight.y - crop.topLeft.y)) * props.h\n\n\t\tlet hasCropChanged = false\n\n\t\t// Set y dimension\n\t\tswitch (this.info.handle) {\n\t\t\tcase 'top':\n\t\t\tcase 'top_left':\n\t\t\tcase 'top_right': {\n\t\t\t\tif (h < MIN_CROP_SIZE) break\n\t\t\t\thasCropChanged = true\n\t\t\t\t// top\n\t\t\t\tnewCrop.topLeft.y = newCrop.topLeft.y + change.y / h\n\t\t\t\tconst heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y)\n\n\t\t\t\tif (heightAfterCrop < MIN_CROP_SIZE) {\n\t\t\t\t\tnewCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h\n\t\t\t\t\tpointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h\n\t\t\t\t} else {\n\t\t\t\t\tif (newCrop.topLeft.y <= 0) {\n\t\t\t\t\t\tnewCrop.topLeft.y = 0\n\t\t\t\t\t\tpointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointDelta.y = change.y\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bottom':\n\t\t\tcase 'bottom_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tif (h < MIN_CROP_SIZE) break\n\t\t\t\thasCropChanged = true\n\t\t\t\t// bottom\n\t\t\t\tnewCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h)\n\t\t\t\tconst heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y)\n\n\t\t\t\tif (heightAfterCrop < MIN_CROP_SIZE) {\n\t\t\t\t\tnewCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Set x dimension\n\t\tswitch (this.info.handle) {\n\t\t\tcase 'left':\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tif (w < MIN_CROP_SIZE) break\n\t\t\t\thasCropChanged = true\n\t\t\t\t// left\n\t\t\t\tnewCrop.topLeft.x = newCrop.topLeft.x + change.x / w\n\t\t\t\tconst widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x)\n\n\t\t\t\tif (widthAfterCrop < MIN_CROP_SIZE) {\n\t\t\t\t\tnewCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w\n\t\t\t\t\tpointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w\n\t\t\t\t} else {\n\t\t\t\t\tif (newCrop.topLeft.x <= 0) {\n\t\t\t\t\t\tnewCrop.topLeft.x = 0\n\t\t\t\t\t\tpointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointDelta.x = change.x\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'right':\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tif (w < MIN_CROP_SIZE) break\n\t\t\t\thasCropChanged = true\n\t\t\t\t// right\n\t\t\t\tnewCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w)\n\t\t\t\tconst widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x)\n\n\t\t\t\tif (widthAfterCrop < MIN_CROP_SIZE) {\n\t\t\t\t\tnewCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (!hasCropChanged) return\n\n\t\tnewPoint.add(pointDelta.rot(shape.rotation))\n\n\t\tconst partial: TLShapePartial<\n\t\t\tTLBaseShape<string, { w: number; h: number; crop: TLImageShapeCrop }>\n\t\t> = {\n\t\t\tid: shape.id,\n\t\t\ttype: shape.type,\n\t\t\tx: newPoint.x,\n\t\t\ty: newPoint.y,\n\t\t\tprops: {\n\t\t\t\tcrop: newCrop,\n\t\t\t\tw: (newCrop.bottomRight.x - newCrop.topLeft.x) * w,\n\t\t\t\th: (newCrop.bottomRight.y - newCrop.topLeft.y) * h,\n\t\t\t},\n\t\t}\n\n\t\tthis.editor.updateShapes([partial], true)\n\t\tthis.updateCursor()\n\t}\n\n\tprivate complete() {\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.editor.setCroppingId(null)\n\t\t\tthis.parent.transition('idle', {})\n\t\t}\n\t}\n\n\tprivate cancel() {\n\t\tthis.editor.bailToMark(this.markId)\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setSelectedTool(this.info.onInteractionEnd, this.info)\n\t\t} else {\n\t\t\tthis.editor.setCroppingId(null)\n\t\t\tthis.parent.transition('idle', {})\n\t\t}\n\t}\n\n\tprivate createSnapshot() {\n\t\tconst {\n\t\t\tselectionRotation,\n\t\t\tinputs: { originPagePoint },\n\t\t} = this.editor\n\n\t\tconst shape = this.editor.onlySelectedShape as TLShape\n\n\t\tconst selectionBounds = this.editor.selectionBounds!\n\n\t\tconst dragHandlePoint = Vec2d.RotWith(\n\t\t\tselectionBounds.getHandlePoint(this.info.handle!),\n\t\t\tselectionBounds.point,\n\t\t\tselectionRotation\n\t\t)\n\n\t\tconst cursorHandleOffset = Vec2d.Sub(originPagePoint, dragHandlePoint)\n\n\t\treturn {\n\t\t\tshape,\n\t\t\tcursorHandleOffset,\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}