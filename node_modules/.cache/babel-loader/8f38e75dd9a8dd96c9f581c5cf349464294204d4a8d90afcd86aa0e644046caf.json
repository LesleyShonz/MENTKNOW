{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// src/HistoryBuffer.ts\nimport { RESET_VALUE } from \"./types.mjs\";\nvar HistoryBuffer = /*#__PURE__*/function () {\n  function HistoryBuffer(capacity) {\n    _classCallCheck(this, HistoryBuffer);\n    _defineProperty(this, \"index\", 0);\n    // use a wrap around buffer to store the last N values\n    _defineProperty(this, \"buffer\", void 0);\n    this.capacity = capacity;\n    this.buffer = new Array(capacity);\n  }\n  _createClass(HistoryBuffer, [{\n    key: \"pushEntry\",\n    value:\n    /**\n     * Add a diff to the history buffer.\n     *\n     * @param lastComputedEpoch The epoch when the diff was computed.\n     * @param currentEpoch The current epoch.\n     * @param diff (optional) The diff to add, or else a reset value.\n     */\n    function pushEntry(lastComputedEpoch, currentEpoch, diff) {\n      if (diff === void 0) {\n        return;\n      }\n      if (diff === RESET_VALUE) {\n        this.clear();\n        return;\n      }\n      this.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff];\n      this.index = (this.index + 1) % this.capacity;\n    }\n    /**\n     * Clear the history buffer.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.index = 0;\n      this.buffer.fill(void 0);\n    }\n    /**\n     * Get the diffs since the given epoch.\n     *\n     * @param epoch The epoch to get diffs since.\n     * @returns An array of diffs or a flag to reset the history buffer.\n     */\n  }, {\n    key: \"getChangesSince\",\n    value: function getChangesSince(sinceEpoch) {\n      var index = this.index,\n        capacity = this.capacity,\n        buffer = this.buffer;\n      for (var i = 0; i < capacity; i++) {\n        var offset = (index - 1 + capacity - i) % capacity;\n        var elem = buffer[offset];\n        if (!elem) {\n          return RESET_VALUE;\n        }\n        var _elem = _slicedToArray(elem, 2),\n          fromEpoch = _elem[0],\n          toEpoch = _elem[1];\n        if (i === 0 && sinceEpoch >= toEpoch) {\n          return [];\n        }\n        if (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {\n          var len = i + 1;\n          var result = new Array(len);\n          for (var j = 0; j < len; j++) {\n            result[j] = buffer[(offset + j) % capacity][2];\n          }\n          return result;\n        }\n      }\n      return RESET_VALUE;\n    }\n  }]);\n  return HistoryBuffer;\n}();\nexport { HistoryBuffer };","map":{"version":3,"names":["RESET_VALUE","HistoryBuffer","capacity","_classCallCheck","_defineProperty","buffer","Array","_createClass","key","value","pushEntry","lastComputedEpoch","currentEpoch","diff","clear","index","fill","getChangesSince","sinceEpoch","i","offset","elem","_elem","_slicedToArray","fromEpoch","toEpoch","len","result","j"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/signia/src/HistoryBuffer.ts"],"sourcesContent":["import { RESET_VALUE } from './types.js'\n\ntype RangeTuple<Diff> = [fromEpoch: number, toEpoch: number, diff: Diff]\n\n/**\n * A structure that stores diffs between values of an atom.\n *\n * @internal\n */\nexport class HistoryBuffer<Diff> {\n\tprivate index = 0\n\n\t// use a wrap around buffer to store the last N values\n\tbuffer: Array<RangeTuple<Diff> | undefined>\n\n\tconstructor(private readonly capacity: number) {\n\t\tthis.buffer = new Array(capacity)\n\t}\n\n\t/**\n\t * Add a diff to the history buffer.\n\t *\n\t * @param lastComputedEpoch The epoch when the diff was computed.\n\t * @param currentEpoch The current epoch.\n\t * @param diff (optional) The diff to add, or else a reset value.\n\t */\n\tpushEntry(lastComputedEpoch: number, currentEpoch: number, diff: Diff | RESET_VALUE) {\n\t\tif (diff === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\tif (diff === RESET_VALUE) {\n\t\t\tthis.clear()\n\t\t\treturn\n\t\t}\n\n\t\t// Add the diff to the buffer as a range tuple.\n\t\tthis.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff]\n\n\t\t// Bump the index, wrapping around if necessary.\n\t\tthis.index = (this.index + 1) % this.capacity\n\t}\n\n\t/**\n\t * Clear the history buffer.\n\t */\n\tclear() {\n\t\tthis.index = 0\n\t\tthis.buffer.fill(undefined)\n\t}\n\n\t/**\n\t * Get the diffs since the given epoch.\n\t *\n\t * @param epoch The epoch to get diffs since.\n\t * @returns An array of diffs or a flag to reset the history buffer.\n\t */\n\tgetChangesSince(sinceEpoch: number): RESET_VALUE | Diff[] {\n\t\tconst { index, capacity, buffer } = this\n\n\t\t// For each item in the buffer...\n\t\tfor (let i = 0; i < capacity; i++) {\n\t\t\tconst offset = (index - 1 + capacity - i) % capacity\n\n\t\t\tconst elem = buffer[offset]\n\n\t\t\t// If there's no element in the offset position, return the reset value\n\t\t\tif (!elem) {\n\t\t\t\treturn RESET_VALUE\n\t\t\t}\n\n\t\t\tconst [fromEpoch, toEpoch] = elem\n\n\t\t\t// If the first element is already too early, bail\n\t\t\tif (i === 0 && sinceEpoch >= toEpoch) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\t// If the element is since the given epoch, return an array with all diffs from this element and all following elements\n\t\t\tif (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {\n\t\t\t\tconst len = i + 1\n\t\t\t\tconst result = new Array(len)\n\n\t\t\t\tfor (let j = 0; j < len; j++) {\n\t\t\t\t\tresult[j] = buffer[(offset + j) % capacity]![2]\n\t\t\t\t}\n\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't returned yet, return the reset value\n\t\treturn RESET_VALUE\n\t}\n}\n"],"mappings":";;;;;AAAA,SAASA,WAAA,QAAmB;AASrB,IAAMC,aAAA;EAMZ,SAAAA,cAA6BC,QAAA,EAAkB;IAAAC,eAAA,OAAAF,aAAA;IAAAG,eAAA,gBAL/B;IAAA;IAAAA,eAAA;IAKa,KAAAF,QAAA,GAAAA,QAAA;IAC5B,KAAKG,MAAA,GAAS,IAAIC,KAAA,CAAMJ,QAAQ;EACjC;EAAAK,YAAA,CAAAN,aAAA;IAAAO,GAAA;IAAAC,KAAA;IAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAaA,SAAAC,UAAUC,iBAAA,EAA2BC,YAAA,EAAsBC,IAAA,EAA0B;MACpF,IAAIA,IAAA,KAAS,QAAW;QACvB;MACD;MAEA,IAAIA,IAAA,KAASb,WAAA,EAAa;QACzB,KAAKc,KAAA,CAAM;QACX;MACD;MAGA,KAAKT,MAAA,CAAO,KAAKU,KAAK,IAAI,CAACJ,iBAAA,EAAmBC,YAAA,EAAcC,IAAI;MAGhE,KAAKE,KAAA,IAAS,KAAKA,KAAA,GAAQ,KAAK,KAAKb,QAAA;IACtC;IAAA;AAAA;AAAA;EAAA;IAAAM,GAAA;IAAAC,KAAA,EAKA,SAAAK,MAAA,EAAQ;MACP,KAAKC,KAAA,GAAQ;MACb,KAAKV,MAAA,CAAOW,IAAA,CAAK,MAAS;IAC3B;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAQA,SAAAQ,gBAAgBC,UAAA,EAA0C;MACzD,IAAQH,KAAA,GAA4B,KAA5BA,KAAA;QAAOb,QAAA,GAAqB,KAArBA,QAAA;QAAUG,MAAA,GAAW,KAAXA,MAAA;MAGzB,SAASc,CAAA,GAAI,GAAGA,CAAA,GAAIjB,QAAA,EAAUiB,CAAA,IAAK;QAClC,IAAMC,MAAA,IAAUL,KAAA,GAAQ,IAAIb,QAAA,GAAWiB,CAAA,IAAKjB,QAAA;QAE5C,IAAMmB,IAAA,GAAOhB,MAAA,CAAOe,MAAM;QAG1B,IAAI,CAACC,IAAA,EAAM;UACV,OAAOrB,WAAA;QACR;QAEA,IAAAsB,KAAA,GAAAC,cAAA,CAA6BF,IAAA;UAAtBG,SAAA,GAAAF,KAAA;UAAWG,OAAO,GAAAH,KAAA;QAGzB,IAAIH,CAAA,KAAM,KAAKD,UAAA,IAAcO,OAAA,EAAS;UACrC,OAAO,EAAC;QACT;QAGA,IAAID,SAAA,IAAaN,UAAA,IAAcA,UAAA,GAAaO,OAAA,EAAS;UACpD,IAAMC,GAAA,GAAMP,CAAA,GAAI;UAChB,IAAMQ,MAAA,GAAS,IAAIrB,KAAA,CAAMoB,GAAG;UAE5B,SAASE,CAAA,GAAI,GAAGA,CAAA,GAAIF,GAAA,EAAKE,CAAA,IAAK;YAC7BD,MAAA,CAAOC,CAAC,IAAIvB,MAAA,EAAQe,MAAA,GAASQ,CAAA,IAAK1B,QAAQ,EAAG,CAAC;UAC/C;UAEA,OAAOyB,MAAA;QACR;MACD;MAGA,OAAO3B,WAAA;IACR;EAAA;EAAA,OAAAC,aAAA;AAAA,GACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}