{
  "version": 3,
  "sources": ["../../../../src/lib/editor/types/history-types.ts"],
  "sourcesContent": ["/** @public */\nexport type TLHistoryMark = {\n\ttype: 'STOP'\n\tid: string\n\tonUndo: boolean\n\tonRedo: boolean\n}\n\n/** @public */\nexport type TLCommand<Name extends string = any, Data = any> = {\n\ttype: 'command'\n\tid: string\n\tdata: Data\n\tname: Name\n\t/**\n\t * Allows for commands that change state and should be undoable, but are 'inconsequential' and\n\t * should not clear the redo stack. e.g. modifying the set of selected ids.\n\t */\n\tpreservesRedoStack?: boolean\n}\n\n/** @public */\nexport type TLHistoryEntry = TLHistoryMark | TLCommand\n\n/** @public */\nexport type TLCommandHandler<Data> = {\n\tdo: (data: Data) => void\n\tundo: (data: Data) => void\n\tredo?: (data: Data) => void\n\t/**\n\t * Allow to combine the next command with the previous one if possible. Useful for, e.g. combining\n\t * a series of shape translation commands into one command in the undo stack\n\t */\n\tsquash?: (prevData: Data, nextData: Data) => Data\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
