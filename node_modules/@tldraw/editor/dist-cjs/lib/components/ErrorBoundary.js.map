{
  "version": 3,
  "sources": ["../../../src/lib/components/ErrorBoundary.tsx"],
  "sourcesContent": ["import * as React from 'react'\n\n/** @public */\nexport interface TLErrorBoundaryProps {\n\tchildren: React.ReactNode\n\tonError?: ((error: unknown) => void) | null\n\tfallback: (error: unknown) => React.ReactNode\n}\n\ntype TLErrorBoundaryState = { error: Error | null }\n\nconst initialState: TLErrorBoundaryState = { error: null }\n\n/** @public */\nexport class ErrorBoundary extends React.Component<\n\tReact.PropsWithRef<React.PropsWithChildren<TLErrorBoundaryProps>>,\n\tTLErrorBoundaryState\n> {\n\tstatic getDerivedStateFromError(error: Error) {\n\t\treturn { error }\n\t}\n\n\tstate = initialState\n\n\tcomponentDidCatch(error: unknown) {\n\t\tthis.props.onError?.(error)\n\t}\n\n\trender() {\n\t\tconst { error } = this.state\n\n\t\tif (error !== null) {\n\t\t\treturn this.props.fallback(error)\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\n/** @internal */\nexport function OptionalErrorBoundary({\n\tchildren,\n\tfallback,\n\t...props\n}: Omit<TLErrorBoundaryProps, 'fallback'> & {\n\tfallback: ((error: unknown) => React.ReactNode) | null\n}) {\n\tif (fallback === null) {\n\t\treturn <>{children}</>\n\t}\n\n\treturn (\n\t\t<ErrorBoundary fallback={fallback} {...props}>\n\t\t\t{children}\n\t\t</ErrorBoundary>\n\t)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDS;AAhDT,YAAuB;AAWvB,MAAM,eAAqC,EAAE,OAAO,KAAK;AAGlD,MAAM,sBAAsB,MAAM,UAGvC;AAAA,EACD,OAAO,yBAAyB,OAAc;AAC7C,WAAO,EAAE,MAAM;AAAA,EAChB;AAAA,EAEA,QAAQ;AAAA,EAER,kBAAkB,OAAgB;AACjC,SAAK,MAAM,UAAU,KAAK;AAAA,EAC3B;AAAA,EAEA,SAAS;AACR,UAAM,EAAE,MAAM,IAAI,KAAK;AAEvB,QAAI,UAAU,MAAM;AACnB,aAAO,KAAK,MAAM,SAAS,KAAK;AAAA,IACjC;AAEA,WAAO,KAAK,MAAM;AAAA,EACnB;AACD;AAGO,SAAS,sBAAsB;AAAA,EACrC;AAAA,EACA;AAAA,EACA,GAAG;AACJ,GAEG;AACF,MAAI,aAAa,MAAM;AACtB,WAAO,2EAAG,UAAS;AAAA,EACpB;AAEA,SACC,4CAAC,iBAAc,UAAqB,GAAG,OACrC,UACF;AAEF;",
  "names": []
}
