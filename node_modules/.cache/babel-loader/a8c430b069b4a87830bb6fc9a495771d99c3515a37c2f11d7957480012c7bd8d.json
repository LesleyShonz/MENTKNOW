{"ast":null,"code":"import { omitFromStackTrace } from \"./function.mjs\";\nvar Result = {\n  ok: function ok(value) {\n    return {\n      ok: true,\n      value: value\n    };\n  },\n  err: function err(error) {\n    return {\n      ok: false,\n      error: error\n    };\n  }\n};\nfunction exhaustiveSwitchError(value, property) {\n  var debugValue = property && value && typeof value === \"object\" && property in value ? value[property] : value;\n  throw new Error(\"Unknown switch case \".concat(debugValue));\n}\nvar assert = omitFromStackTrace(function (value, message) {\n  if (!value) {\n    throw new Error(message || \"Assertion Error\");\n  }\n});\nvar assertExists = omitFromStackTrace(function (value, message) {\n  if (value == null) {\n    throw new Error(message !== null && message !== void 0 ? message : \"value must be defined\");\n  }\n  return value;\n});\nfunction promiseWithResolve() {\n  var resolve;\n  var reject;\n  var promise = new Promise(function (res, rej) {\n    resolve = res;\n    reject = rej;\n  });\n  return Object.assign(promise, {\n    resolve: resolve,\n    reject: reject\n  });\n}\nexport { Result, assert, assertExists, exhaustiveSwitchError, promiseWithResolve };","map":{"version":3,"names":["omitFromStackTrace","Result","ok","value","err","error","exhaustiveSwitchError","property","debugValue","Error","concat","assert","message","assertExists","promiseWithResolve","resolve","reject","promise","Promise","res","rej","Object","assign"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/utils/src/lib/control.ts"],"sourcesContent":["import { omitFromStackTrace } from './function'\n\n/** @public */\nexport type OkResult<T> = { readonly ok: true; readonly value: T }\n/** @public */\nexport type ErrorResult<E> = { readonly ok: false; readonly error: E }\n/** @public */\nexport type Result<T, E> = OkResult<T> | ErrorResult<E>\n\n/** @public */\nexport const Result = {\n\tok<T>(value: T): OkResult<T> {\n\t\treturn { ok: true, value }\n\t},\n\terr<E>(error: E): ErrorResult<E> {\n\t\treturn { ok: false, error }\n\t},\n}\n\n/** @internal */\nexport function exhaustiveSwitchError(value: never, property?: string): never {\n\tconst debugValue =\n\t\tproperty && value && typeof value === 'object' && property in value ? value[property] : value\n\tthrow new Error(`Unknown switch case ${debugValue}`)\n}\n\n/** @internal */\nexport const assert: (value: unknown, message?: string) => asserts value = omitFromStackTrace(\n\t(value, message) => {\n\t\tif (!value) {\n\t\t\tthrow new Error(message || 'Assertion Error')\n\t\t}\n\t}\n)\n\n/** @internal */\nexport const assertExists = omitFromStackTrace(<T>(value: T, message?: string): NonNullable<T> => {\n\t// note that value == null is equivilent to value === null || value === undefined\n\tif (value == null) {\n\t\tthrow new Error(message ?? 'value must be defined')\n\t}\n\treturn value as NonNullable<T>\n})\n\n/** @internal */\nexport function promiseWithResolve<T>(): Promise<T> & {\n\tresolve: (value: T) => void\n\treject: (reason?: any) => void\n} {\n\tlet resolve: (value: T) => void\n\tlet reject: (reason?: any) => void\n\tconst promise = new Promise<T>((res, rej) => {\n\t\tresolve = res\n\t\treject = rej\n\t})\n\treturn Object.assign(promise, {\n\t\tresolve: resolve!,\n\t\treject: reject!,\n\t})\n}\n"],"mappings":"AAAA,SAASA,kBAAA,QAA0B;AAU5B,IAAMC,MAAA,GAAS;EACrBC,EAAA,WAAAA,GAAMC,KAAA,EAAuB;IAC5B,OAAO;MAAED,EAAA,EAAI;MAAMC,KAAA,EAAAA;IAAM;EAC1B;EACAC,GAAA,WAAAA,IAAOC,KAAA,EAA0B;IAChC,OAAO;MAAEH,EAAA,EAAI;MAAOG,KAAA,EAAAA;IAAM;EAC3B;AACD;AAGO,SAASC,sBAAsBH,KAAA,EAAcI,QAAA,EAA0B;EAC7E,IAAMC,UAAA,GACLD,QAAA,IAAYJ,KAAA,IAAS,OAAOA,KAAA,KAAU,YAAYI,QAAA,IAAYJ,KAAA,GAAQA,KAAA,CAAMI,QAAQ,IAAIJ,KAAA;EACzF,MAAM,IAAIM,KAAA,wBAAAC,MAAA,CAA6BF,UAAA,CAAY;AACpD;AAGO,IAAMG,MAAA,GAA8DX,kBAAA,CAC1E,UAACG,KAAA,EAAOS,OAAA,EAAY;EACnB,IAAI,CAACT,KAAA,EAAO;IACX,MAAM,IAAIM,KAAA,CAAMG,OAAA,IAAW,iBAAiB;EAC7C;AACD,CACD;AAGO,IAAMC,YAAA,GAAeb,kBAAA,CAAmB,UAAIG,KAAA,EAAUS,OAAA,EAAqC;EAEjG,IAAIT,KAAA,IAAS,MAAM;IAClB,MAAM,IAAIM,KAAA,CAAMG,OAAA,aAAAA,OAAA,cAAAA,OAAA,GAAW,uBAAuB;EACnD;EACA,OAAOT,KAAA;AACR,CAAC;AAGM,SAASW,mBAAA,EAGd;EACD,IAAIC,OAAA;EACJ,IAAIC,MAAA;EACJ,IAAMC,OAAA,GAAU,IAAIC,OAAA,CAAW,UAACC,GAAA,EAAKC,GAAA,EAAQ;IAC5CL,OAAA,GAAUI,GAAA;IACVH,MAAA,GAASI,GAAA;EACV,CAAC;EACD,OAAOC,MAAA,CAAOC,MAAA,CAAOL,OAAA,EAAS;IAC7BF,OAAA,EAAAA,OAAA;IACAC,MAAA,EAAAA;EACD,CAAC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}