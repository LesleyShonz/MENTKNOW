{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nfunction intersectSets(sets) {\n  if (sets.length === 0) return /* @__PURE__ */new Set();\n  var first = sets[0];\n  var rest = sets.slice(1);\n  var result = /* @__PURE__ */new Set();\n  var _iterator = _createForOfIteratorHelper(first),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var val = _step.value;\n      if (rest.every(function (set) {\n        return set.has(val);\n      })) {\n        result.add(val);\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return result;\n}\nfunction diffSets(prev, next) {\n  var result = {};\n  var _iterator2 = _createForOfIteratorHelper(next),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var val = _step2.value;\n      if (!prev.has(val)) {\n        var _result$added;\n        (_result$added = result.added) !== null && _result$added !== void 0 ? _result$added : result.added = /* @__PURE__ */new Set();\n        result.added.add(val);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var _iterator3 = _createForOfIteratorHelper(prev),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _val = _step3.value;\n      if (!next.has(_val)) {\n        var _result$removed;\n        (_result$removed = result.removed) !== null && _result$removed !== void 0 ? _result$removed : result.removed = /* @__PURE__ */new Set();\n        result.removed.add(_val);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return result.added || result.removed ? result : void 0;\n}\nexport { diffSets, intersectSets };","map":{"version":3,"names":["intersectSets","sets","length","Set","first","rest","slice","result","_iterator","_createForOfIteratorHelper","_step","_loop","val","value","every","set","has","add","s","n","done","err","e","f","diffSets","prev","next","_iterator2","_step2","_result$added","added","_iterator3","_step3","_result$removed","removed"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/store/src/lib/setUtils.ts"],"sourcesContent":["import { CollectionDiff } from './Store'\n\n/**\n * Combine multiple sets into a single set containing only the common elements of all sets.\n *\n * @param sets - The sets to combine.\n */\nexport function intersectSets<T>(sets: Set<T>[]) {\n\tif (sets.length === 0) return new Set<T>()\n\tconst first = sets[0]\n\tconst rest = sets.slice(1)\n\tconst result = new Set<T>()\n\n\tfor (const val of first) {\n\t\tif (rest.every((set) => set.has(val))) {\n\t\t\tresult.add(val)\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Calculates a diff between two sets.\n *\n * @param prev - The previous set\n * @param next - The next set\n */\nexport function diffSets<T>(prev: Set<T>, next: Set<T>): CollectionDiff<T> | undefined {\n\tconst result: CollectionDiff<T> = {}\n\n\tfor (const val of next) {\n\t\tif (!prev.has(val)) {\n\t\t\tresult.added ??= new Set()\n\t\t\tresult.added.add(val)\n\t\t}\n\t}\n\n\tfor (const val of prev) {\n\t\tif (!next.has(val)) {\n\t\t\tresult.removed ??= new Set()\n\t\t\tresult.removed.add(val)\n\t\t}\n\t}\n\n\treturn result.added || result.removed ? result : undefined\n}\n"],"mappings":";AAOO,SAASA,cAAiBC,IAAA,EAAgB;EAChD,IAAIA,IAAA,CAAKC,MAAA,KAAW,GAAG,OAAO,mBAAIC,GAAA,CAAO;EACzC,IAAMC,KAAA,GAAQH,IAAA,CAAK,CAAC;EACpB,IAAMI,IAAA,GAAOJ,IAAA,CAAKK,KAAA,CAAM,CAAC;EACzB,IAAMC,MAAA,GAAS,mBAAIJ,GAAA,CAAO;EAAA,IAAAK,SAAA,GAAAC,0BAAA,CAERL,KAAA;IAAAM,KAAA;EAAA;IAAA,IAAAC,KAAA,YAAAA,MAAA,EAAO;MAAA,IAAdC,GAAA,GAAAF,KAAA,CAAAG,KAAA;MACV,IAAIR,IAAA,CAAKS,KAAA,CAAM,UAACC,GAAA;QAAA,OAAQA,GAAA,CAAIC,GAAA,CAAIJ,GAAG,CAAC;MAAA,IAAG;QACtCL,MAAA,CAAOU,GAAA,CAAIL,GAAG;MACf;IACD;IAJA,KAAAJ,SAAA,CAAAU,CAAA,MAAAR,KAAA,GAAAF,SAAA,CAAAW,CAAA,IAAAC,IAAA;MAAAT,KAAA;IAAA;EAIA,SAAAU,GAAA;IAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;EAAA;IAAAb,SAAA,CAAAe,CAAA;EAAA;EAEA,OAAOhB,MAAA;AACR;AAQO,SAASiB,SAAYC,IAAA,EAAcC,IAAA,EAA6C;EACtF,IAAMnB,MAAA,GAA4B,CAAC;EAAA,IAAAoB,UAAA,GAAAlB,0BAAA,CAEjBiB,IAAA;IAAAE,MAAA;EAAA;IAAlB,KAAAD,UAAA,CAAAT,CAAA,MAAAU,MAAA,GAAAD,UAAA,CAAAR,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbR,GAAA,GAAAgB,MAAA,CAAAf,KAAA;MACV,IAAI,CAACY,IAAA,CAAKT,GAAA,CAAIJ,GAAG,GAAG;QAAA,IAAAiB,aAAA;QACnB,CAAAA,aAAA,GAAAtB,MAAA,CAAOuB,KAAA,cAAAD,aAAA,cAAAA,aAAA,GAAPtB,MAAA,CAAOuB,KAAA,GAAU,mBAAI3B,GAAA,CAAI;QACzBI,MAAA,CAAOuB,KAAA,CAAMb,GAAA,CAAIL,GAAG;MACrB;IACD;EAAA,SAAAS,GAAA;IAAAM,UAAA,CAAAL,CAAA,CAAAD,GAAA;EAAA;IAAAM,UAAA,CAAAJ,CAAA;EAAA;EAAA,IAAAQ,UAAA,GAAAtB,0BAAA,CAEkBgB,IAAA;IAAAO,MAAA;EAAA;IAAlB,KAAAD,UAAA,CAAAb,CAAA,MAAAc,MAAA,GAAAD,UAAA,CAAAZ,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbR,IAAA,GAAAoB,MAAA,CAAAnB,KAAA;MACV,IAAI,CAACa,IAAA,CAAKV,GAAA,CAAIJ,IAAG,GAAG;QAAA,IAAAqB,eAAA;QACnB,CAAAA,eAAA,GAAA1B,MAAA,CAAO2B,OAAA,cAAAD,eAAA,cAAAA,eAAA,GAAP1B,MAAA,CAAO2B,OAAA,GAAY,mBAAI/B,GAAA,CAAI;QAC3BI,MAAA,CAAO2B,OAAA,CAAQjB,GAAA,CAAIL,IAAG;MACvB;IACD;EAAA,SAAAS,GAAA;IAAAU,UAAA,CAAAT,CAAA,CAAAD,GAAA;EAAA;IAAAU,UAAA,CAAAR,CAAA;EAAA;EAEA,OAAOhB,MAAA,CAAOuB,KAAA,IAASvB,MAAA,CAAO2B,OAAA,GAAU3B,MAAA,GAAS;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}