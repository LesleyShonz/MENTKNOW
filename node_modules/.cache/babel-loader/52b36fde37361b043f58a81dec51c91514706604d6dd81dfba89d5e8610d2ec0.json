{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { annotateError, structuredClone } from \"@tldraw/utils\";\nimport { CameraRecordType } from \"./records/TLCamera.mjs\";\nimport { DocumentRecordType, TLDOCUMENT_ID } from \"./records/TLDocument.mjs\";\nimport { TLINSTANCE_ID } from \"./records/TLInstance.mjs\";\nimport { PageRecordType } from \"./records/TLPage.mjs\";\nimport { InstancePageStateRecordType } from \"./records/TLPageState.mjs\";\nimport { PointerRecordType, TLPOINTER_ID } from \"./records/TLPointer.mjs\";\nfunction sortByIndex(a, b) {\n  if (a.index < b.index) {\n    return -1;\n  } else if (a.index > b.index) {\n    return 1;\n  }\n  return 0;\n}\nfunction redactRecordForErrorReporting(record) {\n  if (record.typeName === \"asset\") {\n    if (\"src\" in record) {\n      record.src = \"<redacted>\";\n    }\n    if (\"src\" in record.props) {\n      record.props.src = \"<redacted>\";\n    }\n  }\n}\nvar onValidationFailure = function onValidationFailure(_ref) {\n  var error = _ref.error,\n    phase = _ref.phase,\n    record = _ref.record,\n    recordBefore = _ref.recordBefore;\n  var isExistingValidationIssue =\n  // if we're initializing the store for the first time, we should\n  // allow invalid records so people can load old buggy data:\n  phase === \"initialize\";\n  annotateError(error, {\n    tags: {\n      origin: \"store.validateRecord\",\n      storePhase: phase,\n      isExistingValidationIssue: isExistingValidationIssue\n    },\n    extras: {\n      recordBefore: recordBefore ? redactRecordForErrorReporting(structuredClone(recordBefore)) : void 0,\n      recordAfter: redactRecordForErrorReporting(structuredClone(record))\n    }\n  });\n  throw error;\n};\nfunction getDefaultPages() {\n  return [PageRecordType.create({\n    name: \"Page 1\",\n    index: \"a1\"\n  })];\n}\nfunction createIntegrityChecker(store) {\n  var $pageIds = store.query.ids(\"page\");\n  var ensureStoreIsUsable = function ensureStoreIsUsable() {\n    if (!store.has(TLDOCUMENT_ID)) {\n      store.put([DocumentRecordType.create({\n        id: TLDOCUMENT_ID,\n        name: store.props.defaultName\n      })]);\n      return ensureStoreIsUsable();\n    }\n    if (!store.has(TLPOINTER_ID)) {\n      store.put([PointerRecordType.create({\n        id: TLPOINTER_ID\n      })]);\n      return ensureStoreIsUsable();\n    }\n    var pageIds = $pageIds.value;\n    if (pageIds.size === 0) {\n      store.put(getDefaultPages());\n      return ensureStoreIsUsable();\n    }\n    var getFirstPageId = function getFirstPageId() {\n      return _toConsumableArray(pageIds).map(function (id) {\n        return store.get(id);\n      }).sort(sortByIndex)[0].id;\n    };\n    var instanceState = store.get(TLINSTANCE_ID);\n    if (!instanceState) {\n      store.put([store.schema.types.instance.create({\n        id: TLINSTANCE_ID,\n        currentPageId: getFirstPageId(),\n        exportBackground: true\n      })]);\n      return ensureStoreIsUsable();\n    } else if (!pageIds.has(instanceState.currentPageId)) {\n      store.put([_objectSpread(_objectSpread({}, instanceState), {}, {\n        currentPageId: getFirstPageId()\n      })]);\n      return ensureStoreIsUsable();\n    }\n    var missingPageStateIds = /* @__PURE__ */new Set();\n    var missingCameraIds = /* @__PURE__ */new Set();\n    var _iterator = _createForOfIteratorHelper(pageIds),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var id = _step.value;\n        var pageStateId = InstancePageStateRecordType.createId(id);\n        if (!store.has(pageStateId)) {\n          missingPageStateIds.add(pageStateId);\n        }\n        var cameraId = CameraRecordType.createId(id);\n        if (!store.has(cameraId)) {\n          missingCameraIds.add(cameraId);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (missingPageStateIds.size > 0) {\n      store.put(_toConsumableArray(missingPageStateIds).map(function (id) {\n        return InstancePageStateRecordType.create({\n          id: id,\n          pageId: InstancePageStateRecordType.parseId(id)\n        });\n      }));\n    }\n    if (missingCameraIds.size > 0) {\n      store.put(_toConsumableArray(missingCameraIds).map(function (id) {\n        return CameraRecordType.create({\n          id: id\n        });\n      }));\n    }\n  };\n  return ensureStoreIsUsable;\n}\nexport { createIntegrityChecker, onValidationFailure };","map":{"version":3,"names":["annotateError","structuredClone","CameraRecordType","DocumentRecordType","TLDOCUMENT_ID","TLINSTANCE_ID","PageRecordType","InstancePageStateRecordType","PointerRecordType","TLPOINTER_ID","sortByIndex","a","b","index","redactRecordForErrorReporting","record","typeName","src","props","onValidationFailure","_ref","error","phase","recordBefore","isExistingValidationIssue","tags","origin","storePhase","extras","recordAfter","getDefaultPages","create","name","createIntegrityChecker","store","$pageIds","query","ids","ensureStoreIsUsable","has","put","id","defaultName","pageIds","value","size","getFirstPageId","_toConsumableArray","map","get","sort","instanceState","schema","types","instance","currentPageId","exportBackground","_objectSpread","missingPageStateIds","Set","missingCameraIds","_iterator","_createForOfIteratorHelper","_step","s","n","done","pageStateId","createId","add","cameraId","err","e","f","pageId","parseId"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/TLStore.ts"],"sourcesContent":["import { Store, StoreSchema, StoreSchemaOptions, StoreSnapshot } from '@tldraw/store'\nimport { annotateError, structuredClone } from '@tldraw/utils'\nimport { CameraRecordType, TLCameraId } from './records/TLCamera'\nimport { DocumentRecordType, TLDOCUMENT_ID } from './records/TLDocument'\nimport { TLINSTANCE_ID } from './records/TLInstance'\nimport { PageRecordType, TLPageId } from './records/TLPage'\nimport { InstancePageStateRecordType, TLInstancePageStateId } from './records/TLPageState'\nimport { PointerRecordType, TLPOINTER_ID } from './records/TLPointer'\nimport { TLRecord } from './records/TLRecord'\n\nfunction sortByIndex<T extends { index: string }>(a: T, b: T) {\n\tif (a.index < b.index) {\n\t\treturn -1\n\t} else if (a.index > b.index) {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunction redactRecordForErrorReporting(record: any) {\n\tif (record.typeName === 'asset') {\n\t\tif ('src' in record) {\n\t\t\trecord.src = '<redacted>'\n\t\t}\n\n\t\tif ('src' in record.props) {\n\t\t\trecord.props.src = '<redacted>'\n\t\t}\n\t}\n}\n\n/** @public */\nexport type TLStoreSchema = StoreSchema<TLRecord, TLStoreProps>\n\n/** @public */\nexport type TLStoreSnapshot = StoreSnapshot<TLRecord>\n\n/** @public */\nexport type TLStoreProps = {\n\tdefaultName: string\n}\n\n/** @public */\nexport type TLStore = Store<TLRecord, TLStoreProps>\n\n/** @public */\nexport const onValidationFailure: StoreSchemaOptions<\n\tTLRecord,\n\tTLStoreProps\n>['onValidationFailure'] = ({ error, phase, record, recordBefore }): TLRecord => {\n\tconst isExistingValidationIssue =\n\t\t// if we're initializing the store for the first time, we should\n\t\t// allow invalid records so people can load old buggy data:\n\t\tphase === 'initialize'\n\n\tannotateError(error, {\n\t\ttags: {\n\t\t\torigin: 'store.validateRecord',\n\t\t\tstorePhase: phase,\n\t\t\tisExistingValidationIssue,\n\t\t},\n\t\textras: {\n\t\t\trecordBefore: recordBefore\n\t\t\t\t? redactRecordForErrorReporting(structuredClone(recordBefore))\n\t\t\t\t: undefined,\n\t\t\trecordAfter: redactRecordForErrorReporting(structuredClone(record)),\n\t\t},\n\t})\n\n\tthrow error\n}\n\nfunction getDefaultPages() {\n\treturn [PageRecordType.create({ name: 'Page 1', index: 'a1' })]\n}\n\n/** @internal */\nexport function createIntegrityChecker(store: TLStore): () => void {\n\tconst $pageIds = store.query.ids('page')\n\n\tconst ensureStoreIsUsable = (): void => {\n\t\t// make sure we have exactly one document\n\t\tif (!store.has(TLDOCUMENT_ID)) {\n\t\t\tstore.put([DocumentRecordType.create({ id: TLDOCUMENT_ID, name: store.props.defaultName })])\n\t\t\treturn ensureStoreIsUsable()\n\t\t}\n\n\t\tif (!store.has(TLPOINTER_ID)) {\n\t\t\tstore.put([PointerRecordType.create({ id: TLPOINTER_ID })])\n\t\t\treturn ensureStoreIsUsable()\n\t\t}\n\n\t\t// make sure there is at least one page\n\t\tconst pageIds = $pageIds.value\n\t\tif (pageIds.size === 0) {\n\t\t\tstore.put(getDefaultPages())\n\t\t\treturn ensureStoreIsUsable()\n\t\t}\n\n\t\tconst getFirstPageId = () => [...pageIds].map((id) => store.get(id)!).sort(sortByIndex)[0].id!\n\n\t\t// make sure we have state for the current user's current tab\n\t\tconst instanceState = store.get(TLINSTANCE_ID)\n\t\tif (!instanceState) {\n\t\t\tstore.put([\n\t\t\t\tstore.schema.types.instance.create({\n\t\t\t\t\tid: TLINSTANCE_ID,\n\t\t\t\t\tcurrentPageId: getFirstPageId(),\n\t\t\t\t\texportBackground: true,\n\t\t\t\t}),\n\t\t\t])\n\n\t\t\treturn ensureStoreIsUsable()\n\t\t} else if (!pageIds.has(instanceState.currentPageId)) {\n\t\t\tstore.put([{ ...instanceState, currentPageId: getFirstPageId() }])\n\t\t\treturn ensureStoreIsUsable()\n\t\t}\n\n\t\t// make sure we have page states and cameras for all the pages\n\t\tconst missingPageStateIds = new Set<TLInstancePageStateId>()\n\t\tconst missingCameraIds = new Set<TLCameraId>()\n\t\tfor (const id of pageIds) {\n\t\t\tconst pageStateId = InstancePageStateRecordType.createId(id)\n\t\t\tif (!store.has(pageStateId)) {\n\t\t\t\tmissingPageStateIds.add(pageStateId)\n\t\t\t}\n\t\t\tconst cameraId = CameraRecordType.createId(id)\n\t\t\tif (!store.has(cameraId)) {\n\t\t\t\tmissingCameraIds.add(cameraId)\n\t\t\t}\n\t\t}\n\n\t\tif (missingPageStateIds.size > 0) {\n\t\t\tstore.put(\n\t\t\t\t[...missingPageStateIds].map((id) =>\n\t\t\t\t\tInstancePageStateRecordType.create({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tpageId: InstancePageStateRecordType.parseId(id) as TLPageId,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t\tif (missingCameraIds.size > 0) {\n\t\t\tstore.put([...missingCameraIds].map((id) => CameraRecordType.create({ id })))\n\t\t}\n\t}\n\n\treturn ensureStoreIsUsable\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}