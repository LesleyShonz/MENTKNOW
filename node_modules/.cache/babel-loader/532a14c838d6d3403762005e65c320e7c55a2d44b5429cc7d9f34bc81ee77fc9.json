{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from \"react\";\nvar PreloadStatus = /* @__PURE__ */function (PreloadStatus2) {\n  PreloadStatus2[PreloadStatus2[\"SUCCESS\"] = 0] = \"SUCCESS\";\n  PreloadStatus2[PreloadStatus2[\"FAILED\"] = 1] = \"FAILED\";\n  PreloadStatus2[PreloadStatus2[\"WAITING\"] = 2] = \"WAITING\";\n  return PreloadStatus2;\n}(PreloadStatus || {});\nvar usePreloadFont = function usePreloadFont(id, font) {\n  var _useState = useState(2 /* WAITING */),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  useEffect(function () {\n    var url = font.url,\n      _font$style = font.style,\n      style = _font$style === void 0 ? \"normal\" : _font$style,\n      _font$weight = font.weight,\n      weight = _font$weight === void 0 ? \"500\" : _font$weight,\n      display = font.display,\n      featureSettings = font.featureSettings,\n      stretch = font.stretch,\n      unicodeRange = font.unicodeRange,\n      variant = font.variant;\n    var cancelled = false;\n    setState(2 /* WAITING */);\n    var descriptors = {\n      style: style,\n      weight: weight,\n      display: display,\n      featureSettings: featureSettings,\n      stretch: stretch,\n      unicodeRange: unicodeRange,\n      variant: variant\n    };\n    var fontInstance = new FontFace(id, \"url(\".concat(url, \")\"), descriptors);\n    fontInstance.load().then(function () {\n      if (cancelled) return;\n      document.fonts.add(fontInstance);\n      setState(0 /* SUCCESS */);\n    }).catch(function (err) {\n      if (cancelled) return;\n      console.error(err);\n      setState(1 /* FAILED */);\n    });\n\n    fontInstance.$$_url = url;\n    fontInstance.$$_fontface = \"\\n@font-face {\\n\\tfont-family: \".concat(fontInstance.family, \";\\n\\tfont-stretch: \").concat(fontInstance.stretch, \";\\n\\tfont-weight: \").concat(fontInstance.weight, \";\\n\\tfont-style: \").concat(fontInstance.style, \";\\n\\tsrc: url(\\\"\").concat(url, \"\\\") format(\\\"woff2\\\")\\n}\");\n    return function () {\n      document.fonts.delete(fontInstance);\n      cancelled = true;\n    };\n  }, [id, font]);\n  return state;\n};\nfunction getTypefaces(assetUrls) {\n  return {\n    draw: {\n      url: assetUrls.fonts.draw\n    },\n    serif: {\n      url: assetUrls.fonts.serif\n    },\n    sansSerif: {\n      url: assetUrls.fonts.sansSerif\n    },\n    monospace: {\n      url: assetUrls.fonts.monospace\n    }\n  };\n}\nfunction usePreloadAssets(assetUrls) {\n  var typefaces = useMemo(function () {\n    return getTypefaces(assetUrls);\n  }, [assetUrls]);\n  var results = [usePreloadFont(\"tldraw_draw\", typefaces.draw), usePreloadFont(\"tldraw_serif\", typefaces.serif), usePreloadFont(\"tldraw_sans\", typefaces.sansSerif), usePreloadFont(\"tldraw_mono\", typefaces.monospace)];\n  return {\n    // If any of the results have errored, then preloading has failed\n    error: results.some(function (result) {\n      return result === 1;\n    } /* FAILED */),\n\n    // If any of the results are waiting, then we're not done yet\n    done: !results.some(function (result) {\n      return result === 2;\n    } /* WAITING */)\n  };\n}\n\nexport { usePreloadAssets };","map":{"version":3,"names":["useEffect","useMemo","useState","PreloadStatus","PreloadStatus2","usePreloadFont","id","font","_useState","_useState2","_slicedToArray","state","setState","url","_font$style","style","_font$weight","weight","display","featureSettings","stretch","unicodeRange","variant","cancelled","descriptors","fontInstance","FontFace","concat","load","then","document","fonts","add","catch","err","console","error","$$_url","$$_fontface","family","delete","getTypefaces","assetUrls","draw","serif","sansSerif","monospace","usePreloadAssets","typefaces","results","some","result","done"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/hooks/usePreloadAssets.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { TLEditorAssetUrls } from '../assetUrls'\n\nexport type TLTypeFace = {\n\turl: string\n\tdisplay?: any // FontDisplay\n\tfeatureSettings?: string\n\tstretch?: string\n\tstyle?: string\n\tunicodeRange?: string\n\tvariant?: string\n\tweight?: string\n}\n\nexport type TLTypeFaces = {\n\tdraw: TLTypeFace\n\tmonospace: TLTypeFace\n\tserif: TLTypeFace\n\tsansSerif: TLTypeFace\n}\n\nenum PreloadStatus {\n\tSUCCESS,\n\tFAILED,\n\tWAITING,\n}\n\nconst usePreloadFont = (id: string, font: TLTypeFace): PreloadStatus => {\n\tconst [state, setState] = useState<PreloadStatus>(PreloadStatus.WAITING)\n\n\tuseEffect(() => {\n\t\tconst {\n\t\t\turl,\n\t\t\tstyle = 'normal',\n\t\t\tweight = '500',\n\t\t\tdisplay,\n\t\t\tfeatureSettings,\n\t\t\tstretch,\n\t\t\tunicodeRange,\n\t\t\tvariant,\n\t\t} = font\n\n\t\tlet cancelled = false\n\t\tsetState(PreloadStatus.WAITING)\n\n\t\tconst descriptors: FontFaceDescriptors = {\n\t\t\tstyle,\n\t\t\tweight,\n\t\t\tdisplay,\n\t\t\tfeatureSettings,\n\t\t\tstretch,\n\t\t\tunicodeRange,\n\t\t\tvariant,\n\t\t}\n\n\t\tconst fontInstance = new FontFace(id, `url(${url})`, descriptors)\n\n\t\tfontInstance\n\t\t\t.load()\n\t\t\t.then(() => {\n\t\t\t\tif (cancelled) return\n\t\t\t\tdocument.fonts.add(fontInstance)\n\t\t\t\tsetState(PreloadStatus.SUCCESS)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tif (cancelled) return\n\t\t\t\tconsole.error(err)\n\t\t\t\tsetState(PreloadStatus.FAILED)\n\t\t\t})\n\n\t\t// @ts-expect-error\n\t\tfontInstance.$$_url = url\n\n\t\t// @ts-expect-error\n\t\tfontInstance.$$_fontface = `\n@font-face {\n\tfont-family: ${fontInstance.family};\n\tfont-stretch: ${fontInstance.stretch};\n\tfont-weight: ${fontInstance.weight};\n\tfont-style: ${fontInstance.style};\n\tsrc: url(\"${url}\") format(\"woff2\")\n}`\n\n\t\treturn () => {\n\t\t\tdocument.fonts.delete(fontInstance)\n\t\t\tcancelled = true\n\t\t}\n\t}, [id, font])\n\n\treturn state\n}\n\nfunction getTypefaces(assetUrls: TLEditorAssetUrls) {\n\treturn {\n\t\tdraw: { url: assetUrls.fonts.draw },\n\t\tserif: { url: assetUrls.fonts.serif },\n\t\tsansSerif: { url: assetUrls.fonts.sansSerif },\n\t\tmonospace: { url: assetUrls.fonts.monospace },\n\t}\n}\n\n// todo: Expose this via a public API (prop on <Tldraw>).\n\nexport function usePreloadAssets(assetUrls: TLEditorAssetUrls) {\n\tconst typefaces = useMemo(() => getTypefaces(assetUrls), [assetUrls])\n\n\tconst results = [\n\t\tusePreloadFont('tldraw_draw', typefaces.draw),\n\t\tusePreloadFont('tldraw_serif', typefaces.serif),\n\t\tusePreloadFont('tldraw_sans', typefaces.sansSerif),\n\t\tusePreloadFont('tldraw_mono', typefaces.monospace),\n\t]\n\n\treturn {\n\t\t// If any of the results have errored, then preloading has failed\n\t\terror: results.some((result) => result === PreloadStatus.FAILED),\n\t\t// If any of the results are waiting, then we're not done yet\n\t\tdone: !results.some((result) => result === PreloadStatus.WAITING),\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}