{"ast":null,"code":"/**\n * Utility module to convert metric values.\n *\n * @module metric\n */\n\nimport * as math from './math.js';\nexport var yotta = 1e24;\nexport var zetta = 1e21;\nexport var exa = 1e18;\nexport var peta = 1e15;\nexport var tera = 1e12;\nexport var giga = 1e9;\nexport var mega = 1e6;\nexport var kilo = 1e3;\nexport var hecto = 1e2;\nexport var deca = 10;\nexport var deci = 0.1;\nexport var centi = 0.01;\nexport var milli = 1e-3;\nexport var micro = 1e-6;\nexport var nano = 1e-9;\nexport var pico = 1e-12;\nexport var femto = 1e-15;\nexport var atto = 1e-18;\nexport var zepto = 1e-21;\nexport var yocto = 1e-24;\nvar prefixUp = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\nvar prefixDown = ['', 'm', 'μ', 'n', 'p', 'f', 'a', 'z', 'y'];\n\n/**\n * Calculate the metric prefix for a number. Assumes E.g. `prefix(1000) = { n: 1, prefix: 'k' }`\n *\n * @param {number} n\n * @param {number} [baseMultiplier] Multiplier of the base (10^(3*baseMultiplier)). E.g. `convert(time, -3)` if time is already in milli seconds\n * @return {{n:number,prefix:string}}\n */\nexport var prefix = function prefix(n) {\n  var baseMultiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var nPow = n === 0 ? 0 : math.log10(n);\n  var mult = 0;\n  while (nPow < mult * 3 && baseMultiplier > -8) {\n    baseMultiplier--;\n    mult--;\n  }\n  while (nPow >= 3 + mult * 3 && baseMultiplier < 8) {\n    baseMultiplier++;\n    mult++;\n  }\n  var prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier];\n  return {\n    n: math.round((mult > 0 ? n / math.exp10(mult * 3) : n * math.exp10(mult * -3)) * 1e12) / 1e12,\n    prefix: prefix\n  };\n};","map":{"version":3,"names":["math","yotta","zetta","exa","peta","tera","giga","mega","kilo","hecto","deca","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","prefixUp","prefixDown","prefix","n","baseMultiplier","arguments","length","undefined","nPow","log10","mult","round","exp10"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/lib0/metric.js"],"sourcesContent":["/**\n * Utility module to convert metric values.\n *\n * @module metric\n */\n\nimport * as math from './math.js'\n\nexport const yotta = 1e24\nexport const zetta = 1e21\nexport const exa = 1e18\nexport const peta = 1e15\nexport const tera = 1e12\nexport const giga = 1e9\nexport const mega = 1e6\nexport const kilo = 1e3\nexport const hecto = 1e2\nexport const deca = 10\nexport const deci = 0.1\nexport const centi = 0.01\nexport const milli = 1e-3\nexport const micro = 1e-6\nexport const nano = 1e-9\nexport const pico = 1e-12\nexport const femto = 1e-15\nexport const atto = 1e-18\nexport const zepto = 1e-21\nexport const yocto = 1e-24\n\nconst prefixUp = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\nconst prefixDown = ['', 'm', 'μ', 'n', 'p', 'f', 'a', 'z', 'y']\n\n/**\n * Calculate the metric prefix for a number. Assumes E.g. `prefix(1000) = { n: 1, prefix: 'k' }`\n *\n * @param {number} n\n * @param {number} [baseMultiplier] Multiplier of the base (10^(3*baseMultiplier)). E.g. `convert(time, -3)` if time is already in milli seconds\n * @return {{n:number,prefix:string}}\n */\nexport const prefix = (n, baseMultiplier = 0) => {\n  const nPow = n === 0 ? 0 : math.log10(n)\n  let mult = 0\n  while (nPow < mult * 3 && baseMultiplier > -8) {\n    baseMultiplier--\n    mult--\n  }\n  while (nPow >= 3 + mult * 3 && baseMultiplier < 8) {\n    baseMultiplier++\n    mult++\n  }\n  const prefix = baseMultiplier < 0 ? prefixDown[-baseMultiplier] : prefixUp[baseMultiplier]\n  return {\n    n: math.round((mult > 0 ? n / math.exp10(mult * 3) : n * math.exp10(mult * -3)) * 1e12) / 1e12,\n    prefix\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,IAAI,MAAM,WAAW;AAEjC,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,GAAG,GAAG,IAAI;AACvB,OAAO,IAAMC,IAAI,GAAG,IAAI;AACxB,OAAO,IAAMC,IAAI,GAAG,IAAI;AACxB,OAAO,IAAMC,IAAI,GAAG,GAAG;AACvB,OAAO,IAAMC,IAAI,GAAG,GAAG;AACvB,OAAO,IAAMC,IAAI,GAAG,GAAG;AACvB,OAAO,IAAMC,KAAK,GAAG,GAAG;AACxB,OAAO,IAAMC,IAAI,GAAG,EAAE;AACtB,OAAO,IAAMC,IAAI,GAAG,GAAG;AACvB,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,KAAK,GAAG,IAAI;AACzB,OAAO,IAAMC,IAAI,GAAG,IAAI;AACxB,OAAO,IAAMC,IAAI,GAAG,KAAK;AACzB,OAAO,IAAMC,KAAK,GAAG,KAAK;AAC1B,OAAO,IAAMC,IAAI,GAAG,KAAK;AACzB,OAAO,IAAMC,KAAK,GAAG,KAAK;AAC1B,OAAO,IAAMC,KAAK,GAAG,KAAK;AAE1B,IAAMC,QAAQ,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC7D,IAAMC,UAAU,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,MAAM,GAAG,SAAAA,OAACC,CAAC,EAAyB;EAAA,IAAvBC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC1C,IAAMG,IAAI,GAAGL,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGxB,IAAI,CAAC8B,KAAK,CAACN,CAAC,CAAC;EACxC,IAAIO,IAAI,GAAG,CAAC;EACZ,OAAOF,IAAI,GAAGE,IAAI,GAAG,CAAC,IAAIN,cAAc,GAAG,CAAC,CAAC,EAAE;IAC7CA,cAAc,EAAE;IAChBM,IAAI,EAAE;EACR;EACA,OAAOF,IAAI,IAAI,CAAC,GAAGE,IAAI,GAAG,CAAC,IAAIN,cAAc,GAAG,CAAC,EAAE;IACjDA,cAAc,EAAE;IAChBM,IAAI,EAAE;EACR;EACA,IAAMR,MAAM,GAAGE,cAAc,GAAG,CAAC,GAAGH,UAAU,CAAC,CAACG,cAAc,CAAC,GAAGJ,QAAQ,CAACI,cAAc,CAAC;EAC1F,OAAO;IACLD,CAAC,EAAExB,IAAI,CAACgC,KAAK,CAAC,CAACD,IAAI,GAAG,CAAC,GAAGP,CAAC,GAAGxB,IAAI,CAACiC,KAAK,CAACF,IAAI,GAAG,CAAC,CAAC,GAAGP,CAAC,GAAGxB,IAAI,CAACiC,KAAK,CAACF,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI;IAC9FR,MAAM,EAANA;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}