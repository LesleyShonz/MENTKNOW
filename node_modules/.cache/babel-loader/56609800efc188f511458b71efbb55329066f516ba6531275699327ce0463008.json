{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseSegment2d } from \"./BaseSegment2d.mjs\";\nimport { Box2d } from \"./Box2d.mjs\";\nimport { Vec2d } from \"./Vec2d.mjs\";\nvar LineSegment2d = /*#__PURE__*/function (_BaseSegment2d) {\n  _inherits(LineSegment2d, _BaseSegment2d);\n  var _super = _createSuper(LineSegment2d);\n  function LineSegment2d(a, b) {\n    var _this;\n    var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    _classCallCheck(this, LineSegment2d);\n    _this = _super.call(this, {\n      a: a,\n      b: b,\n      p: p\n    });\n    _this.a = a;\n    _this.b = b;\n    _this.values.p = Math.max(10, Math.ceil(_this.length / 20));\n    return _this;\n  }\n  _createClass(LineSegment2d, [{\n    key: \"length\",\n    get: function get() {\n      return Vec2d.Dist(this.a, this.b);\n    }\n  }, {\n    key: \"tangent\",\n    get: function get() {\n      return Vec2d.Tan(this.a, this.b);\n    }\n  }, {\n    key: \"angle\",\n    get: function get() {\n      return Vec2d.Angle(this.a, this.b);\n    }\n  }, {\n    key: \"bounds\",\n    get: function get() {\n      return Box2d.FromPoints([this.a, this.b]);\n    }\n  }, {\n    key: \"getX\",\n    value: function getX(t) {\n      var _this$values = this.values,\n        a = _this$values.a,\n        b = _this$values.b;\n      return a.x + (b.x - a.x) * t;\n    }\n  }, {\n    key: \"getY\",\n    value: function getY(t) {\n      var _this$values2 = this.values,\n        a = _this$values2.a,\n        b = _this$values2.b;\n      return a.y + (b.y - a.y) * t;\n    }\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(t) {\n      var _this$values3 = this.values,\n        a = _this$values3.a,\n        b = _this$values3.b;\n      if (t <= 0) return Vec2d.From(a);\n      if (t >= 1) return Vec2d.From(b);\n      return Vec2d.Lrp(a, b, t);\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var head = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var _this$values4 = this.values,\n        a = _this$values4.a,\n        b = _this$values4.b;\n      if (Vec2d.Equals(a, b)) return \"\";\n      return head ? \"M\".concat(a.x, \",\").concat(a.y, \"L\").concat(b.x, \",\").concat(b.y) : \"\".concat(b.x, \",\").concat(b.y);\n    }\n  }, {\n    key: \"getNormal\",\n    value: function getNormal() {\n      var _this$values5 = this.values,\n        a = _this$values5.a,\n        b = _this$values5.b;\n      return Vec2d.Sub(a, b).per().uni().toFixed();\n    }\n    /**\n     * Get the closest point on the segment to an arbitrary point.\n     *\n     * @param point - The arbitrary point.\n     * @public\n     */\n  }, {\n    key: \"getClosestPointTo\",\n    value: function getClosestPointTo(point) {\n      var _this$values6 = this.values,\n        a = _this$values6.a,\n        b = _this$values6.b;\n      var closestPoint = Vec2d.NearestPointOnLineSegment(a, b, point);\n      var closestDistance = closestPoint.dist(point);\n      return {\n        point: closestPoint,\n        distance: closestDistance\n      };\n    }\n  }], [{\n    key: \"Length\",\n    value: function Length(A) {\n      return Vec2d.Dist(A.a, A.b);\n    }\n  }, {\n    key: \"Tangent\",\n    value: function Tangent(A) {\n      return Vec2d.Tan(A.a, A.b);\n    }\n  }, {\n    key: \"Angle\",\n    value: function Angle(A) {\n      return Vec2d.Angle(A.a, A.b);\n    }\n  }]);\n  return LineSegment2d;\n}(BaseSegment2d);\nexport { LineSegment2d };","map":{"version":3,"names":["BaseSegment2d","Box2d","Vec2d","LineSegment2d","_BaseSegment2d","_inherits","_super","_createSuper","a","b","_this","p","arguments","length","undefined","_classCallCheck","call","values","Math","max","ceil","_createClass","key","get","Dist","Tan","Angle","FromPoints","value","getX","t","_this$values","x","getY","_this$values2","y","getPoint","_this$values3","From","Lrp","getPath","head","_this$values4","Equals","concat","getNormal","_this$values5","Sub","per","uni","toFixed","getClosestPointTo","point","_this$values6","closestPoint","NearestPointOnLineSegment","closestDistance","dist","distance","Length","A","Tangent"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/primitives/src/lib/LineSegment2d.ts"],"sourcesContent":["import { BaseSegment2d } from './BaseSegment2d'\nimport { Box2d } from './Box2d'\nimport { Vec2d, VecLike } from './Vec2d'\n\n/** @public */\nexport interface LineSegment2dModel {\n\ta: VecLike\n\tb: VecLike\n\tp: number\n}\n\n/** @public */\nexport class LineSegment2d extends BaseSegment2d<LineSegment2dModel> {\n\tconstructor(public a: VecLike, public b: VecLike, p = 2) {\n\t\tsuper({ a, b, p })\n\t\tthis.values.p = Math.max(10, Math.ceil(this.length / 20))\n\t}\n\n\toverride get length() {\n\t\treturn Vec2d.Dist(this.a, this.b)\n\t}\n\n\tget tangent() {\n\t\treturn Vec2d.Tan(this.a, this.b)\n\t}\n\n\tget angle() {\n\t\treturn Vec2d.Angle(this.a, this.b)\n\t}\n\n\toverride get bounds() {\n\t\treturn Box2d.FromPoints([this.a, this.b])\n\t}\n\n\tgetX(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\treturn a.x + (b.x - a.x) * t\n\t}\n\n\tgetY(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\treturn a.y + (b.y - a.y) * t\n\t}\n\n\tgetPoint(t: number) {\n\t\tconst { a, b } = this.values\n\n\t\tif (t <= 0) return Vec2d.From(a)\n\t\tif (t >= 1) return Vec2d.From(b)\n\n\t\treturn Vec2d.Lrp(a, b, t)\n\t}\n\n\tgetPath(head = true) {\n\t\tconst { a, b } = this.values\n\n\t\tif (Vec2d.Equals(a, b)) return ''\n\n\t\treturn head ? `M${a.x},${a.y}L${b.x},${b.y}` : `${b.x},${b.y}`\n\t}\n\n\toverride getNormal() {\n\t\tconst { a, b } = this.values\n\n\t\treturn Vec2d.Sub(a, b).per().uni().toFixed()\n\t}\n\n\t/**\n\t * Get the closest point on the segment to an arbitrary point.\n\t *\n\t * @param point - The arbitrary point.\n\t * @public\n\t */\n\toverride getClosestPointTo(point: VecLike) {\n\t\tconst { a, b } = this.values\n\n\t\tconst closestPoint = Vec2d.NearestPointOnLineSegment(a, b, point)\n\n\t\tconst closestDistance = closestPoint.dist(point)\n\n\t\treturn { point: closestPoint, distance: closestDistance }\n\t}\n\n\tstatic Length(A: LineSegment2d) {\n\t\treturn Vec2d.Dist(A.a, A.b)\n\t}\n\n\tstatic Tangent(A: LineSegment2d) {\n\t\treturn Vec2d.Tan(A.a, A.b)\n\t}\n\n\tstatic Angle(A: LineSegment2d) {\n\t\treturn Vec2d.Angle(A.a, A.b)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}