"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLineSvg_exports = {};
__export(getLineSvg_exports, {
  getDashedLineShapeSvg: () => getDashedLineShapeSvg,
  getDrawLineShapeSvg: () => getDrawLineShapeSvg,
  getLineSvg: () => getLineSvg,
  getSolidLineShapeSvg: () => getSolidLineShapeSvg
});
module.exports = __toCommonJS(getLineSvg_exports);
var import_getPerfectDashProps = require("../../shared/getPerfectDashProps");
var import_getLinePath = require("./getLinePath");
function getDrawLineShapeSvg({
  shape,
  strokeWidth,
  spline,
  color
}) {
  const pfPath = (0, import_getLinePath.getLineDrawPath)(shape, spline, strokeWidth);
  const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
  p.setAttribute("stroke-width", "0");
  p.setAttribute("stroke", "none");
  p.setAttribute("fill", color);
  p.setAttribute("d", pfPath);
  return p;
}
function getDashedLineShapeSvg({
  dash,
  strokeWidth,
  spline,
  color
}) {
  const { segments } = spline;
  const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
  g.setAttribute("stroke", color);
  g.setAttribute("stroke-width", strokeWidth.toString());
  segments.forEach((segment, i) => {
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    const { strokeDasharray, strokeDashoffset } = (0, import_getPerfectDashProps.getPerfectDashProps)(segment.length, strokeWidth, {
      style: dash,
      start: i > 0 ? "outset" : "none",
      end: i < segments.length - 1 ? "outset" : "none"
    });
    path.setAttribute("stroke-dasharray", strokeDasharray.toString());
    path.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
    path.setAttribute("d", segment.path);
    path.setAttribute("fill", "none");
    g.appendChild(path);
  });
  return g;
}
function getSolidLineShapeSvg({
  strokeWidth,
  spline,
  color
}) {
  const { path } = spline;
  const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
  p.setAttribute("stroke-width", strokeWidth.toString());
  p.setAttribute("stroke", color);
  p.setAttribute("fill", "none");
  p.setAttribute("d", path);
  return p;
}
function getLineSvg(shape, spline, color, strokeWidth) {
  switch (shape.props.dash) {
    case "draw":
      return getDrawLineShapeSvg({
        shape,
        strokeWidth,
        spline,
        color
      });
    case "solid":
      return getSolidLineShapeSvg({
        strokeWidth,
        spline,
        color
      });
    default:
      return getDashedLineShapeSvg({
        strokeWidth,
        spline,
        dash: shape.props.dash,
        color
      });
  }
}
//# sourceMappingURL=getLineSvg.js.map
