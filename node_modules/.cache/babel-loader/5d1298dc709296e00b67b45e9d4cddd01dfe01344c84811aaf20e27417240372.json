{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar isTest = function isTest() {\n  return typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\" &&\n  // @ts-expect-error\n  !globalThis.__FORCE_RAF_IN_TESTS__;\n};\nvar rafQueue = [];\nvar tick = function tick() {\n  var queue = rafQueue.splice(0, rafQueue.length);\n  var _iterator = _createForOfIteratorHelper(queue),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var fn = _step.value;\n      fn();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar frame;\nfunction raf() {\n  if (frame) {\n    return;\n  }\n  frame = requestAnimationFrame(function () {\n    frame = void 0;\n    tick();\n  });\n}\nfunction rafThrottle(fn) {\n  if (isTest()) {\n    return fn;\n  }\n  return function () {\n    if (rafQueue.includes(fn)) {\n      return;\n    }\n    rafQueue.push(fn);\n    raf();\n  };\n}\nfunction throttledRaf(fn) {\n  if (isTest()) {\n    return fn();\n  }\n  if (rafQueue.includes(fn)) {\n    return;\n  }\n  rafQueue.push(fn);\n  raf();\n}\nexport { rafThrottle, throttledRaf };","map":{"version":3,"names":["isTest","process","env","NODE_ENV","globalThis","__FORCE_RAF_IN_TESTS__","rafQueue","tick","queue","splice","length","_iterator","_createForOfIteratorHelper","_step","s","n","done","fn","value","err","e","f","frame","raf","requestAnimationFrame","rafThrottle","includes","push","throttledRaf"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/utils/src/lib/raf.ts"],"sourcesContent":["const isTest = () =>\n\ttypeof process !== 'undefined' &&\n\tprocess.env.NODE_ENV === 'test' &&\n\t// @ts-expect-error\n\t!globalThis.__FORCE_RAF_IN_TESTS__\n\nconst rafQueue: Array<() => void> = []\n\nconst tick = () => {\n\tconst queue = rafQueue.splice(0, rafQueue.length)\n\tfor (const fn of queue) {\n\t\tfn()\n\t}\n}\n\nlet frame: number | undefined\n\nfunction raf() {\n\tif (frame) {\n\t\treturn\n\t}\n\n\tframe = requestAnimationFrame(() => {\n\t\tframe = undefined\n\t\ttick()\n\t})\n}\n\n/**\n * Returns a throttled version of the function that will only be called max once per frame.\n * @param fn - the fun to return a throttled version of\n * @returns\n * @internal\n */\nexport function rafThrottle(fn: () => void) {\n\tif (isTest()) {\n\t\treturn fn\n\t}\n\n\treturn () => {\n\t\tif (rafQueue.includes(fn)) {\n\t\t\treturn\n\t\t}\n\t\trafQueue.push(fn)\n\t\traf()\n\t}\n}\n\n/**\n * Calls the function on the next frame.\n * If the same fn is passed again before the next frame, it will still be called only once.\n * @param fn - the fun to call on the next animation frame\n * @returns\n * @internal\n */\nexport function throttledRaf(fn: () => void) {\n\tif (isTest()) {\n\t\treturn fn()\n\t}\n\n\tif (rafQueue.includes(fn)) {\n\t\treturn\n\t}\n\n\trafQueue.push(fn)\n\traf()\n}\n"],"mappings":";AAAA,IAAMA,MAAA,GAAS,SAATA,OAAA;EAAA,OACL,OAAOC,OAAA,KAAY,eACnBA,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa;EAAA;EAEzB,CAACC,UAAA,CAAWC,sBAAA;AAAA;AAEb,IAAMC,QAAA,GAA8B,EAAC;AAErC,IAAMC,IAAA,GAAO,SAAPA,KAAA,EAAa;EAClB,IAAMC,KAAA,GAAQF,QAAA,CAASG,MAAA,CAAO,GAAGH,QAAA,CAASI,MAAM;EAAA,IAAAC,SAAA,GAAAC,0BAAA,CAC/BJ,KAAA;IAAAK,KAAA;EAAA;IAAjB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbC,EAAA,GAAAJ,KAAA,CAAAK,KAAA;MACVD,EAAA,CAAG;IACJ;EAAA,SAAAE,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;AACD;AAEA,IAAIC,KAAA;AAEJ,SAASC,IAAA,EAAM;EACd,IAAID,KAAA,EAAO;IACV;EACD;EAEAA,KAAA,GAAQE,qBAAA,CAAsB,YAAM;IACnCF,KAAA,GAAQ;IACRf,IAAA,CAAK;EACN,CAAC;AACF;AAQO,SAASkB,YAAYR,EAAA,EAAgB;EAC3C,IAAIjB,MAAA,CAAO,GAAG;IACb,OAAOiB,EAAA;EACR;EAEA,OAAO,YAAM;IACZ,IAAIX,QAAA,CAASoB,QAAA,CAAST,EAAE,GAAG;MAC1B;IACD;IACAX,QAAA,CAASqB,IAAA,CAAKV,EAAE;IAChBM,GAAA,CAAI;EACL;AACD;AASO,SAASK,aAAaX,EAAA,EAAgB;EAC5C,IAAIjB,MAAA,CAAO,GAAG;IACb,OAAOiB,EAAA,CAAG;EACX;EAEA,IAAIX,QAAA,CAASoB,QAAA,CAAST,EAAE,GAAG;IAC1B;EACD;EAEAX,QAAA,CAASqB,IAAA,CAAKV,EAAE;EAChBM,GAAA,CAAI;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}