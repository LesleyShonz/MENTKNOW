{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React from \"react\";\nimport { preventDefault, releasePointerCapture, setPointerCapture } from \"../utils/dom.mjs\";\nimport { getPointerInfo } from \"../utils/svg.mjs\";\nimport { useEditor } from \"./useEditor.mjs\";\nvar pointerEventHandler = function pointerEventHandler(editor, shapeId, name) {\n  return function (e) {\n    if (name !== \"pointer_move\" && editor.pageState.editingId === shapeId) e.isKilled = true;\n    if (e.isKilled) return;\n    switch (name) {\n      case \"pointer_down\":\n        {\n          if (e.button !== 0 && e.button !== 1 && e.button !== 2) return;\n          setPointerCapture(e.currentTarget, e);\n          break;\n        }\n      case \"pointer_up\":\n        {\n          releasePointerCapture(e.currentTarget, e);\n          break;\n        }\n    }\n    var shape = editor.getShapeById(shapeId);\n    if (!shape) {\n      console.error(\"Shape not found\", shapeId);\n      return;\n    }\n    editor.dispatch(_objectSpread({\n      type: \"pointer\",\n      target: \"shape\",\n      shape: shape,\n      name: name\n    }, getPointerInfo(e, editor.getContainer())));\n  };\n};\nfunction useShapeEvents(id) {\n  var editor = useEditor();\n  return React.useMemo(function () {\n    function onTouchStart(e) {\n      ;\n      e.isKilled = true;\n      preventDefault(e);\n    }\n    function onTouchEnd(e) {\n      ;\n      e.isKilled = true;\n      preventDefault(e);\n    }\n    var handlePointerMove = pointerEventHandler(editor, id, \"pointer_move\");\n    var lastX, lastY;\n    function onPointerMove(e) {\n      if (e.isKilled) return;\n      if (e.clientX === lastX && e.clientY === lastY) return;\n      lastX = e.clientX;\n      lastY = e.clientY;\n      return handlePointerMove(e);\n    }\n    return {\n      onPointerDown: pointerEventHandler(editor, id, \"pointer_down\"),\n      onPointerUp: pointerEventHandler(editor, id, \"pointer_up\"),\n      onPointerEnter: pointerEventHandler(editor, id, \"pointer_enter\"),\n      onPointerLeave: pointerEventHandler(editor, id, \"pointer_leave\"),\n      onPointerMove: onPointerMove,\n      onTouchStart: onTouchStart,\n      onTouchEnd: onTouchEnd\n    };\n  }, [editor, id]);\n}\nexport { useShapeEvents };","map":{"version":3,"names":["React","preventDefault","releasePointerCapture","setPointerCapture","getPointerInfo","useEditor","pointerEventHandler","editor","shapeId","name","e","pageState","editingId","isKilled","button","currentTarget","shape","getShapeById","console","error","dispatch","_objectSpread","type","target","getContainer","useShapeEvents","id","useMemo","onTouchStart","onTouchEnd","handlePointerMove","lastX","lastY","onPointerMove","clientX","clientY","onPointerDown","onPointerUp","onPointerEnter","onPointerLeave"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/hooks/useShapeEvents.ts"],"sourcesContent":["import { TLShapeId } from '@tldraw/tlschema'\nimport React from 'react'\nimport { Editor } from '../editor/Editor'\nimport { TLPointerEventName } from '../editor/types/event-types'\nimport { preventDefault, releasePointerCapture, setPointerCapture } from '../utils/dom'\nimport { getPointerInfo } from '../utils/svg'\nimport { useEditor } from './useEditor'\n\nconst pointerEventHandler = (editor: Editor, shapeId: TLShapeId, name: TLPointerEventName) => {\n\treturn (e: React.PointerEvent) => {\n\t\tif (name !== 'pointer_move' && editor.pageState.editingId === shapeId)\n\t\t\t(e as any).isKilled = true\n\t\tif ((e as any).isKilled) return\n\n\t\tswitch (name) {\n\t\t\tcase 'pointer_down': {\n\t\t\t\tif (e.button !== 0 && e.button !== 1 && e.button !== 2) return\n\t\t\t\tsetPointerCapture(e.currentTarget, e)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'pointer_up': {\n\t\t\t\treleasePointerCapture(e.currentTarget, e)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst shape = editor.getShapeById(shapeId)\n\n\t\tif (!shape) {\n\t\t\tconsole.error('Shape not found', shapeId)\n\t\t\treturn\n\t\t}\n\n\t\teditor.dispatch({\n\t\t\ttype: 'pointer',\n\t\t\ttarget: 'shape',\n\t\t\tshape,\n\t\t\tname,\n\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t})\n\t}\n}\n\nexport function useShapeEvents(id: TLShapeId) {\n\tconst editor = useEditor()\n\n\treturn React.useMemo(() => {\n\t\tfunction onTouchStart(e: React.TouchEvent) {\n\t\t\t;(e as any).isKilled = true\n\t\t\tpreventDefault(e)\n\t\t}\n\n\t\tfunction onTouchEnd(e: React.TouchEvent) {\n\t\t\t;(e as any).isKilled = true\n\t\t\tpreventDefault(e)\n\t\t}\n\n\t\tconst handlePointerMove = pointerEventHandler(editor, id, 'pointer_move')\n\n\t\t// Track the last screen point\n\t\tlet lastX: number, lastY: number\n\n\t\tfunction onPointerMove(e: React.PointerEvent) {\n\t\t\tif ((e as any).isKilled) return\n\t\t\tif (e.clientX === lastX && e.clientY === lastY) return\n\t\t\tlastX = e.clientX\n\t\t\tlastY = e.clientY\n\n\t\t\treturn handlePointerMove(e)\n\t\t}\n\n\t\treturn {\n\t\t\tonPointerDown: pointerEventHandler(editor, id, 'pointer_down'),\n\t\t\tonPointerUp: pointerEventHandler(editor, id, 'pointer_up'),\n\t\t\tonPointerEnter: pointerEventHandler(editor, id, 'pointer_enter'),\n\t\t\tonPointerLeave: pointerEventHandler(editor, id, 'pointer_leave'),\n\t\t\tonPointerMove,\n\t\t\tonTouchStart,\n\t\t\tonTouchEnd,\n\t\t}\n\t}, [editor, id])\n}\n"],"mappings":";AACA,OAAOA,KAAA,MAAW;AAGlB,SAASC,cAAA,EAAgBC,qBAAA,EAAuBC,iBAAA,QAAyB;AACzE,SAASC,cAAA,QAAsB;AAC/B,SAASC,SAAA,QAAiB;AAE1B,IAAMC,mBAAA,GAAsB,SAAtBA,oBAAuBC,MAAA,EAAgBC,OAAA,EAAoBC,IAAA,EAA6B;EAC7F,OAAO,UAACC,CAAA,EAA0B;IACjC,IAAID,IAAA,KAAS,kBAAkBF,MAAA,CAAOI,SAAA,CAAUC,SAAA,KAAcJ,OAAA,EAC5DE,CAAA,CAAUG,QAAA,GAAW;IACvB,IAAKH,CAAA,CAAUG,QAAA,EAAU;IAEzB,QAAQJ,IAAA;MACP,KAAK;QAAgB;UACpB,IAAIC,CAAA,CAAEI,MAAA,KAAW,KAAKJ,CAAA,CAAEI,MAAA,KAAW,KAAKJ,CAAA,CAAEI,MAAA,KAAW,GAAG;UACxDX,iBAAA,CAAkBO,CAAA,CAAEK,aAAA,EAAeL,CAAC;UACpC;QACD;MACA,KAAK;QAAc;UAClBR,qBAAA,CAAsBQ,CAAA,CAAEK,aAAA,EAAeL,CAAC;UACxC;QACD;IACD;IAEA,IAAMM,KAAA,GAAQT,MAAA,CAAOU,YAAA,CAAaT,OAAO;IAEzC,IAAI,CAACQ,KAAA,EAAO;MACXE,OAAA,CAAQC,KAAA,CAAM,mBAAmBX,OAAO;MACxC;IACD;IAEAD,MAAA,CAAOa,QAAA,CAAAC,aAAA;MACNC,IAAA,EAAM;MACNC,MAAA,EAAQ;MACRP,KAAA,EAAAA,KAAA;MACAP,IAAA,EAAAA;IAAA,GACGL,cAAA,CAAeM,CAAA,EAAGH,MAAA,CAAOiB,YAAA,CAAa,CAAC,EAC1C;EACF;AACD;AAEO,SAASC,eAAeC,EAAA,EAAe;EAC7C,IAAMnB,MAAA,GAASF,SAAA,CAAU;EAEzB,OAAOL,KAAA,CAAM2B,OAAA,CAAQ,YAAM;IAC1B,SAASC,aAAalB,CAAA,EAAqB;MAC1C;MAAEA,CAAA,CAAUG,QAAA,GAAW;MACvBZ,cAAA,CAAeS,CAAC;IACjB;IAEA,SAASmB,WAAWnB,CAAA,EAAqB;MACxC;MAAEA,CAAA,CAAUG,QAAA,GAAW;MACvBZ,cAAA,CAAeS,CAAC;IACjB;IAEA,IAAMoB,iBAAA,GAAoBxB,mBAAA,CAAoBC,MAAA,EAAQmB,EAAA,EAAI,cAAc;IAGxE,IAAIK,KAAA,EAAeC,KAAA;IAEnB,SAASC,cAAcvB,CAAA,EAAuB;MAC7C,IAAKA,CAAA,CAAUG,QAAA,EAAU;MACzB,IAAIH,CAAA,CAAEwB,OAAA,KAAYH,KAAA,IAASrB,CAAA,CAAEyB,OAAA,KAAYH,KAAA,EAAO;MAChDD,KAAA,GAAQrB,CAAA,CAAEwB,OAAA;MACVF,KAAA,GAAQtB,CAAA,CAAEyB,OAAA;MAEV,OAAOL,iBAAA,CAAkBpB,CAAC;IAC3B;IAEA,OAAO;MACN0B,aAAA,EAAe9B,mBAAA,CAAoBC,MAAA,EAAQmB,EAAA,EAAI,cAAc;MAC7DW,WAAA,EAAa/B,mBAAA,CAAoBC,MAAA,EAAQmB,EAAA,EAAI,YAAY;MACzDY,cAAA,EAAgBhC,mBAAA,CAAoBC,MAAA,EAAQmB,EAAA,EAAI,eAAe;MAC/Da,cAAA,EAAgBjC,mBAAA,CAAoBC,MAAA,EAAQmB,EAAA,EAAI,eAAe;MAC/DO,aAAA,EAAAA,aAAA;MACAL,YAAA,EAAAA,YAAA;MACAC,UAAA,EAAAA;IACD;EACD,GAAG,CAACtB,MAAA,EAAQmB,EAAE,CAAC;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}