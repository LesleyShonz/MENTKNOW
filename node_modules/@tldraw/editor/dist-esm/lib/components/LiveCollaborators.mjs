import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from "react";
import { track } from "signia-react";
import { COLLABORATOR_CHECK_INTERVAL, COLLABORATOR_TIMEOUT } from "../constants.mjs";
import { useEditor } from "../hooks/useEditor.mjs";
import { useEditorComponents } from "../hooks/useEditorComponents.mjs";
import { usePeerIds } from "../hooks/usePeerIds.mjs";
import { usePresence } from "../hooks/usePresence.mjs";
const LiveCollaborators = track(function Collaborators() {
  const peerIds = usePeerIds();
  return /* @__PURE__ */ jsx(Fragment, { children: peerIds.map((id) => /* @__PURE__ */ jsx(Collaborator, { userId: id }, id)) });
});
const Collaborator = track(function Collaborator2({ userId }) {
  const editor = useEditor();
  const { viewportPageBounds, zoomLevel } = editor;
  const {
    CollaboratorBrush,
    CollaboratorScribble,
    CollaboratorCursor,
    CollaboratorHint,
    CollaboratorShapeIndicator
  } = useEditorComponents();
  const latestPresence = usePresence(userId);
  const [isTimedOut, setIsTimedOut] = useState(false);
  const rLastSeen = useRef(-1);
  useEffect(() => {
    const interval = setInterval(() => {
      setIsTimedOut(Date.now() - rLastSeen.current > COLLABORATOR_TIMEOUT);
    }, COLLABORATOR_CHECK_INTERVAL);
    return () => clearInterval(interval);
  }, []);
  if (!latestPresence)
    return null;
  rLastSeen.current = latestPresence.lastActivityTimestamp;
  if (isTimedOut && editor.instanceState.followingUserId !== userId && !editor.instanceState.highlightedUserIds.includes(userId))
    return null;
  if (latestPresence.currentPageId !== editor.currentPageId)
    return null;
  const { brush, scribble, selectedIds, userName, cursor, color, chatMessage } = latestPresence;
  const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    brush && CollaboratorBrush ? /* @__PURE__ */ jsx(
      CollaboratorBrush,
      {
        className: "tl-collaborator__brush",
        brush,
        color,
        opacity: 0.1
      },
      userId + "_brush"
    ) : null,
    isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ jsx(
      CollaboratorCursor,
      {
        className: "tl-collaborator__cursor",
        point: cursor,
        color,
        zoom: zoomLevel,
        name: userName !== "New User" ? userName : null,
        chatMessage
      },
      userId + "_cursor"
    ) : CollaboratorHint ? /* @__PURE__ */ jsx(
      CollaboratorHint,
      {
        className: "tl-collaborator__cursor-hint",
        point: cursor,
        color,
        zoom: zoomLevel,
        viewport: viewportPageBounds
      },
      userId + "_cursor_hint"
    ) : null,
    scribble && CollaboratorScribble ? /* @__PURE__ */ jsx(
      CollaboratorScribble,
      {
        className: "tl-collaborator__scribble",
        scribble,
        color,
        zoom: zoomLevel,
        opacity: scribble.color === "laser" ? 0.5 : 0.1
      },
      userId + "_scribble"
    ) : null,
    CollaboratorShapeIndicator && selectedIds.map((shapeId) => /* @__PURE__ */ jsx(
      CollaboratorShapeIndicator,
      {
        className: "tl-collaborator__shape-indicator",
        id: shapeId,
        color,
        opacity: 0.5
      },
      userId + "_" + shapeId
    ))
  ] });
});
export {
  LiveCollaborators
};
//# sourceMappingURL=LiveCollaborators.mjs.map
