{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { ArrowShape } from \"../editor/shapes/arrow/ArrowShape.mjs\";\nimport { BookmarkShape } from \"../editor/shapes/bookmark/BookmarkShape.mjs\";\nimport { DrawShape } from \"../editor/shapes/draw/DrawShape.mjs\";\nimport { EmbedShape } from \"../editor/shapes/embed/EmbedShape.mjs\";\nimport { FrameShape } from \"../editor/shapes/frame/FrameShape.mjs\";\nimport { GeoShape } from \"../editor/shapes/geo/GeoShape.mjs\";\nimport { GroupShape } from \"../editor/shapes/group/GroupShape.mjs\";\nimport { HighlightShape } from \"../editor/shapes/highlight/HighlightShape.mjs\";\nimport { ImageShape } from \"../editor/shapes/image/ImageShape.mjs\";\nimport { LineShape } from \"../editor/shapes/line/LineShape.mjs\";\nimport { NoteShape } from \"../editor/shapes/note/NoteShape.mjs\";\nimport { TextShape } from \"../editor/shapes/text/TextShape.mjs\";\nimport { VideoShape } from \"../editor/shapes/video/VideoShape.mjs\";\nvar coreShapes = [\n// created by grouping interactions, probably the corest core shape that we have\nGroupShape,\n// created by embed menu / url drop\nEmbedShape,\n// created by copy and paste / url drop\nBookmarkShape,\n// created by copy and paste / file drop\nImageShape,\n// created by copy and paste\nTextShape];\nvar defaultShapes = [DrawShape, GeoShape, LineShape, NoteShape, FrameShape, ArrowShape, HighlightShape, VideoShape];\nvar coreShapeTypes = new Set(coreShapes.map(function (s) {\n  return s.type;\n}));\nfunction checkShapesAndAddCore(customShapes) {\n  var shapes = [].concat(coreShapes);\n  var addedCustomShapeTypes = /* @__PURE__ */new Set();\n  var _iterator = _createForOfIteratorHelper(customShapes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var customShape = _step.value;\n      if (coreShapeTypes.has(customShape.type)) {\n        throw new Error(\"Shape type \\\"\".concat(customShape.type, \"\\\" is a core shapes type and cannot be overridden\"));\n      }\n      if (addedCustomShapeTypes.has(customShape.type)) {\n        throw new Error(\"Shape type \\\"\".concat(customShape.type, \"\\\" is defined more than once\"));\n      }\n      shapes.push(customShape);\n      addedCustomShapeTypes.add(customShape.type);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return shapes;\n}\nexport { checkShapesAndAddCore, coreShapes, defaultShapes };","map":{"version":3,"names":["ArrowShape","BookmarkShape","DrawShape","EmbedShape","FrameShape","GeoShape","GroupShape","HighlightShape","ImageShape","LineShape","NoteShape","TextShape","VideoShape","coreShapes","defaultShapes","coreShapeTypes","Set","map","s","type","checkShapesAndAddCore","customShapes","shapes","concat","addedCustomShapeTypes","_iterator","_createForOfIteratorHelper","_step","n","done","customShape","value","has","Error","push","add","err","e","f"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/config/defaultShapes.ts"],"sourcesContent":["import { ArrowShape } from '../editor/shapes/arrow/ArrowShape'\nimport { BookmarkShape } from '../editor/shapes/bookmark/BookmarkShape'\nimport { DrawShape } from '../editor/shapes/draw/DrawShape'\nimport { EmbedShape } from '../editor/shapes/embed/EmbedShape'\nimport { FrameShape } from '../editor/shapes/frame/FrameShape'\nimport { GeoShape } from '../editor/shapes/geo/GeoShape'\nimport { GroupShape } from '../editor/shapes/group/GroupShape'\nimport { HighlightShape } from '../editor/shapes/highlight/HighlightShape'\nimport { ImageShape } from '../editor/shapes/image/ImageShape'\nimport { LineShape } from '../editor/shapes/line/LineShape'\nimport { NoteShape } from '../editor/shapes/note/NoteShape'\nimport { TextShape } from '../editor/shapes/text/TextShape'\nimport { VideoShape } from '../editor/shapes/video/VideoShape'\nimport { AnyTLShapeInfo, TLShapeInfo } from './defineShape'\n\n/** @public */\nexport const coreShapes = [\n\t// created by grouping interactions, probably the corest core shape that we have\n\tGroupShape,\n\t// created by embed menu / url drop\n\tEmbedShape,\n\t// created by copy and paste / url drop\n\tBookmarkShape,\n\t// created by copy and paste / file drop\n\tImageShape,\n\t// created by copy and paste\n\tTextShape,\n] as const\n\n/** @public */\nexport const defaultShapes = [\n\tDrawShape,\n\tGeoShape,\n\tLineShape,\n\tNoteShape,\n\tFrameShape,\n\tArrowShape,\n\tHighlightShape,\n\tVideoShape,\n] as const\n\nconst coreShapeTypes = new Set<string>(coreShapes.map((s) => s.type))\nexport function checkShapesAndAddCore(customShapes: readonly TLShapeInfo[]) {\n\tconst shapes: AnyTLShapeInfo[] = [...coreShapes]\n\n\tconst addedCustomShapeTypes = new Set<string>()\n\tfor (const customShape of customShapes) {\n\t\tif (coreShapeTypes.has(customShape.type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Shape type \"${customShape.type}\" is a core shapes type and cannot be overridden`\n\t\t\t)\n\t\t}\n\t\tif (addedCustomShapeTypes.has(customShape.type)) {\n\t\t\tthrow new Error(`Shape type \"${customShape.type}\" is defined more than once`)\n\t\t}\n\t\tshapes.push(customShape)\n\t\taddedCustomShapeTypes.add(customShape.type)\n\t}\n\n\treturn shapes\n}\n"],"mappings":";AAAA,SAASA,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,SAAA,QAAiB;AAC1B,SAASC,UAAA,QAAkB;AAC3B,SAASC,UAAA,QAAkB;AAC3B,SAASC,QAAA,QAAgB;AACzB,SAASC,UAAA,QAAkB;AAC3B,SAASC,cAAA,QAAsB;AAC/B,SAASC,UAAA,QAAkB;AAC3B,SAASC,SAAA,QAAiB;AAC1B,SAASC,SAAA,QAAiB;AAC1B,SAASC,SAAA,QAAiB;AAC1B,SAASC,UAAA,QAAkB;AAIpB,IAAMC,UAAA,GAAa;AAAA;AAEzBP,UAAA;AAAA;AAEAH,UAAA;AAAA;AAEAF,aAAA;AAAA;AAEAO,UAAA;AAAA;AAEAG,SAAA,CACD;AAGO,IAAMG,aAAA,GAAgB,CAC5BZ,SAAA,EACAG,QAAA,EACAI,SAAA,EACAC,SAAA,EACAN,UAAA,EACAJ,UAAA,EACAO,cAAA,EACAK,UAAA,CACD;AAEA,IAAMG,cAAA,GAAiB,IAAIC,GAAA,CAAYH,UAAA,CAAWI,GAAA,CAAI,UAACC,CAAA;EAAA,OAAMA,CAAA,CAAEC,IAAI;AAAA,EAAC;AAC7D,SAASC,sBAAsBC,YAAA,EAAsC;EAC3E,IAAMC,MAAA,MAAAC,MAAA,CAA+BV,UAAU;EAE/C,IAAMW,qBAAA,GAAwB,mBAAIR,GAAA,CAAY;EAAA,IAAAS,SAAA,GAAAC,0BAAA,CACpBL,YAAA;IAAAM,KAAA;EAAA;IAA1B,KAAAF,SAAA,CAAAP,CAAA,MAAAS,KAAA,GAAAF,SAAA,CAAAG,CAAA,IAAAC,IAAA,GAAwC;MAAA,IAA7BC,WAAA,GAAAH,KAAA,CAAAI,KAAA;MACV,IAAIhB,cAAA,CAAeiB,GAAA,CAAIF,WAAA,CAAYX,IAAI,GAAG;QACzC,MAAM,IAAIc,KAAA,iBAAAV,MAAA,CACMO,WAAA,CAAYX,IAAA,sDAC5B;MACD;MACA,IAAIK,qBAAA,CAAsBQ,GAAA,CAAIF,WAAA,CAAYX,IAAI,GAAG;QAChD,MAAM,IAAIc,KAAA,iBAAAV,MAAA,CAAqBO,WAAA,CAAYX,IAAA,iCAAiC;MAC7E;MACAG,MAAA,CAAOY,IAAA,CAAKJ,WAAW;MACvBN,qBAAA,CAAsBW,GAAA,CAAIL,WAAA,CAAYX,IAAI;IAC3C;EAAA,SAAAiB,GAAA;IAAAX,SAAA,CAAAY,CAAA,CAAAD,GAAA;EAAA;IAAAX,SAAA,CAAAa,CAAA;EAAA;EAEA,OAAOhB,MAAA;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}