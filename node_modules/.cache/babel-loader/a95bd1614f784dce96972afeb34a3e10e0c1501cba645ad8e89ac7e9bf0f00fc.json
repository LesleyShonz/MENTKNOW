{"ast":null,"code":"import _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { exhaustiveSwitchError, getOwnProperty, hasOwnProperty } from \"@tldraw/utils\";\nfunction formatPath(path) {\n  if (!path.length) {\n    return null;\n  }\n  var formattedPath = \"\";\n  var _iterator = _createForOfIteratorHelper(path),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (typeof item === \"number\") {\n        formattedPath += \".\".concat(item);\n      } else if (item.startsWith(\"(\")) {\n        if (formattedPath.endsWith(\")\")) {\n          formattedPath = \"\".concat(formattedPath.slice(0, -1), \", \").concat(item.slice(1));\n        } else {\n          formattedPath += item;\n        }\n      } else {\n        formattedPath += \".\".concat(item);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (formattedPath.startsWith(\".\")) {\n    return formattedPath.slice(1);\n  }\n  return formattedPath;\n}\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n  var _super = _createSuper(ValidationError);\n  function ValidationError(rawMessage) {\n    var _this;\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, ValidationError);\n    var formattedPath = formatPath(path);\n    var indentedMessage = rawMessage.split(\"\\n\").map(function (line, i) {\n      return i === 0 ? line : \"  \".concat(line);\n    }).join(\"\\n\");\n    _this = _super.call(this, path ? \"At \".concat(formattedPath, \": \").concat(indentedMessage) : indentedMessage);\n    _defineProperty(_assertThisInitialized(_this), \"name\", \"ValidationError\");\n    _this.rawMessage = rawMessage;\n    _this.path = path;\n    return _this;\n  }\n  return _createClass(ValidationError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nfunction prefixError(path, fn) {\n  try {\n    return fn();\n  } catch (err) {\n    if (err instanceof ValidationError) {\n      throw new ValidationError(err.rawMessage, [path].concat(_toConsumableArray(err.path)));\n    }\n    throw new ValidationError(err.toString(), [path]);\n  }\n}\nfunction typeToString(value) {\n  if (value === null) return \"null\";\n  if (Array.isArray(value)) return \"an array\";\n  var type = typeof value;\n  switch (type) {\n    case \"bigint\":\n    case \"boolean\":\n    case \"function\":\n    case \"number\":\n    case \"string\":\n    case \"symbol\":\n      return \"a \".concat(type);\n    case \"object\":\n      return \"an \".concat(type);\n    case \"undefined\":\n      return \"undefined\";\n    default:\n      exhaustiveSwitchError(type);\n  }\n}\nvar Validator = /*#__PURE__*/function () {\n  function Validator(validationFn) {\n    _classCallCheck(this, Validator);\n    this.validationFn = validationFn;\n  }\n  /**\n   * Asserts that the passed value is of the correct type and returns it. The returned value is\n   * guaranteed to be referentially equal to the passed value.\n   */\n  _createClass(Validator, [{\n    key: \"validate\",\n    value: function validate(value) {\n      var validated = this.validationFn(value);\n      if (process.env.NODE_ENV !== \"production\" && !Object.is(value, validated)) {\n        throw new ValidationError(\"Validator functions must return the same value they were passed\");\n      }\n      return validated;\n    }\n    /**\n     * Returns a new validator that also accepts null or undefined. The resulting value will always be\n     * null.\n     */\n  }, {\n    key: \"nullable\",\n    value: function nullable() {\n      return _nullable(this);\n    }\n    /**\n     * Returns a new validator that also accepts null or undefined. The resulting value will always be\n     * null.\n     */\n  }, {\n    key: \"optional\",\n    value: function optional() {\n      return _optional(this);\n    }\n    /**\n     * Refine this validation to a new type. The passed-in validation function should throw an error\n     * if the value can't be converted to the new type, or return the new type otherwise.\n     */\n  }, {\n    key: \"refine\",\n    value: function refine(otherValidationFn) {\n      var _this2 = this;\n      return new Validator(function (value) {\n        return otherValidationFn(_this2.validate(value));\n      });\n    }\n  }, {\n    key: \"check\",\n    value: function check(nameOrCheckFn, checkFn) {\n      if (typeof nameOrCheckFn === \"string\") {\n        return this.refine(function (value) {\n          prefixError(\"(check \".concat(nameOrCheckFn, \")\"), function () {\n            return checkFn(value);\n          });\n          return value;\n        });\n      } else {\n        return this.refine(function (value) {\n          nameOrCheckFn(value);\n          return value;\n        });\n      }\n    }\n  }]);\n  return Validator;\n}();\nvar ArrayOfValidator = /*#__PURE__*/function (_Validator) {\n  _inherits(ArrayOfValidator, _Validator);\n  var _super2 = _createSuper(ArrayOfValidator);\n  function ArrayOfValidator(itemValidator) {\n    var _this3;\n    _classCallCheck(this, ArrayOfValidator);\n    _this3 = _super2.call(this, function (value) {\n      var arr = array.validate(value);\n      var _loop = function _loop(i) {\n        prefixError(i, function () {\n          return itemValidator.validate(arr[i]);\n        });\n      };\n      for (var i = 0; i < arr.length; i++) {\n        _loop(i);\n      }\n      return arr;\n    });\n    _this3.itemValidator = itemValidator;\n    return _this3;\n  }\n  _createClass(ArrayOfValidator, [{\n    key: \"nonEmpty\",\n    value: function nonEmpty() {\n      return this.check(function (value) {\n        if (value.length === 0) {\n          throw new ValidationError(\"Expected a non-empty array\");\n        }\n      });\n    }\n  }, {\n    key: \"lengthGreaterThan1\",\n    value: function lengthGreaterThan1() {\n      return this.check(function (value) {\n        if (value.length <= 1) {\n          throw new ValidationError(\"Expected an array with length greater than 1\");\n        }\n      });\n    }\n  }]);\n  return ArrayOfValidator;\n}(Validator);\nvar ObjectValidator = /*#__PURE__*/function (_Validator2) {\n  _inherits(ObjectValidator, _Validator2);\n  var _super3 = _createSuper(ObjectValidator);\n  function ObjectValidator(config) {\n    var _this4;\n    var shouldAllowUnknownProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _classCallCheck(this, ObjectValidator);\n    _this4 = _super3.call(this, function (object2) {\n      if (typeof object2 !== \"object\" || object2 === null) {\n        throw new ValidationError(\"Expected object, got \".concat(typeToString(object2)));\n      }\n      var _loop2 = function _loop2() {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          validator = _Object$entries$_i[1];\n        prefixError(key, function () {\n          ;\n          validator.validate(getOwnProperty(object2, key));\n        });\n      };\n      for (var _i = 0, _Object$entries = Object.entries(config); _i < _Object$entries.length; _i++) {\n        _loop2();\n      }\n      if (!shouldAllowUnknownProperties) {\n        for (var _i2 = 0, _Object$keys = Object.keys(object2); _i2 < _Object$keys.length; _i2++) {\n          var key = _Object$keys[_i2];\n          if (!hasOwnProperty(config, key)) {\n            throw new ValidationError(\"Unexpected property\", [key]);\n          }\n        }\n      }\n      return object2;\n    });\n    _this4.config = config;\n    _this4.shouldAllowUnknownProperties = shouldAllowUnknownProperties;\n    return _this4;\n  }\n  _createClass(ObjectValidator, [{\n    key: \"allowUnknownProperties\",\n    value: function allowUnknownProperties() {\n      return new ObjectValidator(this.config, true);\n    }\n    /**\n     * Extend an object validator by adding additional properties.\n     *\n     * @example\n     *\n     * ```ts\n     * const animalValidator = T.object({\n     * \tname: T.string,\n     * })\n     * const catValidator = animalValidator.extend({\n     * \tmeowVolume: T.number,\n     * })\n     * ```\n     */\n  }, {\n    key: \"extend\",\n    value: function extend(extension) {\n      return new ObjectValidator(_objectSpread(_objectSpread({}, this.config), extension));\n    }\n  }]);\n  return ObjectValidator;\n}(Validator);\nvar UnionValidator = /*#__PURE__*/function (_Validator3) {\n  _inherits(UnionValidator, _Validator3);\n  var _super4 = _createSuper(UnionValidator);\n  function UnionValidator(key, config, unknownValueValidation) {\n    var _this5;\n    _classCallCheck(this, UnionValidator);\n    _this5 = _super4.call(this, function (input) {\n      if (typeof input !== \"object\" || input === null) {\n        throw new ValidationError(\"Expected an object, got \".concat(typeToString(input)), []);\n      }\n      var variant = getOwnProperty(input, key);\n      if (typeof variant !== \"string\") {\n        throw new ValidationError(\"Expected a string for key \\\"\".concat(key, \"\\\", got \").concat(typeToString(variant)));\n      }\n      var matchingSchema = hasOwnProperty(config, variant) ? config[variant] : void 0;\n      if (matchingSchema === void 0) {\n        return _this5.unknownValueValidation(input, variant);\n      }\n      return prefixError(\"(\".concat(key, \" = \").concat(variant, \")\"), function () {\n        return matchingSchema.validate(input);\n      });\n    });\n    _this5.key = key;\n    _this5.config = config;\n    _this5.unknownValueValidation = unknownValueValidation;\n    return _this5;\n  }\n  _createClass(UnionValidator, [{\n    key: \"validateUnknownVariants\",\n    value: function validateUnknownVariants(unknownValueValidation) {\n      return new UnionValidator(this.key, this.config, unknownValueValidation);\n    }\n  }]);\n  return UnionValidator;\n}(Validator);\nvar DictValidator = /*#__PURE__*/function (_Validator4) {\n  _inherits(DictValidator, _Validator4);\n  var _super5 = _createSuper(DictValidator);\n  function DictValidator(keyValidator, valueValidator) {\n    var _this6;\n    _classCallCheck(this, DictValidator);\n    _this6 = _super5.call(this, function (object2) {\n      if (typeof object2 !== \"object\" || object2 === null) {\n        throw new ValidationError(\"Expected object, got \".concat(typeToString(object2)));\n      }\n      var _loop3 = function _loop3() {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n          key = _Object$entries2$_i[0],\n          value = _Object$entries2$_i[1];\n        prefixError(key, function () {\n          keyValidator.validate(key);\n          valueValidator.validate(value);\n        });\n      };\n      for (var _i3 = 0, _Object$entries2 = Object.entries(object2); _i3 < _Object$entries2.length; _i3++) {\n        _loop3();\n      }\n      return object2;\n    });\n    _this6.keyValidator = keyValidator;\n    _this6.valueValidator = valueValidator;\n    return _this6;\n  }\n  return _createClass(DictValidator);\n}(Validator);\nfunction typeofValidator(type) {\n  return new Validator(function (value) {\n    if (typeof value !== type) {\n      throw new ValidationError(\"Expected \".concat(type, \", got \").concat(typeToString(value)));\n    }\n    return value;\n  });\n}\nvar unknown = new Validator(function (value) {\n  return value;\n});\nvar any = new Validator(function (value) {\n  return value;\n});\nvar string = typeofValidator(\"string\");\nvar number = typeofValidator(\"number\").check(function (number2) {\n  if (Number.isNaN(number2)) {\n    throw new ValidationError(\"Expected a number, got NaN\");\n  }\n  if (!Number.isFinite(number2)) {\n    throw new ValidationError(\"Expected a finite number, got \".concat(number2));\n  }\n});\nvar positiveNumber = number.check(function (value) {\n  if (value < 0) throw new ValidationError(\"Expected a positive number, got \".concat(value));\n});\nvar nonZeroNumber = number.check(function (value) {\n  if (value <= 0) throw new ValidationError(\"Expected a non-zero positive number, got \".concat(value));\n});\nvar integer = number.check(function (value) {\n  if (!Number.isInteger(value)) throw new ValidationError(\"Expected an integer, got \".concat(value));\n});\nvar positiveInteger = integer.check(function (value) {\n  if (value < 0) throw new ValidationError(\"Expected a positive integer, got \".concat(value));\n});\nvar nonZeroInteger = integer.check(function (value) {\n  if (value <= 0) throw new ValidationError(\"Expected a non-zero positive integer, got \".concat(value));\n});\nvar boolean = typeofValidator(\"boolean\");\nvar bigint = typeofValidator(\"bigint\");\nfunction literal(expectedValue) {\n  return new Validator(function (actualValue) {\n    if (actualValue !== expectedValue) {\n      throw new ValidationError(\"Expected \".concat(expectedValue, \", got \").concat(JSON.stringify(actualValue)));\n    }\n    return expectedValue;\n  });\n}\nvar array = new Validator(function (value) {\n  if (!Array.isArray(value)) {\n    throw new ValidationError(\"Expected an array, got \".concat(typeToString(value)));\n  }\n  return value;\n});\nfunction arrayOf(itemValidator) {\n  return new ArrayOfValidator(itemValidator);\n}\nvar unknownObject = new Validator(function (value) {\n  if (typeof value !== \"object\" || value === null) {\n    throw new ValidationError(\"Expected object, got \".concat(typeToString(value)));\n  }\n  return value;\n});\nfunction object(config) {\n  return new ObjectValidator(config);\n}\nfunction dict(keyValidator, valueValidator) {\n  return new DictValidator(keyValidator, valueValidator);\n}\nfunction union(key, config) {\n  return new UnionValidator(key, config, function (unknownValue, unknownVariant) {\n    throw new ValidationError(\"Expected one of \".concat(Object.keys(config).map(function (key2) {\n      return JSON.stringify(key2);\n    }).join(\" or \"), \", got \").concat(JSON.stringify(unknownVariant)), [key]);\n  });\n}\nfunction model(name, validator) {\n  return new Validator(function (value) {\n    var prefix = value && typeof value === \"object\" && \"id\" in value && typeof value.id === \"string\" ? \"\".concat(name, \"(id = \").concat(value.id, \")\") : name;\n    return prefixError(prefix, function () {\n      return validator.validate(value);\n    });\n  });\n}\nfunction setEnum(values) {\n  return new Validator(function (value) {\n    if (!values.has(value)) {\n      var valuesString = Array.from(values, function (value2) {\n        return JSON.stringify(value2);\n      }).join(\" or \");\n      throw new ValidationError(\"Expected \".concat(valuesString, \", got \").concat(value));\n    }\n    return value;\n  });\n}\nfunction _optional(validator) {\n  return new Validator(function (value) {\n    if (value === void 0) return void 0;\n    return validator.validate(value);\n  });\n}\nfunction _nullable(validator) {\n  return new Validator(function (value) {\n    if (value === null) return null;\n    return validator.validate(value);\n  });\n}\nfunction literalEnum() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  return setEnum(new Set(values));\n}\nexport { ArrayOfValidator, DictValidator, ObjectValidator, UnionValidator, ValidationError, Validator, any, array, arrayOf, bigint, boolean, dict, integer, literal, literalEnum, model, nonZeroInteger, nonZeroNumber, _nullable as nullable, number, object, _optional as optional, positiveInteger, positiveNumber, setEnum, string, union, unknown, unknownObject };","map":{"version":3,"names":["exhaustiveSwitchError","getOwnProperty","hasOwnProperty","formatPath","path","length","formattedPath","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","value","concat","startsWith","endsWith","slice","err","e","f","ValidationError","_Error","_inherits","_super","_createSuper","rawMessage","_this","arguments","undefined","_classCallCheck","indentedMessage","split","map","line","i","join","call","_defineProperty","_assertThisInitialized","_createClass","_wrapNativeSuper","Error","prefixError","fn","_toConsumableArray","toString","typeToString","Array","isArray","type","Validator","validationFn","key","validate","validated","process","env","NODE_ENV","Object","is","nullable","optional","refine","otherValidationFn","_this2","check","nameOrCheckFn","checkFn","ArrayOfValidator","_Validator","_super2","itemValidator","_this3","arr","array","_loop","nonEmpty","lengthGreaterThan1","ObjectValidator","_Validator2","_super3","config","_this4","shouldAllowUnknownProperties","object2","_loop2","_Object$entries$_i","_slicedToArray","_Object$entries","_i","validator","entries","_i2","_Object$keys","keys","allowUnknownProperties","extend","extension","_objectSpread","UnionValidator","_Validator3","_super4","unknownValueValidation","_this5","input","variant","matchingSchema","validateUnknownVariants","DictValidator","_Validator4","_super5","keyValidator","valueValidator","_this6","_loop3","_Object$entries2$_i","_Object$entries2","_i3","typeofValidator","unknown","any","string","number","number2","Number","isNaN","isFinite","positiveNumber","nonZeroNumber","integer","isInteger","positiveInteger","nonZeroInteger","boolean","bigint","literal","expectedValue","actualValue","JSON","stringify","arrayOf","unknownObject","object","dict","union","unknownValue","unknownVariant","key2","model","name","prefix","id","setEnum","values","has","valuesString","from","value2","literalEnum","_len","_key","Set"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/validate/src/lib/validation.ts"],"sourcesContent":["import { exhaustiveSwitchError, getOwnProperty, hasOwnProperty } from '@tldraw/utils'\n\n/** @public */\nexport type ValidatorFn<T> = (value: unknown) => T\n\n/** @public */\nexport type Validatable<T> = { validate: (value: unknown) => T }\n\nfunction formatPath(path: ReadonlyArray<number | string>): string | null {\n\tif (!path.length) {\n\t\treturn null\n\t}\n\tlet formattedPath = ''\n\tfor (const item of path) {\n\t\tif (typeof item === 'number') {\n\t\t\tformattedPath += `.${item}`\n\t\t} else if (item.startsWith('(')) {\n\t\t\tif (formattedPath.endsWith(')')) {\n\t\t\t\tformattedPath = `${formattedPath.slice(0, -1)}, ${item.slice(1)}`\n\t\t\t} else {\n\t\t\t\tformattedPath += item\n\t\t\t}\n\t\t} else {\n\t\t\tformattedPath += `.${item}`\n\t\t}\n\t}\n\tif (formattedPath.startsWith('.')) {\n\t\treturn formattedPath.slice(1)\n\t}\n\treturn formattedPath\n}\n\n/** @public */\nexport class ValidationError extends Error {\n\toverride name = 'ValidationError'\n\n\tconstructor(\n\t\tpublic readonly rawMessage: string,\n\t\tpublic readonly path: ReadonlyArray<number | string> = []\n\t) {\n\t\tconst formattedPath = formatPath(path)\n\t\tconst indentedMessage = rawMessage\n\t\t\t.split('\\n')\n\t\t\t.map((line, i) => (i === 0 ? line : `  ${line}`))\n\t\t\t.join('\\n')\n\t\tsuper(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage)\n\t}\n}\n\nfunction prefixError<T>(path: string | number, fn: () => T): T {\n\ttry {\n\t\treturn fn()\n\t} catch (err) {\n\t\tif (err instanceof ValidationError) {\n\t\t\tthrow new ValidationError(err.rawMessage, [path, ...err.path])\n\t\t}\n\t\tthrow new ValidationError((err as Error).toString(), [path])\n\t}\n}\n\nfunction typeToString(value: unknown): string {\n\tif (value === null) return 'null'\n\tif (Array.isArray(value)) return 'an array'\n\tconst type = typeof value\n\tswitch (type) {\n\t\tcase 'bigint':\n\t\tcase 'boolean':\n\t\tcase 'function':\n\t\tcase 'number':\n\t\tcase 'string':\n\t\tcase 'symbol':\n\t\t\treturn `a ${type}`\n\t\tcase 'object':\n\t\t\treturn `an ${type}`\n\t\tcase 'undefined':\n\t\t\treturn 'undefined'\n\t\tdefault:\n\t\t\texhaustiveSwitchError(type)\n\t}\n}\n\n/** @public */\nexport type TypeOf<V extends Validatable<unknown>> = V extends Validatable<infer T> ? T : never\n\n/** @public */\nexport class Validator<T> implements Validatable<T> {\n\tconstructor(readonly validationFn: ValidatorFn<T>) {}\n\n\t/**\n\t * Asserts that the passed value is of the correct type and returns it. The returned value is\n\t * guaranteed to be referentially equal to the passed value.\n\t */\n\tvalidate(value: unknown): T {\n\t\tconst validated = this.validationFn(value)\n\t\tif (process.env.NODE_ENV !== 'production' && !Object.is(value, validated)) {\n\t\t\tthrow new ValidationError('Validator functions must return the same value they were passed')\n\t\t}\n\t\treturn validated\n\t}\n\n\t/**\n\t * Returns a new validator that also accepts null or undefined. The resulting value will always be\n\t * null.\n\t */\n\tnullable(): Validator<T | null> {\n\t\treturn nullable(this)\n\t}\n\n\t/**\n\t * Returns a new validator that also accepts null or undefined. The resulting value will always be\n\t * null.\n\t */\n\toptional(): Validator<T | undefined> {\n\t\treturn optional(this)\n\t}\n\n\t/**\n\t * Refine this validation to a new type. The passed-in validation function should throw an error\n\t * if the value can't be converted to the new type, or return the new type otherwise.\n\t */\n\trefine<U>(otherValidationFn: (value: T) => U): Validator<U> {\n\t\treturn new Validator((value) => {\n\t\t\treturn otherValidationFn(this.validate(value))\n\t\t})\n\t}\n\n\t/**\n\t * Refine this validation with an additional check that doesn't change the resulting value.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const numberLessThan10Validator = T.number.check((value) => {\n\t * \tif (value >= 10) {\n\t * \t\tthrow new ValidationError(`Expected number less than 10, got ${value}`)\n\t * \t}\n\t * })\n\t * ```\n\t */\n\tcheck(name: string, checkFn: (value: T) => void): Validator<T>\n\tcheck(checkFn: (value: T) => void): Validator<T>\n\tcheck(nameOrCheckFn: string | ((value: T) => void), checkFn?: (value: T) => void): Validator<T> {\n\t\tif (typeof nameOrCheckFn === 'string') {\n\t\t\treturn this.refine((value) => {\n\t\t\t\tprefixError(`(check ${nameOrCheckFn})`, () => checkFn!(value))\n\t\t\t\treturn value\n\t\t\t})\n\t\t} else {\n\t\t\treturn this.refine((value) => {\n\t\t\t\tnameOrCheckFn(value)\n\t\t\t\treturn value\n\t\t\t})\n\t\t}\n\t}\n}\n\n/** @public */\nexport class ArrayOfValidator<T> extends Validator<T[]> {\n\tconstructor(readonly itemValidator: Validatable<T>) {\n\t\tsuper((value) => {\n\t\t\tconst arr = array.validate(value)\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tprefixError(i, () => itemValidator.validate(arr[i]))\n\t\t\t}\n\t\t\treturn arr as T[]\n\t\t})\n\t}\n\n\tnonEmpty() {\n\t\treturn this.check((value) => {\n\t\t\tif (value.length === 0) {\n\t\t\t\tthrow new ValidationError('Expected a non-empty array')\n\t\t\t}\n\t\t})\n\t}\n\n\tlengthGreaterThan1() {\n\t\treturn this.check((value) => {\n\t\t\tif (value.length <= 1) {\n\t\t\t\tthrow new ValidationError('Expected an array with length greater than 1')\n\t\t\t}\n\t\t})\n\t}\n}\n\n/** @public */\nexport class ObjectValidator<Shape extends object> extends Validator<Shape> {\n\tconstructor(\n\t\tpublic readonly config: {\n\t\t\treadonly [K in keyof Shape]: Validatable<Shape[K]>\n\t\t},\n\t\tprivate readonly shouldAllowUnknownProperties = false\n\t) {\n\t\tsuper((object) => {\n\t\t\tif (typeof object !== 'object' || object === null) {\n\t\t\t\tthrow new ValidationError(`Expected object, got ${typeToString(object)}`)\n\t\t\t}\n\n\t\t\tfor (const [key, validator] of Object.entries(config)) {\n\t\t\t\tprefixError(key, () => {\n\t\t\t\t\t;(validator as Validator<unknown>).validate(getOwnProperty(object, key))\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (!shouldAllowUnknownProperties) {\n\t\t\t\tfor (const key of Object.keys(object)) {\n\t\t\t\t\tif (!hasOwnProperty(config, key)) {\n\t\t\t\t\t\tthrow new ValidationError(`Unexpected property`, [key])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object as Shape\n\t\t})\n\t}\n\n\tallowUnknownProperties() {\n\t\treturn new ObjectValidator(this.config, true)\n\t}\n\n\t/**\n\t * Extend an object validator by adding additional properties.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const animalValidator = T.object({\n\t * \tname: T.string,\n\t * })\n\t * const catValidator = animalValidator.extend({\n\t * \tmeowVolume: T.number,\n\t * })\n\t * ```\n\t */\n\textend<Extension extends Record<string, unknown>>(extension: {\n\t\treadonly [K in keyof Extension]: Validatable<Extension[K]>\n\t}): ObjectValidator<Shape & Extension> {\n\t\treturn new ObjectValidator({ ...this.config, ...extension }) as ObjectValidator<\n\t\t\tShape & Extension\n\t\t>\n\t}\n}\n\n// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>\ntype UnionValidatorConfig<Key extends string, Config> = {\n\treadonly [Variant in keyof Config]: Validatable<any> & {\n\t\tvalidate: (input: any) => { readonly [K in Key]: Variant }\n\t}\n}\n/** @public */\nexport class UnionValidator<\n\tKey extends string,\n\tConfig extends UnionValidatorConfig<Key, Config>,\n\tUnknownValue = never\n> extends Validator<TypeOf<Config[keyof Config]> | UnknownValue> {\n\tconstructor(\n\t\tprivate readonly key: Key,\n\t\tprivate readonly config: Config,\n\t\tprivate readonly unknownValueValidation: (value: object, variant: string) => UnknownValue\n\t) {\n\t\tsuper((input) => {\n\t\t\tif (typeof input !== 'object' || input === null) {\n\t\t\t\tthrow new ValidationError(`Expected an object, got ${typeToString(input)}`, [])\n\t\t\t}\n\n\t\t\tconst variant = getOwnProperty(input, key) as keyof Config | undefined\n\t\t\tif (typeof variant !== 'string') {\n\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t`Expected a string for key \"${key}\", got ${typeToString(variant)}`\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tconst matchingSchema = hasOwnProperty(config, variant) ? config[variant] : undefined\n\t\t\tif (matchingSchema === undefined) {\n\t\t\t\treturn this.unknownValueValidation(input, variant)\n\t\t\t}\n\n\t\t\treturn prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input))\n\t\t})\n\t}\n\n\tvalidateUnknownVariants<Unknown>(\n\t\tunknownValueValidation: (value: object, variant: string) => Unknown\n\t): UnionValidator<Key, Config, Unknown> {\n\t\treturn new UnionValidator(this.key, this.config, unknownValueValidation)\n\t}\n}\n\n/** @public */\nexport class DictValidator<Key extends string, Value> extends Validator<Record<Key, Value>> {\n\tconstructor(\n\t\tpublic readonly keyValidator: Validatable<Key>,\n\t\tpublic readonly valueValidator: Validatable<Value>\n\t) {\n\t\tsuper((object) => {\n\t\t\tif (typeof object !== 'object' || object === null) {\n\t\t\t\tthrow new ValidationError(`Expected object, got ${typeToString(object)}`)\n\t\t\t}\n\n\t\t\tfor (const [key, value] of Object.entries(object)) {\n\t\t\t\tprefixError(key, () => {\n\t\t\t\t\tkeyValidator.validate(key)\n\t\t\t\t\tvalueValidator.validate(value)\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn object as Record<Key, Value>\n\t\t})\n\t}\n}\n\nfunction typeofValidator<T>(type: string): Validator<T> {\n\treturn new Validator((value) => {\n\t\tif (typeof value !== type) {\n\t\t\tthrow new ValidationError(`Expected ${type}, got ${typeToString(value)}`)\n\t\t}\n\t\treturn value as T\n\t})\n}\n\n/**\n * Validation that accepts any value. Useful as a starting point for building your own custom\n * validations.\n *\n * @public\n */\nexport const unknown = new Validator((value) => value)\n/**\n * Validation that accepts any value. Generally this should be avoided, but you can use it as an\n * escape hatch if you want to work without validations for e.g. a prototype.\n *\n * @public\n */\nexport const any = new Validator((value): any => value)\n\n/**\n * Validates that a value is a string.\n *\n * @public\n */\nexport const string = typeofValidator<string>('string')\n\n/**\n * Validates that a value is a finite non-NaN number.\n *\n * @public\n */\nexport const number = typeofValidator<number>('number').check((number) => {\n\tif (Number.isNaN(number)) {\n\t\tthrow new ValidationError('Expected a number, got NaN')\n\t}\n\tif (!Number.isFinite(number)) {\n\t\tthrow new ValidationError(`Expected a finite number, got ${number}`)\n\t}\n})\n/**\n * Fails if value \\< 0\n *\n * @public\n */\nexport const positiveNumber = number.check((value) => {\n\tif (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)\n})\n/**\n * Fails if value \\<= 0\n *\n * @public\n */\nexport const nonZeroNumber = number.check((value) => {\n\tif (value <= 0) throw new ValidationError(`Expected a non-zero positive number, got ${value}`)\n})\n/**\n * Fails if number is not an integer\n *\n * @public\n */\nexport const integer = number.check((value) => {\n\tif (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)\n})\n/**\n * Fails if value \\< 0 and is not an integer\n *\n * @public\n */\nexport const positiveInteger = integer.check((value) => {\n\tif (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)\n})\n/**\n * Fails if value \\<= 0 and is not an integer\n *\n * @public\n */\nexport const nonZeroInteger = integer.check((value) => {\n\tif (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`)\n})\n\n/**\n * Validates that a value is boolean.\n *\n * @public\n */\nexport const boolean = typeofValidator<boolean>('boolean')\n/**\n * Validates that a value is a bigint.\n *\n * @public\n */\nexport const bigint = typeofValidator<bigint>('bigint')\n/**\n * Validates that a value matches another that was passed in.\n *\n * @example\n *\n * ```ts\n * const trueValidator = T.literal(true)\n * ```\n *\n * @public\n */\nexport function literal<T extends string | number | boolean>(expectedValue: T): Validator<T> {\n\treturn new Validator((actualValue) => {\n\t\tif (actualValue !== expectedValue) {\n\t\t\tthrow new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`)\n\t\t}\n\t\treturn expectedValue\n\t})\n}\n\n/**\n * Validates that a value is an array. To check the contents of the array, use T.arrayOf.\n *\n * @public\n */\nexport const array = new Validator<unknown[]>((value) => {\n\tif (!Array.isArray(value)) {\n\t\tthrow new ValidationError(`Expected an array, got ${typeToString(value)}`)\n\t}\n\treturn value\n})\n\n/**\n * Validates that a value is an array whose contents matches the passed-in validator.\n *\n * @public\n */\nexport function arrayOf<T>(itemValidator: Validatable<T>): ArrayOfValidator<T> {\n\treturn new ArrayOfValidator(itemValidator)\n}\n\n/** @public */\nexport const unknownObject = new Validator<Record<string, unknown>>((value) => {\n\tif (typeof value !== 'object' || value === null) {\n\t\tthrow new ValidationError(`Expected object, got ${typeToString(value)}`)\n\t}\n\treturn value as Record<string, unknown>\n})\n\n/**\n * Validate an object has a particular shape.\n *\n * @public\n */\nexport function object<Shape extends object>(config: {\n\treadonly [K in keyof Shape]: Validatable<Shape[K]>\n}): ObjectValidator<Shape> {\n\treturn new ObjectValidator(config)\n}\n\n/**\n * Validation that an option is a dict with particular keys and values.\n *\n * @public\n */\nexport function dict<Key extends string, Value>(\n\tkeyValidator: Validatable<Key>,\n\tvalueValidator: Validatable<Value>\n): DictValidator<Key, Value> {\n\treturn new DictValidator(keyValidator, valueValidator)\n}\n\n/**\n * Validate a union of several object types. Each object must have a property matching `key` which\n * should be a unique string.\n *\n * @example\n *\n * ```ts\n * const catValidator = T.object({ kind: T.value('cat'), meow: T.boolean })\n * const dogValidator = T.object({ kind: T.value('dog'), bark: T.boolean })\n * const animalValidator = T.union('kind', { cat: catValidator, dog: dogValidator })\n * ```\n *\n * @public\n */\nexport function union<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(\n\tkey: Key,\n\tconfig: Config\n): UnionValidator<Key, Config> {\n\treturn new UnionValidator(key, config, (unknownValue, unknownVariant) => {\n\t\tthrow new ValidationError(\n\t\t\t`Expected one of ${Object.keys(config)\n\t\t\t\t.map((key) => JSON.stringify(key))\n\t\t\t\t.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,\n\t\t\t[key]\n\t\t)\n\t})\n}\n\n/**\n * A named object with an ID. Errors will be reported as being part of the object with the given\n * name.\n *\n * @public\n */\nexport function model<T extends { readonly id: string }>(\n\tname: string,\n\tvalidator: Validatable<T>\n): Validator<T> {\n\treturn new Validator((value) => {\n\t\tconst prefix =\n\t\t\tvalue && typeof value === 'object' && 'id' in value && typeof value.id === 'string'\n\t\t\t\t? `${name}(id = ${value.id})`\n\t\t\t\t: name\n\n\t\treturn prefixError(prefix, () => validator.validate(value))\n\t})\n}\n\n/** @public */\nexport function setEnum<T>(values: ReadonlySet<T>): Validator<T> {\n\treturn new Validator((value) => {\n\t\tif (!values.has(value as T)) {\n\t\t\tconst valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')\n\t\t\tthrow new ValidationError(`Expected ${valuesString}, got ${value}`)\n\t\t}\n\t\treturn value as T\n\t})\n}\n\n/** @public */\nexport function optional<T>(validator: Validatable<T>): Validator<T | undefined> {\n\treturn new Validator((value) => {\n\t\tif (value === undefined) return undefined\n\t\treturn validator.validate(value)\n\t})\n}\n\n/** @public */\nexport function nullable<T>(validator: Validatable<T>): Validator<T | null> {\n\treturn new Validator((value) => {\n\t\tif (value === null) return null\n\t\treturn validator.validate(value)\n\t})\n}\n\n/** @public */\nexport function literalEnum<const Values extends readonly unknown[]>(\n\t...values: Values\n): Validator<Values[number]> {\n\treturn setEnum(new Set(values))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}