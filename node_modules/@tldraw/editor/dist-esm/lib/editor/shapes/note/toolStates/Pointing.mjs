import { createShapeId } from "@tldraw/tlschema";
import { NoteShapeUtil } from "../../../shapes/note/NoteShapeUtil.mjs";
import { StateNode } from "../../../tools/StateNode.mjs";
class Pointing extends StateNode {
  static id = "pointing";
  dragged = false;
  info = {};
  wasFocusedOnEnter = false;
  markPointId = "creating";
  onEnter = () => {
    this.wasFocusedOnEnter = !this.editor.isMenuOpen;
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.editor.mark(this.markPointId);
      const shape = this.createShape();
      if (!shape)
        return;
      this.editor.setSelectedTool("select.translating", {
        ...info,
        target: "shape",
        shape,
        isCreating: true,
        editAfterComplete: true,
        onInteractionEnd: "note"
      });
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  complete() {
    if (!this.wasFocusedOnEnter) {
      return;
    }
    this.editor.mark(this.markPointId);
    const shape = this.createShape();
    if (this.editor.instanceState.isToolLocked) {
      this.parent.transition("idle", {});
    } else {
      if (!shape)
        return;
      this.editor.setEditingId(shape.id);
      this.editor.setSelectedTool("select.editing_shape", {
        ...this.info,
        target: "shape",
        shape
      });
    }
  }
  cancel() {
    this.editor.bailToMark(this.markPointId);
    this.parent.transition("idle", this.info);
  }
  createShape() {
    const {
      inputs: { originPagePoint }
    } = this.editor;
    const id = createShapeId();
    this.editor.createShapes(
      [
        {
          id,
          type: "note",
          x: originPagePoint.x,
          y: originPagePoint.y
        }
      ],
      true
    );
    const util = this.editor.getShapeUtil(NoteShapeUtil);
    const shape = this.editor.getShapeById(id);
    const bounds = util.bounds(shape);
    this.editor.updateShapes([
      {
        id,
        type: "note",
        x: shape.x - bounds.width / 2,
        y: shape.y - bounds.height / 2
      }
    ]);
    return this.editor.getShapeById(id);
  }
}
export {
  Pointing
};
//# sourceMappingURL=Pointing.mjs.map
