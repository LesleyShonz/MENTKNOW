{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction pasteFiles(_x, _x2, _x3) {\n  return _pasteFiles.apply(this, arguments);\n}\nfunction _pasteFiles() {\n  _pasteFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(editor, urls, point) {\n    var blobs, files;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return Promise.all(urls.map( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return fetch(url);\n                  case 2:\n                    _context.next = 4;\n                    return _context.sent.blob();\n                  case 4:\n                    return _context.abrupt(\"return\", _context.sent);\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return function (_x4) {\n              return _ref.apply(this, arguments);\n            };\n          }()));\n        case 2:\n          blobs = _context2.sent;\n          files = blobs.map(function (blob) {\n            return new File([blob], \"tldrawFile\", {\n              type: blob.type\n            });\n          });\n          editor.mark(\"paste\");\n          _context2.next = 7;\n          return editor.putExternalContent({\n            type: \"files\",\n            files: files,\n            point: point,\n            ignoreParent: false\n          });\n        case 7:\n          urls.forEach(function (url) {\n            return URL.revokeObjectURL(url);\n          });\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _pasteFiles.apply(this, arguments);\n}\nexport { pasteFiles };","map":{"version":3,"names":["pasteFiles","_x","_x2","_x3","_pasteFiles","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","editor","urls","point","blobs","files","wrap","_callee2$","_context2","prev","next","Promise","all","map","_ref","_callee","url","_callee$","_context","fetch","sent","blob","abrupt","stop","_x4","File","type","putExternalContent","ignoreParent","forEach","URL","revokeObjectURL"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/clipboard/pasteFiles.ts"],"sourcesContent":["import { Editor } from '@tldraw/editor'\nimport { VecLike } from '@tldraw/primitives'\n\n/**\n * When the clipboard has a file, create an image shape from the file and paste it into the scene\n *\n * @param editor - The editor instance.\n * @param urls - The file urls.\n * @param point - (optional) The point at which to paste the file.\n * @internal\n */\nexport async function pasteFiles(editor: Editor, urls: string[], point?: VecLike) {\n\tconst blobs = await Promise.all(urls.map(async (url) => await (await fetch(url)).blob()))\n\tconst files = blobs.map((blob) => new File([blob], 'tldrawFile', { type: blob.type }))\n\n\teditor.mark('paste')\n\n\tawait editor.putExternalContent({\n\t\ttype: 'files',\n\t\tfiles,\n\t\tpoint,\n\t\tignoreParent: false,\n\t})\n\n\turls.forEach((url) => URL.revokeObjectURL(url))\n}\n"],"mappings":";;SAWsBA,WAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAtB,SAAAC,SAAiCC,MAAA,EAAgBC,IAAA,EAAgBC,KAAA;IAAA,IAAAC,KAAA,EAAAC,KAAA;IAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAC,IAAA,GAAAD,SAAA,CAAAE,IAAA;QAAA;UAAAF,SAAA,CAAAE,IAAA;UAAA,OAC5CC,OAAA,CAAQC,GAAA,CAAIV,IAAA,CAAKW,GAAA;YAAA,IAAAC,IAAA,GAAAjB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAgB,QAAOC,GAAA;cAAA,OAAAlB,mBAAA,GAAAQ,IAAA,UAAAW,SAAAC,QAAA;gBAAA,kBAAAA,QAAA,CAAAT,IAAA,GAAAS,QAAA,CAAAR,IAAA;kBAAA;oBAAAQ,QAAA,CAAAR,IAAA;oBAAA,OAAqBS,KAAA,CAAMH,GAAG;kBAAA;oBAAAE,QAAA,CAAAR,IAAA;oBAAA,OAAAQ,QAAA,CAAAE,IAAA,CAAGC,IAAA;kBAAA;oBAAA,OAAAH,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAE,IAAA;kBAAA;kBAAA;oBAAA,OAAAF,QAAA,CAAAK,IAAA;gBAAA;cAAA,GAAAR,OAAA;YAAA,CAAM;YAAA,iBAAAS,GAAA;cAAA,OAAAV,IAAA,CAAAnB,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;QAAA;UAAlFQ,KAAA,GAAAI,SAAA,CAAAY,IAAA;UACAf,KAAA,GAAQD,KAAA,CAAMS,GAAA,CAAI,UAACQ,IAAA;YAAA,OAAS,IAAII,IAAA,CAAK,CAACJ,IAAI,GAAG,cAAc;cAAEK,IAAA,EAAML,IAAA,CAAKK;YAAK,CAAC,CAAC;UAAA;UAErFzB,MAAA,CAAOF,IAAA,CAAK,OAAO;UAAAS,SAAA,CAAAE,IAAA;UAAA,OAEbT,MAAA,CAAO0B,kBAAA,CAAmB;YAC/BD,IAAA,EAAM;YACNrB,KAAA,EAAAA,KAAA;YACAF,KAAA,EAAAA,KAAA;YACAyB,YAAA,EAAc;UACf,CAAC;QAAA;UAED1B,IAAA,CAAK2B,OAAA,CAAQ,UAACb,GAAA;YAAA,OAAQc,GAAA,CAAIC,eAAA,CAAgBf,GAAG,CAAC;UAAA;QAAA;QAAA;UAAA,OAAAR,SAAA,CAAAe,IAAA;MAAA;IAAA,GAAAvB,QAAA;EAAA,CAC/C;EAAA,OAAAN,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}