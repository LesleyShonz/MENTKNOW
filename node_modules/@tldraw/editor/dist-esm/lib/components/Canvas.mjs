import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { Matrix2d, toDomPrecision } from "@tldraw/primitives";
import { dedupe, modulate } from "@tldraw/utils";
import React from "react";
import { react } from "signia";
import { track, useValue } from "signia-react";
import { useCanvasEvents } from "../hooks/useCanvasEvents.mjs";
import { useCoarsePointer } from "../hooks/useCoarsePointer.mjs";
import { useDocumentEvents } from "../hooks/useDocumentEvents.mjs";
import { useEditor } from "../hooks/useEditor.mjs";
import { useEditorComponents } from "../hooks/useEditorComponents.mjs";
import { useFixSafariDoubleTapZoomPencilEvents } from "../hooks/useFixSafariDoubleTapZoomPencilEvents.mjs";
import { useGestureEvents } from "../hooks/useGestureEvents.mjs";
import { useHandleEvents } from "../hooks/useHandleEvents.mjs";
import { usePattern } from "../hooks/usePattern.mjs";
import { useQuickReactor } from "../hooks/useQuickReactor.mjs";
import { useScreenBounds } from "../hooks/useScreenBounds.mjs";
import { debugFlags } from "../utils/debug-flags.mjs";
import { LiveCollaborators } from "./LiveCollaborators.mjs";
import { SelectionBg } from "./SelectionBg.mjs";
import { SelectionFg } from "./SelectionFg.mjs";
import { Shape } from "./Shape.mjs";
import { ShapeIndicator } from "./ShapeIndicator.mjs";
const Canvas = track(function Canvas2() {
  const editor = useEditor();
  const { Background, SvgDefs } = useEditorComponents();
  const rCanvas = React.useRef(null);
  const rHtmlLayer = React.useRef(null);
  useScreenBounds();
  useDocumentEvents();
  useCoarsePointer();
  useGestureEvents(rCanvas);
  useFixSafariDoubleTapZoomPencilEvents(rCanvas);
  useQuickReactor(
    "position layers",
    () => {
      const htmlElm = rHtmlLayer.current;
      if (!htmlElm)
        return;
      const { x, y, z } = editor.camera;
      const offset = z >= 1 ? modulate(z, [1, 8], [0.125, 0.5], true) : modulate(z, [0.1, 1], [-2, 0.125], true);
      htmlElm.style.setProperty(
        "transform",
        `scale(${toDomPrecision(z)}) translate(${toDomPrecision(x + offset)}px,${toDomPrecision(
          y + offset
        )}px)`
      );
    },
    [editor]
  );
  const { context: patternContext, isReady: patternIsReady } = usePattern();
  const events = useCanvasEvents();
  React.useEffect(() => {
    if (patternIsReady && editor.isSafari) {
      const htmlElm = rHtmlLayer.current;
      if (htmlElm) {
        requestAnimationFrame(() => {
          htmlElm.style.display = "none";
          requestAnimationFrame(() => {
            htmlElm.style.display = "";
          });
        });
      }
    }
  }, [editor, patternIsReady]);
  React.useEffect(() => {
    rCanvas.current?.focus();
  }, []);
  return /* @__PURE__ */ jsxs("div", { ref: rCanvas, draggable: false, className: "tl-canvas", "data-testid": "canvas", ...events, children: [
    Background && /* @__PURE__ */ jsx(Background, {}),
    /* @__PURE__ */ jsx(GridWrapper, {}),
    /* @__PURE__ */ jsx(UiLogger, {}),
    /* @__PURE__ */ jsxs("div", { ref: rHtmlLayer, className: "tl-html-layer", draggable: false, children: [
      /* @__PURE__ */ jsx("svg", { className: "tl-svg-context", children: /* @__PURE__ */ jsxs("defs", { children: [
        patternContext,
        Cursor && /* @__PURE__ */ jsx(Cursor, {}),
        /* @__PURE__ */ jsx(CollaboratorHint, {}),
        /* @__PURE__ */ jsx(ArrowheadDot, {}),
        /* @__PURE__ */ jsx(ArrowheadCross, {}),
        SvgDefs && /* @__PURE__ */ jsx(SvgDefs, {})
      ] }) }),
      /* @__PURE__ */ jsx(SelectionBg, {}),
      /* @__PURE__ */ jsx("div", { className: "tl-shapes", children: /* @__PURE__ */ jsx(ShapesToDisplay, {}) }),
      /* @__PURE__ */ jsxs("div", { className: "tl-overlays", children: [
        /* @__PURE__ */ jsx(HandlesWrapper, {}),
        /* @__PURE__ */ jsx(BrushWrapper, {}),
        /* @__PURE__ */ jsx(ScribbleWrapper, {}),
        /* @__PURE__ */ jsx(ZoomBrushWrapper, {}),
        /* @__PURE__ */ jsx(SelectedIdIndicators, {}),
        /* @__PURE__ */ jsx(HoveredShapeIndicator, {}),
        /* @__PURE__ */ jsx(HintedShapeIndicator, {}),
        /* @__PURE__ */ jsx(SnapLinesWrapper, {}),
        /* @__PURE__ */ jsx(SelectionFg, {}),
        /* @__PURE__ */ jsx(LiveCollaborators, {})
      ] })
    ] })
  ] });
});
const GridWrapper = track(function GridWrapper2() {
  const editor = useEditor();
  const { Grid } = useEditorComponents();
  const { x, y, z } = editor.camera;
  const isGridMode = editor.isGridMode;
  if (!(Grid && isGridMode))
    return null;
  return /* @__PURE__ */ jsx(Grid, { x, y, z, size: editor.gridSize });
});
const ScribbleWrapper = track(function ScribbleWrapper2() {
  const editor = useEditor();
  const scribble = editor.scribble;
  const zoom = editor.zoomLevel;
  const { Scribble } = useEditorComponents();
  if (!(Scribble && scribble))
    return null;
  return /* @__PURE__ */ jsx(Scribble, { className: "tl-user-scribble", scribble, zoom });
});
const BrushWrapper = track(function BrushWrapper2() {
  const editor = useEditor();
  const { brush } = editor;
  const { Brush } = useEditorComponents();
  if (!(Brush && brush && editor.isIn("select.brushing")))
    return null;
  return /* @__PURE__ */ jsx(Brush, { className: "tl-user-brush", brush });
});
const ZoomBrushWrapper = track(function Zoom() {
  const editor = useEditor();
  const { zoomBrush } = editor;
  const { ZoomBrush } = useEditorComponents();
  if (!(ZoomBrush && zoomBrush && editor.isIn("zoom")))
    return null;
  return /* @__PURE__ */ jsx(ZoomBrush, { className: "tl-user-brush", brush: zoomBrush });
});
const SnapLinesWrapper = track(function SnapLines() {
  const editor = useEditor();
  const {
    snaps: { lines },
    zoomLevel
  } = editor;
  const { SnapLine } = useEditorComponents();
  if (!(SnapLine && lines.length > 0))
    return null;
  return /* @__PURE__ */ jsx(Fragment, { children: lines.map((line) => /* @__PURE__ */ jsx(SnapLine, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id)) });
});
const MIN_HANDLE_DISTANCE = 48;
const HandlesWrapper = track(function HandlesWrapper2() {
  const editor = useEditor();
  const zoom = editor.zoomLevel;
  const isChangingStyle = editor.isChangingStyle;
  const onlySelectedShape = editor.onlySelectedShape;
  const shouldDisplayHandles = editor.isInAny("select.idle", "select.pointing_handle") && !isChangingStyle && !editor.isReadOnly;
  if (!(onlySelectedShape && shouldDisplayHandles))
    return null;
  const util = editor.getShapeUtil(onlySelectedShape);
  const handles = util.handles?.(onlySelectedShape);
  if (!handles)
    return null;
  const transform = editor.getPageTransform(onlySelectedShape);
  if (!transform)
    return null;
  const handlesToDisplay = [];
  for (let i = 0, handle = handles[i]; i < handles.length; i++, handle = handles[i]) {
    if (handle.type !== "vertex") {
      const prev = handles[i - 1];
      const next = handles[i + 1];
      if (prev && next) {
        if (Math.hypot(prev.y - next.y, prev.x - next.x) < MIN_HANDLE_DISTANCE / zoom) {
          continue;
        }
      }
    }
    handlesToDisplay.push(handle);
  }
  handlesToDisplay.sort((a) => a.type === "vertex" ? 1 : -1);
  return /* @__PURE__ */ jsx("svg", { className: "tl-user-handles tl-overlays__item", children: /* @__PURE__ */ jsx("g", { transform: Matrix2d.toCssString(transform), children: handlesToDisplay.map((handle) => {
    return /* @__PURE__ */ jsx(HandleWrapper, { shapeId: onlySelectedShape.id, handle }, handle.id);
  }) }) });
});
const HandleWrapper = ({ shapeId, handle }) => {
  const events = useHandleEvents(shapeId, handle.id);
  const { Handle } = useEditorComponents();
  if (!Handle)
    return null;
  return /* @__PURE__ */ jsx("g", { "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})`, ...events, children: /* @__PURE__ */ jsx(Handle, { shapeId, handle }) });
};
const ShapesToDisplay = track(function ShapesToDisplay2() {
  const editor = useEditor();
  const { renderingShapes } = editor;
  const debugSvg = debugFlags.debugSvg.value;
  if (debugSvg) {
    return /* @__PURE__ */ jsx(Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsx(Shape, { ...result }),
      /* @__PURE__ */ jsx(DebugSvgCopy, { id: result.id })
    ] }, result.id + "_fragment")) });
  }
  return /* @__PURE__ */ jsx(Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ jsx(Shape, { ...result }, result.id + "_shape")) });
});
const SelectedIdIndicators = track(function SelectedIdIndicators2() {
  const editor = useEditor();
  const shouldDisplay = editor.isInAny(
    "select.idle",
    "select.brushing",
    "select.scribble_brushing",
    "select.pointing_shape",
    "select.pointing_selection",
    "select.pointing_handle"
  ) && !editor.isChangingStyle;
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ jsx(Fragment, { children: editor.selectedIds.map((id) => /* @__PURE__ */ jsx(ShapeIndicator, { className: "tl-user-indicator__selected", id }, id + "_indicator")) });
});
const HoveredShapeIndicator = function HoveredShapeIndicator2() {
  const editor = useEditor();
  const displayingHoveredId = useValue(
    "hovered id and should display",
    () => editor.isInAny("select.idle", "select.editing_shape") ? editor.pageState.hoveredId : null,
    [editor]
  );
  if (!displayingHoveredId)
    return null;
  return /* @__PURE__ */ jsx(ShapeIndicator, { className: "tl-user-indicator__hovered", id: displayingHoveredId });
};
const HintedShapeIndicator = track(function HintedShapeIndicator2() {
  const editor = useEditor();
  const ids = dedupe(editor.hintingIds);
  if (!ids.length)
    return null;
  return /* @__PURE__ */ jsx(Fragment, { children: ids.map((id) => /* @__PURE__ */ jsx(ShapeIndicator, { className: "tl-user-indicator__hint", id }, id + "_hinting")) });
});
function Cursor() {
  return /* @__PURE__ */ jsxs("g", { id: "cursor", children: [
    /* @__PURE__ */ jsxs("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
      /* @__PURE__ */ jsx("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ jsx("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ jsxs("g", { fill: "white", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ jsx("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ jsx("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ jsxs("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ jsx("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
      /* @__PURE__ */ jsx("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
    ] })
  ] });
}
function CollaboratorHint() {
  return /* @__PURE__ */ jsx("path", { id: "cursor_hint", fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
}
function ArrowheadDot() {
  return /* @__PURE__ */ jsx("marker", { id: "arrowhead-dot", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ jsx("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
}
function ArrowheadCross() {
  return /* @__PURE__ */ jsxs("marker", { id: "arrowhead-cross", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
    /* @__PURE__ */ jsx("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
    /* @__PURE__ */ jsx("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
  ] });
}
const DebugSvgCopy = track(function DupSvg({ id }) {
  const editor = useEditor();
  const shape = editor.getShapeById(id);
  const [html, setHtml] = React.useState("");
  const isInRoot = shape?.parentId === editor.currentPageId;
  React.useEffect(() => {
    if (!isInRoot)
      return;
    let latest = null;
    const unsubscribe = react("shape to svg", async () => {
      const renderId = Math.random();
      latest = renderId;
      const bb = editor.getPageBoundsById(id);
      const el = await editor.getSvg([id], { padding: 0 });
      if (el && bb && latest === renderId) {
        el.style.setProperty("overflow", "visible");
        el.setAttribute("preserveAspectRatio", "xMidYMin slice");
        el.style.setProperty("transform", `translate(${bb.x}px, ${bb.y + bb.h + 12}px)`);
        el.style.setProperty("border", "1px solid black");
        setHtml(el?.outerHTML);
      }
    });
    return () => {
      latest = null;
      unsubscribe();
    };
  }, [editor, id, isInRoot]);
  if (!isInRoot)
    return null;
  return /* @__PURE__ */ jsx("div", { style: { paddingTop: 12, position: "absolute" }, children: /* @__PURE__ */ jsx("div", { style: { display: "flex" }, dangerouslySetInnerHTML: { __html: html } }) });
});
const UiLogger = track(() => {
  const logMessages = debugFlags.logMessages.value;
  return /* @__PURE__ */ jsx("div", { className: "debug__ui-logger", children: logMessages.map((message, messageIndex) => {
    const text = typeof message === "string" ? message : JSON.stringify(message);
    return /* @__PURE__ */ jsx("div", { className: "debug__ui-logger__line", children: text }, messageIndex);
  }) });
});
export {
  Canvas,
  SnapLinesWrapper,
  ZoomBrushWrapper
};
//# sourceMappingURL=Canvas.mjs.map
