{
  "version": 3,
  "sources": ["../../../src/lib/config/createTLStore.ts"],
  "sourcesContent": ["import { HistoryEntry, Store, StoreSchema, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStore, TLStoreProps, createTLSchema } from '@tldraw/tlschema'\nimport { checkShapesAndAddCore } from './defaultShapes'\nimport { AnyTLShapeInfo, TLShapeInfo } from './defineShape'\n\n/** @public */\nexport type TLStoreOptions = {\n\tinitialData?: StoreSnapshot<TLRecord>\n\tdefaultName?: string\n} & ({ shapes: readonly AnyTLShapeInfo[] } | { schema: StoreSchema<TLRecord, TLStoreProps> })\n\n/** @public */\nexport type TLStoreEventInfo = HistoryEntry<TLRecord>\n\n/**\n * A helper for creating a TLStore. Custom shapes cannot override default shapes.\n *\n * @param opts - Options for creating the store.\n *\n * @public */\nexport function createTLStore({ initialData, defaultName = '', ...rest }: TLStoreOptions): TLStore {\n\tconst schema =\n\t\t'schema' in rest\n\t\t\t? rest.schema\n\t\t\t: createTLSchema({ shapes: shapesArrayToShapeMap(checkShapesAndAddCore(rest.shapes)) })\n\treturn new Store({\n\t\tschema,\n\t\tinitialData,\n\t\tprops: {\n\t\t\tdefaultName,\n\t\t},\n\t})\n}\n\nfunction shapesArrayToShapeMap(shapes: TLShapeInfo[]) {\n\treturn Object.fromEntries(shapes.map((s) => [s.type, s]))\n}\n"],
  "mappings": "AAAA,SAAuB,aAAyC;AAChE,SAA0C,sBAAsB;AAChE,SAAS,6BAA6B;AAkB/B,SAAS,cAAc,EAAE,aAAa,cAAc,IAAI,GAAG,KAAK,GAA4B;AAClG,QAAM,SACL,YAAY,OACT,KAAK,SACL,eAAe,EAAE,QAAQ,sBAAsB,sBAAsB,KAAK,MAAM,CAAC,EAAE,CAAC;AACxF,SAAO,IAAI,MAAM;AAAA,IAChB;AAAA,IACA;AAAA,IACA,OAAO;AAAA,MACN;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAEA,SAAS,sBAAsB,QAAuB;AACrD,SAAO,OAAO,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AACzD;",
  "names": []
}
