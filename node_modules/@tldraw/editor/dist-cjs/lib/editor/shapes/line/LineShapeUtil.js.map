{
  "version": 3,
  "sources": ["../../../../../src/lib/editor/shapes/line/LineShapeUtil.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/rules-of-hooks */\nimport { getIndexBetween, sortByIndex } from '@tldraw/indices'\nimport {\n\tCubicSpline2d,\n\tPolyline2d,\n\tVec2d,\n\tVecLike,\n\tgetDrawLinePathData,\n\tintersectLineSegmentPolyline,\n\tpointNearToPolyline,\n} from '@tldraw/primitives'\nimport { TLHandle, TLLineShape } from '@tldraw/tlschema'\nimport { deepCopy } from '@tldraw/utils'\nimport { SVGContainer } from '../../../components/SVGContainer'\nimport { WeakMapCache } from '../../../utils/WeakMapCache'\nimport { ShapeUtil, TLOnHandleChangeHandler, TLOnResizeHandler } from '../ShapeUtil'\nimport { ShapeFill } from '../shared/ShapeFill'\nimport { TLExportColors } from '../shared/TLExportColors'\nimport { STROKE_SIZES } from '../shared/default-shape-constants'\nimport { getPerfectDashProps } from '../shared/getPerfectDashProps'\nimport { useForceSolid } from '../shared/useForceSolid'\nimport { getLineDrawPath, getLineIndicatorPath, getLinePoints } from './components/getLinePath'\nimport { getLineSvg } from './components/getLineSvg'\n\nconst splinesCache = new WeakMapCache<TLLineShape['props'], CubicSpline2d | Polyline2d>()\nconst handlesCache = new WeakMapCache<TLLineShape['props'], TLHandle[]>()\n\n/** @public */\nexport class LineShapeUtil extends ShapeUtil<TLLineShape> {\n\tstatic override type = 'line' as const\n\n\toverride hideResizeHandles = () => true\n\toverride hideRotateHandle = () => true\n\toverride hideSelectionBoundsBg = () => true\n\toverride hideSelectionBoundsFg = () => true\n\toverride isClosed = () => false\n\n\toverride defaultProps(): TLLineShape['props'] {\n\t\treturn {\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tcolor: 'black',\n\t\t\tspline: 'line',\n\t\t\thandles: {\n\t\t\t\tstart: {\n\t\t\t\t\tid: 'start',\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tcanBind: false,\n\t\t\t\t\tindex: 'a1',\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t\tend: {\n\t\t\t\t\tid: 'end',\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tcanBind: false,\n\t\t\t\t\tindex: 'a2',\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\tgetBounds(shape: TLLineShape) {\n\t\t// todo: should we have min size?\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn spline.bounds\n\t}\n\n\tgetCenter(shape: TLLineShape) {\n\t\treturn this.bounds(shape).center\n\t}\n\n\tgetHandles(shape: TLLineShape) {\n\t\treturn handlesCache.get(shape.props, () => {\n\t\t\tconst handles = shape.props.handles\n\n\t\t\tconst spline = getSplineForLineShape(shape)\n\n\t\t\tconst sortedHandles = Object.values(handles).sort(sortByIndex)\n\t\t\tconst results = sortedHandles.slice()\n\n\t\t\t// Add \"create\" handles between each vertex handle\n\t\t\tfor (let i = 0; i < spline.segments.length; i++) {\n\t\t\t\tconst segment = spline.segments[i]\n\t\t\t\tconst point = segment.midPoint\n\t\t\t\tconst index = getIndexBetween(sortedHandles[i].index, sortedHandles[i + 1].index)\n\n\t\t\t\tresults.push({\n\t\t\t\t\tid: `mid-${i}`,\n\t\t\t\t\ttype: 'create',\n\t\t\t\t\tindex,\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y,\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn results.sort(sortByIndex)\n\t\t})\n\t}\n\n\tgetOutline(shape: TLLineShape) {\n\t\treturn getLinePoints(getSplineForLineShape(shape))\n\t}\n\n\tgetOutlineSegments(shape: TLLineShape) {\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn shape.props.spline === 'cubic'\n\t\t\t? spline.segments.map((s) => s.lut)\n\t\t\t: spline.segments.map((s) => [s.getPoint(0), s.getPoint(1)])\n\t}\n\n\t//   Events\n\n\tonResize: TLOnResizeHandler<TLLineShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst handles = deepCopy(shape.props.handles)\n\n\t\tObject.values(shape.props.handles).forEach(({ id, x, y }) => {\n\t\t\thandles[id].x = x * scaleX\n\t\t\thandles[id].y = y * scaleY\n\t\t})\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\thandles,\n\t\t\t},\n\t\t}\n\t}\n\n\tonHandleChange: TLOnHandleChangeHandler<TLLineShape> = (shape, { handle }) => {\n\t\tconst next = deepCopy(shape)\n\n\t\tswitch (handle.id) {\n\t\t\tcase 'start':\n\t\t\tcase 'end': {\n\t\t\t\tnext.props.handles[handle.id] = {\n\t\t\t\t\t...next.props.handles[handle.id],\n\t\t\t\t\tx: handle.x,\n\t\t\t\t\ty: handle.y,\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst id = 'handle:' + handle.index\n\t\t\t\tconst existing = shape.props.handles[id]\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tnext.props.handles[id] = {\n\t\t\t\t\t\t...existing,\n\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnext.props.handles[id] = {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\tcanBind: false,\n\t\t\t\t\t\tindex: handle.index,\n\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn next\n\t}\n\n\thitTestPoint(shape: TLLineShape, point: Vec2d): boolean {\n\t\tconst zoomLevel = this.editor.zoomLevel\n\t\tconst offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel\n\t\treturn pointNearToPolyline(point, this.outline(shape), offsetDist)\n\t}\n\n\thitTestLineSegment(shape: TLLineShape, A: VecLike, B: VecLike): boolean {\n\t\treturn intersectLineSegmentPolyline(A, B, this.outline(shape)) !== null\n\t}\n\n\tcomponent(shape: TLLineShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst spline = getSplineForLineShape(shape)\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\tconst { dash, color } = shape.props\n\n\t\t// Line style lines\n\t\tif (shape.props.spline === 'line') {\n\t\t\tif (dash === 'solid') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={pathData}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<g stroke={`var(--palette-${color})`} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={segment.path}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={innerPathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={outerPathData}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\t// Cubic style spline\n\t\tif (shape.props.spline === 'cubic') {\n\t\t\tconst splinePath = spline.path\n\n\t\t\tif (dash === 'solid' || (dash === 'draw' && forceSolid)) {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\td={splinePath}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<g stroke={`var(--palette-${color})`} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={segment.path}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={getLineDrawPath(shape, spline, strokeWidth)}\n\t\t\t\t\t\t\tstrokeWidth={1}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tfill={`var(--palette-${color})`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tindicator(shape: TLLineShape) {\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst spline = getSplineForLineShape(shape)\n\t\tconst { dash } = shape.props\n\n\t\tlet path: string\n\n\t\tif (shape.props.spline === 'line') {\n\t\t\tconst outline = spline.points\n\t\t\tif (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {\n\t\t\t\tpath = 'M' + outline[0] + 'L' + outline.slice(1)\n\t\t\t} else {\n\t\t\t\tconst [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\t\t\t\tpath = innerPathData\n\t\t\t}\n\t\t} else {\n\t\t\tpath = getLineIndicatorPath(shape, spline, strokeWidth)\n\t\t}\n\n\t\treturn <path d={path} />\n\t}\n\n\ttoSvg(shape: TLLineShape, _font: string, colors: TLExportColors) {\n\t\tconst { color: _color, size } = shape.props\n\t\tconst color = colors.fill[_color]\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn getLineSvg(shape, spline, color, STROKE_SIZES[size])\n\t}\n}\n\n/** @public */\nexport function getSplineForLineShape(shape: TLLineShape) {\n\treturn splinesCache.get(shape.props, () => {\n\t\tconst { spline, handles } = shape.props\n\n\t\tconst handlePoints = Object.values(handles).sort(sortByIndex).map(Vec2d.From)\n\n\t\tswitch (spline) {\n\t\t\tcase 'cubic': {\n\t\t\t\treturn new CubicSpline2d(handlePoints, handlePoints.length === 2 ? 2 : 1.2, 20)\n\t\t\t}\n\t\t\tcase 'line': {\n\t\t\t\treturn new Polyline2d(handlePoints)\n\t\t\t}\n\t\t}\n\t})\n}\n"],
  "mappings": "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",
  "names": []
}
