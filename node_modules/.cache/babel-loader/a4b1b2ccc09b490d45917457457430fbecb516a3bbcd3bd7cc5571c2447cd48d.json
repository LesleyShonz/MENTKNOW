{"ast":null,"code":"import _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { getSvgAsImage, getSvgAsString, useEditor } from \"@tldraw/editor\";\nimport { useCallback } from \"react\";\nimport { useToasts } from \"./useToastsProvider.mjs\";\nimport { useTranslation } from \"./useTranslation/useTranslation.mjs\";\nfunction useCopyAs() {\n  var editor = useEditor();\n  var _useToasts = useToasts(),\n    addToast = _useToasts.addToast;\n  var msg = useTranslation();\n  return useCallback(\n  // it's important that this function itself isn't async - we need to\n  // create the relevant `ClipboardItem`s synchronously to make sure\n  // safari knows that the user _wants_ to copy:\n  // https://bugs.webkit.org/show_bug.cgi?id=222262\n  //\n  // this is fine for navigator.clipboard.write, but for fallbacks it's a\n  // little awkward.\n  function copyAs() {\n    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : editor.selectedIds;\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"svg\";\n    if (ids.length === 0) {\n      ids = _toConsumableArray(editor.currentPageShapeIds);\n    }\n    if (ids.length === 0) {\n      return;\n    }\n    switch (format) {\n      case \"svg\":\n        {\n          if (window.navigator.clipboard) {\n            if (window.navigator.clipboard.write) {\n              window.navigator.clipboard.write([new ClipboardItem({\n                \"text/plain\": getExportedSvgBlob(editor, ids)\n              })]);\n            } else {\n              fallbackWriteTextAsync( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.t0 = getSvgAsString;\n                      _context.next = 3;\n                      return getExportSvgElement(editor, ids);\n                    case 3:\n                      _context.t1 = _context.sent;\n                      return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              })));\n            }\n          }\n          break;\n        }\n      case \"jpeg\":\n      case \"png\":\n        {\n          var mimeType = format === \"jpeg\" ? \"image/jpeg\" : \"image/png\";\n          var blobPromise = getExportedImageBlob(editor, ids, format).then(function (blob) {\n            if (blob) {\n              if (window.navigator.clipboard) {\n                return blob;\n              }\n              throw new Error(\"Copy not supported\");\n            } else {\n              addToast({\n                id: \"copy-fail\",\n                icon: \"warning-triangle\",\n                title: msg(\"toast.error.copy-fail.title\"),\n                description: msg(\"toast.error.copy-fail.desc\")\n              });\n              throw new Error(\"Copy not possible\");\n            }\n          });\n          window.navigator.clipboard.write([new ClipboardItem(_defineProperty({}, mimeType, blobPromise))]).catch(function (err) {\n            if (!err.toString().match(/^TypeError: DOMString not supported/)) {\n              console.error(err);\n            }\n            blobPromise.then(function (blob) {\n              window.navigator.clipboard.write([new ClipboardItem(_defineProperty({}, mimeType, blob))]);\n            });\n          });\n          break;\n        }\n      case \"json\":\n        {\n          var data = editor.getContent(ids);\n          if (window.navigator.clipboard) {\n            var jsonStr = JSON.stringify(data);\n            if (window.navigator.clipboard.write) {\n              window.navigator.clipboard.write([new ClipboardItem({\n                \"text/plain\": new Blob([jsonStr], {\n                  type: \"text/plain\"\n                })\n              })]);\n            } else {\n              fallbackWriteTextAsync( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      return _context2.abrupt(\"return\", jsonStr);\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              })));\n            }\n          }\n          break;\n        }\n      default:\n        throw new Error(\"Copy type \".concat(format, \" not supported.\"));\n    }\n  }, [editor, addToast, msg]);\n}\nfunction getExportSvgElement(_x, _x2) {\n  return _getExportSvgElement.apply(this, arguments);\n}\nfunction _getExportSvgElement() {\n  _getExportSvgElement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(editor, ids) {\n    var svg;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return editor.getSvg(ids, {\n            scale: 1,\n            background: editor.instanceState.exportBackground\n          });\n        case 2:\n          svg = _context3.sent;\n          if (svg) {\n            _context3.next = 5;\n            break;\n          }\n          throw new Error(\"Could not construct SVG.\");\n        case 5:\n          return _context3.abrupt(\"return\", svg);\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getExportSvgElement.apply(this, arguments);\n}\nfunction getExportedSvgBlob(_x3, _x4) {\n  return _getExportedSvgBlob.apply(this, arguments);\n}\nfunction _getExportedSvgBlob() {\n  _getExportedSvgBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(editor, ids) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.t0 = Blob;\n          _context4.t1 = getSvgAsString;\n          _context4.next = 4;\n          return getExportSvgElement(editor, ids);\n        case 4:\n          _context4.t2 = _context4.sent;\n          _context4.t3 = (0, _context4.t1)(_context4.t2);\n          _context4.t4 = [_context4.t3];\n          _context4.t5 = {\n            type: \"text/plain\"\n          };\n          return _context4.abrupt(\"return\", new _context4.t0(_context4.t4, _context4.t5));\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _getExportedSvgBlob.apply(this, arguments);\n}\nfunction getExportedImageBlob(_x5, _x6, _x7) {\n  return _getExportedImageBlob.apply(this, arguments);\n}\nfunction _getExportedImageBlob() {\n  _getExportedImageBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(editor, ids, format) {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.t0 = getSvgAsImage;\n          _context5.next = 3;\n          return getExportSvgElement(editor, ids);\n        case 3:\n          _context5.t1 = _context5.sent;\n          _context5.t2 = {\n            type: format,\n            quality: 1,\n            scale: 2\n          };\n          _context5.next = 7;\n          return (0, _context5.t0)(_context5.t1, _context5.t2);\n        case 7:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _getExportedImageBlob.apply(this, arguments);\n}\nfunction fallbackWriteTextAsync(_x8) {\n  return _fallbackWriteTextAsync.apply(this, arguments);\n}\nfunction _fallbackWriteTextAsync() {\n  _fallbackWriteTextAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(getText) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          if (navigator && navigator.clipboard) {\n            _context6.next = 2;\n            break;\n          }\n          return _context6.abrupt(\"return\");\n        case 2:\n          _context6.t0 = navigator.clipboard;\n          _context6.next = 5;\n          return getText();\n        case 5:\n          _context6.t1 = _context6.sent;\n          _context6.t0.writeText.call(_context6.t0, _context6.t1);\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _fallbackWriteTextAsync.apply(this, arguments);\n}\nexport { useCopyAs };","map":{"version":3,"names":["getSvgAsImage","getSvgAsString","useEditor","useCallback","useToasts","useTranslation","useCopyAs","editor","_useToasts","addToast","msg","copyAs","ids","arguments","length","undefined","selectedIds","format","_toConsumableArray","currentPageShapeIds","window","navigator","clipboard","write","ClipboardItem","getExportedSvgBlob","fallbackWriteTextAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","t0","getExportSvgElement","t1","sent","abrupt","stop","mimeType","blobPromise","getExportedImageBlob","then","blob","Error","id","icon","title","description","_defineProperty","catch","err","toString","match","console","error","data","getContent","jsonStr","JSON","stringify","Blob","type","_callee2","_callee2$","_context2","concat","_x","_x2","_getExportSvgElement","apply","_callee3","svg","_callee3$","_context3","getSvg","scale","background","instanceState","exportBackground","_x3","_x4","_getExportedSvgBlob","_callee4","_callee4$","_context4","t2","t3","t4","t5","_x5","_x6","_x7","_getExportedImageBlob","_callee5","_callee5$","_context5","quality","_x8","_fallbackWriteTextAsync","_callee6","getText","_callee6$","_context6","writeText","call"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/hooks/useCopyAs.ts"],"sourcesContent":["import {\n\tEditor,\n\tgetSvgAsImage,\n\tgetSvgAsString,\n\tTLCopyType,\n\tTLShapeId,\n\tuseEditor,\n} from '@tldraw/editor'\nimport { useCallback } from 'react'\nimport { useToasts } from './useToastsProvider'\nimport { useTranslation } from './useTranslation/useTranslation'\n\n/** @public */\nexport function useCopyAs() {\n\tconst editor = useEditor()\n\tconst { addToast } = useToasts()\n\tconst msg = useTranslation()\n\n\treturn useCallback(\n\t\t// it's important that this function itself isn't async - we need to\n\t\t// create the relevant `ClipboardItem`s synchronously to make sure\n\t\t// safari knows that the user _wants_ to copy:\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=222262\n\t\t//\n\t\t// this is fine for navigator.clipboard.write, but for fallbacks it's a\n\t\t// little awkward.\n\t\tfunction copyAs(ids: TLShapeId[] = editor.selectedIds, format: TLCopyType = 'svg') {\n\t\t\tif (ids.length === 0) {\n\t\t\t\tids = [...editor.currentPageShapeIds]\n\t\t\t}\n\n\t\t\tif (ids.length === 0) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tswitch (format) {\n\t\t\t\tcase 'svg': {\n\t\t\t\t\tif (window.navigator.clipboard) {\n\t\t\t\t\t\tif (window.navigator.clipboard.write) {\n\t\t\t\t\t\t\twindow.navigator.clipboard.write([\n\t\t\t\t\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t\t\t\t\t'text/plain': getExportedSvgBlob(editor, ids),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfallbackWriteTextAsync(async () =>\n\t\t\t\t\t\t\t\tgetSvgAsString(await getExportSvgElement(editor, ids))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase 'jpeg':\n\t\t\t\tcase 'png': {\n\t\t\t\t\tconst mimeType = format === 'jpeg' ? 'image/jpeg' : 'image/png'\n\t\t\t\t\tconst blobPromise = getExportedImageBlob(editor, ids, format).then((blob) => {\n\t\t\t\t\t\tif (blob) {\n\t\t\t\t\t\t\tif (window.navigator.clipboard) {\n\t\t\t\t\t\t\t\treturn blob\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthrow new Error('Copy not supported')\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taddToast({\n\t\t\t\t\t\t\t\tid: 'copy-fail',\n\t\t\t\t\t\t\t\ticon: 'warning-triangle',\n\t\t\t\t\t\t\t\ttitle: msg('toast.error.copy-fail.title'),\n\t\t\t\t\t\t\t\tdescription: msg('toast.error.copy-fail.desc'),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthrow new Error('Copy not possible')\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\twindow.navigator.clipboard\n\t\t\t\t\t\t.write([\n\t\t\t\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t\t\t\t// Note: This needs to use the promise based approach for safari/ios to not bail on a permissions error.\n\t\t\t\t\t\t\t\t[mimeType]: blobPromise,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t])\n\t\t\t\t\t\t.catch((err: any) => {\n\t\t\t\t\t\t\t// Firefox will fail with the above if `dom.events.asyncClipboard.clipboardItem` is enabled.\n\t\t\t\t\t\t\t// See <https://github.com/tldraw/tldraw/issues/1325>\n\t\t\t\t\t\t\tif (!err.toString().match(/^TypeError: DOMString not supported/)) {\n\t\t\t\t\t\t\t\tconsole.error(err)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tblobPromise.then((blob) => {\n\t\t\t\t\t\t\t\twindow.navigator.clipboard.write([\n\t\t\t\t\t\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t\t\t\t\t\t// Note: This needs to use the promise based approach for safari/ios to not bail on a permissions error.\n\t\t\t\t\t\t\t\t\t\t[mimeType]: blob,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase 'json': {\n\t\t\t\t\tconst data = editor.getContent(ids)\n\n\t\t\t\t\tif (window.navigator.clipboard) {\n\t\t\t\t\t\tconst jsonStr = JSON.stringify(data)\n\n\t\t\t\t\t\tif (window.navigator.clipboard.write) {\n\t\t\t\t\t\t\twindow.navigator.clipboard.write([\n\t\t\t\t\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t\t\t\t\t'text/plain': new Blob([jsonStr], { type: 'text/plain' }),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfallbackWriteTextAsync(async () => jsonStr)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Copy type ${format} not supported.`)\n\t\t\t}\n\t\t},\n\t\t[editor, addToast, msg]\n\t)\n}\n\nasync function getExportSvgElement(editor: Editor, ids: TLShapeId[]) {\n\tconst svg = await editor.getSvg(ids, {\n\t\tscale: 1,\n\t\tbackground: editor.instanceState.exportBackground,\n\t})\n\n\tif (!svg) throw new Error('Could not construct SVG.')\n\n\treturn svg\n}\n\nasync function getExportedSvgBlob(editor: Editor, ids: TLShapeId[]) {\n\treturn new Blob([getSvgAsString(await getExportSvgElement(editor, ids))], {\n\t\ttype: 'text/plain',\n\t})\n}\n\nasync function getExportedImageBlob(editor: Editor, ids: TLShapeId[], format: 'png' | 'jpeg') {\n\treturn await getSvgAsImage(await getExportSvgElement(editor, ids), {\n\t\ttype: format,\n\t\tquality: 1,\n\t\tscale: 2,\n\t})\n}\n\nasync function fallbackWriteTextAsync(getText: () => Promise<string>) {\n\tif (!(navigator && navigator.clipboard)) return\n\tnavigator.clipboard.writeText(await getText())\n}\n"],"mappings":";;;;AAAA,SAECA,aAAA,EACAC,cAAA,EAGAC,SAAA,QACM;AACP,SAASC,WAAA,QAAmB;AAC5B,SAASC,SAAA,QAAiB;AAC1B,SAASC,cAAA,QAAsB;AAGxB,SAASC,UAAA,EAAY;EAC3B,IAAMC,MAAA,GAASL,SAAA,CAAU;EACzB,IAAAM,UAAA,GAAqBJ,SAAA,CAAU;IAAvBK,QAAA,GAAAD,UAAA,CAAAC,QAAA;EACR,IAAMC,GAAA,GAAML,cAAA,CAAe;EAE3B,OAAOF,WAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQN,SAASQ,OAAA,EAA0E;IAAA,IAAnEC,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmBN,MAAA,CAAOS,WAAA;IAAA,IAAaC,MAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqB;IAC3E,IAAID,GAAA,CAAIE,MAAA,KAAW,GAAG;MACrBF,GAAA,GAAAM,kBAAA,CAAUX,MAAA,CAAOY,mBAAmB;IACrC;IAEA,IAAIP,GAAA,CAAIE,MAAA,KAAW,GAAG;MACrB;IACD;IAEA,QAAQG,MAAA;MACP,KAAK;QAAO;UACX,IAAIG,MAAA,CAAOC,SAAA,CAAUC,SAAA,EAAW;YAC/B,IAAIF,MAAA,CAAOC,SAAA,CAAUC,SAAA,CAAUC,KAAA,EAAO;cACrCH,MAAA,CAAOC,SAAA,CAAUC,SAAA,CAAUC,KAAA,CAAM,CAChC,IAAIC,aAAA,CAAc;gBACjB,cAAcC,kBAAA,CAAmBlB,MAAA,EAAQK,GAAG;cAC7C,CAAC,EACD;YACF,OAAO;cACNc,sBAAA,eAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAuB,SAAAC,QAAA;gBAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;kBAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;oBAAA;sBAAAF,QAAA,CAAAG,EAAA,GACtBnC,cAAA;sBAAAgC,QAAA,CAAAE,IAAA;sBAAA,OAAqBE,mBAAA,CAAoB9B,MAAA,EAAQK,GAAG,CAAC;oBAAA;sBAAAqB,QAAA,CAAAK,EAAA,GAAAL,QAAA,CAAAM,IAAA;sBAAA,OAAAN,QAAA,CAAAO,MAAA,eAAAP,QAAA,CAAAG,EAAA,EAAAH,QAAA,CAAAK,EAAA;oBAAA;oBAAA;sBAAA,OAAAL,QAAA,CAAAQ,IAAA;kBAAA;gBAAA,GAAAX,OAAA;cAAA,GACtD;YACD;UACD;UACA;QACD;MAEA,KAAK;MACL,KAAK;QAAO;UACX,IAAMY,QAAA,GAAWzB,MAAA,KAAW,SAAS,eAAe;UACpD,IAAM0B,WAAA,GAAcC,oBAAA,CAAqBrC,MAAA,EAAQK,GAAA,EAAKK,MAAM,EAAE4B,IAAA,CAAK,UAACC,IAAA,EAAS;YAC5E,IAAIA,IAAA,EAAM;cACT,IAAI1B,MAAA,CAAOC,SAAA,CAAUC,SAAA,EAAW;gBAC/B,OAAOwB,IAAA;cACR;cACA,MAAM,IAAIC,KAAA,CAAM,oBAAoB;YACrC,OAAO;cACNtC,QAAA,CAAS;gBACRuC,EAAA,EAAI;gBACJC,IAAA,EAAM;gBACNC,KAAA,EAAOxC,GAAA,CAAI,6BAA6B;gBACxCyC,WAAA,EAAazC,GAAA,CAAI,4BAA4B;cAC9C,CAAC;cACD,MAAM,IAAIqC,KAAA,CAAM,mBAAmB;YACpC;UACD,CAAC;UAED3B,MAAA,CAAOC,SAAA,CAAUC,SAAA,CACfC,KAAA,CAAM,CACN,IAAIC,aAAA,CAAA4B,eAAA,KAEFV,QAAQ,EAAGC,WAAA,CACZ,EACD,EACAU,KAAA,CAAM,UAACC,GAAA,EAAa;YAGpB,IAAI,CAACA,GAAA,CAAIC,QAAA,CAAS,EAAEC,KAAA,CAAM,qCAAqC,GAAG;cACjEC,OAAA,CAAQC,KAAA,CAAMJ,GAAG;YAClB;YAEAX,WAAA,CAAYE,IAAA,CAAK,UAACC,IAAA,EAAS;cAC1B1B,MAAA,CAAOC,SAAA,CAAUC,SAAA,CAAUC,KAAA,CAAM,CAChC,IAAIC,aAAA,CAAA4B,eAAA,KAEFV,QAAQ,EAAGI,IAAA,CACZ,EACD;YACF,CAAC;UACF,CAAC;UAEF;QACD;MAEA,KAAK;QAAQ;UACZ,IAAMa,IAAA,GAAOpD,MAAA,CAAOqD,UAAA,CAAWhD,GAAG;UAElC,IAAIQ,MAAA,CAAOC,SAAA,CAAUC,SAAA,EAAW;YAC/B,IAAMuC,OAAA,GAAUC,IAAA,CAAKC,SAAA,CAAUJ,IAAI;YAEnC,IAAIvC,MAAA,CAAOC,SAAA,CAAUC,SAAA,CAAUC,KAAA,EAAO;cACrCH,MAAA,CAAOC,SAAA,CAAUC,SAAA,CAAUC,KAAA,CAAM,CAChC,IAAIC,aAAA,CAAc;gBACjB,cAAc,IAAIwC,IAAA,CAAK,CAACH,OAAO,GAAG;kBAAEI,IAAA,EAAM;gBAAa,CAAC;cACzD,CAAC,EACD;YACF,OAAO;cACNvC,sBAAA,eAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAuB,SAAAqC,SAAA;gBAAA,OAAAtC,mBAAA,GAAAG,IAAA,UAAAoC,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAAlC,IAAA,GAAAkC,SAAA,CAAAjC,IAAA;oBAAA;sBAAA,OAAAiC,SAAA,CAAA5B,MAAA,WAAYqB,OAAO;oBAAA;oBAAA;sBAAA,OAAAO,SAAA,CAAA3B,IAAA;kBAAA;gBAAA,GAAAyB,QAAA;cAAA;YAC3C;UACD;UACA;QACD;MAEA;QACC,MAAM,IAAInB,KAAA,cAAAsB,MAAA,CAAmBpD,MAAA,oBAAuB;IACtD;EACD,GACA,CAACV,MAAA,EAAQE,QAAA,EAAUC,GAAG,CACvB;AACD;AAAA,SAEe2B,oBAAAiC,EAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAAA2D,qBAAA;EAAAA,oBAAA,GAAA7C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAA6C,SAAmCnE,MAAA,EAAgBK,GAAA;IAAA,IAAA+D,GAAA;IAAA,OAAA/C,mBAAA,GAAAG,IAAA,UAAA6C,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA3C,IAAA,GAAA2C,SAAA,CAAA1C,IAAA;QAAA;UAAA0C,SAAA,CAAA1C,IAAA;UAAA,OAChC5B,MAAA,CAAOuE,MAAA,CAAOlE,GAAA,EAAK;YACpCmE,KAAA,EAAO;YACPC,UAAA,EAAYzE,MAAA,CAAO0E,aAAA,CAAcC;UAClC,CAAC;QAAA;UAHKP,GAAA,GAAAE,SAAA,CAAAtC,IAAA;UAAA,IAKDoC,GAAA;YAAAE,SAAA,CAAA1C,IAAA;YAAA;UAAA;UAAA,MAAW,IAAIY,KAAA,CAAM,0BAA0B;QAAA;UAAA,OAAA8B,SAAA,CAAArC,MAAA,WAE7CmC,GAAA;QAAA;QAAA;UAAA,OAAAE,SAAA,CAAApC,IAAA;MAAA;IAAA,GAAAiC,QAAA;EAAA,CACR;EAAA,OAAAF,oBAAA,CAAAC,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAEeY,mBAAA0D,GAAA,EAAAC,GAAA;EAAA,OAAAC,mBAAA,CAAAZ,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAAAwE,oBAAA;EAAAA,mBAAA,GAAA1D,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAAyD,SAAkC/E,MAAA,EAAgBK,GAAA;IAAA,OAAAgB,mBAAA,GAAAG,IAAA,UAAAwD,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAtD,IAAA,GAAAsD,SAAA,CAAArD,IAAA;QAAA;UAAAqD,SAAA,CAAApD,EAAA,GACtC4B,IAAA;UAAAwB,SAAA,CAAAlD,EAAA,GAAMrC,cAAA;UAAAuF,SAAA,CAAArD,IAAA;UAAA,OAAqBE,mBAAA,CAAoB9B,MAAA,EAAQK,GAAG,CAAC;QAAA;UAAA4E,SAAA,CAAAC,EAAA,GAAAD,SAAA,CAAAjD,IAAA;UAAAiD,SAAA,CAAAE,EAAA,OAAAF,SAAA,CAAAlD,EAAA,EAAAkD,SAAA,CAAAC,EAAA;UAAAD,SAAA,CAAAG,EAAA,IAAAH,SAAA,CAAAE,EAAA;UAAAF,SAAA,CAAAI,EAAA,GAAI;YACzE3B,IAAA,EAAM;UACP,CAAC;UAAA,OAAAuB,SAAA,CAAAhD,MAAA,eAAAgD,SAAA,CAAApD,EAAA,CAAAoD,SAAA,CAAAG,EAAA,EAAAH,SAAA,CAAAI,EAAA;QAAA;QAAA;UAAA,OAAAJ,SAAA,CAAA/C,IAAA;MAAA;IAAA,GAAA6C,QAAA;EAAA,CACF;EAAA,OAAAD,mBAAA,CAAAZ,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAEe+B,qBAAAiD,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAvB,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAAAmF,sBAAA;EAAAA,qBAAA,GAAArE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAAoE,SAAoC1F,MAAA,EAAgBK,GAAA,EAAkBK,MAAA;IAAA,OAAAW,mBAAA,GAAAG,IAAA,UAAAmE,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAjE,IAAA,GAAAiE,SAAA,CAAAhE,IAAA;QAAA;UAAAgE,SAAA,CAAA/D,EAAA,GACxDpC,aAAA;UAAAmG,SAAA,CAAAhE,IAAA;UAAA,OAAoBE,mBAAA,CAAoB9B,MAAA,EAAQK,GAAG;QAAA;UAAAuF,SAAA,CAAA7D,EAAA,GAAA6D,SAAA,CAAA5D,IAAA;UAAA4D,SAAA,CAAAV,EAAA,GAAG;YAClExB,IAAA,EAAMhD,MAAA;YACNmF,OAAA,EAAS;YACTrB,KAAA,EAAO;UACR,CAAC;UAAAoB,SAAA,CAAAhE,IAAA;UAAA,WAAAgE,SAAA,CAAA/D,EAAA,EAAA+D,SAAA,CAAA7D,EAAA,EAAA6D,SAAA,CAAAV,EAAA;QAAA;UAAA,OAAAU,SAAA,CAAA3D,MAAA,WAAA2D,SAAA,CAAA5D,IAAA;QAAA;QAAA;UAAA,OAAA4D,SAAA,CAAA1D,IAAA;MAAA;IAAA,GAAAwD,QAAA;EAAA,CACF;EAAA,OAAAD,qBAAA,CAAAvB,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAEea,uBAAA2E,GAAA;EAAA,OAAAC,uBAAA,CAAA7B,KAAA,OAAA5D,SAAA;AAAA;AAAA,SAAAyF,wBAAA;EAAAA,uBAAA,GAAA3E,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAA0E,SAAsCC,OAAA;IAAA,OAAA5E,mBAAA,GAAAG,IAAA,UAAA0E,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAxE,IAAA,GAAAwE,SAAA,CAAAvE,IAAA;QAAA;UAAA,IAC/Bd,SAAA,IAAaA,SAAA,CAAUC,SAAA;YAAAoF,SAAA,CAAAvE,IAAA;YAAA;UAAA;UAAA,OAAAuE,SAAA,CAAAlE,MAAA;QAAA;UAAAkE,SAAA,CAAAtE,EAAA,GAC7Bf,SAAA,CAAUC,SAAA;UAAAoF,SAAA,CAAAvE,IAAA;UAAA,OAA0BqE,OAAA,CAAQ,CAAC;QAAA;UAAAE,SAAA,CAAApE,EAAA,GAAAoE,SAAA,CAAAnE,IAAA;UAAAmE,SAAA,CAAAtE,EAAA,CAAzBuE,SAAA,CAAAC,IAAA,CAAAF,SAAA,CAAAtE,EAAA,EAAAsE,SAAA,CAAApE,EAAA;QAAA;QAAA;UAAA,OAAAoE,SAAA,CAAAjE,IAAA;MAAA;IAAA,GAAA8D,QAAA;EAAA,CACrB;EAAA,OAAAD,uBAAA,CAAA7B,KAAA,OAAA5D,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}