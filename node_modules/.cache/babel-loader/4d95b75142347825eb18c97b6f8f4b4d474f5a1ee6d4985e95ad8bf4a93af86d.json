{"ast":null,"code":"import { jsx, jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { stopEventPropagation } from \"../../../../utils/dom.mjs\";\nimport { ARROW_LABEL_FONT_SIZES, TEXT_PROPS } from \"../../shared/default-shape-constants.mjs\";\nimport { useEditableText } from \"../../shared/useEditableText.mjs\";\nimport { TextHelpers } from \"../../text/TextHelpers.mjs\";\nvar ArrowTextLabel = React.memo(function ArrowTextLabel2(_ref) {\n  var id = _ref.id,\n    text = _ref.text,\n    size = _ref.size,\n    font = _ref.font,\n    position = _ref.position,\n    width = _ref.width,\n    labelColor = _ref.labelColor;\n  var _useEditableText = useEditableText(id, \"arrow\", text),\n    rInput = _useEditableText.rInput,\n    isEditing = _useEditableText.isEditing,\n    handleFocus = _useEditableText.handleFocus,\n    handleBlur = _useEditableText.handleBlur,\n    handleKeyDown = _useEditableText.handleKeyDown,\n    handleChange = _useEditableText.handleChange,\n    isEmpty = _useEditableText.isEmpty;\n  if (!isEditing && isEmpty) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(\"div\", {\n    className: \"tl-arrow-label\",\n    \"data-font\": font,\n    \"data-align\": \"center\",\n    \"data-hastext\": !isEmpty,\n    \"data-isediting\": isEditing,\n    style: {\n      textAlign: \"center\",\n      fontSize: ARROW_LABEL_FONT_SIZES[size],\n      lineHeight: ARROW_LABEL_FONT_SIZES[size] * TEXT_PROPS.lineHeight + \"px\",\n      transform: \"translate(\".concat(position.x, \"px, \").concat(position.y, \"px)\"),\n      color: labelColor\n    },\n    children: /* @__PURE__ */jsxs(\"div\", {\n      className: \"tl-arrow-label__inner\",\n      children: [/* @__PURE__ */jsx(\"p\", {\n        style: {\n          width: width ? width : \"9px\"\n        },\n        children: text ? TextHelpers.normalizeTextForDom(text) : \" \"\n      }), isEditing &&\n      // Consider replacing with content-editable\n      /* @__PURE__ */\n      jsx(\"textarea\", {\n        ref: rInput,\n        className: \"tl-text tl-text-input\",\n        name: \"text\",\n        tabIndex: -1,\n        autoComplete: \"false\",\n        autoCapitalize: \"false\",\n        autoCorrect: \"false\",\n        autoSave: \"false\",\n        autoFocus: true,\n        placeholder: \"\",\n        spellCheck: \"true\",\n        wrap: \"off\",\n        dir: \"auto\",\n        datatype: \"wysiwyg\",\n        defaultValue: text,\n        onFocus: handleFocus,\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        onContextMenu: stopEventPropagation\n      })]\n    })\n  });\n});\nexport { ArrowTextLabel };","map":{"version":3,"names":["jsx","jsxs","React","stopEventPropagation","ARROW_LABEL_FONT_SIZES","TEXT_PROPS","useEditableText","TextHelpers","ArrowTextLabel","memo","ArrowTextLabel2","_ref","id","text","size","font","position","width","labelColor","_useEditableText","rInput","isEditing","handleFocus","handleBlur","handleKeyDown","handleChange","isEmpty","className","style","textAlign","fontSize","lineHeight","transform","concat","x","y","color","children","normalizeTextForDom","ref","name","tabIndex","autoComplete","autoCapitalize","autoCorrect","autoSave","autoFocus","placeholder","spellCheck","wrap","dir","datatype","defaultValue","onFocus","onChange","onKeyDown","onBlur","onContextMenu"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/arrow/components/ArrowTextLabel.tsx"],"sourcesContent":["import { VecLike } from '@tldraw/primitives'\nimport { TLArrowShape, TLShapeId } from '@tldraw/tlschema'\nimport * as React from 'react'\nimport { stopEventPropagation } from '../../../../utils/dom'\nimport { ARROW_LABEL_FONT_SIZES, TEXT_PROPS } from '../../shared/default-shape-constants'\nimport { useEditableText } from '../../shared/useEditableText'\nimport { TextHelpers } from '../../text/TextHelpers'\n\nexport const ArrowTextLabel = React.memo(function ArrowTextLabel({\n\tid,\n\ttext,\n\tsize,\n\tfont,\n\tposition,\n\twidth,\n\tlabelColor,\n}: { id: TLShapeId; position: VecLike; width?: number; labelColor: string } & Pick<\n\tTLArrowShape['props'],\n\t'text' | 'size' | 'font'\n>) {\n\tconst { rInput, isEditing, handleFocus, handleBlur, handleKeyDown, handleChange, isEmpty } =\n\t\tuseEditableText(id, 'arrow', text)\n\n\tif (!isEditing && isEmpty) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"tl-arrow-label\"\n\t\t\tdata-font={font}\n\t\t\tdata-align={'center'}\n\t\t\tdata-hastext={!isEmpty}\n\t\t\tdata-isediting={isEditing}\n\t\t\tstyle={{\n\t\t\t\ttextAlign: 'center',\n\t\t\t\tfontSize: ARROW_LABEL_FONT_SIZES[size],\n\t\t\t\tlineHeight: ARROW_LABEL_FONT_SIZES[size] * TEXT_PROPS.lineHeight + 'px',\n\t\t\t\ttransform: `translate(${position.x}px, ${position.y}px)`,\n\t\t\t\tcolor: labelColor,\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"tl-arrow-label__inner\">\n\t\t\t\t<p style={{ width: width ? width : '9px' }}>\n\t\t\t\t\t{text ? TextHelpers.normalizeTextForDom(text) : ' '}\n\t\t\t\t</p>\n\t\t\t\t{isEditing && (\n\t\t\t\t\t// Consider replacing with content-editable\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref={rInput}\n\t\t\t\t\t\tclassName=\"tl-text tl-text-input\"\n\t\t\t\t\t\tname=\"text\"\n\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\tautoComplete=\"false\"\n\t\t\t\t\t\tautoCapitalize=\"false\"\n\t\t\t\t\t\tautoCorrect=\"false\"\n\t\t\t\t\t\tautoSave=\"false\"\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\tspellCheck=\"true\"\n\t\t\t\t\t\twrap=\"off\"\n\t\t\t\t\t\tdir=\"auto\"\n\t\t\t\t\t\tdatatype=\"wysiwyg\"\n\t\t\t\t\t\tdefaultValue={text}\n\t\t\t\t\t\tonFocus={handleFocus}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\tonContextMenu={stopEventPropagation}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n"],"mappings":"AA0CG,SACCA,GAAA,EADDC,IAAA;AAxCH,YAAYC,KAAA,MAAW;AACvB,SAASC,oBAAA,QAA4B;AACrC,SAASC,sBAAA,EAAwBC,UAAA,QAAkB;AACnD,SAASC,eAAA,QAAuB;AAChC,SAASC,WAAA,QAAmB;AAErB,IAAMC,cAAA,GAAiBN,KAAA,CAAMO,IAAA,CAAK,SAASC,gBAAAC,IAAA,EAW/C;EAAA,IAVFC,EAAA,GAAAD,IAAA,CAAAC,EAAA;IACAC,IAAA,GAAAF,IAAA,CAAAE,IAAA;IACAC,IAAA,GAAAH,IAAA,CAAAG,IAAA;IACAC,IAAA,GAAAJ,IAAA,CAAAI,IAAA;IACAC,QAAA,GAAAL,IAAA,CAAAK,QAAA;IACAC,KAAA,GAAAN,IAAA,CAAAM,KAAA;IACAC,UAAA,GAAAP,IAAA,CAAAO,UAAA;EAKA,IAAAC,gBAAA,GACCb,eAAA,CAAgBM,EAAA,EAAI,SAASC,IAAI;IAD1BO,MAAA,GAAAD,gBAAA,CAAAC,MAAA;IAAQC,SAAA,GAAAF,gBAAA,CAAAE,SAAA;IAAWC,WAAA,GAAAH,gBAAA,CAAAG,WAAA;IAAaC,UAAA,GAAAJ,gBAAA,CAAAI,UAAA;IAAYC,aAAA,GAAAL,gBAAA,CAAAK,aAAA;IAAeC,YAAA,GAAAN,gBAAA,CAAAM,YAAA;IAAcC,OAAA,GAAAP,gBAAA,CAAAO,OAAA;EAGjF,IAAI,CAACL,SAAA,IAAaK,OAAA,EAAS;IAC1B,OAAO;EACR;EAEA,OACC,eAAA1B,GAAA,CAAC;IACA2B,SAAA,EAAU;IACV,aAAWZ,IAAA;IACX,cAAY;IACZ,gBAAc,CAACW,OAAA;IACf,kBAAgBL,SAAA;IAChBO,KAAA,EAAO;MACNC,SAAA,EAAW;MACXC,QAAA,EAAU1B,sBAAA,CAAuBU,IAAI;MACrCiB,UAAA,EAAY3B,sBAAA,CAAuBU,IAAI,IAAIT,UAAA,CAAW0B,UAAA,GAAa;MACnEC,SAAA,eAAAC,MAAA,CAAwBjB,QAAA,CAASkB,CAAA,UAAAD,MAAA,CAAQjB,QAAA,CAASmB,CAAA;MAClDC,KAAA,EAAOlB;IACR;IAEAmB,QAAA,iBAAApC,IAAA,CAAC;MAAI0B,SAAA,EAAU;MACdU,QAAA,kBAAArC,GAAA,CAAC;QAAE4B,KAAA,EAAO;UAAEX,KAAA,EAAOA,KAAA,GAAQA,KAAA,GAAQ;QAAM;QACvCoB,QAAA,EAAAxB,IAAA,GAAON,WAAA,CAAY+B,mBAAA,CAAoBzB,IAAI,IAAI;MAAA,CACjD,GACCQ,SAAA;MAAA;MAEA;MAAArB,GAAA,CAAC;QACAuC,GAAA,EAAKnB,MAAA;QACLO,SAAA,EAAU;QACVa,IAAA,EAAK;QACLC,QAAA,EAAU;QACVC,YAAA,EAAa;QACbC,cAAA,EAAe;QACfC,WAAA,EAAY;QACZC,QAAA,EAAS;QACTC,SAAA,EAAS;QACTC,WAAA,EAAY;QACZC,UAAA,EAAW;QACXC,IAAA,EAAK;QACLC,GAAA,EAAI;QACJC,QAAA,EAAS;QACTC,YAAA,EAAcvC,IAAA;QACdwC,OAAA,EAAS/B,WAAA;QACTgC,QAAA,EAAU7B,YAAA;QACV8B,SAAA,EAAW/B,aAAA;QACXgC,MAAA,EAAQjC,UAAA;QACRkC,aAAA,EAAetD;MAAA,CAChB;IAAA,CAEF;EAAA,CACD;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}