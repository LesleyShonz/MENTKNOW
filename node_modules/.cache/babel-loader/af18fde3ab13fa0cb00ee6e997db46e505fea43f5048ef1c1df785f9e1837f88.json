{"ast":null,"code":"/*!\n * canvas-size\n * v1.2.6\n * https://github.com/jhildenbiddle/canvas-size\n * (c) 2015-2023 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction canvasTest(settings) {\n  var size = settings.sizes.shift();\n  var width = Math.max(Math.ceil(size[0]), 1);\n  var height = Math.max(Math.ceil(size[1]), 1);\n  var fill = [width - 1, height - 1, 1, 1];\n  var job = Date.now();\n  var isWorker = typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\n  var cropCvs, testCvs;\n  if (isWorker) {\n    cropCvs = new OffscreenCanvas(1, 1);\n    testCvs = new OffscreenCanvas(width, height);\n  } else {\n    cropCvs = document.createElement(\"canvas\");\n    cropCvs.width = 1;\n    cropCvs.height = 1;\n    testCvs = document.createElement(\"canvas\");\n    testCvs.width = width;\n    testCvs.height = height;\n  }\n  var cropCtx = cropCvs.getContext(\"2d\");\n  var testCtx = testCvs.getContext(\"2d\");\n  if (testCtx) {\n    testCtx.fillRect.apply(testCtx, fill);\n    cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n  }\n  var isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n  var benchmark = Date.now() - job;\n  [cropCvs, testCvs].forEach(function (cvs) {\n    cvs.height = 0;\n    cvs.width = 0;\n  });\n  if (isWorker) {\n    postMessage({\n      width: width,\n      height: height,\n      benchmark: benchmark,\n      isTestPass: isTestPass\n    });\n    if (!isTestPass && settings.sizes.length) {\n      canvasTest(settings);\n    }\n  } else if (isTestPass) {\n    settings.onSuccess(width, height, benchmark);\n  } else {\n    settings.onError(width, height, benchmark);\n    if (settings.sizes.length) {\n      canvasTest(settings);\n    }\n  }\n  return isTestPass;\n}\nvar testSizes = {\n  area: [16384, 14188, 11402, 11180, 10836, 8192, 4096, 1],\n  height: [8388607, 65535, 32767, 16384, 8192, 4096, 1],\n  width: [4194303, 65535, 32767, 16384, 8192, 4096, 1]\n};\nvar _excluded = [\"onError\", \"onSuccess\"];\nvar defaults = {\n  max: null,\n  min: 1,\n  sizes: [],\n  step: 1024,\n  usePromise: false,\n  useWorker: false,\n  onError: Function.prototype,\n  onSuccess: Function.prototype\n};\nvar workerJobs = {};\nfunction createSizesArray(settings) {\n  var isArea = settings.width === settings.height;\n  var isWidth = settings.height === 1;\n  var isHeight = settings.width === 1;\n  var sizes = [];\n  if (!settings.width || !settings.height) {\n    settings.sizes.forEach(function (testSize) {\n      var width = isArea || isWidth ? testSize : 1;\n      var height = isArea || isHeight ? testSize : 1;\n      sizes.push([width, height]);\n    });\n  } else {\n    var testMin = settings.min || defaults.min;\n    var testStep = settings.step || defaults.step;\n    var testSize = Math.max(settings.width, settings.height);\n    while (testSize >= testMin) {\n      var width = isArea || isWidth ? testSize : 1;\n      var height = isArea || isHeight ? testSize : 1;\n      sizes.push([width, height]);\n      testSize -= testStep;\n    }\n  }\n  return sizes;\n}\nfunction handleMethod(settings) {\n  var hasCanvasSupport = window && \"HTMLCanvasElement\" in window;\n  var hasOffscreenCanvasSupport = window && \"OffscreenCanvas\" in window;\n  var jobID = Date.now();\n  var _onError = settings.onError,\n    _onSuccess = settings.onSuccess,\n    settingsWithoutCallbacks = _objectWithoutProperties(settings, _excluded);\n  var worker = null;\n  if (!hasCanvasSupport) {\n    return false;\n  }\n  if (settings.useWorker && hasOffscreenCanvasSupport) {\n    var js = \"\\n            var canvasTest = \".concat(canvasTest.toString(), \";\\n            onmessage = function(e) {\\n                canvasTest(e.data);\\n            };\\n        \");\n    var blob = new Blob([js], {\n      type: \"application/javascript\"\n    });\n    var blobURL = URL.createObjectURL(blob);\n    worker = new Worker(blobURL);\n    URL.revokeObjectURL(blobURL);\n    worker.onmessage = function (e) {\n      var _e$data = e.data,\n        width = _e$data.width,\n        height = _e$data.height,\n        benchmark = _e$data.benchmark,\n        isTestPass = _e$data.isTestPass;\n      if (isTestPass) {\n        workerJobs[jobID].onSuccess(width, height, benchmark);\n        delete workerJobs[jobID];\n      } else {\n        workerJobs[jobID].onError(width, height, benchmark);\n      }\n    };\n  }\n  if (settings.usePromise) {\n    return new Promise(function (resolve, reject) {\n      var promiseSettings = _objectSpread2(_objectSpread2({}, settings), {}, {\n        onError: function onError(width, height, benchmark) {\n          var isLastTest;\n          if (settings.sizes.length === 0) {\n            isLastTest = true;\n          } else {\n            var _settings$sizes$slice = settings.sizes.slice(-1),\n              _settings$sizes$slice2 = _slicedToArray(_settings$sizes$slice, 1),\n              _settings$sizes$slice3 = _slicedToArray(_settings$sizes$slice2[0], 2),\n              lastWidth = _settings$sizes$slice3[0],\n              lastHeight = _settings$sizes$slice3[1];\n            isLastTest = width === lastWidth && height === lastHeight;\n          }\n          _onError(width, height, benchmark);\n          if (isLastTest) {\n            reject({\n              width: width,\n              height: height,\n              benchmark: benchmark\n            });\n          }\n        },\n        onSuccess: function onSuccess(width, height, benchmark) {\n          _onSuccess(width, height, benchmark);\n          resolve({\n            width: width,\n            height: height,\n            benchmark: benchmark\n          });\n        }\n      });\n      if (worker) {\n        var onError = promiseSettings.onError,\n          onSuccess = promiseSettings.onSuccess;\n        workerJobs[jobID] = {\n          onError: onError,\n          onSuccess: onSuccess\n        };\n        worker.postMessage(settingsWithoutCallbacks);\n      } else {\n        canvasTest(promiseSettings);\n      }\n    });\n  } else {\n    if (worker) {\n      workerJobs[jobID] = {\n        onError: _onError,\n        onSuccess: _onSuccess\n      };\n      worker.postMessage(settingsWithoutCallbacks);\n    } else {\n      return canvasTest(settings);\n    }\n  }\n}\nvar canvasSize = {\n  maxArea: function maxArea() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var sizes = createSizesArray({\n      width: options.max,\n      height: options.max,\n      min: options.min,\n      step: options.step,\n      sizes: _toConsumableArray(testSizes.area)\n    });\n    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n      sizes: sizes\n    });\n    return handleMethod(settings);\n  },\n  maxHeight: function maxHeight() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var sizes = createSizesArray({\n      width: 1,\n      height: options.max,\n      min: options.min,\n      step: options.step,\n      sizes: _toConsumableArray(testSizes.height)\n    });\n    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n      sizes: sizes\n    });\n    return handleMethod(settings);\n  },\n  maxWidth: function maxWidth() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var sizes = createSizesArray({\n      width: options.max,\n      height: 1,\n      min: options.min,\n      step: options.step,\n      sizes: _toConsumableArray(testSizes.width)\n    });\n    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n      sizes: sizes\n    });\n    return handleMethod(settings);\n  },\n  test: function test() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var settings = _objectSpread2(_objectSpread2({}, defaults), options);\n    settings.sizes = _toConsumableArray(settings.sizes);\n    if (settings.width && settings.height) {\n      settings.sizes = [[settings.width, settings.height]];\n    }\n    return handleMethod(settings);\n  }\n};\nexport { canvasSize as default };","map":{"version":3,"names":["canvasTest","settings","size","sizes","shift","width","Math","max","ceil","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","forEach","cvs","postMessage","length","onSuccess","onError","testSizes","area","defaults","min","step","usePromise","useWorker","Function","prototype","workerJobs","createSizesArray","isArea","isWidth","isHeight","testSize","push","testMin","testStep","handleMethod","hasCanvasSupport","window","hasOffscreenCanvasSupport","jobID","_onError","_onSuccess","settingsWithoutCallbacks","_objectWithoutProperties","_excluded","worker","js","concat","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","onmessage","e","_e$data","Promise","resolve","reject","promiseSettings","_objectSpread2","isLastTest","_settings$sizes$slice","slice","_settings$sizes$slice2","_slicedToArray","_settings$sizes$slice3","lastWidth","lastHeight","canvasSize","maxArea","options","arguments","undefined","_toConsumableArray","maxHeight","maxWidth","test"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/canvas-size/src/canvas-test.js","/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/canvas-size/src/test-sizes.js","/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/canvas-size/src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: DO NOT USE ES6 CODE THAT REQUIRES BABEL HELPERS IN THIS FILE.\n *            This function will be used on the main thread and as part of an\n *            inline web worker, but access to Babel helpers will be available\n *            only on the main thread.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = Math.max(Math.ceil(size[0]), 1);\n    const height   = Math.max(Math.ceil(size[1]), 1);\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n\n        // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Release canvas elements (Safari memory usage fix)\n    // See: https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    [cropCvs, testCvs].forEach(cvs => {\n        cvs.height = 0;\n        cvs.width = 0;\n    });\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","const testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5)\n        11402,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // Chrome 68 (Android 6)\n        10836,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        1\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ]\n};\n\nexport default testSizes;","import canvasTest from './canvas-test';\nimport testSizes from './test-sizes';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport          = window && 'HTMLCanvasElement' in window;\n    const hasOffscreenCanvasSupport = window && 'OffscreenCanvas' in window;\n    const jobID                     = Date.now();\n    const { onError, onSuccess, ...settingsWithoutCallbacks } = settings;\n\n    let worker  = null;\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Create web worker\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        const js = `\n            var canvasTest = ${canvasTest.toString()};\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n\n    // Promise\n    if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            const promiseSettings = {\n                ...settings,\n                onError(width, height, benchmark) {\n                    let isLastTest;\n\n                    // If running on the main thread, an empty settings.sizes\n                    // array indicates the last test.\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    }\n                    // If running in a web worker, the settings.sizes array\n                    // accessible to this callback wil not be modified because a\n                    // copy of the settings object is sent to the worker.\n                    // Therefore, a comparison of the width and height returned\n                    // to this callback and the last [width, height] item in the\n                    // settings.sizes array is used to determine the last test.\n                    else {\n                        const [[lastWidth, lastHeight]] = settings.sizes.slice(-1);\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n\n                    onError(width, height, benchmark);\n\n                    if (isLastTest) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    onSuccess(width, height, benchmark);\n                    resolve({ width, height, benchmark });\n                }\n            };\n\n            if (worker) {\n                const { onError, onSuccess } = promiseSettings;\n\n                // Store callbacks in workerJobs object\n                workerJobs[jobID] = { onError, onSuccess };\n\n                // Send message to work\n                worker.postMessage(settingsWithoutCallbacks);\n            }\n            else {\n                canvasTest(promiseSettings);\n            }\n        });\n    }\n    // Standard Callbacks\n    else {\n        if (worker) {\n            // Store callbacks in workerJobs object\n            workerJobs[jobID] = { onError, onSuccess };\n\n            // Send message to worker\n            worker.postMessage(settingsWithoutCallbacks);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = { ...defaults, ...options };\n\n        // Prevent mutation of sizes array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}