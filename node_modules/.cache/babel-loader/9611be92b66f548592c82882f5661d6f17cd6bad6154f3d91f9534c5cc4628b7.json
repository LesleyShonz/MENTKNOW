{"ast":null,"code":"import _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _migrators;\nvar _excluded = [\"animationSpeed\"],\n  _excluded2 = [\"isSnapMode\"];\nimport { defineMigrations, migrate } from \"@tldraw/store\";\nimport { getDefaultTranslationLocale } from \"@tldraw/tlschema\";\nimport { T } from \"@tldraw/validate\";\nimport { atom } from \"signia\";\nimport { uniqueId } from \"../utils/data.mjs\";\nvar USER_DATA_KEY = \"TLDRAW_USER_DATA_v3\";\nvar userTypeValidator = T.object({\n  id: T.string,\n  name: T.string,\n  locale: T.string,\n  color: T.string,\n  isDarkMode: T.boolean,\n  animationSpeed: T.number,\n  isSnapMode: T.boolean\n});\nvar Versions = {\n  AddAnimationSpeed: 1,\n  AddIsSnapMode: 2\n};\nvar userMigrations = defineMigrations({\n  currentVersion: Versions.AddIsSnapMode,\n  migrators: (_migrators = {}, _defineProperty(_migrators, Versions.AddAnimationSpeed, {\n    up: function up(user) {\n      return _objectSpread(_objectSpread({}, user), {}, {\n        animationSpeed: 1\n      });\n    },\n    down: function down(_ref) {\n      var _ = _ref.animationSpeed,\n        user = _objectWithoutProperties(_ref, _excluded);\n      return user;\n    }\n  }), _defineProperty(_migrators, Versions.AddIsSnapMode, {\n    up: function up(user) {\n      return _objectSpread(_objectSpread({}, user), {}, {\n        isSnapMode: false\n      });\n    },\n    down: function down(_ref2) {\n      var _ = _ref2.isSnapMode,\n        user = _objectWithoutProperties(_ref2, _excluded2);\n      return user;\n    }\n  }), _migrators)\n});\nvar USER_COLORS = [\"#FF802B\", \"#EC5E41\", \"#F2555A\", \"#F04F88\", \"#E34BA9\", \"#BD54C6\", \"#9D5BD2\", \"#7B66DC\", \"#02B1CC\", \"#11B3A3\", \"#39B178\", \"#55B467\"];\nfunction getRandomColor() {\n  return USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)];\n}\nfunction getFreshUserPreferences() {\n  return {\n    id: uniqueId(),\n    locale: typeof window !== \"undefined\" ? getDefaultTranslationLocale() : \"en\",\n    name: \"New User\",\n    color: getRandomColor(),\n    // TODO: detect dark mode\n    isDarkMode: false,\n    animationSpeed: 1,\n    isSnapMode: false\n  };\n}\nfunction migrateUserPreferences(userData) {\n  var _userMigrations$curre;\n  if (userData === null || typeof userData !== \"object\") {\n    return getFreshUserPreferences();\n  }\n  if (!(\"version\" in userData) || !(\"user\" in userData) || typeof userData.version !== \"number\") {\n    return getFreshUserPreferences();\n  }\n  var migrationResult = migrate({\n    value: userData.user,\n    fromVersion: userData.version,\n    toVersion: (_userMigrations$curre = userMigrations.currentVersion) !== null && _userMigrations$curre !== void 0 ? _userMigrations$curre : 0,\n    migrations: userMigrations\n  });\n  if (migrationResult.type === \"error\") {\n    return getFreshUserPreferences();\n  }\n  try {\n    userTypeValidator.validate(migrationResult.value);\n  } catch (e) {\n    return getFreshUserPreferences();\n  }\n  return migrationResult.value;\n}\nfunction loadUserPreferences() {\n  var _JSON$parse, _window;\n  var userData = typeof window === \"undefined\" ? null : (_JSON$parse = JSON.parse(((_window = window) === null || _window === void 0 || (_window = _window.localStorage) === null || _window === void 0 ? void 0 : _window.getItem(USER_DATA_KEY)) || \"null\")) !== null && _JSON$parse !== void 0 ? _JSON$parse : null;\n  return migrateUserPreferences(userData);\n}\nvar globalUserPreferences = atom(\"globalUserData\", loadUserPreferences());\nfunction storeUserPreferences() {\n  if (typeof window !== \"undefined\" && window.localStorage) {\n    window.localStorage.setItem(USER_DATA_KEY, JSON.stringify({\n      version: userMigrations.currentVersion,\n      user: globalUserPreferences.value\n    }));\n  }\n}\nfunction setUserPreferences(user) {\n  userTypeValidator.validate(user);\n  globalUserPreferences.set(user);\n  storeUserPreferences();\n  broadcastUserPreferencesChange();\n}\nvar isTest = typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\";\nvar channel = typeof BroadcastChannel !== \"undefined\" && !isTest ? new BroadcastChannel(\"tldraw-user-sync\") : null;\nchannel === null || channel === void 0 || channel.addEventListener(\"message\", function (e) {\n  var data = e.data;\n  if ((data === null || data === void 0 ? void 0 : data.type) === broadcastEventKey && (data === null || data === void 0 ? void 0 : data.origin) !== broadcastOrigin) {\n    globalUserPreferences.set(migrateUserPreferences(data.data));\n  }\n});\nvar broadcastOrigin = uniqueId();\nvar broadcastEventKey = \"tldraw-user-preferences-change\";\nfunction broadcastUserPreferencesChange() {\n  channel === null || channel === void 0 || channel.postMessage({\n    type: broadcastEventKey,\n    origin: broadcastOrigin,\n    data: {\n      user: globalUserPreferences.value,\n      version: userMigrations.currentVersion\n    }\n  });\n}\nfunction getUserPreferences() {\n  return globalUserPreferences.value;\n}\nexport { USER_COLORS, getFreshUserPreferences, getUserPreferences, setUserPreferences };","map":{"version":3,"names":["defineMigrations","migrate","getDefaultTranslationLocale","T","atom","uniqueId","USER_DATA_KEY","userTypeValidator","object","id","string","name","locale","color","isDarkMode","boolean","animationSpeed","number","isSnapMode","Versions","AddAnimationSpeed","AddIsSnapMode","userMigrations","currentVersion","migrators","_migrators","_defineProperty","up","user","_objectSpread","down","_ref","_","_objectWithoutProperties","_excluded","_ref2","_excluded2","USER_COLORS","getRandomColor","Math","floor","random","length","getFreshUserPreferences","window","migrateUserPreferences","userData","_userMigrations$curre","version","migrationResult","value","fromVersion","toVersion","migrations","type","validate","e","loadUserPreferences","_JSON$parse","_window","JSON","parse","localStorage","getItem","globalUserPreferences","storeUserPreferences","setItem","stringify","setUserPreferences","set","broadcastUserPreferencesChange","isTest","process","env","NODE_ENV","channel","BroadcastChannel","addEventListener","data","broadcastEventKey","origin","broadcastOrigin","postMessage","getUserPreferences"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/config/TLUserPreferences.ts"],"sourcesContent":["import { defineMigrations, migrate } from '@tldraw/store'\nimport { getDefaultTranslationLocale } from '@tldraw/tlschema'\nimport { T } from '@tldraw/validate'\nimport { atom } from 'signia'\nimport { uniqueId } from '../utils/data'\n\nconst USER_DATA_KEY = 'TLDRAW_USER_DATA_v3'\n\n/**\n * A user of tldraw\n *\n * @public\n */\nexport interface TLUserPreferences {\n\tid: string\n\tname: string\n\tlocale: string\n\tcolor: string\n\tisDarkMode: boolean\n\tanimationSpeed: number\n\tisSnapMode: boolean\n}\n\ninterface UserDataSnapshot {\n\tversion: number\n\tuser: TLUserPreferences\n}\n\ninterface UserChangeBroadcastMessage {\n\ttype: typeof broadcastEventKey\n\torigin: string\n\tdata: UserDataSnapshot\n}\n\nconst userTypeValidator: T.Validator<TLUserPreferences> = T.object<TLUserPreferences>({\n\tid: T.string,\n\tname: T.string,\n\tlocale: T.string,\n\tcolor: T.string,\n\tisDarkMode: T.boolean,\n\tanimationSpeed: T.number,\n\tisSnapMode: T.boolean,\n})\n\nconst Versions = {\n\tAddAnimationSpeed: 1,\n\tAddIsSnapMode: 2,\n} as const\n\nconst userMigrations = defineMigrations({\n\tcurrentVersion: Versions.AddIsSnapMode,\n\tmigrators: {\n\t\t[Versions.AddAnimationSpeed]: {\n\t\t\tup: (user) => {\n\t\t\t\treturn {\n\t\t\t\t\t...user,\n\t\t\t\t\tanimationSpeed: 1,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: ({ animationSpeed: _, ...user }) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t\t[Versions.AddIsSnapMode]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn { ...user, isSnapMode: false }\n\t\t\t},\n\t\t\tdown: ({ isSnapMode: _, ...user }: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t},\n})\n\n/** @internal */\nexport const USER_COLORS = [\n\t'#FF802B',\n\t'#EC5E41',\n\t'#F2555A',\n\t'#F04F88',\n\t'#E34BA9',\n\t'#BD54C6',\n\t'#9D5BD2',\n\t'#7B66DC',\n\t'#02B1CC',\n\t'#11B3A3',\n\t'#39B178',\n\t'#55B467',\n] as const\n\nfunction getRandomColor() {\n\treturn USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)]\n}\n\n/** @public */\nexport function getFreshUserPreferences(): TLUserPreferences {\n\treturn {\n\t\tid: uniqueId(),\n\t\tlocale: typeof window !== 'undefined' ? getDefaultTranslationLocale() : 'en',\n\t\tname: 'New User',\n\t\tcolor: getRandomColor(),\n\t\t// TODO: detect dark mode\n\t\tisDarkMode: false,\n\t\tanimationSpeed: 1,\n\t\tisSnapMode: false,\n\t}\n}\n\nfunction migrateUserPreferences(userData: unknown) {\n\tif (userData === null || typeof userData !== 'object') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tif (!('version' in userData) || !('user' in userData) || typeof userData.version !== 'number') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tconst migrationResult = migrate<TLUserPreferences>({\n\t\tvalue: userData.user,\n\t\tfromVersion: userData.version,\n\t\ttoVersion: userMigrations.currentVersion ?? 0,\n\t\tmigrations: userMigrations,\n\t})\n\n\tif (migrationResult.type === 'error') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\ttry {\n\t\tuserTypeValidator.validate(migrationResult.value)\n\t} catch (e) {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\treturn migrationResult.value\n}\n\nfunction loadUserPreferences(): TLUserPreferences {\n\tconst userData =\n\t\ttypeof window === 'undefined'\n\t\t\t? null\n\t\t\t: ((JSON.parse(window?.localStorage?.getItem(USER_DATA_KEY) || 'null') ??\n\t\t\t\t\tnull) as null | UserDataSnapshot)\n\n\treturn migrateUserPreferences(userData)\n}\n\nconst globalUserPreferences = atom<TLUserPreferences>('globalUserData', loadUserPreferences())\n\nfunction storeUserPreferences() {\n\tif (typeof window !== 'undefined' && window.localStorage) {\n\t\twindow.localStorage.setItem(\n\t\t\tUSER_DATA_KEY,\n\t\t\tJSON.stringify({\n\t\t\t\tversion: userMigrations.currentVersion,\n\t\t\t\tuser: globalUserPreferences.value,\n\t\t\t})\n\t\t)\n\t}\n}\n\n/** @public */\nexport function setUserPreferences(user: TLUserPreferences) {\n\tuserTypeValidator.validate(user)\n\tglobalUserPreferences.set(user)\n\tstoreUserPreferences()\n\tbroadcastUserPreferencesChange()\n}\n\nconst isTest = typeof process !== 'undefined' && process.env.NODE_ENV === 'test'\n\nconst channel =\n\ttypeof BroadcastChannel !== 'undefined' && !isTest\n\t\t? new BroadcastChannel('tldraw-user-sync')\n\t\t: null\n\nchannel?.addEventListener('message', (e) => {\n\tconst data = e.data as undefined | UserChangeBroadcastMessage\n\tif (data?.type === broadcastEventKey && data?.origin !== broadcastOrigin) {\n\t\tglobalUserPreferences.set(migrateUserPreferences(data.data))\n\t}\n})\n\nconst broadcastOrigin = uniqueId()\nconst broadcastEventKey = 'tldraw-user-preferences-change' as const\n\nfunction broadcastUserPreferencesChange() {\n\tchannel?.postMessage({\n\t\ttype: broadcastEventKey,\n\t\torigin: broadcastOrigin,\n\t\tdata: {\n\t\t\tuser: globalUserPreferences.value,\n\t\t\tversion: userMigrations.currentVersion,\n\t\t},\n\t} satisfies UserChangeBroadcastMessage)\n}\n\n/** @public */\nexport function getUserPreferences() {\n\treturn globalUserPreferences.value\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}