"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Canvas_exports = {};
__export(Canvas_exports, {
  Canvas: () => Canvas,
  SnapLinesWrapper: () => SnapLinesWrapper,
  ZoomBrushWrapper: () => ZoomBrushWrapper
});
module.exports = __toCommonJS(Canvas_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_primitives = require("@tldraw/primitives");
var import_utils = require("@tldraw/utils");
var import_react = __toESM(require("react"));
var import_signia = require("signia");
var import_signia_react = require("signia-react");
var import_useCanvasEvents = require("../hooks/useCanvasEvents");
var import_useCoarsePointer = require("../hooks/useCoarsePointer");
var import_useDocumentEvents = require("../hooks/useDocumentEvents");
var import_useEditor = require("../hooks/useEditor");
var import_useEditorComponents = require("../hooks/useEditorComponents");
var import_useFixSafariDoubleTapZoomPencilEvents = require("../hooks/useFixSafariDoubleTapZoomPencilEvents");
var import_useGestureEvents = require("../hooks/useGestureEvents");
var import_useHandleEvents = require("../hooks/useHandleEvents");
var import_usePattern = require("../hooks/usePattern");
var import_useQuickReactor = require("../hooks/useQuickReactor");
var import_useScreenBounds = require("../hooks/useScreenBounds");
var import_debug_flags = require("../utils/debug-flags");
var import_LiveCollaborators = require("./LiveCollaborators");
var import_SelectionBg = require("./SelectionBg");
var import_SelectionFg = require("./SelectionFg");
var import_Shape = require("./Shape");
var import_ShapeIndicator = require("./ShapeIndicator");
const Canvas = (0, import_signia_react.track)(function Canvas2() {
  const editor = (0, import_useEditor.useEditor)();
  const { Background, SvgDefs } = (0, import_useEditorComponents.useEditorComponents)();
  const rCanvas = import_react.default.useRef(null);
  const rHtmlLayer = import_react.default.useRef(null);
  (0, import_useScreenBounds.useScreenBounds)();
  (0, import_useDocumentEvents.useDocumentEvents)();
  (0, import_useCoarsePointer.useCoarsePointer)();
  (0, import_useGestureEvents.useGestureEvents)(rCanvas);
  (0, import_useFixSafariDoubleTapZoomPencilEvents.useFixSafariDoubleTapZoomPencilEvents)(rCanvas);
  (0, import_useQuickReactor.useQuickReactor)(
    "position layers",
    () => {
      const htmlElm = rHtmlLayer.current;
      if (!htmlElm)
        return;
      const { x, y, z } = editor.camera;
      const offset = z >= 1 ? (0, import_utils.modulate)(z, [1, 8], [0.125, 0.5], true) : (0, import_utils.modulate)(z, [0.1, 1], [-2, 0.125], true);
      htmlElm.style.setProperty(
        "transform",
        `scale(${(0, import_primitives.toDomPrecision)(z)}) translate(${(0, import_primitives.toDomPrecision)(x + offset)}px,${(0, import_primitives.toDomPrecision)(
          y + offset
        )}px)`
      );
    },
    [editor]
  );
  const { context: patternContext, isReady: patternIsReady } = (0, import_usePattern.usePattern)();
  const events = (0, import_useCanvasEvents.useCanvasEvents)();
  import_react.default.useEffect(() => {
    if (patternIsReady && editor.isSafari) {
      const htmlElm = rHtmlLayer.current;
      if (htmlElm) {
        requestAnimationFrame(() => {
          htmlElm.style.display = "none";
          requestAnimationFrame(() => {
            htmlElm.style.display = "";
          });
        });
      }
    }
  }, [editor, patternIsReady]);
  import_react.default.useEffect(() => {
    rCanvas.current?.focus();
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { ref: rCanvas, draggable: false, className: "tl-canvas", "data-testid": "canvas", ...events, children: [
    Background && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Background, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(GridWrapper, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UiLogger, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { ref: rHtmlLayer, className: "tl-html-layer", draggable: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { className: "tl-svg-context", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("defs", { children: [
        patternContext,
        Cursor && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Cursor, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollaboratorHint, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ArrowheadDot, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ArrowheadCross, {}),
        SvgDefs && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SvgDefs, {})
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SelectionBg.SelectionBg, {}),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tl-shapes", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ShapesToDisplay, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tl-overlays", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HandlesWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(BrushWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ScribbleWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ZoomBrushWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectedIdIndicators, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HoveredShapeIndicator, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HintedShapeIndicator, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SnapLinesWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SelectionFg.SelectionFg, {}),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_LiveCollaborators.LiveCollaborators, {})
      ] })
    ] })
  ] });
});
const GridWrapper = (0, import_signia_react.track)(function GridWrapper2() {
  const editor = (0, import_useEditor.useEditor)();
  const { Grid } = (0, import_useEditorComponents.useEditorComponents)();
  const { x, y, z } = editor.camera;
  const isGridMode = editor.isGridMode;
  if (!(Grid && isGridMode))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Grid, { x, y, z, size: editor.gridSize });
});
const ScribbleWrapper = (0, import_signia_react.track)(function ScribbleWrapper2() {
  const editor = (0, import_useEditor.useEditor)();
  const scribble = editor.scribble;
  const zoom = editor.zoomLevel;
  const { Scribble } = (0, import_useEditorComponents.useEditorComponents)();
  if (!(Scribble && scribble))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Scribble, { className: "tl-user-scribble", scribble, zoom });
});
const BrushWrapper = (0, import_signia_react.track)(function BrushWrapper2() {
  const editor = (0, import_useEditor.useEditor)();
  const { brush } = editor;
  const { Brush } = (0, import_useEditorComponents.useEditorComponents)();
  if (!(Brush && brush && editor.isIn("select.brushing")))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Brush, { className: "tl-user-brush", brush });
});
const ZoomBrushWrapper = (0, import_signia_react.track)(function Zoom() {
  const editor = (0, import_useEditor.useEditor)();
  const { zoomBrush } = editor;
  const { ZoomBrush } = (0, import_useEditorComponents.useEditorComponents)();
  if (!(ZoomBrush && zoomBrush && editor.isIn("zoom")))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ZoomBrush, { className: "tl-user-brush", brush: zoomBrush });
});
const SnapLinesWrapper = (0, import_signia_react.track)(function SnapLines() {
  const editor = (0, import_useEditor.useEditor)();
  const {
    snaps: { lines },
    zoomLevel
  } = editor;
  const { SnapLine } = (0, import_useEditorComponents.useEditorComponents)();
  if (!(SnapLine && lines.length > 0))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: lines.map((line) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SnapLine, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id)) });
});
const MIN_HANDLE_DISTANCE = 48;
const HandlesWrapper = (0, import_signia_react.track)(function HandlesWrapper2() {
  const editor = (0, import_useEditor.useEditor)();
  const zoom = editor.zoomLevel;
  const isChangingStyle = editor.isChangingStyle;
  const onlySelectedShape = editor.onlySelectedShape;
  const shouldDisplayHandles = editor.isInAny("select.idle", "select.pointing_handle") && !isChangingStyle && !editor.isReadOnly;
  if (!(onlySelectedShape && shouldDisplayHandles))
    return null;
  const util = editor.getShapeUtil(onlySelectedShape);
  const handles = util.handles?.(onlySelectedShape);
  if (!handles)
    return null;
  const transform = editor.getPageTransform(onlySelectedShape);
  if (!transform)
    return null;
  const handlesToDisplay = [];
  for (let i = 0, handle = handles[i]; i < handles.length; i++, handle = handles[i]) {
    if (handle.type !== "vertex") {
      const prev = handles[i - 1];
      const next = handles[i + 1];
      if (prev && next) {
        if (Math.hypot(prev.y - next.y, prev.x - next.x) < MIN_HANDLE_DISTANCE / zoom) {
          continue;
        }
      }
    }
    handlesToDisplay.push(handle);
  }
  handlesToDisplay.sort((a) => a.type === "vertex" ? 1 : -1);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("g", { transform: import_primitives.Matrix2d.toCssString(transform), children: handlesToDisplay.map((handle) => {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HandleWrapper, { shapeId: onlySelectedShape.id, handle }, handle.id);
  }) }) });
});
const HandleWrapper = ({ shapeId, handle }) => {
  const events = (0, import_useHandleEvents.useHandleEvents)(shapeId, handle.id);
  const { Handle } = (0, import_useEditorComponents.useEditorComponents)();
  if (!Handle)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("g", { "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})`, ...events, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Handle, { shapeId, handle }) });
};
const ShapesToDisplay = (0, import_signia_react.track)(function ShapesToDisplay2() {
  const editor = (0, import_useEditor.useEditor)();
  const { renderingShapes } = editor;
  const debugSvg = import_debug_flags.debugFlags.debugSvg.value;
  if (debugSvg) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react.default.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_Shape.Shape, { ...result }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DebugSvgCopy, { id: result.id })
    ] }, result.id + "_fragment")) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_Shape.Shape, { ...result }, result.id + "_shape")) });
});
const SelectedIdIndicators = (0, import_signia_react.track)(function SelectedIdIndicators2() {
  const editor = (0, import_useEditor.useEditor)();
  const shouldDisplay = editor.isInAny(
    "select.idle",
    "select.brushing",
    "select.scribble_brushing",
    "select.pointing_shape",
    "select.pointing_selection",
    "select.pointing_handle"
  ) && !editor.isChangingStyle;
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: editor.selectedIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ShapeIndicator.ShapeIndicator, { className: "tl-user-indicator__selected", id }, id + "_indicator")) });
});
const HoveredShapeIndicator = function HoveredShapeIndicator2() {
  const editor = (0, import_useEditor.useEditor)();
  const displayingHoveredId = (0, import_signia_react.useValue)(
    "hovered id and should display",
    () => editor.isInAny("select.idle", "select.editing_shape") ? editor.pageState.hoveredId : null,
    [editor]
  );
  if (!displayingHoveredId)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ShapeIndicator.ShapeIndicator, { className: "tl-user-indicator__hovered", id: displayingHoveredId });
};
const HintedShapeIndicator = (0, import_signia_react.track)(function HintedShapeIndicator2() {
  const editor = (0, import_useEditor.useEditor)();
  const ids = (0, import_utils.dedupe)(editor.hintingIds);
  if (!ids.length)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: ids.map((id) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ShapeIndicator.ShapeIndicator, { className: "tl-user-indicator__hint", id }, id + "_hinting")) });
});
function Cursor() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { id: "cursor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill: "white", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
    ] })
  ] });
}
function CollaboratorHint() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { id: "cursor_hint", fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
}
function ArrowheadDot() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("marker", { id: "arrowhead-dot", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
}
function ArrowheadCross() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("marker", { id: "arrowhead-cross", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
  ] });
}
const DebugSvgCopy = (0, import_signia_react.track)(function DupSvg({ id }) {
  const editor = (0, import_useEditor.useEditor)();
  const shape = editor.getShapeById(id);
  const [html, setHtml] = import_react.default.useState("");
  const isInRoot = shape?.parentId === editor.currentPageId;
  import_react.default.useEffect(() => {
    if (!isInRoot)
      return;
    let latest = null;
    const unsubscribe = (0, import_signia.react)("shape to svg", async () => {
      const renderId = Math.random();
      latest = renderId;
      const bb = editor.getPageBoundsById(id);
      const el = await editor.getSvg([id], { padding: 0 });
      if (el && bb && latest === renderId) {
        el.style.setProperty("overflow", "visible");
        el.setAttribute("preserveAspectRatio", "xMidYMin slice");
        el.style.setProperty("transform", `translate(${bb.x}px, ${bb.y + bb.h + 12}px)`);
        el.style.setProperty("border", "1px solid black");
        setHtml(el?.outerHTML);
      }
    });
    return () => {
      latest = null;
      unsubscribe();
    };
  }, [editor, id, isInRoot]);
  if (!isInRoot)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: { paddingTop: 12, position: "absolute" }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: { display: "flex" }, dangerouslySetInnerHTML: { __html: html } }) });
});
const UiLogger = (0, import_signia_react.track)(() => {
  const logMessages = import_debug_flags.debugFlags.logMessages.value;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "debug__ui-logger", children: logMessages.map((message, messageIndex) => {
    const text = typeof message === "string" ? message : JSON.stringify(message);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "debug__ui-logger__line", children: text }, messageIndex);
  }) });
});
//# sourceMappingURL=Canvas.js.map
