{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// src/ArraySet.ts\nvar ARRAY_SIZE_THRESHOLD = 8;\nvar ArraySet = /*#__PURE__*/function () {\n  function ArraySet() {\n    _classCallCheck(this, ArraySet);\n    _defineProperty(this, \"arraySize\", 0);\n    _defineProperty(this, \"array\", Array(ARRAY_SIZE_THRESHOLD));\n    _defineProperty(this, \"set\", null);\n  }\n  _createClass(ArraySet, [{\n    key: \"isEmpty\",\n    get:\n    /**\n     * Get whether this ArraySet has any elements.\n     *\n     * @returns True if this ArraySet has any elements, false otherwise.\n     */\n    function get() {\n      if (this.array) {\n        return this.arraySize === 0;\n      }\n      if (this.set) {\n        return this.set.size === 0;\n      }\n      throw new Error(\"no set or array\");\n    }\n    /**\n     * Add an item to the ArraySet if it is not already present.\n     *\n     * @param elem - The element to add.\n     */\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      if (this.array) {\n        var idx = this.array.indexOf(elem);\n        if (idx !== -1) {\n          return false;\n        }\n        if (this.arraySize < ARRAY_SIZE_THRESHOLD) {\n          this.array[this.arraySize] = elem;\n          this.arraySize++;\n          return true;\n        } else {\n          this.set = new Set(this.array);\n          this.array = null;\n          this.set.add(elem);\n          return true;\n        }\n      }\n      if (this.set) {\n        if (this.set.has(elem)) {\n          return false;\n        }\n        this.set.add(elem);\n        return true;\n      }\n      throw new Error(\"no set or array\");\n    }\n    /**\n     * Remove an item from the ArraySet if it is present.\n     *\n     * @param elem - The element to remove\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(elem) {\n      if (this.array) {\n        var idx = this.array.indexOf(elem);\n        if (idx === -1) {\n          return false;\n        }\n        this.array[idx] = void 0;\n        this.arraySize--;\n        if (idx !== this.arraySize) {\n          this.array[idx] = this.array[this.arraySize];\n          this.array[this.arraySize] = void 0;\n        }\n        return true;\n      }\n      if (this.set) {\n        if (!this.set.has(elem)) {\n          return false;\n        }\n        this.set.delete(elem);\n        return true;\n      }\n      throw new Error(\"no set or array\");\n    }\n    /**\n     * Run a callback for each element in the ArraySet.\n     *\n     * @param visitor The callback to run for each element.\n     */\n  }, {\n    key: \"visit\",\n    value: function visit(visitor) {\n      if (this.array) {\n        for (var i = 0; i < this.arraySize; i++) {\n          var elem = this.array[i];\n          if (typeof elem !== \"undefined\") {\n            visitor(elem);\n          }\n        }\n        return;\n      }\n      if (this.set) {\n        this.set.forEach(visitor);\n        return;\n      }\n      throw new Error(\"no set or array\");\n    }\n  }]);\n  return ArraySet;\n}();\nexport { ARRAY_SIZE_THRESHOLD, ArraySet };","map":{"version":3,"names":["ARRAY_SIZE_THRESHOLD","ArraySet","_classCallCheck","_defineProperty","Array","_createClass","key","get","array","arraySize","set","size","Error","value","add","elem","idx","indexOf","Set","has","remove","delete","visit","visitor","i","forEach"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/signia/src/ArraySet.ts"],"sourcesContent":["// The maximum size for an array in an ArraySet\nexport const ARRAY_SIZE_THRESHOLD = 8\n\n/**\n * An ArraySet operates as an array until it reaches a certain size, after which a Set is used\n * instead. In either case, the same methods are used to get, set, remove, and visit the items.\n * @internal\n */\nexport class ArraySet<T> {\n\tprivate arraySize = 0\n\n\tprivate array: (T | undefined)[] | null = Array(ARRAY_SIZE_THRESHOLD)\n\n\tprivate set: Set<T> | null = null\n\n\t/**\n\t * Get whether this ArraySet has any elements.\n\t *\n\t * @returns True if this ArraySet has any elements, false otherwise.\n\t */\n\tget isEmpty() {\n\t\tif (this.array) {\n\t\t\treturn this.arraySize === 0\n\t\t}\n\n\t\tif (this.set) {\n\t\t\treturn this.set.size === 0\n\t\t}\n\n\t\tthrow new Error('no set or array')\n\t}\n\n\t/**\n\t * Add an item to the ArraySet if it is not already present.\n\t *\n\t * @param elem - The element to add.\n\t */\n\n\tadd(elem: T) {\n\t\tif (this.array) {\n\t\t\tconst idx = this.array.indexOf(elem)\n\n\t\t\t// Return false if the element is already in the array.\n\t\t\tif (idx !== -1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tif (this.arraySize < ARRAY_SIZE_THRESHOLD) {\n\t\t\t\t// If the array is below the size threshold, push items into the array.\n\n\t\t\t\t// Insert the element into the array's next available slot.\n\t\t\t\tthis.array[this.arraySize] = elem\n\t\t\t\tthis.arraySize++\n\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\t// If the array is full, convert it to a set and remove the array.\n\t\t\t\tthis.set = new Set(this.array as any)\n\t\t\t\tthis.array = null\n\t\t\t\tthis.set.add(elem)\n\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tif (this.set) {\n\t\t\t// Return false if the element is already in the set.\n\t\t\tif (this.set.has(elem)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthis.set.add(elem)\n\t\t\treturn true\n\t\t}\n\n\t\tthrow new Error('no set or array')\n\t}\n\n\t/**\n\t * Remove an item from the ArraySet if it is present.\n\t *\n\t * @param elem - The element to remove\n\t */\n\tremove(elem: T) {\n\t\tif (this.array) {\n\t\t\tconst idx = this.array.indexOf(elem)\n\n\t\t\t// If the item is not in the array, return false.\n\t\t\tif (idx === -1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthis.array[idx] = undefined\n\t\t\tthis.arraySize--\n\n\t\t\tif (idx !== this.arraySize) {\n\t\t\t\t// If the item is not the last item in the array, move the last item into the\n\t\t\t\t// removed item's slot.\n\t\t\t\tthis.array[idx] = this.array[this.arraySize]\n\t\t\t\tthis.array[this.arraySize] = undefined\n\t\t\t}\n\n\t\t\treturn true\n\t\t}\n\n\t\tif (this.set) {\n\t\t\t// If the item is not in the set, return false.\n\t\t\tif (!this.set.has(elem)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthis.set.delete(elem)\n\n\t\t\treturn true\n\t\t}\n\n\t\tthrow new Error('no set or array')\n\t}\n\n\t/**\n\t * Run a callback for each element in the ArraySet.\n\t *\n\t * @param visitor The callback to run for each element.\n\t */\n\tvisit(visitor: (item: T) => void) {\n\t\tif (this.array) {\n\t\t\tfor (let i = 0; i < this.arraySize; i++) {\n\t\t\t\tconst elem = this.array[i]\n\n\t\t\t\tif (typeof elem !== 'undefined') {\n\t\t\t\t\tvisitor(elem)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\n\t\tif (this.set) {\n\t\t\tthis.set.forEach(visitor)\n\n\t\t\treturn\n\t\t}\n\n\t\tthrow new Error('no set or array')\n\t}\n}\n"],"mappings":";;;;AACO,IAAMA,oBAAA,GAAuB;AAO7B,IAAMC,QAAA;EAAA,SAAAA,SAAA;IAAAC,eAAA,OAAAD,QAAA;IAAAE,eAAA,oBACQ;IAAAA,eAAA,gBAEsBC,KAAA,CAAMJ,oBAAoB;IAAAG,eAAA,cAEvC;EAAA;EAAAE,YAAA,CAAAJ,QAAA;IAAAK,GAAA;IAAAC,GAAA;IAAA;AAAA;AAAA;AAAA;AAAA;IAO7B,SAAAA,IAAA,EAAc;MACb,IAAI,KAAKC,KAAA,EAAO;QACf,OAAO,KAAKC,SAAA,KAAc;MAC3B;MAEA,IAAI,KAAKC,GAAA,EAAK;QACb,OAAO,KAAKA,GAAA,CAAIC,IAAA,KAAS;MAC1B;MAEA,MAAM,IAAIC,KAAA,CAAM,iBAAiB;IAClC;IAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAN,GAAA;IAAAO,KAAA,EAQA,SAAAC,IAAIC,IAAA,EAAS;MACZ,IAAI,KAAKP,KAAA,EAAO;QACf,IAAMQ,GAAA,GAAM,KAAKR,KAAA,CAAMS,OAAA,CAAQF,IAAI;QAGnC,IAAIC,GAAA,KAAQ,IAAI;UACf,OAAO;QACR;QAEA,IAAI,KAAKP,SAAA,GAAYT,oBAAA,EAAsB;UAI1C,KAAKQ,KAAA,CAAM,KAAKC,SAAS,IAAIM,IAAA;UAC7B,KAAKN,SAAA;UAEL,OAAO;QACR,OAAO;UAEN,KAAKC,GAAA,GAAM,IAAIQ,GAAA,CAAI,KAAKV,KAAY;UACpC,KAAKA,KAAA,GAAQ;UACb,KAAKE,GAAA,CAAII,GAAA,CAAIC,IAAI;UAEjB,OAAO;QACR;MACD;MAEA,IAAI,KAAKL,GAAA,EAAK;QAEb,IAAI,KAAKA,GAAA,CAAIS,GAAA,CAAIJ,IAAI,GAAG;UACvB,OAAO;QACR;QAEA,KAAKL,GAAA,CAAII,GAAA,CAAIC,IAAI;QACjB,OAAO;MACR;MAEA,MAAM,IAAIH,KAAA,CAAM,iBAAiB;IAClC;IAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAN,GAAA;IAAAO,KAAA,EAOA,SAAAO,OAAOL,IAAA,EAAS;MACf,IAAI,KAAKP,KAAA,EAAO;QACf,IAAMQ,GAAA,GAAM,KAAKR,KAAA,CAAMS,OAAA,CAAQF,IAAI;QAGnC,IAAIC,GAAA,KAAQ,IAAI;UACf,OAAO;QACR;QAEA,KAAKR,KAAA,CAAMQ,GAAG,IAAI;QAClB,KAAKP,SAAA;QAEL,IAAIO,GAAA,KAAQ,KAAKP,SAAA,EAAW;UAG3B,KAAKD,KAAA,CAAMQ,GAAG,IAAI,KAAKR,KAAA,CAAM,KAAKC,SAAS;UAC3C,KAAKD,KAAA,CAAM,KAAKC,SAAS,IAAI;QAC9B;QAEA,OAAO;MACR;MAEA,IAAI,KAAKC,GAAA,EAAK;QAEb,IAAI,CAAC,KAAKA,GAAA,CAAIS,GAAA,CAAIJ,IAAI,GAAG;UACxB,OAAO;QACR;QAEA,KAAKL,GAAA,CAAIW,MAAA,CAAON,IAAI;QAEpB,OAAO;MACR;MAEA,MAAM,IAAIH,KAAA,CAAM,iBAAiB;IAClC;IAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAN,GAAA;IAAAO,KAAA,EAOA,SAAAS,MAAMC,OAAA,EAA4B;MACjC,IAAI,KAAKf,KAAA,EAAO;QACf,SAASgB,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKf,SAAA,EAAWe,CAAA,IAAK;UACxC,IAAMT,IAAA,GAAO,KAAKP,KAAA,CAAMgB,CAAC;UAEzB,IAAI,OAAOT,IAAA,KAAS,aAAa;YAChCQ,OAAA,CAAQR,IAAI;UACb;QACD;QAEA;MACD;MAEA,IAAI,KAAKL,GAAA,EAAK;QACb,KAAKA,GAAA,CAAIe,OAAA,CAAQF,OAAO;QAExB;MACD;MAEA,MAAM,IAAIX,KAAA,CAAM,iBAAiB;IAClC;EAAA;EAAA,OAAAX,QAAA;AAAA,GACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}