{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { IncrementalSetConstructor } from \"@tldraw/store\";\nimport { isPageId, isShape, isShapeId } from \"@tldraw/tlschema\";\nimport { computed, isUninitialized, RESET_VALUE, withDiff } from \"signia\";\nvar isShapeInPage = function isShapeInPage(store, pageId, shape) {\n  while (!isPageId(shape.parentId)) {\n    var parent = store.get(shape.parentId);\n    if (!parent) return false;\n    shape = parent;\n  }\n  return shape.parentId === pageId;\n};\nvar deriveShapeIdsInCurrentPage = function deriveShapeIdsInCurrentPage(store, getCurrentPageId) {\n  var shapesIndex = store.query.ids(\"shape\");\n  var lastPageId = null;\n  function fromScratch() {\n    var currentPageId = getCurrentPageId();\n    lastPageId = currentPageId;\n    return new Set(_toConsumableArray(shapesIndex.value).filter(function (id) {\n      return isShapeInPage(store, currentPageId, store.get(id));\n    }));\n  }\n  return computed(\"_shapeIdsInCurrentPage\", function (prevValue, lastComputedEpoch) {\n    if (isUninitialized(prevValue)) {\n      return fromScratch();\n    }\n    var currentPageId = getCurrentPageId();\n    if (currentPageId !== lastPageId) {\n      return fromScratch();\n    }\n    var diff = store.history.getDiffSince(lastComputedEpoch);\n    if (diff === RESET_VALUE) {\n      return fromScratch();\n    }\n    var builder = new IncrementalSetConstructor(prevValue);\n    var _iterator = _createForOfIteratorHelper(diff),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var changes = _step.value;\n        for (var _i = 0, _Object$values = Object.values(changes.added); _i < _Object$values.length; _i++) {\n          var record = _Object$values[_i];\n          if (isShape(record) && isShapeInPage(store, currentPageId, record)) {\n            builder.add(record.id);\n          }\n        }\n        for (var _i2 = 0, _Object$values2 = Object.values(changes.updated); _i2 < _Object$values2.length; _i2++) {\n          var _Object$values2$_i = _slicedToArray(_Object$values2[_i2], 2),\n            _from = _Object$values2$_i[0],\n            to = _Object$values2$_i[1];\n          if (isShape(to)) {\n            if (isShapeInPage(store, currentPageId, to)) {\n              builder.add(to.id);\n            } else {\n              builder.remove(to.id);\n            }\n          }\n        }\n        for (var _i3 = 0, _Object$keys = Object.keys(changes.removed); _i3 < _Object$keys.length; _i3++) {\n          var id = _Object$keys[_i3];\n          if (isShapeId(id)) {\n            builder.remove(id);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var result = builder.get();\n    if (!result) {\n      return prevValue;\n    }\n    return withDiff(result.value, result.diff);\n  });\n};\nexport { deriveShapeIdsInCurrentPage };","map":{"version":3,"names":["IncrementalSetConstructor","isPageId","isShape","isShapeId","computed","isUninitialized","RESET_VALUE","withDiff","isShapeInPage","store","pageId","shape","parentId","parent","get","deriveShapeIdsInCurrentPage","getCurrentPageId","shapesIndex","query","ids","lastPageId","fromScratch","currentPageId","Set","_toConsumableArray","value","filter","id","prevValue","lastComputedEpoch","diff","history","getDiffSince","builder","_iterator","_createForOfIteratorHelper","_step","s","n","done","changes","_i","_Object$values","Object","values","added","length","record","add","_i2","_Object$values2","updated","_Object$values2$_i","_slicedToArray","_from","to","remove","_i3","_Object$keys","keys","removed","err","e","f","result"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/derivations/shapeIdsInCurrentPage.ts"],"sourcesContent":["import { IncrementalSetConstructor } from '@tldraw/store'\nimport {\n\tisPageId,\n\tisShape,\n\tisShapeId,\n\tTLPageId,\n\tTLShape,\n\tTLShapeId,\n\tTLStore,\n} from '@tldraw/tlschema'\nimport { computed, isUninitialized, RESET_VALUE, withDiff } from 'signia'\n\n/**\n * Get whether a shape is in the current page.\n *\n * @param store - The tldraw store.\n * @param pageId - The id of the page to check.\n * @param shape - The the shape to check.\n */\nconst isShapeInPage = (store: TLStore, pageId: TLPageId, shape: TLShape): boolean => {\n\twhile (!isPageId(shape.parentId)) {\n\t\tconst parent = store.get(shape.parentId)\n\t\tif (!parent) return false\n\t\tshape = parent\n\t}\n\n\treturn shape.parentId === pageId\n}\n\n/**\n * A derivation that returns a list of shape ids in the current page.\n *\n * @param store - The tldraw store.\n * @param getCurrentPageId - A function that returns the current page id.\n */\nexport const deriveShapeIdsInCurrentPage = (store: TLStore, getCurrentPageId: () => TLPageId) => {\n\tconst shapesIndex = store.query.ids('shape')\n\tlet lastPageId: null | TLPageId = null\n\tfunction fromScratch() {\n\t\tconst currentPageId = getCurrentPageId()\n\t\tlastPageId = currentPageId\n\t\treturn new Set(\n\t\t\t[...shapesIndex.value].filter((id) => isShapeInPage(store, currentPageId, store.get(id)!))\n\t\t)\n\t}\n\treturn computed<Set<TLShapeId>>('_shapeIdsInCurrentPage', (prevValue, lastComputedEpoch) => {\n\t\tif (isUninitialized(prevValue)) {\n\t\t\treturn fromScratch()\n\t\t}\n\n\t\tconst currentPageId = getCurrentPageId()\n\n\t\tif (currentPageId !== lastPageId) {\n\t\t\treturn fromScratch()\n\t\t}\n\n\t\tconst diff = store.history.getDiffSince(lastComputedEpoch)\n\n\t\tif (diff === RESET_VALUE) {\n\t\t\treturn fromScratch()\n\t\t}\n\n\t\tconst builder = new IncrementalSetConstructor<TLShapeId>(\n\t\t\tprevValue\n\t\t) as IncrementalSetConstructor<TLShapeId>\n\n\t\tfor (const changes of diff) {\n\t\t\tfor (const record of Object.values(changes.added)) {\n\t\t\t\tif (isShape(record) && isShapeInPage(store, currentPageId, record)) {\n\t\t\t\t\tbuilder.add(record.id)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [_from, to] of Object.values(changes.updated)) {\n\t\t\t\tif (isShape(to)) {\n\t\t\t\t\tif (isShapeInPage(store, currentPageId, to)) {\n\t\t\t\t\t\tbuilder.add(to.id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuilder.remove(to.id)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const id of Object.keys(changes.removed)) {\n\t\t\t\tif (isShapeId(id)) {\n\t\t\t\t\tbuilder.remove(id)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst result = builder.get()\n\t\tif (!result) {\n\t\t\treturn prevValue\n\t\t}\n\n\t\treturn withDiff(result.value, result.diff)\n\t})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}