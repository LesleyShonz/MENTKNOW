{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/shapes/line/components/getLinePath.ts"],
  "sourcesContent": ["import {\n\tCubicSpline2d,\n\tgetStrokeOutlinePoints,\n\tgetStrokePoints,\n\tPolyline2d,\n\tsetStrokePointRadii,\n\tVec2d,\n} from '@tldraw/primitives'\nimport { TLLineShape } from '@tldraw/tlschema'\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from '../../../../utils/svg'\n\nexport function getLinePoints(spline: CubicSpline2d | Polyline2d) {\n\tconst { segments } = spline\n\n\tconst allPoints: Vec2d[] = []\n\n\tfor (let j = 0, k = segments.length; j < k; j++) {\n\t\tconst segment = segments[j]\n\t\tconst lut = segment.lut\n\n\t\tconst n = lut.length - 1\n\n\t\tif (j > 0) {\n\t\t\tallPoints.push(Vec2d.Lrp(lut[0], lut[1], 0.25))\n\t\t} else {\n\t\t\tallPoints.push(lut[0])\n\t\t}\n\n\t\tfor (let i = 1; i < n; i++) {\n\t\t\tallPoints.push(lut[i])\n\t\t}\n\n\t\tif (j < k - 1) {\n\t\t\tallPoints.push(Vec2d.Lrp(lut[n - 1], lut[n], 0.75))\n\t\t} else {\n\t\t\tallPoints.push(lut[n])\n\t\t}\n\t}\n\n\treturn allPoints\n}\n\nexport function getLineDrawFreehandOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: strokeWidth,\n\t\tthinning: 0.4,\n\t\tstreamline: 0,\n\t\tsmoothing: 0.5,\n\t\tsimulatePressure: true,\n\t\tlast: true,\n\t}\n}\n\nexport function getLineSolidFreehandOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: strokeWidth,\n\t\tthinning: 0,\n\t\tstreamline: 0,\n\t\tsmoothing: 0.5,\n\t\tsimulatePressure: false,\n\t\tlast: true,\n\t}\n}\n\nexport function getLineStrokePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst points = getLinePoints(spline)\n\n\tconst options = getLineDrawFreehandOptions(strokeWidth)\n\n\treturn getStrokePoints(points, options)\n}\n\nexport function getLineDrawStrokeOutlinePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst options = getLineDrawFreehandOptions(strokeWidth)\n\treturn getStrokeOutlinePoints(\n\t\tsetStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),\n\t\toptions\n\t)\n}\n\nexport function getLineSolidStrokeOutlinePoints(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst options = getLineSolidFreehandOptions(strokeWidth)\n\treturn getStrokeOutlinePoints(getLineStrokePoints(shape, spline, strokeWidth), options)\n}\n\nexport function getLineDrawPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth)\n\treturn getSvgPathFromStroke(stroke)\n}\n\nexport function getLineSolidPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tconst outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth)\n\treturn getSvgPathFromStroke(outlinePoints)\n}\n\nexport function getLineIndicatorPath(\n\tshape: TLLineShape,\n\tspline: CubicSpline2d | Polyline2d,\n\tstrokeWidth: number\n) {\n\tif (shape.props.dash === 'draw') {\n\t\tconst strokePoints = getLineStrokePoints(shape, spline, strokeWidth)\n\t\treturn getSvgPathFromStrokePoints(strokePoints)\n\t}\n\n\treturn spline.path\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOO;AAEP,iBAAiE;AAE1D,SAAS,cAAc,QAAoC;AACjE,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,YAAqB,CAAC;AAE5B,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,IAAI,GAAG,KAAK;AAChD,UAAM,UAAU,SAAS,CAAC;AAC1B,UAAM,MAAM,QAAQ;AAEpB,UAAM,IAAI,IAAI,SAAS;AAEvB,QAAI,IAAI,GAAG;AACV,gBAAU,KAAK,wBAAM,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AAAA,IAC/C,OAAO;AACN,gBAAU,KAAK,IAAI,CAAC,CAAC;AAAA,IACtB;AAEA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,gBAAU,KAAK,IAAI,CAAC,CAAC;AAAA,IACtB;AAEA,QAAI,IAAI,IAAI,GAAG;AACd,gBAAU,KAAK,wBAAM,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AAAA,IACnD,OAAO;AACN,gBAAU,KAAK,IAAI,CAAC,CAAC;AAAA,IACtB;AAAA,EACD;AAEA,SAAO;AACR;AAEO,SAAS,2BAA2B,aAAqB;AAC/D,SAAO;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,MAAM;AAAA,EACP;AACD;AAEO,SAAS,4BAA4B,aAAqB;AAChE,SAAO;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,MAAM;AAAA,EACP;AACD;AAEO,SAAS,oBACf,OACA,QACA,aACC;AACD,QAAM,SAAS,cAAc,MAAM;AAEnC,QAAM,UAAU,2BAA2B,WAAW;AAEtD,aAAO,mCAAgB,QAAQ,OAAO;AACvC;AAEO,SAAS,+BACf,OACA,QACA,aACC;AACD,QAAM,UAAU,2BAA2B,WAAW;AACtD,aAAO;AAAA,QACN,uCAAoB,oBAAoB,OAAO,QAAQ,WAAW,GAAG,OAAO;AAAA,IAC5E;AAAA,EACD;AACD;AAEO,SAAS,gCACf,OACA,QACA,aACC;AACD,QAAM,UAAU,4BAA4B,WAAW;AACvD,aAAO,0CAAuB,oBAAoB,OAAO,QAAQ,WAAW,GAAG,OAAO;AACvF;AAEO,SAAS,gBACf,OACA,QACA,aACC;AACD,QAAM,SAAS,+BAA+B,OAAO,QAAQ,WAAW;AACxE,aAAO,iCAAqB,MAAM;AACnC;AAEO,SAAS,iBACf,OACA,QACA,aACC;AACD,QAAM,gBAAgB,gCAAgC,OAAO,QAAQ,WAAW;AAChF,aAAO,iCAAqB,aAAa;AAC1C;AAEO,SAAS,qBACf,OACA,QACA,aACC;AACD,MAAI,MAAM,MAAM,SAAS,QAAQ;AAChC,UAAM,eAAe,oBAAoB,OAAO,QAAQ,WAAW;AACnE,eAAO,uCAA2B,YAAY;AAAA,EAC/C;AAEA,SAAO,OAAO;AACf;",
  "names": []
}
