{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/tools/EraserTool/children/Erasing.ts"],
  "sourcesContent": ["import { pointInPolygon } from '@tldraw/primitives'\nimport { TLScribble, TLShapeId } from '@tldraw/tlschema'\nimport { ScribbleManager } from '../../../managers/ScribbleManager'\nimport { FrameShapeUtil } from '../../../shapes/frame/FrameShapeUtil'\nimport { GroupShapeUtil } from '../../../shapes/group/GroupShapeUtil'\nimport { TLEventHandlers, TLPointerEventInfo } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\n\nexport class Erasing extends StateNode {\n\tstatic override id = 'erasing'\n\n\tprivate info = {} as TLPointerEventInfo\n\tprivate scribble = {} as ScribbleManager\n\tprivate markId = ''\n\tprivate excludedShapeIds = new Set<TLShapeId>()\n\n\toverride onEnter = (info: TLPointerEventInfo) => {\n\t\tthis.markId = this.editor.mark('erase scribble begin')\n\t\tthis.info = info\n\n\t\tconst { originPagePoint } = this.editor.inputs\n\t\tthis.excludedShapeIds = new Set(\n\t\t\tthis.editor.shapesArray\n\t\t\t\t.filter(\n\t\t\t\t\t(shape) =>\n\t\t\t\t\t\tthis.editor.isShapeOrAncestorLocked(shape) ||\n\t\t\t\t\t\t((this.editor.isShapeOfType(shape, GroupShapeUtil) ||\n\t\t\t\t\t\t\tthis.editor.isShapeOfType(shape, FrameShapeUtil)) &&\n\t\t\t\t\t\t\tthis.editor.isPointInShape(originPagePoint, shape))\n\t\t\t\t)\n\t\t\t\t.map((shape) => shape.id)\n\t\t)\n\n\t\tthis.startScribble()\n\t\tthis.update()\n\t}\n\n\tprivate startScribble = () => {\n\t\tif (this.scribble.tick) {\n\t\t\tthis.editor.off('tick', this.scribble?.tick)\n\t\t}\n\n\t\tthis.scribble = new ScribbleManager({\n\t\t\tonUpdate: this.onScribbleUpdate,\n\t\t\tonComplete: this.onScribbleComplete,\n\t\t\tcolor: 'muted-1',\n\t\t\tsize: 12,\n\t\t})\n\n\t\tthis.editor.on('tick', this.scribble.tick)\n\t}\n\n\tprivate pushPointToScribble = () => {\n\t\tconst { x, y } = this.editor.inputs.currentPagePoint\n\t\tthis.scribble.addPoint(x, y)\n\t}\n\n\tprivate onScribbleUpdate = (scribble: TLScribble) => {\n\t\tthis.editor.setScribble(scribble)\n\t}\n\n\tprivate onScribbleComplete = () => {\n\t\tthis.editor.off('tick', this.scribble.tick)\n\t\tthis.editor.setScribble(null)\n\t}\n\n\toverride onExit = () => {\n\t\tthis.scribble.stop()\n\t}\n\n\toverride onPointerMove = () => {\n\t\tthis.update()\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\tupdate() {\n\t\tconst {\n\t\t\tshapesArray,\n\t\t\terasingIdsSet,\n\t\t\tinputs: { currentPagePoint, previousPagePoint },\n\t\t} = this.editor\n\n\t\tconst { excludedShapeIds } = this\n\n\t\tthis.pushPointToScribble()\n\n\t\tconst erasing = new Set<TLShapeId>(erasingIdsSet)\n\n\t\tfor (const shape of shapesArray) {\n\t\t\tif (this.editor.isShapeOfType(shape, GroupShapeUtil)) continue\n\n\t\t\t// Avoid testing masked shapes, unless the pointer is inside the mask\n\t\t\tconst pageMask = this.editor.getPageMaskById(shape.id)\n\t\t\tif (pageMask && !pointInPolygon(currentPagePoint, pageMask)) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Hit test the shape using a line segment\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst A = this.editor.getPointInShapeSpace(shape, previousPagePoint)\n\t\t\tconst B = this.editor.getPointInShapeSpace(shape, currentPagePoint)\n\n\t\t\t// If it's a hit, erase the outermost selectable shape\n\t\t\tif (util.hitTestLineSegment(shape, A, B)) {\n\t\t\t\terasing.add(this.editor.getOutermostSelectableShape(shape).id)\n\t\t\t}\n\t\t}\n\n\t\t// Remove the hit shapes, except if they're in the list of excluded shapes\n\t\t// (these excluded shapes will be any frames or groups the pointer was inside of\n\t\t// when the user started erasing)\n\t\tthis.editor.setErasingIds([...erasing].filter((id) => !excludedShapeIds.has(id)))\n\t}\n\n\tcomplete() {\n\t\tthis.editor.deleteShapes(this.editor.pageState.erasingIds)\n\t\tthis.editor.setErasingIds([])\n\t\tthis.parent.transition('idle', {})\n\t}\n\n\tcancel() {\n\t\tthis.editor.setErasingIds([])\n\t\tthis.editor.bailToMark(this.markId)\n\t\tthis.parent.transition('idle', this.info)\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,sBAAsB;AAE/B,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAE/B,SAAS,iBAAiB;AAEnB,MAAM,gBAAgB,UAAU;AAAA,EACtC,OAAgB,KAAK;AAAA,EAEb,OAAO,CAAC;AAAA,EACR,WAAW,CAAC;AAAA,EACZ,SAAS;AAAA,EACT,mBAAmB,oBAAI,IAAe;AAAA,EAErC,UAAU,CAAC,SAA6B;AAChD,SAAK,SAAS,KAAK,OAAO,KAAK,sBAAsB;AACrD,SAAK,OAAO;AAEZ,UAAM,EAAE,gBAAgB,IAAI,KAAK,OAAO;AACxC,SAAK,mBAAmB,IAAI;AAAA,MAC3B,KAAK,OAAO,YACV;AAAA,QACA,CAAC,UACA,KAAK,OAAO,wBAAwB,KAAK,MACvC,KAAK,OAAO,cAAc,OAAO,cAAc,KAChD,KAAK,OAAO,cAAc,OAAO,cAAc,MAC/C,KAAK,OAAO,eAAe,iBAAiB,KAAK;AAAA,MACpD,EACC,IAAI,CAAC,UAAU,MAAM,EAAE;AAAA,IAC1B;AAEA,SAAK,cAAc;AACnB,SAAK,OAAO;AAAA,EACb;AAAA,EAEQ,gBAAgB,MAAM;AAC7B,QAAI,KAAK,SAAS,MAAM;AACvB,WAAK,OAAO,IAAI,QAAQ,KAAK,UAAU,IAAI;AAAA,IAC5C;AAEA,SAAK,WAAW,IAAI,gBAAgB;AAAA,MACnC,UAAU,KAAK;AAAA,MACf,YAAY,KAAK;AAAA,MACjB,OAAO;AAAA,MACP,MAAM;AAAA,IACP,CAAC;AAED,SAAK,OAAO,GAAG,QAAQ,KAAK,SAAS,IAAI;AAAA,EAC1C;AAAA,EAEQ,sBAAsB,MAAM;AACnC,UAAM,EAAE,GAAG,EAAE,IAAI,KAAK,OAAO,OAAO;AACpC,SAAK,SAAS,SAAS,GAAG,CAAC;AAAA,EAC5B;AAAA,EAEQ,mBAAmB,CAAC,aAAyB;AACpD,SAAK,OAAO,YAAY,QAAQ;AAAA,EACjC;AAAA,EAEQ,qBAAqB,MAAM;AAClC,SAAK,OAAO,IAAI,QAAQ,KAAK,SAAS,IAAI;AAC1C,SAAK,OAAO,YAAY,IAAI;AAAA,EAC7B;AAAA,EAES,SAAS,MAAM;AACvB,SAAK,SAAS,KAAK;AAAA,EACpB;AAAA,EAES,gBAAgB,MAAM;AAC9B,SAAK,OAAO;AAAA,EACb;AAAA,EAES,cAA8C,MAAM;AAC5D,SAAK,SAAS;AAAA,EACf;AAAA,EAES,WAAwC,MAAM;AACtD,SAAK,OAAO;AAAA,EACb;AAAA,EAES,aAA4C,MAAM;AAC1D,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,SAAS;AACR,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA,QAAQ,EAAE,kBAAkB,kBAAkB;AAAA,IAC/C,IAAI,KAAK;AAET,UAAM,EAAE,iBAAiB,IAAI;AAE7B,SAAK,oBAAoB;AAEzB,UAAM,UAAU,IAAI,IAAe,aAAa;AAEhD,eAAW,SAAS,aAAa;AAChC,UAAI,KAAK,OAAO,cAAc,OAAO,cAAc;AAAG;AAGtD,YAAM,WAAW,KAAK,OAAO,gBAAgB,MAAM,EAAE;AACrD,UAAI,YAAY,CAAC,eAAe,kBAAkB,QAAQ,GAAG;AAC5D;AAAA,MACD;AAGA,YAAM,OAAO,KAAK,OAAO,aAAa,KAAK;AAC3C,YAAM,IAAI,KAAK,OAAO,qBAAqB,OAAO,iBAAiB;AACnE,YAAM,IAAI,KAAK,OAAO,qBAAqB,OAAO,gBAAgB;AAGlE,UAAI,KAAK,mBAAmB,OAAO,GAAG,CAAC,GAAG;AACzC,gBAAQ,IAAI,KAAK,OAAO,4BAA4B,KAAK,EAAE,EAAE;AAAA,MAC9D;AAAA,IACD;AAKA,SAAK,OAAO,cAAc,CAAC,GAAG,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC;AAAA,EACjF;AAAA,EAEA,WAAW;AACV,SAAK,OAAO,aAAa,KAAK,OAAO,UAAU,UAAU;AACzD,SAAK,OAAO,cAAc,CAAC,CAAC;AAC5B,SAAK,OAAO,WAAW,QAAQ,CAAC,CAAC;AAAA,EAClC;AAAA,EAEA,SAAS;AACR,SAAK,OAAO,cAAc,CAAC,CAAC;AAC5B,SAAK,OAAO,WAAW,KAAK,MAAM;AAClC,SAAK,OAAO,WAAW,QAAQ,KAAK,IAAI;AAAA,EACzC;AACD;",
  "names": []
}
