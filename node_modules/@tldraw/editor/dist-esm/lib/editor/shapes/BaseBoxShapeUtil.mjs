import { Box2d, linesIntersect, pointInPolygon, Vec2d } from "@tldraw/primitives";
import { ShapeUtil } from "./ShapeUtil.mjs";
import { resizeBox } from "./shared/resizeBox.mjs";
class BaseBoxShapeUtil extends ShapeUtil {
  getBounds(shape) {
    return new Box2d(0, 0, shape.props.w, shape.props.h);
  }
  getCenter(shape) {
    return new Vec2d(shape.props.w / 2, shape.props.h / 2);
  }
  getOutline(shape) {
    return this.bounds(shape).corners;
  }
  hitTestPoint(shape, point) {
    return pointInPolygon(point, this.outline(shape));
  }
  hitTestLineSegment(shape, A, B) {
    const outline = this.outline(shape);
    for (let i = 0; i < outline.length; i++) {
      const C = outline[i];
      const D = outline[(i + 1) % outline.length];
      if (linesIntersect(A, B, C, D))
        return true;
    }
    return false;
  }
  onResize = (shape, info) => {
    return resizeBox(shape, info);
  };
}
export {
  BaseBoxShapeUtil
};
//# sourceMappingURL=BaseBoxShapeUtil.mjs.map
