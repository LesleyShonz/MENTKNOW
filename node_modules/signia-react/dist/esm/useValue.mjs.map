{
  "version": 3,
  "sources": ["../../src/useValue.ts"],
  "sourcesContent": ["/* eslint-disable prefer-rest-params */\nimport { useMemo, useSyncExternalStore } from 'react'\nimport { computed, react, Signal } from 'signia'\n\n/**\n * Extracts the value from a signal and subscribes to it.\n *\n * Note that you do not need to use this hook if you are doing one of the following:\n *   - Wrapping the component with [[track]],\n * \t - Installing the jsx integration with [[signia-react-jsx.install]]\n *\n * @example\n * ```ts\n * const Counter: React.FC = () => {\n *   const $count = useAtom('count', 0)\n *   const increment = useCallback(() => $count.set($count.value + 1), [count])\n *   const currentCount = useValue($count)\n *   return <button onClick={increment}>{currentCount}</button>\n * }\n * ```\n *\n * You can also pass a function to compute the value and it will be memoized as in [[useComputed]]:\n *\n * @example\n * ```ts\n * type GreeterProps = {\n *   firstName: Signal<string>\n *   lastName: Signal<string>\n * }\n *\n * const Greeter = track(function Greeter({ firstName, lastName }: GreeterProps) {\n *   const fullName = useValue('fullName', () => `${firstName.value} ${lastName.value}`, [\n *     firstName,\n *     lastName,\n *   ])\n *   return <div>Hello {fullName}!</div>\n * })\n * ```\n *\n * @public\n */\nexport function useValue<Value>(value: Signal<Value>): Value\n/** @public */\nexport function useValue<Value>(name: string, fn: () => Value, deps: unknown[]): Value\n/** @public */\nexport function useValue() {\n\tconst args = arguments\n\t// deps will be either the computed or the deps array\n\tconst deps = args.length === 3 ? args[2] : [args[0]]\n\tconst name = args.length === 3 ? args[0] : `useValue(${args[0].name})`\n\tconst $val = useMemo(() => {\n\t\tif (args.length === 1) {\n\t\t\treturn args[0]\n\t\t}\n\t\treturn computed(name, args[1])\n\t}, deps)\n\n\tconst { subscribe, getSnapshot } = useMemo(() => {\n\t\treturn {\n\t\t\tsubscribe: (listen: () => void) => {\n\t\t\t\treturn react(`useValue(${name})`, () => {\n\t\t\t\t\t$val.value\n\t\t\t\t\tlisten()\n\t\t\t\t})\n\t\t\t},\n\t\t\tgetSnapshot: () => $val.value,\n\t\t}\n\t}, [$val])\n\n\treturn useSyncExternalStore(subscribe, getSnapshot, getSnapshot)\n}\n"],
  "mappings": ";AACA,SAAS,SAAS,4BAA4B;AAC9C,SAAS,UAAU,aAAqB;AA2CjC,SAAS,WAAW;AAC1B,QAAM,OAAO;AAEb,QAAM,OAAO,KAAK,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACnD,QAAM,OAAO,KAAK,WAAW,IAAI,KAAK,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE;AAC/D,QAAM,OAAO,QAAQ,MAAM;AAC1B,QAAI,KAAK,WAAW,GAAG;AACtB,aAAO,KAAK,CAAC;AAAA,IACd;AACA,WAAO,SAAS,MAAM,KAAK,CAAC,CAAC;AAAA,EAC9B,GAAG,IAAI;AAEP,QAAM,EAAE,WAAW,YAAY,IAAI,QAAQ,MAAM;AAChD,WAAO;AAAA,MACN,WAAW,CAAC,WAAuB;AAClC,eAAO,MAAM,YAAY,SAAS,MAAM;AACvC,eAAK;AACL,iBAAO;AAAA,QACR,CAAC;AAAA,MACF;AAAA,MACA,aAAa,MAAM,KAAK;AAAA,IACzB;AAAA,EACD,GAAG,CAAC,IAAI,CAAC;AAET,SAAO,qBAAqB,WAAW,aAAa,WAAW;AAChE;",
  "names": []
}
