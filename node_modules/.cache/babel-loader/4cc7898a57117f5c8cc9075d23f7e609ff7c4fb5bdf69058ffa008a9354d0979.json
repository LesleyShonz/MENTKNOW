{"ast":null,"code":"import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { perimeterOfEllipse, toDomPrecision } from \"@tldraw/primitives\";\nimport * as React from \"react\";\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from \"../../shared/ShapeFill.mjs\";\nimport { getPerfectDashProps } from \"../../shared/getPerfectDashProps.mjs\";\nvar DashStyleEllipse = React.memo(function DashStyleEllipse2(_ref) {\n  var w = _ref.w,\n    h = _ref.h,\n    sw = _ref.strokeWidth,\n    dash = _ref.dash,\n    color = _ref.color,\n    fill = _ref.fill;\n  var cx = w / 2;\n  var cy = h / 2;\n  var rx = Math.max(0, cx - sw / 2);\n  var ry = Math.max(0, cy - sw / 2);\n  var perimeter = perimeterOfEllipse(rx, ry);\n  var _getPerfectDashProps = getPerfectDashProps(perimeter < 64 ? perimeter * 2 : perimeter, sw, {\n      style: dash,\n      snap: 4,\n      closed: true\n    }),\n    strokeDasharray = _getPerfectDashProps.strokeDasharray,\n    strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n  var d = \"M\".concat(cx - rx, \",\").concat(cy, \"a\").concat(rx, \",\").concat(ry, \",0,1,1,\").concat(rx * 2, \",0a\").concat(rx, \",\").concat(ry, \",0,1,1,-\").concat(rx * 2, \",0\");\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ShapeFill, {\n      d: d,\n      color: color,\n      fill: fill\n    }), /* @__PURE__ */jsx(\"path\", {\n      d: d,\n      strokeWidth: sw,\n      width: toDomPrecision(w),\n      height: toDomPrecision(h),\n      fill: \"none\",\n      stroke: \"var(--palette-\".concat(color, \")\"),\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: strokeDashoffset,\n      pointerEvents: \"all\"\n    })]\n  });\n});\nfunction DashStyleEllipseSvg(_ref2) {\n  var w = _ref2.w,\n    h = _ref2.h,\n    sw = _ref2.strokeWidth,\n    dash = _ref2.dash,\n    color = _ref2.color,\n    colors = _ref2.colors,\n    fill = _ref2.fill;\n  var cx = w / 2;\n  var cy = h / 2;\n  var rx = Math.max(0, cx - sw / 2);\n  var ry = Math.max(0, cy - sw / 2);\n  var perimeter = perimeterOfEllipse(rx, ry);\n  var _getPerfectDashProps2 = getPerfectDashProps(perimeter < 64 ? perimeter * 2 : perimeter, sw, {\n      style: dash,\n      snap: 4,\n      closed: true\n    }),\n    strokeDasharray = _getPerfectDashProps2.strokeDasharray,\n    strokeDashoffset = _getPerfectDashProps2.strokeDashoffset;\n  var d = \"M\".concat(cx - rx, \",\").concat(cy, \"a\").concat(rx, \",\").concat(ry, \",0,1,1,\").concat(rx * 2, \",0a\").concat(rx, \",\").concat(ry, \",0,1,1,-\").concat(rx * 2, \",0\");\n  var strokeElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  strokeElement.setAttribute(\"d\", d);\n  strokeElement.setAttribute(\"stroke-width\", sw.toString());\n  strokeElement.setAttribute(\"width\", w.toString());\n  strokeElement.setAttribute(\"height\", h.toString());\n  strokeElement.setAttribute(\"fill\", \"none\");\n  strokeElement.setAttribute(\"stroke\", colors.fill[color]);\n  strokeElement.setAttribute(\"stroke-dasharray\", strokeDasharray);\n  strokeElement.setAttribute(\"stroke-dashoffset\", strokeDashoffset);\n  var fillElement = getShapeFillSvg({\n    d: d,\n    fill: fill,\n    color: color,\n    colors: colors\n  });\n  return getSvgWithShapeFill(strokeElement, fillElement);\n}\nexport { DashStyleEllipse, DashStyleEllipseSvg };","map":{"version":3,"names":["Fragment","jsx","jsxs","perimeterOfEllipse","toDomPrecision","React","ShapeFill","getShapeFillSvg","getSvgWithShapeFill","getPerfectDashProps","DashStyleEllipse","memo","DashStyleEllipse2","_ref","w","h","sw","strokeWidth","dash","color","fill","cx","cy","rx","Math","max","ry","perimeter","_getPerfectDashProps","style","snap","closed","strokeDasharray","strokeDashoffset","d","concat","children","width","height","stroke","pointerEvents","DashStyleEllipseSvg","_ref2","colors","_getPerfectDashProps2","strokeElement","document","createElementNS","setAttribute","toString","fillElement"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/geo/components/DashStyleEllipse.tsx"],"sourcesContent":["import { perimeterOfEllipse, toDomPrecision } from '@tldraw/primitives'\nimport { TLGeoShape, TLShapeId } from '@tldraw/tlschema'\nimport * as React from 'react'\nimport { ShapeFill, getShapeFillSvg, getSvgWithShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\nimport { getPerfectDashProps } from '../../shared/getPerfectDashProps'\n\nexport const DashStyleEllipse = React.memo(function DashStyleEllipse({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tdash,\n\tcolor,\n\tfill,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'dash' | 'color' | 'fill'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n}) {\n\tconst cx = w / 2\n\tconst cy = h / 2\n\tconst rx = Math.max(0, cx - sw / 2)\n\tconst ry = Math.max(0, cy - sw / 2)\n\n\tconst perimeter = perimeterOfEllipse(rx, ry)\n\n\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\tperimeter < 64 ? perimeter * 2 : perimeter,\n\t\tsw,\n\t\t{\n\t\t\tstyle: dash,\n\t\t\tsnap: 4,\n\t\t\tclosed: true,\n\t\t}\n\t)\n\n\tconst d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={d} color={color} fill={fill} />\n\t\t\t<path\n\t\t\t\td={d}\n\t\t\t\tstrokeWidth={sw}\n\t\t\t\twidth={toDomPrecision(w)}\n\t\t\t\theight={toDomPrecision(h)}\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\tpointerEvents=\"all\"\n\t\t\t/>\n\t\t</>\n\t)\n})\n\nexport function DashStyleEllipseSvg({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tdash,\n\tcolor,\n\tcolors,\n\tfill,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'dash' | 'color' | 'fill'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n\tcolors: TLExportColors\n}) {\n\tconst cx = w / 2\n\tconst cy = h / 2\n\tconst rx = Math.max(0, cx - sw / 2)\n\tconst ry = Math.max(0, cy - sw / 2)\n\n\tconst perimeter = perimeterOfEllipse(rx, ry)\n\n\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\tperimeter < 64 ? perimeter * 2 : perimeter,\n\t\tsw,\n\t\t{\n\t\t\tstyle: dash,\n\t\t\tsnap: 4,\n\t\t\tclosed: true,\n\t\t}\n\t)\n\n\tconst d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`\n\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', d)\n\tstrokeElement.setAttribute('stroke-width', sw.toString())\n\tstrokeElement.setAttribute('width', w.toString())\n\tstrokeElement.setAttribute('height', h.toString())\n\tstrokeElement.setAttribute('fill', 'none')\n\tstrokeElement.setAttribute('stroke', colors.fill[color])\n\tstrokeElement.setAttribute('stroke-dasharray', strokeDasharray)\n\tstrokeElement.setAttribute('stroke-dashoffset', strokeDashoffset)\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td,\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}