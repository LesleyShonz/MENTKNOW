"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Rotating_exports = {};
__export(Rotating_exports, {
  Rotating: () => Rotating
});
module.exports = __toCommonJS(Rotating_exports);
var import_primitives = require("@tldraw/primitives");
var import_rotation = require("../../../../utils/rotation");
var import_StateNode = require("../../StateNode");
var import_PointingResizeHandle = require("./PointingResizeHandle");
class Rotating extends import_StateNode.StateNode {
  static id = "rotating";
  snapshot = {};
  info = {};
  markId = "";
  onEnter = (info) => {
    this.info = info;
    this.markId = this.editor.mark("rotate start");
    this.snapshot = (0, import_rotation.getRotationSnapshot)({ editor: this.editor });
    this.handleStart();
  };
  onExit = () => {
    this.editor.setCursor({ type: "none" });
    this.snapshot = {};
  };
  onPointerMove = () => {
    this.update();
  };
  onKeyDown = () => {
    this.update();
  };
  onKeyUp = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  // ---
  update = () => {
    const newSelectionRotation = this._getRotationFromPointerPosition({
      snapToNearestDegree: false
    });
    (0, import_rotation.applyRotationToSnapshotShapes)({
      editor: this.editor,
      delta: newSelectionRotation,
      snapshot: this.snapshot,
      stage: "update"
    });
    this.editor.setCursor({
      type: import_PointingResizeHandle.CursorTypeMap[this.info.handle],
      rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
    });
  };
  cancel = () => {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setSelectedTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("idle", this.info);
    }
  };
  complete = () => {
    (0, import_rotation.applyRotationToSnapshotShapes)({
      editor: this.editor,
      delta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),
      snapshot: this.snapshot,
      stage: "end"
    });
    if (this.info.onInteractionEnd) {
      this.editor.setSelectedTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("idle", this.info);
    }
  };
  handleStart() {
    const newSelectionRotation = this._getRotationFromPointerPosition({
      snapToNearestDegree: false
    });
    (0, import_rotation.applyRotationToSnapshotShapes)({
      editor: this.editor,
      delta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),
      snapshot: this.snapshot,
      stage: "start"
    });
    this.editor.setCursor({
      type: import_PointingResizeHandle.CursorTypeMap[this.info.handle],
      rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
    });
  }
  _getRotationFromPointerPosition({ snapToNearestDegree }) {
    const {
      selectionPageCenter,
      inputs: { shiftKey, currentPagePoint }
    } = this.editor;
    const { initialCursorAngle, initialSelectionRotation } = this.snapshot;
    const preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;
    let newSelectionRotation = initialSelectionRotation + preSnapRotationDelta;
    if (shiftKey) {
      newSelectionRotation = (0, import_primitives.snapAngle)(newSelectionRotation, 24);
    } else if (snapToNearestDegree) {
      newSelectionRotation = Math.round(newSelectionRotation / import_primitives.EPSILON) * import_primitives.EPSILON;
      if (this.editor.isCoarsePointer) {
        const snappedToRightAngle = (0, import_primitives.snapAngle)(newSelectionRotation, 4);
        const angleToRightAngle = (0, import_primitives.angleDelta)(newSelectionRotation, snappedToRightAngle);
        if (Math.abs(angleToRightAngle) < (0, import_primitives.degreesToRadians)(5)) {
          newSelectionRotation = snappedToRightAngle;
        }
      }
    }
    return newSelectionRotation - initialSelectionRotation;
  }
}
//# sourceMappingURL=Rotating.js.map
