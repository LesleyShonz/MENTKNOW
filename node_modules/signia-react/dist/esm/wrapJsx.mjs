// src/wrapJsx.ts
import { Component } from "react";
import { track } from "./track.mjs";
var ReactMemoType = Symbol.for("react.memo");
var ReactForwardRefType = Symbol.for("react.forward_ref");
var ProxyInstance = /* @__PURE__ */ new WeakMap();
function proxyFunctionalComponent(Component2) {
  const existing = ProxyInstance.get(Component2);
  if (existing)
    return existing;
  const tracked = track(Component2);
  ProxyInstance.set(Component2, tracked);
  return tracked;
}
function wrapJsx(jsx) {
  if (typeof jsx !== "function")
    return jsx;
  return function(type, props, ...rest) {
    if (typeof type === "function" && !(type instanceof Component)) {
      type = proxyFunctionalComponent(type);
    } else if (type && typeof type === "object") {
      if (type.$$typeof === ReactMemoType) {
        type = proxyFunctionalComponent(type.type);
      } else if (type.$$typeof === ReactForwardRefType) {
        type = proxyFunctionalComponent(type);
      }
    }
    return jsx.call(jsx, type, props, ...rest);
  };
}
export {
  wrapJsx
};
//# sourceMappingURL=wrapJsx.mjs.map
