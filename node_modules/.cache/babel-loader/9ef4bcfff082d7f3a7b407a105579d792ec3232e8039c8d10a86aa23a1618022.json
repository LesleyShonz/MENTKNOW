{"ast":null,"code":"function throttle(func, limit) {\n  var inThrottle;\n  var lastResult;\n  return function () {\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(function () {\n        return inThrottle = false;\n      }, limit);\n      lastResult = func.apply(void 0, arguments);\n    }\n    return lastResult;\n  };\n}\nfunction omitFromStackTrace(fn) {\n  var wrappedFn = function wrappedFn() {\n    try {\n      return fn.apply(void 0, arguments);\n    } catch (error) {\n      if (error instanceof Error && Error.captureStackTrace) {\n        Error.captureStackTrace(error, wrappedFn);\n      }\n      throw error;\n    }\n  };\n  return wrappedFn;\n}\nfunction noop() {}\nexport { noop, omitFromStackTrace, throttle };","map":{"version":3,"names":["throttle","func","limit","inThrottle","lastResult","setTimeout","apply","arguments","omitFromStackTrace","fn","wrappedFn","error","Error","captureStackTrace","noop"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/utils/src/lib/function.ts"],"sourcesContent":["/**\n * Throttle a function.\n *\n * @example\n *\n * ```ts\n * const A = throttle(myFunction, 1000)\n * ```\n *\n * @public\n * @see source - https://github.com/bameyrick/throttle-typescript\n */\nexport function throttle<T extends (...args: any) => any>(\n\tfunc: T,\n\tlimit: number\n): (...args: Parameters<T>) => ReturnType<T> {\n\tlet inThrottle: boolean\n\tlet lastResult: ReturnType<T>\n\treturn function (this: any, ...args: any[]): ReturnType<T> {\n\t\tif (!inThrottle) {\n\t\t\tinThrottle = true\n\t\t\tsetTimeout(() => (inThrottle = false), limit)\n\t\t\tlastResult = func(...args)\n\t\t}\n\t\treturn lastResult\n\t}\n}\n\n/**\n * When a function is wrapped in `omitFromStackTrace`, if it throws an error the stack trace won't\n * include the function itself or any stack frames above it. Useful for assertion-style function\n * where the error will ideally originate from the call-site rather than within the implementation\n * of the assert fn.\n *\n * Only works in platforms that support `Error.captureStackTrace` (ie v8).\n *\n * @internal\n */\nexport function omitFromStackTrace<Args extends Array<unknown>, Return>(\n\tfn: (...args: Args) => Return\n): (...args: Args) => Return {\n\tconst wrappedFn = (...args: Args) => {\n\t\ttry {\n\t\t\treturn fn(...args)\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error && Error.captureStackTrace) {\n\t\t\t\tError.captureStackTrace(error, wrappedFn)\n\t\t\t}\n\t\t\tthrow error\n\t\t}\n\t}\n\n\treturn wrappedFn\n}\n\n/**\n * Does nothing, but it's really really good at it.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop(): void {}\n"],"mappings":"AAYO,SAASA,SACfC,IAAA,EACAC,KAAA,EAC4C;EAC5C,IAAIC,UAAA;EACJ,IAAIC,UAAA;EACJ,OAAO,YAAoD;IAC1D,IAAI,CAACD,UAAA,EAAY;MAChBA,UAAA,GAAa;MACbE,UAAA,CAAW;QAAA,OAAOF,UAAA,GAAa;MAAA,GAAQD,KAAK;MAC5CE,UAAA,GAAaH,IAAA,CAAAK,KAAA,SAAAC,SAAY;IAC1B;IACA,OAAOH,UAAA;EACR;AACD;AAYO,SAASI,mBACfC,EAAA,EAC4B;EAC5B,IAAMC,SAAA,GAAY,SAAZA,UAAA,EAA+B;IACpC,IAAI;MACH,OAAOD,EAAA,CAAAH,KAAA,SAAAC,SAAU;IAClB,SAASI,KAAA,EAAP;MACD,IAAIA,KAAA,YAAiBC,KAAA,IAASA,KAAA,CAAMC,iBAAA,EAAmB;QACtDD,KAAA,CAAMC,iBAAA,CAAkBF,KAAA,EAAOD,SAAS;MACzC;MACA,MAAMC,KAAA;IACP;EACD;EAEA,OAAOD,SAAA;AACR;AAOO,SAASI,KAAA,EAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}