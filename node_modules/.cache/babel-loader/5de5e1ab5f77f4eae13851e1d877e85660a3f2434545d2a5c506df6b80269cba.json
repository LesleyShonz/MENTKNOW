{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { getIndexBetween, sortByIndex } from \"@tldraw/indices\";\nimport { CubicSpline2d, Polyline2d, Vec2d, getDrawLinePathData, intersectLineSegmentPolyline, pointNearToPolyline } from \"@tldraw/primitives\";\nimport { deepCopy } from \"@tldraw/utils\";\nimport { SVGContainer } from \"../../../components/SVGContainer.mjs\";\nimport { WeakMapCache } from \"../../../utils/WeakMapCache.mjs\";\nimport { ShapeUtil } from \"../ShapeUtil.mjs\";\nimport { ShapeFill } from \"../shared/ShapeFill.mjs\";\nimport { STROKE_SIZES } from \"../shared/default-shape-constants.mjs\";\nimport { getPerfectDashProps } from \"../shared/getPerfectDashProps.mjs\";\nimport { useForceSolid } from \"../shared/useForceSolid.mjs\";\nimport { getLineDrawPath, getLineIndicatorPath, getLinePoints } from \"./components/getLinePath.mjs\";\nimport { getLineSvg } from \"./components/getLineSvg.mjs\";\nvar splinesCache = new WeakMapCache();\nvar handlesCache = new WeakMapCache();\nvar LineShapeUtil = /*#__PURE__*/function (_ShapeUtil) {\n  _inherits(LineShapeUtil, _ShapeUtil);\n  var _super = _createSuper(LineShapeUtil);\n  function LineShapeUtil() {\n    var _this;\n    _classCallCheck(this, LineShapeUtil);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"hideResizeHandles\", function () {\n      return true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"hideRotateHandle\", function () {\n      return true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"hideSelectionBoundsBg\", function () {\n      return true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"hideSelectionBoundsFg\", function () {\n      return true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isClosed\", function () {\n      return false;\n    });\n    //   Events\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function (shape, info) {\n      var scaleX = info.scaleX,\n        scaleY = info.scaleY;\n      var handles = deepCopy(shape.props.handles);\n      Object.values(shape.props.handles).forEach(function (_ref) {\n        var id = _ref.id,\n          x = _ref.x,\n          y = _ref.y;\n        handles[id].x = x * scaleX;\n        handles[id].y = y * scaleY;\n      });\n      return {\n        props: {\n          handles: handles\n        }\n      };\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onHandleChange\", function (shape, _ref2) {\n      var handle = _ref2.handle;\n      var next = deepCopy(shape);\n      switch (handle.id) {\n        case \"start\":\n        case \"end\":\n          {\n            next.props.handles[handle.id] = _objectSpread(_objectSpread({}, next.props.handles[handle.id]), {}, {\n              x: handle.x,\n              y: handle.y\n            });\n            break;\n          }\n        default:\n          {\n            var id = \"handle:\" + handle.index;\n            var existing = shape.props.handles[id];\n            if (existing) {\n              next.props.handles[id] = _objectSpread(_objectSpread({}, existing), {}, {\n                x: handle.x,\n                y: handle.y\n              });\n            } else {\n              next.props.handles[id] = {\n                id: id,\n                type: \"vertex\",\n                canBind: false,\n                index: handle.index,\n                x: handle.x,\n                y: handle.y\n              };\n            }\n            break;\n          }\n      }\n      return next;\n    });\n    return _this;\n  }\n  _createClass(LineShapeUtil, [{\n    key: \"defaultProps\",\n    value: function defaultProps() {\n      return {\n        dash: \"draw\",\n        size: \"m\",\n        color: \"black\",\n        spline: \"line\",\n        handles: {\n          start: {\n            id: \"start\",\n            type: \"vertex\",\n            canBind: false,\n            index: \"a1\",\n            x: 0,\n            y: 0\n          },\n          end: {\n            id: \"end\",\n            type: \"vertex\",\n            canBind: false,\n            index: \"a2\",\n            x: 0,\n            y: 0\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(shape) {\n      var spline = getSplineForLineShape(shape);\n      return spline.bounds;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(shape) {\n      return this.bounds(shape).center;\n    }\n  }, {\n    key: \"getHandles\",\n    value: function getHandles(shape) {\n      return handlesCache.get(shape.props, function () {\n        var handles = shape.props.handles;\n        var spline = getSplineForLineShape(shape);\n        var sortedHandles = Object.values(handles).sort(sortByIndex);\n        var results = sortedHandles.slice();\n        for (var i = 0; i < spline.segments.length; i++) {\n          var segment = spline.segments[i];\n          var point = segment.midPoint;\n          var index = getIndexBetween(sortedHandles[i].index, sortedHandles[i + 1].index);\n          results.push({\n            id: \"mid-\".concat(i),\n            type: \"create\",\n            index: index,\n            x: point.x,\n            y: point.y\n          });\n        }\n        return results.sort(sortByIndex);\n      });\n    }\n  }, {\n    key: \"getOutline\",\n    value: function getOutline(shape) {\n      return getLinePoints(getSplineForLineShape(shape));\n    }\n  }, {\n    key: \"getOutlineSegments\",\n    value: function getOutlineSegments(shape) {\n      var spline = getSplineForLineShape(shape);\n      return shape.props.spline === \"cubic\" ? spline.segments.map(function (s) {\n        return s.lut;\n      }) : spline.segments.map(function (s) {\n        return [s.getPoint(0), s.getPoint(1)];\n      });\n    }\n  }, {\n    key: \"hitTestPoint\",\n    value: function hitTestPoint(shape, point) {\n      var zoomLevel = this.editor.zoomLevel;\n      var offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel;\n      return pointNearToPolyline(point, this.outline(shape), offsetDist);\n    }\n  }, {\n    key: \"hitTestLineSegment\",\n    value: function hitTestLineSegment(shape, A, B) {\n      return intersectLineSegmentPolyline(A, B, this.outline(shape)) !== null;\n    }\n  }, {\n    key: \"component\",\n    value: function component(shape) {\n      var forceSolid = useForceSolid();\n      var spline = getSplineForLineShape(shape);\n      var strokeWidth = STROKE_SIZES[shape.props.size];\n      var _shape$props = shape.props,\n        dash = _shape$props.dash,\n        color = _shape$props.color;\n      if (shape.props.spline === \"line\") {\n        if (dash === \"solid\") {\n          var outline = spline.points;\n          var pathData = \"M\" + outline[0] + \"L\" + outline.slice(1);\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: pathData,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"path\", {\n              d: pathData,\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              strokeWidth: strokeWidth,\n              fill: \"none\"\n            })]\n          });\n        }\n        if (dash === \"dashed\" || dash === \"dotted\") {\n          var _outline = spline.points;\n          var _pathData = \"M\" + _outline[0] + \"L\" + _outline.slice(1);\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: _pathData,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"g\", {\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              strokeWidth: strokeWidth,\n              children: spline.segments.map(function (segment, i) {\n                var _getPerfectDashProps = getPerfectDashProps(segment.length, strokeWidth, {\n                    style: dash,\n                    start: i > 0 ? \"outset\" : \"none\",\n                    end: i < spline.segments.length - 1 ? \"outset\" : \"none\"\n                  }),\n                  strokeDasharray = _getPerfectDashProps.strokeDasharray,\n                  strokeDashoffset = _getPerfectDashProps.strokeDashoffset;\n                return /* @__PURE__ */jsx(\"path\", {\n                  strokeDasharray: strokeDasharray,\n                  strokeDashoffset: strokeDashoffset,\n                  d: segment.path,\n                  fill: \"none\"\n                }, i);\n              })\n            })]\n          });\n        }\n        if (dash === \"draw\") {\n          var _outline2 = spline.points;\n          var _getDrawLinePathData = getDrawLinePathData(shape.id, _outline2, strokeWidth),\n            _getDrawLinePathData2 = _slicedToArray(_getDrawLinePathData, 2),\n            innerPathData = _getDrawLinePathData2[0],\n            outerPathData = _getDrawLinePathData2[1];\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: innerPathData,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"path\", {\n              d: outerPathData,\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              strokeWidth: strokeWidth,\n              fill: \"none\"\n            })]\n          });\n        }\n      }\n      if (shape.props.spline === \"cubic\") {\n        var splinePath = spline.path;\n        if (dash === \"solid\" || dash === \"draw\" && forceSolid) {\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: splinePath,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"path\", {\n              strokeWidth: strokeWidth,\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              fill: \"none\",\n              d: splinePath\n            })]\n          });\n        }\n        if (dash === \"dashed\" || dash === \"dotted\") {\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: splinePath,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"g\", {\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              strokeWidth: strokeWidth,\n              children: spline.segments.map(function (segment, i) {\n                var _getPerfectDashProps2 = getPerfectDashProps(segment.length, strokeWidth, {\n                    style: dash,\n                    start: i > 0 ? \"outset\" : \"none\",\n                    end: i < spline.segments.length - 1 ? \"outset\" : \"none\"\n                  }),\n                  strokeDasharray = _getPerfectDashProps2.strokeDasharray,\n                  strokeDashoffset = _getPerfectDashProps2.strokeDashoffset;\n                return /* @__PURE__ */jsx(\"path\", {\n                  strokeDasharray: strokeDasharray,\n                  strokeDashoffset: strokeDashoffset,\n                  d: segment.path,\n                  fill: \"none\"\n                }, i);\n              })\n            })]\n          });\n        }\n        if (dash === \"draw\") {\n          return /* @__PURE__ */jsxs(SVGContainer, {\n            id: shape.id,\n            children: [/* @__PURE__ */jsx(ShapeFill, {\n              d: splinePath,\n              fill: \"none\",\n              color: color\n            }), /* @__PURE__ */jsx(\"path\", {\n              d: getLineDrawPath(shape, spline, strokeWidth),\n              strokeWidth: 1,\n              stroke: \"var(--palette-\".concat(color, \")\"),\n              fill: \"var(--palette-\".concat(color, \")\")\n            })]\n          });\n        }\n      }\n    }\n  }, {\n    key: \"indicator\",\n    value: function indicator(shape) {\n      var strokeWidth = STROKE_SIZES[shape.props.size];\n      var spline = getSplineForLineShape(shape);\n      var dash = shape.props.dash;\n      var path;\n      if (shape.props.spline === \"line\") {\n        var outline = spline.points;\n        if (dash === \"solid\" || dash === \"dotted\" || dash === \"dashed\") {\n          path = \"M\" + outline[0] + \"L\" + outline.slice(1);\n        } else {\n          var _getDrawLinePathData3 = getDrawLinePathData(shape.id, outline, strokeWidth),\n            _getDrawLinePathData4 = _slicedToArray(_getDrawLinePathData3, 1),\n            innerPathData = _getDrawLinePathData4[0];\n          path = innerPathData;\n        }\n      } else {\n        path = getLineIndicatorPath(shape, spline, strokeWidth);\n      }\n      return /* @__PURE__ */jsx(\"path\", {\n        d: path\n      });\n    }\n  }, {\n    key: \"toSvg\",\n    value: function toSvg(shape, _font, colors) {\n      var _shape$props2 = shape.props,\n        _color = _shape$props2.color,\n        size = _shape$props2.size;\n      var color = colors.fill[_color];\n      var spline = getSplineForLineShape(shape);\n      return getLineSvg(shape, spline, color, STROKE_SIZES[size]);\n    }\n  }]);\n  return LineShapeUtil;\n}(ShapeUtil);\n_defineProperty(LineShapeUtil, \"type\", \"line\");\nfunction getSplineForLineShape(shape) {\n  return splinesCache.get(shape.props, function () {\n    var _shape$props3 = shape.props,\n      spline = _shape$props3.spline,\n      handles = _shape$props3.handles;\n    var handlePoints = Object.values(handles).sort(sortByIndex).map(Vec2d.From);\n    switch (spline) {\n      case \"cubic\":\n        {\n          return new CubicSpline2d(handlePoints, handlePoints.length === 2 ? 2 : 1.2, 20);\n        }\n      case \"line\":\n        {\n          return new Polyline2d(handlePoints);\n        }\n    }\n  });\n}\nexport { LineShapeUtil, getSplineForLineShape };","map":{"version":3,"names":["jsx","jsxs","getIndexBetween","sortByIndex","CubicSpline2d","Polyline2d","Vec2d","getDrawLinePathData","intersectLineSegmentPolyline","pointNearToPolyline","deepCopy","SVGContainer","WeakMapCache","ShapeUtil","ShapeFill","STROKE_SIZES","getPerfectDashProps","useForceSolid","getLineDrawPath","getLineIndicatorPath","getLinePoints","getLineSvg","splinesCache","handlesCache","LineShapeUtil","_ShapeUtil","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","shape","info","scaleX","scaleY","handles","props","Object","values","forEach","_ref","id","x","y","_ref2","handle","next","_objectSpread","index","existing","type","canBind","_createClass","key","value","defaultProps","dash","size","color","spline","start","end","getBounds","getSplineForLineShape","bounds","getCenter","center","getHandles","get","sortedHandles","sort","results","slice","i","segments","segment","point","midPoint","push","getOutline","getOutlineSegments","map","s","lut","getPoint","hitTestPoint","zoomLevel","editor","offsetDist","outline","hitTestLineSegment","A","B","component","forceSolid","strokeWidth","_shape$props","points","pathData","children","d","fill","stroke","_getPerfectDashProps","style","strokeDasharray","strokeDashoffset","path","_getDrawLinePathData","_getDrawLinePathData2","_slicedToArray","innerPathData","outerPathData","splinePath","_getPerfectDashProps2","indicator","_getDrawLinePathData3","_getDrawLinePathData4","toSvg","_font","colors","_shape$props2","_color","_shape$props3","handlePoints","From"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/line/LineShapeUtil.tsx"],"sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport { getIndexBetween, sortByIndex } from '@tldraw/indices'\nimport {\n\tCubicSpline2d,\n\tPolyline2d,\n\tVec2d,\n\tVecLike,\n\tgetDrawLinePathData,\n\tintersectLineSegmentPolyline,\n\tpointNearToPolyline,\n} from '@tldraw/primitives'\nimport { TLHandle, TLLineShape } from '@tldraw/tlschema'\nimport { deepCopy } from '@tldraw/utils'\nimport { SVGContainer } from '../../../components/SVGContainer'\nimport { WeakMapCache } from '../../../utils/WeakMapCache'\nimport { ShapeUtil, TLOnHandleChangeHandler, TLOnResizeHandler } from '../ShapeUtil'\nimport { ShapeFill } from '../shared/ShapeFill'\nimport { TLExportColors } from '../shared/TLExportColors'\nimport { STROKE_SIZES } from '../shared/default-shape-constants'\nimport { getPerfectDashProps } from '../shared/getPerfectDashProps'\nimport { useForceSolid } from '../shared/useForceSolid'\nimport { getLineDrawPath, getLineIndicatorPath, getLinePoints } from './components/getLinePath'\nimport { getLineSvg } from './components/getLineSvg'\n\nconst splinesCache = new WeakMapCache<TLLineShape['props'], CubicSpline2d | Polyline2d>()\nconst handlesCache = new WeakMapCache<TLLineShape['props'], TLHandle[]>()\n\n/** @public */\nexport class LineShapeUtil extends ShapeUtil<TLLineShape> {\n\tstatic override type = 'line' as const\n\n\toverride hideResizeHandles = () => true\n\toverride hideRotateHandle = () => true\n\toverride hideSelectionBoundsBg = () => true\n\toverride hideSelectionBoundsFg = () => true\n\toverride isClosed = () => false\n\n\toverride defaultProps(): TLLineShape['props'] {\n\t\treturn {\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tcolor: 'black',\n\t\t\tspline: 'line',\n\t\t\thandles: {\n\t\t\t\tstart: {\n\t\t\t\t\tid: 'start',\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tcanBind: false,\n\t\t\t\t\tindex: 'a1',\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t\tend: {\n\t\t\t\t\tid: 'end',\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tcanBind: false,\n\t\t\t\t\tindex: 'a2',\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\tgetBounds(shape: TLLineShape) {\n\t\t// todo: should we have min size?\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn spline.bounds\n\t}\n\n\tgetCenter(shape: TLLineShape) {\n\t\treturn this.bounds(shape).center\n\t}\n\n\tgetHandles(shape: TLLineShape) {\n\t\treturn handlesCache.get(shape.props, () => {\n\t\t\tconst handles = shape.props.handles\n\n\t\t\tconst spline = getSplineForLineShape(shape)\n\n\t\t\tconst sortedHandles = Object.values(handles).sort(sortByIndex)\n\t\t\tconst results = sortedHandles.slice()\n\n\t\t\t// Add \"create\" handles between each vertex handle\n\t\t\tfor (let i = 0; i < spline.segments.length; i++) {\n\t\t\t\tconst segment = spline.segments[i]\n\t\t\t\tconst point = segment.midPoint\n\t\t\t\tconst index = getIndexBetween(sortedHandles[i].index, sortedHandles[i + 1].index)\n\n\t\t\t\tresults.push({\n\t\t\t\t\tid: `mid-${i}`,\n\t\t\t\t\ttype: 'create',\n\t\t\t\t\tindex,\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y,\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn results.sort(sortByIndex)\n\t\t})\n\t}\n\n\tgetOutline(shape: TLLineShape) {\n\t\treturn getLinePoints(getSplineForLineShape(shape))\n\t}\n\n\tgetOutlineSegments(shape: TLLineShape) {\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn shape.props.spline === 'cubic'\n\t\t\t? spline.segments.map((s) => s.lut)\n\t\t\t: spline.segments.map((s) => [s.getPoint(0), s.getPoint(1)])\n\t}\n\n\t//   Events\n\n\tonResize: TLOnResizeHandler<TLLineShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst handles = deepCopy(shape.props.handles)\n\n\t\tObject.values(shape.props.handles).forEach(({ id, x, y }) => {\n\t\t\thandles[id].x = x * scaleX\n\t\t\thandles[id].y = y * scaleY\n\t\t})\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\thandles,\n\t\t\t},\n\t\t}\n\t}\n\n\tonHandleChange: TLOnHandleChangeHandler<TLLineShape> = (shape, { handle }) => {\n\t\tconst next = deepCopy(shape)\n\n\t\tswitch (handle.id) {\n\t\t\tcase 'start':\n\t\t\tcase 'end': {\n\t\t\t\tnext.props.handles[handle.id] = {\n\t\t\t\t\t...next.props.handles[handle.id],\n\t\t\t\t\tx: handle.x,\n\t\t\t\t\ty: handle.y,\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst id = 'handle:' + handle.index\n\t\t\t\tconst existing = shape.props.handles[id]\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tnext.props.handles[id] = {\n\t\t\t\t\t\t...existing,\n\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnext.props.handles[id] = {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\tcanBind: false,\n\t\t\t\t\t\tindex: handle.index,\n\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn next\n\t}\n\n\thitTestPoint(shape: TLLineShape, point: Vec2d): boolean {\n\t\tconst zoomLevel = this.editor.zoomLevel\n\t\tconst offsetDist = STROKE_SIZES[shape.props.size] / zoomLevel\n\t\treturn pointNearToPolyline(point, this.outline(shape), offsetDist)\n\t}\n\n\thitTestLineSegment(shape: TLLineShape, A: VecLike, B: VecLike): boolean {\n\t\treturn intersectLineSegmentPolyline(A, B, this.outline(shape)) !== null\n\t}\n\n\tcomponent(shape: TLLineShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst spline = getSplineForLineShape(shape)\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\tconst { dash, color } = shape.props\n\n\t\t// Line style lines\n\t\tif (shape.props.spline === 'line') {\n\t\t\tif (dash === 'solid') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={pathData}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<g stroke={`var(--palette-${color})`} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={segment.path}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={innerPathData} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={outerPathData}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\t// Cubic style spline\n\t\tif (shape.props.spline === 'cubic') {\n\t\t\tconst splinePath = spline.path\n\n\t\t\tif (dash === 'solid' || (dash === 'draw' && forceSolid)) {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\td={splinePath}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<g stroke={`var(--palette-${color})`} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={segment.path}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={getLineDrawPath(shape, spline, strokeWidth)}\n\t\t\t\t\t\t\tstrokeWidth={1}\n\t\t\t\t\t\t\tstroke={`var(--palette-${color})`}\n\t\t\t\t\t\t\tfill={`var(--palette-${color})`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tindicator(shape: TLLineShape) {\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst spline = getSplineForLineShape(shape)\n\t\tconst { dash } = shape.props\n\n\t\tlet path: string\n\n\t\tif (shape.props.spline === 'line') {\n\t\t\tconst outline = spline.points\n\t\t\tif (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {\n\t\t\t\tpath = 'M' + outline[0] + 'L' + outline.slice(1)\n\t\t\t} else {\n\t\t\t\tconst [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\t\t\t\tpath = innerPathData\n\t\t\t}\n\t\t} else {\n\t\t\tpath = getLineIndicatorPath(shape, spline, strokeWidth)\n\t\t}\n\n\t\treturn <path d={path} />\n\t}\n\n\ttoSvg(shape: TLLineShape, _font: string, colors: TLExportColors) {\n\t\tconst { color: _color, size } = shape.props\n\t\tconst color = colors.fill[_color]\n\t\tconst spline = getSplineForLineShape(shape)\n\t\treturn getLineSvg(shape, spline, color, STROKE_SIZES[size])\n\t}\n}\n\n/** @public */\nexport function getSplineForLineShape(shape: TLLineShape) {\n\treturn splinesCache.get(shape.props, () => {\n\t\tconst { spline, handles } = shape.props\n\n\t\tconst handlePoints = Object.values(handles).sort(sortByIndex).map(Vec2d.From)\n\n\t\tswitch (spline) {\n\t\t\tcase 'cubic': {\n\t\t\t\treturn new CubicSpline2d(handlePoints, handlePoints.length === 2 ? 2 : 1.2, 20)\n\t\t\t}\n\t\t\tcase 'line': {\n\t\t\t\treturn new Polyline2d(handlePoints)\n\t\t\t}\n\t\t}\n\t})\n}\n"],"mappings":";;;;;;;;AAqMK,SACCA,GAAA,EADDC,IAAA;AApML,SAASC,eAAA,EAAiBC,WAAA,QAAmB;AAC7C,SACCC,aAAA,EACAC,UAAA,EACAC,KAAA,EAEAC,mBAAA,EACAC,4BAAA,EACAC,mBAAA,QACM;AAEP,SAASC,QAAA,QAAgB;AACzB,SAASC,YAAA,QAAoB;AAC7B,SAASC,YAAA,QAAoB;AAC7B,SAASC,SAAA,QAA6D;AACtE,SAASC,SAAA,QAAiB;AAE1B,SAASC,YAAA,QAAoB;AAC7B,SAASC,mBAAA,QAA2B;AACpC,SAASC,aAAA,QAAqB;AAC9B,SAASC,eAAA,EAAiBC,oBAAA,EAAsBC,aAAA,QAAqB;AACrE,SAASC,UAAA,QAAkB;AAE3B,IAAMC,YAAA,GAAe,IAAIV,YAAA,CAA+D;AACxF,IAAMW,YAAA,GAAe,IAAIX,YAAA,CAA+C;AAAA,IAG3DY,aAAA,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EAAA,SAAAA,cAAA;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,aAAA;IAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAAP,KAAA,GAAAF,MAAA,CAAAU,IAAA,CAAAC,KAAA,CAAAX,MAAA,SAAAY,MAAA,CAAAL,IAAA;IAAAM,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,wBAGiB;MAAA,OAAM;IAAA;IAAAW,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,uBACP;MAAA,OAAM;IAAA;IAAAW,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,4BACD;MAAA,OAAM;IAAA;IAAAW,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,4BACN;MAAA,OAAM;IAAA;IAAAW,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,eACnB;MAAA,OAAM;IAAA;IA2E1B;IAAAW,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,eAI2C,UAACa,KAAA,EAAOC,IAAA,EAAS;MAC3D,IAAQC,MAAA,GAAmBD,IAAA,CAAnBC,MAAA;QAAQC,MAAA,GAAWF,IAAA,CAAXE,MAAA;MAEhB,IAAMC,OAAA,GAAUpC,QAAA,CAASgC,KAAA,CAAMK,KAAA,CAAMD,OAAO;MAE5CE,MAAA,CAAOC,MAAA,CAAOP,KAAA,CAAMK,KAAA,CAAMD,OAAO,EAAEI,OAAA,CAAQ,UAAAC,IAAA,EAAkB;QAAA,IAAfC,EAAA,GAAAD,IAAA,CAAAC,EAAA;UAAIC,CAAA,GAAAF,IAAA,CAAAE,CAAA;UAAGC,CAAA,GAAAH,IAAA,CAAAG,CAAA;QACpDR,OAAA,CAAQM,EAAE,EAAEC,CAAA,GAAIA,CAAA,GAAIT,MAAA;QACpBE,OAAA,CAAQM,EAAE,EAAEE,CAAA,GAAIA,CAAA,GAAIT,MAAA;MACrB,CAAC;MAED,OAAO;QACNE,KAAA,EAAO;UACND,OAAA,EAAAA;QACD;MACD;IACD;IAAAN,eAAA,CAAAC,sBAAA,CAAAZ,KAAA,qBAEuD,UAACa,KAAA,EAAAa,KAAA,EAAsB;MAAA,IAAbC,MAAA,GAAAD,KAAA,CAAAC,MAAA;MAChE,IAAMC,IAAA,GAAO/C,QAAA,CAASgC,KAAK;MAE3B,QAAQc,MAAA,CAAOJ,EAAA;QACd,KAAK;QACL,KAAK;UAAO;YACXK,IAAA,CAAKV,KAAA,CAAMD,OAAA,CAAQU,MAAA,CAAOJ,EAAE,IAAAM,aAAA,CAAAA,aAAA,KACxBD,IAAA,CAAKV,KAAA,CAAMD,OAAA,CAAQU,MAAA,CAAOJ,EAAE;cAC/BC,CAAA,EAAGG,MAAA,CAAOH,CAAA;cACVC,CAAA,EAAGE,MAAA,CAAOF;YAAA,EACX;YACA;UACD;QAEA;UAAS;YACR,IAAMF,EAAA,GAAK,YAAYI,MAAA,CAAOG,KAAA;YAC9B,IAAMC,QAAA,GAAWlB,KAAA,CAAMK,KAAA,CAAMD,OAAA,CAAQM,EAAE;YAEvC,IAAIQ,QAAA,EAAU;cACbH,IAAA,CAAKV,KAAA,CAAMD,OAAA,CAAQM,EAAE,IAAAM,aAAA,CAAAA,aAAA,KACjBE,QAAA;gBACHP,CAAA,EAAGG,MAAA,CAAOH,CAAA;gBACVC,CAAA,EAAGE,MAAA,CAAOF;cAAA,EACX;YACD,OAAO;cACNG,IAAA,CAAKV,KAAA,CAAMD,OAAA,CAAQM,EAAE,IAAI;gBACxBA,EAAA,EAAAA,EAAA;gBACAS,IAAA,EAAM;gBACNC,OAAA,EAAS;gBACTH,KAAA,EAAOH,MAAA,CAAOG,KAAA;gBACdN,CAAA,EAAGG,MAAA,CAAOH,CAAA;gBACVC,CAAA,EAAGE,MAAA,CAAOF;cACX;YACD;YAEA;UACD;MACD;MAEA,OAAOG,IAAA;IACR;IAAA,OAAA5B,KAAA;EAAA;EAAAkC,YAAA,CAAAvC,aAAA;IAAAwC,GAAA;IAAAC,KAAA,EAtIS,SAAAC,aAAA,EAAqC;MAC7C,OAAO;QACNC,IAAA,EAAM;QACNC,IAAA,EAAM;QACNC,KAAA,EAAO;QACPC,MAAA,EAAQ;QACRxB,OAAA,EAAS;UACRyB,KAAA,EAAO;YACNnB,EAAA,EAAI;YACJS,IAAA,EAAM;YACNC,OAAA,EAAS;YACTH,KAAA,EAAO;YACPN,CAAA,EAAG;YACHC,CAAA,EAAG;UACJ;UACAkB,GAAA,EAAK;YACJpB,EAAA,EAAI;YACJS,IAAA,EAAM;YACNC,OAAA,EAAS;YACTH,KAAA,EAAO;YACPN,CAAA,EAAG;YACHC,CAAA,EAAG;UACJ;QACD;MACD;IACD;EAAA;IAAAU,GAAA;IAAAC,KAAA,EAEA,SAAAQ,UAAU/B,KAAA,EAAoB;MAE7B,IAAM4B,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;MAC1C,OAAO4B,MAAA,CAAOK,MAAA;IACf;EAAA;IAAAX,GAAA;IAAAC,KAAA,EAEA,SAAAW,UAAUlC,KAAA,EAAoB;MAC7B,OAAO,KAAKiC,MAAA,CAAOjC,KAAK,EAAEmC,MAAA;IAC3B;EAAA;IAAAb,GAAA;IAAAC,KAAA,EAEA,SAAAa,WAAWpC,KAAA,EAAoB;MAC9B,OAAOnB,YAAA,CAAawD,GAAA,CAAIrC,KAAA,CAAMK,KAAA,EAAO,YAAM;QAC1C,IAAMD,OAAA,GAAUJ,KAAA,CAAMK,KAAA,CAAMD,OAAA;QAE5B,IAAMwB,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;QAE1C,IAAMsC,aAAA,GAAgBhC,MAAA,CAAOC,MAAA,CAAOH,OAAO,EAAEmC,IAAA,CAAK9E,WAAW;QAC7D,IAAM+E,OAAA,GAAUF,aAAA,CAAcG,KAAA,CAAM;QAGpC,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAId,MAAA,CAAOe,QAAA,CAASpD,MAAA,EAAQmD,CAAA,IAAK;UAChD,IAAME,OAAA,GAAUhB,MAAA,CAAOe,QAAA,CAASD,CAAC;UACjC,IAAMG,KAAA,GAAQD,OAAA,CAAQE,QAAA;UACtB,IAAM7B,KAAA,GAAQzD,eAAA,CAAgB8E,aAAA,CAAcI,CAAC,EAAEzB,KAAA,EAAOqB,aAAA,CAAcI,CAAA,GAAI,CAAC,EAAEzB,KAAK;UAEhFuB,OAAA,CAAQO,IAAA,CAAK;YACZrC,EAAA,SAAAb,MAAA,CAAW6C,CAAA;YACXvB,IAAA,EAAM;YACNF,KAAA,EAAAA,KAAA;YACAN,CAAA,EAAGkC,KAAA,CAAMlC,CAAA;YACTC,CAAA,EAAGiC,KAAA,CAAMjC;UACV,CAAC;QACF;QACA,OAAO4B,OAAA,CAAQD,IAAA,CAAK9E,WAAW;MAChC,CAAC;IACF;EAAA;IAAA6D,GAAA;IAAAC,KAAA,EAEA,SAAAyB,WAAWhD,KAAA,EAAoB;MAC9B,OAAOtB,aAAA,CAAcsD,qBAAA,CAAsBhC,KAAK,CAAC;IAClD;EAAA;IAAAsB,GAAA;IAAAC,KAAA,EAEA,SAAA0B,mBAAmBjD,KAAA,EAAoB;MACtC,IAAM4B,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;MAC1C,OAAOA,KAAA,CAAMK,KAAA,CAAMuB,MAAA,KAAW,UAC3BA,MAAA,CAAOe,QAAA,CAASO,GAAA,CAAI,UAACC,CAAA;QAAA,OAAMA,CAAA,CAAEC,GAAG;MAAA,KAChCxB,MAAA,CAAOe,QAAA,CAASO,GAAA,CAAI,UAACC,CAAA;QAAA,OAAM,CAACA,CAAA,CAAEE,QAAA,CAAS,CAAC,GAAGF,CAAA,CAAEE,QAAA,CAAS,CAAC,CAAC,CAAC;MAAA;IAC7D;EAAA;IAAA/B,GAAA;IAAAC,KAAA,EA+DA,SAAA+B,aAAatD,KAAA,EAAoB6C,KAAA,EAAuB;MACvD,IAAMU,SAAA,GAAY,KAAKC,MAAA,CAAOD,SAAA;MAC9B,IAAME,UAAA,GAAapF,YAAA,CAAa2B,KAAA,CAAMK,KAAA,CAAMqB,IAAI,IAAI6B,SAAA;MACpD,OAAOxF,mBAAA,CAAoB8E,KAAA,EAAO,KAAKa,OAAA,CAAQ1D,KAAK,GAAGyD,UAAU;IAClE;EAAA;IAAAnC,GAAA;IAAAC,KAAA,EAEA,SAAAoC,mBAAmB3D,KAAA,EAAoB4D,CAAA,EAAYC,CAAA,EAAqB;MACvE,OAAO/F,4BAAA,CAA6B8F,CAAA,EAAGC,CAAA,EAAG,KAAKH,OAAA,CAAQ1D,KAAK,CAAC,MAAM;IACpE;EAAA;IAAAsB,GAAA;IAAAC,KAAA,EAEA,SAAAuC,UAAU9D,KAAA,EAAoB;MAC7B,IAAM+D,UAAA,GAAaxF,aAAA,CAAc;MACjC,IAAMqD,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;MAC1C,IAAMgE,WAAA,GAAc3F,YAAA,CAAa2B,KAAA,CAAMK,KAAA,CAAMqB,IAAI;MAEjD,IAAAuC,YAAA,GAAwBjE,KAAA,CAAMK,KAAA;QAAtBoB,IAAA,GAAAwC,YAAA,CAAAxC,IAAA;QAAME,KAAA,GAAAsC,YAAA,CAAAtC,KAAA;MAGd,IAAI3B,KAAA,CAAMK,KAAA,CAAMuB,MAAA,KAAW,QAAQ;QAClC,IAAIH,IAAA,KAAS,SAAS;UACrB,IAAMiC,OAAA,GAAU9B,MAAA,CAAOsC,MAAA;UACvB,IAAMC,QAAA,GAAW,MAAMT,OAAA,CAAQ,CAAC,IAAI,MAAMA,OAAA,CAAQjB,KAAA,CAAM,CAAC;UAEzD,OACC,eAAAlF,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGF,QAAA;cAAUG,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACpD,eAAArE,GAAA,CAAC;cACA+G,CAAA,EAAGF,QAAA;cACHI,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cACzBqC,WAAA,EAAAA,WAAA;cACAM,IAAA,EAAK;YAAA,CACN;UAAA,CACD;QAEF;QAEA,IAAI7C,IAAA,KAAS,YAAYA,IAAA,KAAS,UAAU;UAC3C,IAAMiC,QAAA,GAAU9B,MAAA,CAAOsC,MAAA;UACvB,IAAMC,SAAA,GAAW,MAAMT,QAAA,CAAQ,CAAC,IAAI,MAAMA,QAAA,CAAQjB,KAAA,CAAM,CAAC;UAEzD,OACC,eAAAlF,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGF,SAAA;cAAUG,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACpD,eAAArE,GAAA,CAAC;cAAEiH,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cAAUqC,WAAA,EAAAA,WAAA;cACpCI,QAAA,EAAAxC,MAAA,CAAOe,QAAA,CAASO,GAAA,CAAI,UAACN,OAAA,EAASF,CAAA,EAAM;gBACpC,IAAA8B,oBAAA,GAA8ClG,mBAAA,CAC7CsE,OAAA,CAAQrD,MAAA,EACRyE,WAAA,EACA;oBACCS,KAAA,EAAOhD,IAAA;oBACPI,KAAA,EAAOa,CAAA,GAAI,IAAI,WAAW;oBAC1BZ,GAAA,EAAKY,CAAA,GAAId,MAAA,CAAOe,QAAA,CAASpD,MAAA,GAAS,IAAI,WAAW;kBAClD,CACD;kBARQmF,eAAA,GAAAF,oBAAA,CAAAE,eAAA;kBAAiBC,gBAAA,GAAAH,oBAAA,CAAAG,gBAAA;gBAUzB,OACC,eAAArH,GAAA,CAAC;kBAEAoH,eAAA,EAAAA,eAAA;kBACAC,gBAAA,EAAAA,gBAAA;kBACAN,CAAA,EAAGzB,OAAA,CAAQgC,IAAA;kBACXN,IAAA,EAAK;gBAAA,GAJA5B,CAKN;cAEF,CAAC;YAAA,CACF;UAAA,CACD;QAEF;QAEA,IAAIjB,IAAA,KAAS,QAAQ;UACpB,IAAMiC,SAAA,GAAU9B,MAAA,CAAOsC,MAAA;UACvB,IAAAW,oBAAA,GAAuChH,mBAAA,CAAoBmC,KAAA,CAAMU,EAAA,EAAIgD,SAAA,EAASM,WAAW;YAAAc,qBAAA,GAAAC,cAAA,CAAAF,oBAAA;YAAlFG,aAAA,GAAAF,qBAAA;YAAeG,aAAa,GAAAH,qBAAA;UAEnC,OACC,eAAAvH,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGW,aAAA;cAAeV,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACzD,eAAArE,GAAA,CAAC;cACA+G,CAAA,EAAGY,aAAA;cACHV,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cACzBqC,WAAA,EAAAA,WAAA;cACAM,IAAA,EAAK;YAAA,CACN;UAAA,CACD;QAEF;MACD;MAGA,IAAItE,KAAA,CAAMK,KAAA,CAAMuB,MAAA,KAAW,SAAS;QACnC,IAAMsD,UAAA,GAAatD,MAAA,CAAOgD,IAAA;QAE1B,IAAInD,IAAA,KAAS,WAAYA,IAAA,KAAS,UAAUsC,UAAA,EAAa;UACxD,OACC,eAAAxG,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGa,UAAA;cAAYZ,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACtD,eAAArE,GAAA,CAAC;cACA0G,WAAA,EAAAA,WAAA;cACAO,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cACzB2C,IAAA,EAAK;cACLD,CAAA,EAAGa;YAAA,CACJ;UAAA,CACD;QAEF;QAEA,IAAIzD,IAAA,KAAS,YAAYA,IAAA,KAAS,UAAU;UAC3C,OACC,eAAAlE,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGa,UAAA;cAAYZ,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACtD,eAAArE,GAAA,CAAC;cAAEiH,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cAAUqC,WAAA,EAAAA,WAAA;cACpCI,QAAA,EAAAxC,MAAA,CAAOe,QAAA,CAASO,GAAA,CAAI,UAACN,OAAA,EAASF,CAAA,EAAM;gBACpC,IAAAyC,qBAAA,GAA8C7G,mBAAA,CAC7CsE,OAAA,CAAQrD,MAAA,EACRyE,WAAA,EACA;oBACCS,KAAA,EAAOhD,IAAA;oBACPI,KAAA,EAAOa,CAAA,GAAI,IAAI,WAAW;oBAC1BZ,GAAA,EAAKY,CAAA,GAAId,MAAA,CAAOe,QAAA,CAASpD,MAAA,GAAS,IAAI,WAAW;kBAClD,CACD;kBARQmF,eAAA,GAAAS,qBAAA,CAAAT,eAAA;kBAAiBC,gBAAA,GAAAQ,qBAAA,CAAAR,gBAAA;gBAUzB,OACC,eAAArH,GAAA,CAAC;kBAEAoH,eAAA,EAAAA,eAAA;kBACAC,gBAAA,EAAAA,gBAAA;kBACAN,CAAA,EAAGzB,OAAA,CAAQgC,IAAA;kBACXN,IAAA,EAAK;gBAAA,GAJA5B,CAKN;cAEF,CAAC;YAAA,CACF;UAAA,CACD;QAEF;QAEA,IAAIjB,IAAA,KAAS,QAAQ;UACpB,OACC,eAAAlE,IAAA,CAACU,YAAA;YAAayC,EAAA,EAAIV,KAAA,CAAMU,EAAA;YACvB0D,QAAA,kBAAA9G,GAAA,CAACc,SAAA;cAAUiG,CAAA,EAAGa,UAAA;cAAYZ,IAAA,EAAM;cAAQ3C,KAAA,EAAAA;YAAA,CAAc,GACtD,eAAArE,GAAA,CAAC;cACA+G,CAAA,EAAG7F,eAAA,CAAgBwB,KAAA,EAAO4B,MAAA,EAAQoC,WAAW;cAC7CA,WAAA,EAAa;cACbO,MAAA,mBAAA1E,MAAA,CAAyB8B,KAAA;cACzB2C,IAAA,mBAAAzE,MAAA,CAAuB8B,KAAA;YAAA,CACxB;UAAA,CACD;QAEF;MACD;IACD;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAEA,SAAA6D,UAAUpF,KAAA,EAAoB;MAC7B,IAAMgE,WAAA,GAAc3F,YAAA,CAAa2B,KAAA,CAAMK,KAAA,CAAMqB,IAAI;MACjD,IAAME,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;MAC1C,IAAQyB,IAAA,GAASzB,KAAA,CAAMK,KAAA,CAAfoB,IAAA;MAER,IAAImD,IAAA;MAEJ,IAAI5E,KAAA,CAAMK,KAAA,CAAMuB,MAAA,KAAW,QAAQ;QAClC,IAAM8B,OAAA,GAAU9B,MAAA,CAAOsC,MAAA;QACvB,IAAIzC,IAAA,KAAS,WAAWA,IAAA,KAAS,YAAYA,IAAA,KAAS,UAAU;UAC/DmD,IAAA,GAAO,MAAMlB,OAAA,CAAQ,CAAC,IAAI,MAAMA,OAAA,CAAQjB,KAAA,CAAM,CAAC;QAChD,OAAO;UACN,IAAA4C,qBAAA,GAAwBxH,mBAAA,CAAoBmC,KAAA,CAAMU,EAAA,EAAIgD,OAAA,EAASM,WAAW;YAAAsB,qBAAA,GAAAP,cAAA,CAAAM,qBAAA;YAAnEL,aAAa,GAAAM,qBAAA;UACpBV,IAAA,GAAOI,aAAA;QACR;MACD,OAAO;QACNJ,IAAA,GAAOnG,oBAAA,CAAqBuB,KAAA,EAAO4B,MAAA,EAAQoC,WAAW;MACvD;MAEA,OAAO,eAAA1G,GAAA,CAAC;QAAK+G,CAAA,EAAGO;MAAA,CAAM;IACvB;EAAA;IAAAtD,GAAA;IAAAC,KAAA,EAEA,SAAAgE,MAAMvF,KAAA,EAAoBwF,KAAA,EAAeC,MAAA,EAAwB;MAChE,IAAAC,aAAA,GAAgC1F,KAAA,CAAMK,KAAA;QAAvBsF,MAAA,GAAAD,aAAA,CAAP/D,KAAA;QAAeD,IAAA,GAAAgE,aAAA,CAAAhE,IAAA;MACvB,IAAMC,KAAA,GAAQ8D,MAAA,CAAOnB,IAAA,CAAKqB,MAAM;MAChC,IAAM/D,MAAA,GAASI,qBAAA,CAAsBhC,KAAK;MAC1C,OAAOrB,UAAA,CAAWqB,KAAA,EAAO4B,MAAA,EAAQD,KAAA,EAAOtD,YAAA,CAAaqD,IAAI,CAAC;IAC3D;EAAA;EAAA,OAAA5C,aAAA;AAAA,EArUkCX,SAAA;AAAA2B,eAAA,CAAtBhB,aAAA,UACW;AAwUjB,SAASkD,sBAAsBhC,KAAA,EAAoB;EACzD,OAAOpB,YAAA,CAAayD,GAAA,CAAIrC,KAAA,CAAMK,KAAA,EAAO,YAAM;IAC1C,IAAAuF,aAAA,GAA4B5F,KAAA,CAAMK,KAAA;MAA1BuB,MAAA,GAAAgE,aAAA,CAAAhE,MAAA;MAAQxB,OAAA,GAAAwF,aAAA,CAAAxF,OAAA;IAEhB,IAAMyF,YAAA,GAAevF,MAAA,CAAOC,MAAA,CAAOH,OAAO,EAAEmC,IAAA,CAAK9E,WAAW,EAAEyF,GAAA,CAAItF,KAAA,CAAMkI,IAAI;IAE5E,QAAQlE,MAAA;MACP,KAAK;QAAS;UACb,OAAO,IAAIlE,aAAA,CAAcmI,YAAA,EAAcA,YAAA,CAAatG,MAAA,KAAW,IAAI,IAAI,KAAK,EAAE;QAC/E;MACA,KAAK;QAAQ;UACZ,OAAO,IAAI5B,UAAA,CAAWkI,YAAY;QACnC;IACD;EACD,CAAC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}