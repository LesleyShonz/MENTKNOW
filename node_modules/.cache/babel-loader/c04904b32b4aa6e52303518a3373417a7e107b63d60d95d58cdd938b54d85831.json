{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Vec2d } from \"@tldraw/primitives\";\nimport { AssetRecordType, createShapeId } from \"@tldraw/tlschema\";\nimport { compact, getHashForString } from \"@tldraw/utils\";\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from \"../../constants.mjs\";\nimport { ACCEPTED_IMG_TYPE, ACCEPTED_VID_TYPE, containBoxSize, getFileMetaData, getImageSizeFromSrc, getResizedImageDataUrl, getVideoSizeFromSrc, isImage } from \"../../utils/assets.mjs\";\nimport { truncateStringWithEllipsis } from \"../../utils/dom.mjs\";\nimport { getEmbedInfo } from \"../../utils/embeds.mjs\";\nimport { FONT_FAMILIES, FONT_SIZES, TEXT_PROPS } from \"../shapes/shared/default-shape-constants.mjs\";\nimport { INDENT } from \"../shapes/text/TextHelpers.mjs\";\nimport { TextShapeUtil } from \"../shapes/text/TextShapeUtil.mjs\";\nvar ExternalContentManager = /*#__PURE__*/function () {\n  function ExternalContentManager(_editor2) {\n    var _this = this;\n    _classCallCheck(this, ExternalContentManager);\n    _defineProperty(this, \"handleContent\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(info) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = info.type;\n              _context.next = _context.t0 === \"text\" ? 3 : _context.t0 === \"files\" ? 6 : _context.t0 === \"embed\" ? 9 : _context.t0 === \"svg-text\" ? 12 : _context.t0 === \"url\" ? 15 : 18;\n              break;\n            case 3:\n              _context.next = 5;\n              return _this.handleText(_this.editor, info);\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n              _context.next = 8;\n              return _this.handleFiles(_this.editor, info);\n            case 8:\n              return _context.abrupt(\"return\", _context.sent);\n            case 9:\n              _context.next = 11;\n              return _this.handleEmbed(_this.editor, info);\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n            case 12:\n              _context.next = 14;\n              return _this.handleSvgText(_this.editor, info);\n            case 14:\n              return _context.abrupt(\"return\", _context.sent);\n            case 15:\n              _context.next = 17;\n              return _this.handleUrl(_this.editor, info);\n            case 17:\n              return _context.abrupt(\"return\", _context.sent);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    /**\n     * Handle urls from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n     *\n     * @example\n     * ```ts\n     * editor.this.handleUrl = myCustomMethod\n     * ```\n     *\n     * @param editor - The editor instance\n     * @param info - The info object describing the external content.\n     *\n     * @public\n     */\n    _defineProperty(this, \"handleUrl\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(editor, _ref2) {\n        var point, url, embedInfo, position, assetId, asset, shouldAlsoCreateAsset;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              point = _ref2.point, url = _ref2.url;\n              embedInfo = getEmbedInfo(url);\n              if (!embedInfo) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\", _this.handleEmbed(editor, {\n                type: \"embed\",\n                url: embedInfo.url,\n                point: point,\n                embed: embedInfo.definition\n              }));\n            case 4:\n              position = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter;\n              assetId = AssetRecordType.createId(getHashForString(url));\n              asset = editor.getAssetById(assetId);\n              shouldAlsoCreateAsset = false;\n              if (asset) {\n                _context2.next = 13;\n                break;\n              }\n              shouldAlsoCreateAsset = true;\n              _context2.next = 12;\n              return _this.createAssetFromUrl(editor, url);\n            case 12:\n              asset = _context2.sent;\n            case 13:\n              editor.batch(function () {\n                if (shouldAlsoCreateAsset) {\n                  editor.createAssets([asset]);\n                }\n                _this.createShapesForAssets(editor, [asset], position);\n              });\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x2, _x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    this.editor = _editor2;\n  }\n  _createClass(ExternalContentManager, [{\n    key: \"handleSvgText\",\n    value:\n    /**\n     * Handle svg text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n     *\n     * @example\n     * ```ts\n     * editor.this.handleSvgText = myCustomMethod\n     * ```\n     *\n     * @param editor - The editor instance.\n     * @param info - The info object describing the external content.\n     *\n     * @public\n     */\n    function () {\n      var _handleSvgText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(editor, _ref4) {\n        var point, text, position, svg, width, height, box, asset;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              point = _ref4.point, text = _ref4.text;\n              position = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter;\n              svg = new DOMParser().parseFromString(text, \"image/svg+xml\").querySelector(\"svg\");\n              if (svg) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error(\"No <svg/> element present\");\n            case 5:\n              width = parseFloat(svg.getAttribute(\"width\") || \"0\");\n              height = parseFloat(svg.getAttribute(\"height\") || \"0\");\n              if (!(width && height)) {\n                document.body.appendChild(svg);\n                box = svg.getBoundingClientRect();\n                document.body.removeChild(svg);\n                width = box.width;\n                height = box.height;\n              }\n              _context3.next = 10;\n              return this.createAssetFromFile(editor, new File([text], \"asset.svg\", {\n                type: \"image/svg+xml\"\n              }));\n            case 10:\n              asset = _context3.sent;\n              this.createShapesForAssets(editor, [asset], position);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function handleSvgText(_x4, _x5) {\n        return _handleSvgText.apply(this, arguments);\n      }\n      return handleSvgText;\n    }()\n    /**\n     * Handle embed info from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n     *\n     * @example\n     * ```ts\n     * editor.this.handleEmbed = myCustomMethod\n     * ```\n     *\n     * @param editor - The editor instance\n     * @param info - The info object describing the external content.\n     *\n     * @public\n     */\n  }, {\n    key: \"handleEmbed\",\n    value: function () {\n      var _handleEmbed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(editor, _ref5) {\n        var point, url, embed, position, width, height, shapePartial;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              point = _ref5.point, url = _ref5.url, embed = _ref5.embed;\n              position = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter;\n              width = embed.width, height = embed.height;\n              shapePartial = {\n                id: createShapeId(),\n                type: \"embed\",\n                x: position.x - (width || 450) / 2,\n                y: position.y - (height || 450) / 2,\n                props: {\n                  w: width,\n                  h: height,\n                  url: url\n                }\n              };\n              editor.createShapes([shapePartial], true);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function handleEmbed(_x6, _x7) {\n        return _handleEmbed.apply(this, arguments);\n      }\n      return handleEmbed;\n    }()\n    /**\n     * Handle files from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n     *\n     * @example\n     * ```ts\n     * editor.this.handleFiles = myCustomMethod\n     * ```\n     *\n     * @param editor - The editor instance\n     * @param info - The info object describing the external content.\n     *\n     * @public\n     */\n  }, {\n    key: \"handleFiles\",\n    value: function () {\n      var _handleFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(editor, _ref6) {\n        var _this2 = this;\n        var point, files, position, pagePoint, assets;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              point = _ref6.point, files = _ref6.files;\n              position = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter;\n              pagePoint = new Vec2d(position.x, position.y);\n              assets = [];\n              _context6.next = 6;\n              return Promise.all(files.map( /*#__PURE__*/function () {\n                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(file, i) {\n                  var asset;\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) switch (_context5.prev = _context5.next) {\n                      case 0:\n                        if (file.type) {\n                          _context5.next = 2;\n                          break;\n                        }\n                        throw new Error(\"No mime type\");\n                      case 2:\n                        if (ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).includes(file.type)) {\n                          _context5.next = 5;\n                          break;\n                        }\n                        console.warn(\"\".concat(file.name, \" not loaded - Extension not allowed.\"));\n                        return _context5.abrupt(\"return\", null);\n                      case 5:\n                        _context5.prev = 5;\n                        _context5.next = 8;\n                        return _this2.createAssetFromFile(editor, file);\n                      case 8:\n                        asset = _context5.sent;\n                        if (asset) {\n                          _context5.next = 11;\n                          break;\n                        }\n                        throw Error(\"Could not create an asset\");\n                      case 11:\n                        assets[i] = asset;\n                        _context5.next = 18;\n                        break;\n                      case 14:\n                        _context5.prev = 14;\n                        _context5.t0 = _context5[\"catch\"](5);\n                        console.error(_context5.t0);\n                        return _context5.abrupt(\"return\", null);\n                      case 18:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }, _callee5, null, [[5, 14]]);\n                }));\n                return function (_x10, _x11) {\n                  return _ref7.apply(this, arguments);\n                };\n              }()));\n            case 6:\n              this.createShapesForAssets(editor, compact(assets), pagePoint);\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function handleFiles(_x8, _x9) {\n        return _handleFiles.apply(this, arguments);\n      }\n      return handleFiles;\n    }()\n    /**\n     * Handle plain text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n     *\n     * @example\n     * ```ts\n     * editor.this.handleText = myCustomMethod\n     * ```\n     *\n     * @param editor - The editor instance\n     * @param info - The info object describing the external content.\n     *\n     * @public\n     */\n  }, {\n    key: \"handleText\",\n    value: function () {\n      var _handleText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(editor, _ref8) {\n        var point, text, p, defaultProps, textToPaste, w, h, autoSize, align, isMultiLine, isRtl, rawSize, minWidth, shrunkSize;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              point = _ref8.point, text = _ref8.text;\n              p = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter;\n              defaultProps = editor.getShapeUtil(TextShapeUtil).defaultProps();\n              textToPaste = stripTrailingWhitespace(stripCommonMinimumIndentation(replaceTabsWithSpaces(text)));\n              align = \"middle\";\n              isMultiLine = textToPaste.split(\"\\n\").length > 1;\n              isRtl = rtlRegex.test(textToPaste);\n              if (isMultiLine) {\n                align = isMultiLine ? isRtl ? \"end\" : \"start\" : \"middle\";\n              }\n              rawSize = editor.textMeasure.measureText(textToPaste, _objectSpread(_objectSpread({}, TEXT_PROPS), {}, {\n                fontFamily: FONT_FAMILIES[defaultProps.font],\n                fontSize: FONT_SIZES[defaultProps.size],\n                width: \"fit-content\"\n              }));\n              minWidth = Math.min(isMultiLine ? editor.viewportPageBounds.width * 0.9 : 920, Math.max(200, editor.viewportPageBounds.width * 0.9));\n              if (rawSize.w > minWidth) {\n                shrunkSize = editor.textMeasure.measureText(textToPaste, _objectSpread(_objectSpread({}, TEXT_PROPS), {}, {\n                  fontFamily: FONT_FAMILIES[defaultProps.font],\n                  fontSize: FONT_SIZES[defaultProps.size],\n                  width: minWidth + \"px\"\n                }));\n                w = shrunkSize.w;\n                h = shrunkSize.h;\n                autoSize = false;\n                align = isRtl ? \"end\" : \"start\";\n              } else {\n                w = rawSize.w;\n                h = rawSize.h;\n                autoSize = true;\n              }\n              if (p.y - h / 2 < editor.viewportPageBounds.minY + 40) {\n                p.y = editor.viewportPageBounds.minY + 40 + h / 2;\n              }\n              editor.createShapes([{\n                id: createShapeId(),\n                type: \"text\",\n                x: p.x - w / 2,\n                y: p.y - h / 2,\n                props: {\n                  text: textToPaste,\n                  // if the text has more than one line, align it to the left\n                  align: align,\n                  autoSize: autoSize,\n                  w: w\n                }\n              }]);\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n      function handleText(_x12, _x13) {\n        return _handleText.apply(this, arguments);\n      }\n      return handleText;\n    }()\n  }, {\n    key: \"createShapesForAssets\",\n    value: function () {\n      var _createShapesForAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(editor, assets, position) {\n        var currentPoint, paritals, _iterator, _step, asset;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (assets.length) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 2:\n              currentPoint = Vec2d.From(position);\n              paritals = [];\n              _iterator = _createForOfIteratorHelper(assets);\n              _context8.prev = 5;\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context8.next = 22;\n                break;\n              }\n              asset = _step.value;\n              _context8.t0 = asset.type;\n              _context8.next = _context8.t0 === \"bookmark\" ? 12 : _context8.t0 === \"image\" ? 15 : _context8.t0 === \"video\" ? 18 : 20;\n              break;\n            case 12:\n              paritals.push({\n                id: createShapeId(),\n                type: \"bookmark\",\n                x: currentPoint.x - 150,\n                y: currentPoint.y - 160,\n                opacity: 1,\n                props: {\n                  assetId: asset.id,\n                  url: asset.props.src\n                }\n              });\n              currentPoint.x += 300;\n              return _context8.abrupt(\"break\", 20);\n            case 15:\n              paritals.push({\n                id: createShapeId(),\n                type: \"image\",\n                x: currentPoint.x - asset.props.w / 2,\n                y: currentPoint.y - asset.props.h / 2,\n                opacity: 1,\n                props: {\n                  assetId: asset.id,\n                  w: asset.props.w,\n                  h: asset.props.h\n                }\n              });\n              currentPoint.x += asset.props.w;\n              return _context8.abrupt(\"break\", 20);\n            case 18:\n              paritals.push({\n                id: createShapeId(),\n                type: \"video\",\n                x: currentPoint.x - asset.props.w / 2,\n                y: currentPoint.y - asset.props.h / 2,\n                opacity: 1,\n                props: {\n                  assetId: asset.id,\n                  w: asset.props.w,\n                  h: asset.props.h\n                }\n              });\n              currentPoint.x += asset.props.w;\n            case 20:\n              _context8.next = 7;\n              break;\n            case 22:\n              _context8.next = 27;\n              break;\n            case 24:\n              _context8.prev = 24;\n              _context8.t1 = _context8[\"catch\"](5);\n              _iterator.e(_context8.t1);\n            case 27:\n              _context8.prev = 27;\n              _iterator.f();\n              return _context8.finish(27);\n            case 30:\n              editor.batch(function () {\n                var assetsToCreate = assets.filter(function (asset) {\n                  return !editor.getAssetById(asset.id);\n                });\n                if (assetsToCreate.length) {\n                  editor.createAssets(assetsToCreate);\n                }\n                editor.createShapes(paritals, true);\n                var viewportPageBounds = editor.viewportPageBounds;\n                var selectedPageBounds = editor.selectedPageBounds;\n                if (selectedPageBounds) {\n                  var offset = selectedPageBounds.center.sub(position);\n                  editor.updateShapes(paritals.map(function (partial) {\n                    return {\n                      id: partial.id,\n                      type: partial.type,\n                      x: partial.x - offset.x,\n                      y: partial.y - offset.y\n                    };\n                  }));\n                }\n                selectedPageBounds = editor.selectedPageBounds;\n                if (selectedPageBounds && !viewportPageBounds.contains(selectedPageBounds)) {\n                  editor.zoomToSelection();\n                }\n              });\n            case 31:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[5, 24, 27, 30]]);\n      }));\n      function createShapesForAssets(_x14, _x15, _x16) {\n        return _createShapesForAssets.apply(this, arguments);\n      }\n      return createShapesForAssets;\n    }()\n    /**\n     * Override this method to change how assets are created from files.\n     *\n     * @param editor - The editor instance\n     * @param file - The file to create the asset from.\n     */\n  }, {\n    key: \"createAssetFromFile\",\n    value: function () {\n      var _createAssetFromFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_editor, file) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return new Promise(function (resolve, reject) {\n                var reader = new FileReader();\n                reader.onerror = function () {\n                  return reject(reader.error);\n                };\n                reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n                  var dataUrl, isImageType, sizeFn, originalSize, size, assetId, metadata, asset;\n                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                    while (1) switch (_context9.prev = _context9.next) {\n                      case 0:\n                        dataUrl = reader.result;\n                        isImageType = isImage(file.type);\n                        sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc;\n                        if (file.type === \"video/quicktime\" && dataUrl.includes(\"video/quicktime\")) {\n                          dataUrl = dataUrl.replace(\"video/quicktime\", \"video/mp4\");\n                        }\n                        _context9.next = 6;\n                        return sizeFn(dataUrl);\n                      case 6:\n                        originalSize = _context9.sent;\n                        size = containBoxSize(originalSize, {\n                          w: MAX_ASSET_WIDTH,\n                          h: MAX_ASSET_HEIGHT\n                        });\n                        if (!(size !== originalSize && (file.type === \"image/jpeg\" || file.type === \"image/png\"))) {\n                          _context9.next = 12;\n                          break;\n                        }\n                        _context9.next = 11;\n                        return getResizedImageDataUrl(dataUrl, size.w, size.h);\n                      case 11:\n                        dataUrl = _context9.sent;\n                      case 12:\n                        assetId = AssetRecordType.createId(getHashForString(dataUrl));\n                        _context9.next = 15;\n                        return getFileMetaData(file);\n                      case 15:\n                        metadata = _context9.sent;\n                        asset = {\n                          id: assetId,\n                          type: isImageType ? \"image\" : \"video\",\n                          typeName: \"asset\",\n                          props: {\n                            name: file.name,\n                            src: dataUrl,\n                            w: size.w,\n                            h: size.h,\n                            mimeType: file.type,\n                            isAnimated: metadata.isAnimated\n                          }\n                        };\n                        resolve(asset);\n                      case 18:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }, _callee9);\n                }));\n                reader.readAsDataURL(file);\n              });\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function createAssetFromFile(_x17, _x18) {\n        return _createAssetFromFile.apply(this, arguments);\n      }\n      return createAssetFromFile;\n    }()\n    /**\n     * Override me to change the way assets are created from urls.\n     *\n     * @param editor - The editor instance\n     * @param url - The url to create the asset from\n     */\n  }, {\n    key: \"createAssetFromUrl\",\n    value: function () {\n      var _createAssetFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_editor, url) {\n        var meta, _doc$head$querySelect, _doc$head$querySelect2, _doc$head$querySelect3, _doc$head$querySelect4, _doc$head$querySelect5, _doc$head$querySelect6, resp, html, doc;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return fetch(url, {\n                method: \"GET\",\n                mode: \"no-cors\"\n              });\n            case 3:\n              resp = _context11.sent;\n              _context11.next = 6;\n              return resp.text();\n            case 6:\n              html = _context11.sent;\n              doc = new DOMParser().parseFromString(html, \"text/html\");\n              meta = {\n                image: (_doc$head$querySelect = (_doc$head$querySelect2 = doc.head.querySelector('meta[property=\"og:image\"]')) === null || _doc$head$querySelect2 === void 0 ? void 0 : _doc$head$querySelect2.getAttribute(\"content\")) !== null && _doc$head$querySelect !== void 0 ? _doc$head$querySelect : \"\",\n                title: (_doc$head$querySelect3 = (_doc$head$querySelect4 = doc.head.querySelector('meta[property=\"og:title\"]')) === null || _doc$head$querySelect4 === void 0 ? void 0 : _doc$head$querySelect4.getAttribute(\"content\")) !== null && _doc$head$querySelect3 !== void 0 ? _doc$head$querySelect3 : truncateStringWithEllipsis(url, 32),\n                description: (_doc$head$querySelect5 = (_doc$head$querySelect6 = doc.head.querySelector('meta[property=\"og:description\"]')) === null || _doc$head$querySelect6 === void 0 ? void 0 : _doc$head$querySelect6.getAttribute(\"content\")) !== null && _doc$head$querySelect5 !== void 0 ? _doc$head$querySelect5 : \"\"\n              };\n              _context11.next = 15;\n              break;\n            case 11:\n              _context11.prev = 11;\n              _context11.t0 = _context11[\"catch\"](0);\n              console.error(_context11.t0);\n              meta = {\n                image: \"\",\n                title: truncateStringWithEllipsis(url, 32),\n                description: \"\"\n              };\n            case 15:\n              return _context11.abrupt(\"return\", {\n                id: AssetRecordType.createId(getHashForString(url)),\n                typeName: \"asset\",\n                type: \"bookmark\",\n                props: {\n                  src: url,\n                  description: meta.description,\n                  image: meta.image,\n                  title: meta.title\n                }\n              });\n            case 16:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[0, 11]]);\n      }));\n      function createAssetFromUrl(_x19, _x20) {\n        return _createAssetFromUrl.apply(this, arguments);\n      }\n      return createAssetFromUrl;\n    }()\n  }]);\n  return ExternalContentManager;\n}();\nvar rtlRegex = /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/;\nfunction replaceTabsWithSpaces(text) {\n  return text.replace(/\\t/g, INDENT);\n}\nfunction stripCommonMinimumIndentation(text) {\n  var lines = text.split(\"\\n\");\n  while (lines[0].trim().length === 0) {\n    lines.shift();\n  }\n  var minIndentation = Infinity;\n  var _iterator2 = _createForOfIteratorHelper(lines),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n      if (line.trim().length > 0) {\n        var indentation = line.length - line.trimStart().length;\n        minIndentation = Math.min(minIndentation, indentation);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return lines.map(function (line) {\n    return line.slice(minIndentation);\n  }).join(\"\\n\");\n}\nfunction stripTrailingWhitespace(text) {\n  return text.replace(/[ \\t]+$/gm, \"\").replace(/\\n+$/, \"\");\n}\nexport { ExternalContentManager };","map":{"version":3,"names":["Vec2d","AssetRecordType","createShapeId","compact","getHashForString","MAX_ASSET_HEIGHT","MAX_ASSET_WIDTH","ACCEPTED_IMG_TYPE","ACCEPTED_VID_TYPE","containBoxSize","getFileMetaData","getImageSizeFromSrc","getResizedImageDataUrl","getVideoSizeFromSrc","isImage","truncateStringWithEllipsis","getEmbedInfo","FONT_FAMILIES","FONT_SIZES","TEXT_PROPS","INDENT","TextShapeUtil","ExternalContentManager","editor","_this","_classCallCheck","_defineProperty","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","info","wrap","_callee$","_context","prev","next","t0","type","handleText","abrupt","sent","handleFiles","handleEmbed","handleSvgText","handleUrl","stop","_x","apply","arguments","_ref3","_callee2","_ref2","point","url","embedInfo","position","assetId","asset","shouldAlsoCreateAsset","_callee2$","_context2","embed","definition","inputs","shiftKey","currentPagePoint","viewportPageCenter","createId","getAssetById","createAssetFromUrl","batch","createAssets","createShapesForAssets","_x2","_x3","_createClass","key","value","_handleSvgText","_callee3","_ref4","text","svg","width","height","box","_callee3$","_context3","DOMParser","parseFromString","querySelector","Error","parseFloat","getAttribute","document","body","appendChild","getBoundingClientRect","removeChild","createAssetFromFile","File","_x4","_x5","_handleEmbed","_callee4","_ref5","shapePartial","_callee4$","_context4","id","x","y","props","w","h","createShapes","_x6","_x7","_handleFiles","_callee6","_ref6","_this2","files","pagePoint","assets","_callee6$","_context6","Promise","all","map","_ref7","_callee5","file","i","_callee5$","_context5","concat","includes","console","warn","name","error","_x10","_x11","_x8","_x9","_handleText","_callee7","_ref8","p","defaultProps","textToPaste","autoSize","align","isMultiLine","isRtl","rawSize","minWidth","shrunkSize","_callee7$","_context7","getShapeUtil","stripTrailingWhitespace","stripCommonMinimumIndentation","replaceTabsWithSpaces","split","length","rtlRegex","test","textMeasure","measureText","_objectSpread","fontFamily","font","fontSize","size","Math","min","viewportPageBounds","max","minY","_x12","_x13","_createShapesForAssets","_callee8","currentPoint","paritals","_iterator","_step","_callee8$","_context8","From","_createForOfIteratorHelper","s","n","done","push","opacity","src","t1","e","f","finish","assetsToCreate","filter","selectedPageBounds","offset","center","sub","updateShapes","partial","contains","zoomToSelection","_x14","_x15","_x16","_createAssetFromFile","_callee10","_editor","_callee10$","_context10","resolve","reject","reader","FileReader","onerror","onload","_callee9","dataUrl","isImageType","sizeFn","originalSize","metadata","_callee9$","_context9","result","replace","typeName","mimeType","isAnimated","readAsDataURL","_x17","_x18","_createAssetFromUrl","_callee11","meta","_doc$head$querySelect","_doc$head$querySelect2","_doc$head$querySelect3","_doc$head$querySelect4","_doc$head$querySelect5","_doc$head$querySelect6","resp","html","doc","_callee11$","_context11","fetch","method","mode","image","head","title","description","_x19","_x20","lines","trim","shift","minIndentation","Infinity","_iterator2","_step2","line","indentation","trimStart","err","slice","join"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/managers/ExternalContentManager.ts"],"sourcesContent":["import { Vec2d, VecLike } from '@tldraw/primitives'\nimport {\n\tAssetRecordType,\n\tEmbedDefinition,\n\tTLAsset,\n\tTLAssetId,\n\tTLEmbedShape,\n\tTLShapePartial,\n\tTLTextShape,\n\tTLTextShapeProps,\n\tcreateShapeId,\n} from '@tldraw/tlschema'\nimport { compact, getHashForString } from '@tldraw/utils'\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from '../../constants'\nimport {\n\tACCEPTED_IMG_TYPE,\n\tACCEPTED_VID_TYPE,\n\tcontainBoxSize,\n\tgetFileMetaData,\n\tgetImageSizeFromSrc,\n\tgetResizedImageDataUrl,\n\tgetVideoSizeFromSrc,\n\tisImage,\n} from '../../utils/assets'\nimport { truncateStringWithEllipsis } from '../../utils/dom'\nimport { getEmbedInfo } from '../../utils/embeds'\nimport { Editor } from '../Editor'\nimport { FONT_FAMILIES, FONT_SIZES, TEXT_PROPS } from '../shapes/shared/default-shape-constants'\nimport { INDENT } from '../shapes/text/TextHelpers'\nimport { TextShapeUtil } from '../shapes/text/TextShapeUtil'\n\n/** @public */\nexport type TLExternalContent =\n\t| {\n\t\t\ttype: 'text'\n\t\t\tpoint?: VecLike\n\t\t\ttext: string\n\t  }\n\t| {\n\t\t\ttype: 'files'\n\t\t\tfiles: File[]\n\t\t\tpoint?: VecLike\n\t\t\tignoreParent: boolean\n\t  }\n\t| {\n\t\t\ttype: 'url'\n\t\t\turl: string\n\t\t\tpoint?: VecLike\n\t  }\n\t| {\n\t\t\ttype: 'svg-text'\n\t\t\ttext: string\n\t\t\tpoint?: VecLike\n\t  }\n\t| {\n\t\t\ttype: 'embed'\n\t\t\turl: string\n\t\t\tpoint?: VecLike\n\t\t\tembed: EmbedDefinition\n\t  }\n\n/** @public */\nexport class ExternalContentManager {\n\tconstructor(public editor: Editor) {}\n\n\thandleContent = async (info: TLExternalContent) => {\n\t\tswitch (info.type) {\n\t\t\tcase 'text': {\n\t\t\t\treturn await this.handleText(this.editor, info)\n\t\t\t}\n\t\t\tcase 'files': {\n\t\t\t\treturn await this.handleFiles(this.editor, info)\n\t\t\t}\n\t\t\tcase 'embed': {\n\t\t\t\treturn await this.handleEmbed(this.editor, info)\n\t\t\t}\n\t\t\tcase 'svg-text': {\n\t\t\t\treturn await this.handleSvgText(this.editor, info)\n\t\t\t}\n\t\t\tcase 'url': {\n\t\t\t\treturn await this.handleUrl(this.editor, info)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handle svg text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleSvgText = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance.\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleSvgText(\n\t\teditor: Editor,\n\t\t{ point, text }: Extract<TLExternalContent, { type: 'svg-text' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst svg = new DOMParser().parseFromString(text, 'image/svg+xml').querySelector('svg')\n\t\tif (!svg) {\n\t\t\tthrow new Error('No <svg/> element present')\n\t\t}\n\n\t\tlet width = parseFloat(svg.getAttribute('width') || '0')\n\t\tlet height = parseFloat(svg.getAttribute('height') || '0')\n\n\t\tif (!(width && height)) {\n\t\t\tdocument.body.appendChild(svg)\n\t\t\tconst box = svg.getBoundingClientRect()\n\t\t\tdocument.body.removeChild(svg)\n\n\t\t\twidth = box.width\n\t\t\theight = box.height\n\t\t}\n\n\t\tconst asset = await this.createAssetFromFile(\n\t\t\teditor,\n\t\t\tnew File([text], 'asset.svg', { type: 'image/svg+xml' })\n\t\t)\n\n\t\tthis.createShapesForAssets(editor, [asset], position)\n\t}\n\n\t/**\n\t * Handle embed info from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleEmbed = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleEmbed(\n\t\teditor: Editor,\n\t\t{ point, url, embed }: Extract<TLExternalContent, { type: 'embed' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst { width, height } = embed\n\n\t\tconst shapePartial: TLShapePartial<TLEmbedShape> = {\n\t\t\tid: createShapeId(),\n\t\t\ttype: 'embed',\n\t\t\tx: position.x - (width || 450) / 2,\n\t\t\ty: position.y - (height || 450) / 2,\n\t\t\tprops: {\n\t\t\t\tw: width,\n\t\t\t\th: height,\n\t\t\t\turl,\n\t\t\t},\n\t\t}\n\n\t\teditor.createShapes([shapePartial], true)\n\t}\n\n\t/**\n\t * Handle files from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleFiles = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleFiles(\n\t\teditor: Editor,\n\t\t{ point, files }: Extract<TLExternalContent, { type: 'files' }>\n\t) {\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst pagePoint = new Vec2d(position.x, position.y)\n\n\t\tconst assets: TLAsset[] = []\n\n\t\tawait Promise.all(\n\t\t\tfiles.map(async (file, i) => {\n\t\t\t\t// Use mime type instead of file ext, this is because\n\t\t\t\t// window.navigator.clipboard does not preserve file names\n\t\t\t\t// of copied files.\n\t\t\t\tif (!file.type) throw new Error('No mime type')\n\n\t\t\t\t// We can only accept certain extensions (either images or a videos)\n\t\t\t\tif (!ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).includes(file.type)) {\n\t\t\t\t\tconsole.warn(`${file.name} not loaded - Extension not allowed.`)\n\t\t\t\t\treturn null\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst asset = await this.createAssetFromFile(editor, file)\n\n\t\t\t\t\tif (!asset) throw Error('Could not create an asset')\n\n\t\t\t\t\tassets[i] = asset\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\n\t\tthis.createShapesForAssets(editor, compact(assets), pagePoint)\n\t}\n\n\t/**\n\t * Handle plain text from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleText = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\tasync handleText(editor: Editor, { point, text }: Extract<TLExternalContent, { type: 'text' }>) {\n\t\tconst p =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst defaultProps = editor.getShapeUtil(TextShapeUtil).defaultProps()\n\n\t\tconst textToPaste = stripTrailingWhitespace(\n\t\t\tstripCommonMinimumIndentation(replaceTabsWithSpaces(text))\n\t\t)\n\n\t\t// Measure the text with default values\n\t\tlet w: number\n\t\tlet h: number\n\t\tlet autoSize: boolean\n\t\tlet align = 'middle' as TLTextShapeProps['align']\n\n\t\tconst isMultiLine = textToPaste.split('\\n').length > 1\n\n\t\t// check whether the text contains the most common characters in RTL languages\n\t\tconst isRtl = rtlRegex.test(textToPaste)\n\n\t\tif (isMultiLine) {\n\t\t\talign = isMultiLine ? (isRtl ? 'end' : 'start') : 'middle'\n\t\t}\n\n\t\tconst rawSize = editor.textMeasure.measureText(textToPaste, {\n\t\t\t...TEXT_PROPS,\n\t\t\tfontFamily: FONT_FAMILIES[defaultProps.font],\n\t\t\tfontSize: FONT_SIZES[defaultProps.size],\n\t\t\twidth: 'fit-content',\n\t\t})\n\n\t\tconst minWidth = Math.min(\n\t\t\tisMultiLine ? editor.viewportPageBounds.width * 0.9 : 920,\n\t\t\tMath.max(200, editor.viewportPageBounds.width * 0.9)\n\t\t)\n\n\t\tif (rawSize.w > minWidth) {\n\t\t\tconst shrunkSize = editor.textMeasure.measureText(textToPaste, {\n\t\t\t\t...TEXT_PROPS,\n\t\t\t\tfontFamily: FONT_FAMILIES[defaultProps.font],\n\t\t\t\tfontSize: FONT_SIZES[defaultProps.size],\n\t\t\t\twidth: minWidth + 'px',\n\t\t\t})\n\t\t\tw = shrunkSize.w\n\t\t\th = shrunkSize.h\n\t\t\tautoSize = false\n\t\t\talign = isRtl ? 'end' : 'start'\n\t\t} else {\n\t\t\t// autosize is fine\n\t\t\tw = rawSize.w\n\t\t\th = rawSize.h\n\t\t\tautoSize = true\n\t\t}\n\n\t\tif (p.y - h / 2 < editor.viewportPageBounds.minY + 40) {\n\t\t\tp.y = editor.viewportPageBounds.minY + 40 + h / 2\n\t\t}\n\n\t\teditor.createShapes<TLTextShape>([\n\t\t\t{\n\t\t\t\tid: createShapeId(),\n\t\t\t\ttype: 'text',\n\t\t\t\tx: p.x - w / 2,\n\t\t\t\ty: p.y - h / 2,\n\t\t\t\tprops: {\n\t\t\t\t\ttext: textToPaste,\n\t\t\t\t\t// if the text has more than one line, align it to the left\n\t\t\t\t\talign,\n\t\t\t\t\tautoSize,\n\t\t\t\t\tw,\n\t\t\t\t},\n\t\t\t},\n\t\t])\n\t}\n\n\t/**\n\t * Handle urls from an external source. Feeling lucky? Overwrite this at runtime to change the way this type of external content is handled.\n\t *\n\t * @example\n\t * ```ts\n\t * editor.this.handleUrl = myCustomMethod\n\t * ```\n\t *\n\t * @param editor - The editor instance\n\t * @param info - The info object describing the external content.\n\t *\n\t * @public\n\t */\n\thandleUrl = async (\n\t\teditor: Editor,\n\t\t{ point, url }: Extract<TLExternalContent, { type: 'url' }>\n\t) => {\n\t\t// try to paste as an embed first\n\t\tconst embedInfo = getEmbedInfo(url)\n\n\t\tif (embedInfo) {\n\t\t\treturn this.handleEmbed(editor, {\n\t\t\t\ttype: 'embed',\n\t\t\t\turl: embedInfo.url,\n\t\t\t\tpoint,\n\t\t\t\tembed: embedInfo.definition,\n\t\t\t})\n\t\t}\n\n\t\tconst position =\n\t\t\tpoint ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.viewportPageCenter)\n\n\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(url))\n\n\t\t// Use an existing asset if we have one, or else else create a new one\n\t\tlet asset = editor.getAssetById(assetId) as TLAsset\n\t\tlet shouldAlsoCreateAsset = false\n\t\tif (!asset) {\n\t\t\tshouldAlsoCreateAsset = true\n\t\t\tasset = await this.createAssetFromUrl(editor, url)\n\t\t}\n\n\t\teditor.batch(() => {\n\t\t\tif (shouldAlsoCreateAsset) {\n\t\t\t\teditor.createAssets([asset])\n\t\t\t}\n\n\t\t\tthis.createShapesForAssets(editor, [asset], position)\n\t\t})\n\t}\n\n\tasync createShapesForAssets(editor: Editor, assets: TLAsset[], position: VecLike) {\n\t\tif (!assets.length) return\n\n\t\tconst currentPoint = Vec2d.From(position)\n\t\tconst paritals: TLShapePartial[] = []\n\n\t\tfor (const asset of assets) {\n\t\t\tswitch (asset.type) {\n\t\t\t\tcase 'bookmark': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'bookmark',\n\t\t\t\t\t\tx: currentPoint.x - 150,\n\t\t\t\t\t\ty: currentPoint.y - 160,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\turl: asset.props.src,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += 300\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'image': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\tx: currentPoint.x - asset.props.w / 2,\n\t\t\t\t\t\ty: currentPoint.y - asset.props.h / 2,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\tw: asset.props.w,\n\t\t\t\t\t\t\th: asset.props.h,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += asset.props.w\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'video': {\n\t\t\t\t\tparitals.push({\n\t\t\t\t\t\tid: createShapeId(),\n\t\t\t\t\t\ttype: 'video',\n\t\t\t\t\t\tx: currentPoint.x - asset.props.w / 2,\n\t\t\t\t\t\ty: currentPoint.y - asset.props.h / 2,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tassetId: asset.id,\n\t\t\t\t\t\t\tw: asset.props.w,\n\t\t\t\t\t\t\th: asset.props.h,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tcurrentPoint.x += asset.props.w\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\teditor.batch(() => {\n\t\t\t// Create any assets\n\t\t\tconst assetsToCreate = assets.filter((asset) => !editor.getAssetById(asset.id))\n\t\t\tif (assetsToCreate.length) {\n\t\t\t\teditor.createAssets(assetsToCreate)\n\t\t\t}\n\n\t\t\t// Create the shapes\n\t\t\teditor.createShapes(paritals, true)\n\n\t\t\t// Re-position shapes so that the center of the group is at the provided point\n\t\t\tconst { viewportPageBounds } = editor\n\t\t\tlet { selectedPageBounds } = editor\n\n\t\t\tif (selectedPageBounds) {\n\t\t\t\tconst offset = selectedPageBounds!.center.sub(position)\n\n\t\t\t\teditor.updateShapes(\n\t\t\t\t\tparitals.map((partial) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: partial.id,\n\t\t\t\t\t\t\ttype: partial.type,\n\t\t\t\t\t\t\tx: partial.x! - offset.x,\n\t\t\t\t\t\t\ty: partial.y! - offset.y,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t// Zoom out to fit the shapes, if necessary\n\t\t\tselectedPageBounds = editor.selectedPageBounds\n\t\t\tif (selectedPageBounds && !viewportPageBounds.contains(selectedPageBounds)) {\n\t\t\t\teditor.zoomToSelection()\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Override this method to change how assets are created from files.\n\t *\n\t * @param editor - The editor instance\n\t * @param file - The file to create the asset from.\n\t */\n\tasync createAssetFromFile(_editor: Editor, file: File): Promise<TLAsset> {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.onerror = () => reject(reader.error)\n\t\t\treader.onload = async () => {\n\t\t\t\tlet dataUrl = reader.result as string\n\n\t\t\t\tconst isImageType = isImage(file.type)\n\t\t\t\tconst sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc\n\n\t\t\t\t// Hack to make .mov videos work via dataURL.\n\t\t\t\tif (file.type === 'video/quicktime' && dataUrl.includes('video/quicktime')) {\n\t\t\t\t\tdataUrl = dataUrl.replace('video/quicktime', 'video/mp4')\n\t\t\t\t}\n\n\t\t\t\tconst originalSize = await sizeFn(dataUrl)\n\t\t\t\tconst size = containBoxSize(originalSize, { w: MAX_ASSET_WIDTH, h: MAX_ASSET_HEIGHT })\n\n\t\t\t\tif (size !== originalSize && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n\t\t\t\t\t// If we created a new size and the type is an image, rescale the image\n\t\t\t\t\tdataUrl = await getResizedImageDataUrl(dataUrl, size.w, size.h)\n\t\t\t\t}\n\n\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(dataUrl))\n\n\t\t\t\tconst metadata = await getFileMetaData(file)\n\n\t\t\t\tconst asset: Extract<TLAsset, { type: 'image' | 'video' }> = {\n\t\t\t\t\tid: assetId,\n\t\t\t\t\ttype: isImageType ? 'image' : 'video',\n\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tname: file.name,\n\t\t\t\t\t\tsrc: dataUrl,\n\t\t\t\t\t\tw: size.w,\n\t\t\t\t\t\th: size.h,\n\t\t\t\t\t\tmimeType: file.type,\n\t\t\t\t\t\tisAnimated: metadata.isAnimated,\n\t\t\t\t\t},\n\t\t\t\t}\n\n\t\t\t\tresolve(asset)\n\t\t\t}\n\n\t\t\treader.readAsDataURL(file)\n\t\t})\n\t}\n\n\t/**\n\t * Override me to change the way assets are created from urls.\n\t *\n\t * @param editor - The editor instance\n\t * @param url - The url to create the asset from\n\t */\n\tasync createAssetFromUrl(_editor: Editor, url: string): Promise<TLAsset> {\n\t\tlet meta: { image: string; title: string; description: string }\n\n\t\ttry {\n\t\t\tconst resp = await fetch(url, { method: 'GET', mode: 'no-cors' })\n\t\t\tconst html = await resp.text()\n\t\t\tconst doc = new DOMParser().parseFromString(html, 'text/html')\n\t\t\tmeta = {\n\t\t\t\timage: doc.head.querySelector('meta[property=\"og:image\"]')?.getAttribute('content') ?? '',\n\t\t\t\ttitle:\n\t\t\t\t\tdoc.head.querySelector('meta[property=\"og:title\"]')?.getAttribute('content') ??\n\t\t\t\t\ttruncateStringWithEllipsis(url, 32),\n\t\t\t\tdescription:\n\t\t\t\t\tdoc.head.querySelector('meta[property=\"og:description\"]')?.getAttribute('content') ?? '',\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tmeta = { image: '', title: truncateStringWithEllipsis(url, 32), description: '' }\n\t\t}\n\n\t\t// Create the bookmark asset from the meta\n\t\treturn {\n\t\t\tid: AssetRecordType.createId(getHashForString(url)),\n\t\t\ttypeName: 'asset',\n\t\t\ttype: 'bookmark',\n\t\t\tprops: {\n\t\t\t\tsrc: url,\n\t\t\t\tdescription: meta.description,\n\t\t\t\timage: meta.image,\n\t\t\t\ttitle: meta.title,\n\t\t\t},\n\t\t}\n\t}\n}\n\n/* --------------------- Helpers -------------------- */\n\nconst rtlRegex = /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/\n\n/**\n * Replace any tabs with double spaces.\n * @param text - The text to replace tabs in.\n * @internal\n */\nfunction replaceTabsWithSpaces(text: string) {\n\treturn text.replace(/\\t/g, INDENT)\n}\n\n/**\n * Strip common minimum indentation from each line.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripCommonMinimumIndentation(text: string): string {\n\t// Split the text into individual lines\n\tconst lines = text.split('\\n')\n\n\t// remove any leading lines that are only whitespace or newlines\n\twhile (lines[0].trim().length === 0) {\n\t\tlines.shift()\n\t}\n\n\tlet minIndentation = Infinity\n\tfor (const line of lines) {\n\t\tif (line.trim().length > 0) {\n\t\t\tconst indentation = line.length - line.trimStart().length\n\t\t\tminIndentation = Math.min(minIndentation, indentation)\n\t\t}\n\t}\n\n\treturn lines.map((line) => line.slice(minIndentation)).join('\\n')\n}\n\n/**\n * Strip trailing whitespace from each line and remove any trailing newlines.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripTrailingWhitespace(text: string): string {\n\treturn text.replace(/[ \\t]+$/gm, '').replace(/\\n+$/, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}