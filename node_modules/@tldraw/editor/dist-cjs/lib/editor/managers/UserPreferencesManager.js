"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UserPreferencesManager_exports = {};
__export(UserPreferencesManager_exports, {
  UserPreferencesManager: () => UserPreferencesManager
});
module.exports = __toCommonJS(UserPreferencesManager_exports);
class UserPreferencesManager {
  constructor(user) {
    this.user = user;
  }
  updateUserPreferences = (userPreferences) => {
    this.user.setUserPreferences({
      ...this.user.userPreferences.value,
      ...userPreferences
    });
  };
  get userPreferences() {
    return this.user.userPreferences;
  }
  get isDarkMode() {
    return this.user.userPreferences.value.isDarkMode;
  }
  get animationSpeed() {
    return this.user.userPreferences.value.animationSpeed;
  }
  get id() {
    return this.user.userPreferences.value.id;
  }
  get name() {
    return this.user.userPreferences.value.name;
  }
  get locale() {
    return this.user.userPreferences.value.locale;
  }
  get color() {
    return this.user.userPreferences.value.color;
  }
  get isSnapMode() {
    return this.user.userPreferences.value.isSnapMode;
  }
}
//# sourceMappingURL=UserPreferencesManager.js.map
