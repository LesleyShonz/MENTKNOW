{"ast":null,"code":"import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { EASINGS, getStrokeOutlinePoints, getStrokePoints, perimeterOfEllipse, PI2, setStrokePointRadii, TAU, Vec2d } from \"@tldraw/primitives\";\nimport { rng } from \"@tldraw/utils\";\nimport * as React from \"react\";\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from \"../../../../utils/svg.mjs\";\nimport { getShapeFillSvg, getSvgWithShapeFill, ShapeFill } from \"../../shared/ShapeFill.mjs\";\nvar DrawStyleEllipse = React.memo(function DrawStyleEllipse2(_ref) {\n  var id = _ref.id,\n    w = _ref.w,\n    h = _ref.h,\n    sw = _ref.strokeWidth,\n    fill = _ref.fill,\n    color = _ref.color;\n  var innerPath = getEllipseIndicatorPath(id, w, h, sw);\n  var outerPath = getEllipsePath(id, w, h, sw);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ShapeFill, {\n      d: innerPath,\n      color: color,\n      fill: fill\n    }), /* @__PURE__ */jsx(\"path\", {\n      d: outerPath,\n      fill: \"var(--palette-\".concat(color, \")\"),\n      strokeWidth: 0,\n      pointerEvents: \"all\"\n    })]\n  });\n});\nfunction DrawStyleEllipseSvg(_ref2) {\n  var id = _ref2.id,\n    w = _ref2.w,\n    h = _ref2.h,\n    sw = _ref2.strokeWidth,\n    fill = _ref2.fill,\n    color = _ref2.color,\n    colors = _ref2.colors;\n  var strokeElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  strokeElement.setAttribute(\"d\", getEllipsePath(id, w, h, sw));\n  strokeElement.setAttribute(\"fill\", colors.fill[color]);\n  var fillElement = getShapeFillSvg({\n    d: getEllipseIndicatorPath(id, w, h, sw),\n    fill: fill,\n    color: color,\n    colors: colors\n  });\n  return getSvgWithShapeFill(strokeElement, fillElement);\n}\nfunction getEllipseStrokeOptions(strokeWidth) {\n  return {\n    size: 1 + strokeWidth,\n    thinning: 0.25,\n    end: {\n      taper: strokeWidth\n    },\n    start: {\n      taper: strokeWidth\n    },\n    streamline: 0,\n    smoothing: 1,\n    simulatePressure: false\n  };\n}\nfunction getEllipseStrokePoints(id, width, height, strokeWidth) {\n  var getRandom = rng(id);\n  var rx = width / 2;\n  var ry = height / 2;\n  var perimeter = perimeterOfEllipse(rx, ry);\n  var points = [];\n  var start = PI2 * getRandom();\n  var length = PI2 + TAU / 2 + Math.abs(getRandom()) * TAU;\n  var count = Math.max(16, perimeter / 10);\n  for (var i = 0; i < count; i++) {\n    var t = i / (count - 1);\n    var r = start + t * length;\n    var c = Math.cos(r);\n    var s = Math.sin(r);\n    points.push(new Vec2d(rx * c + width * 0.5 + 0.05 * getRandom(), ry * s + height / 2 + 0.05 * getRandom(), Math.min(1, 0.5 + Math.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t) : EASINGS.easeInExpo(t))) / 2)));\n  }\n  return getStrokePoints(points, getEllipseStrokeOptions(strokeWidth));\n}\nfunction getEllipsePath(id, width, height, strokeWidth) {\n  var options = getEllipseStrokeOptions(strokeWidth);\n  return getSvgPathFromStroke(getStrokeOutlinePoints(setStrokePointRadii(getEllipseStrokePoints(id, width, height, strokeWidth), options), options));\n}\nfunction getEllipseIndicatorPath(id, width, height, strokeWidth) {\n  return getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth));\n}\nexport { DrawStyleEllipse, DrawStyleEllipseSvg, getEllipseIndicatorPath, getEllipsePath, getEllipseStrokeOptions, getEllipseStrokePoints };","map":{"version":3,"names":["Fragment","jsx","jsxs","EASINGS","getStrokeOutlinePoints","getStrokePoints","perimeterOfEllipse","PI2","setStrokePointRadii","TAU","Vec2d","rng","React","getSvgPathFromStroke","getSvgPathFromStrokePoints","getShapeFillSvg","getSvgWithShapeFill","ShapeFill","DrawStyleEllipse","memo","DrawStyleEllipse2","_ref","id","w","h","sw","strokeWidth","fill","color","innerPath","getEllipseIndicatorPath","outerPath","getEllipsePath","children","d","concat","pointerEvents","DrawStyleEllipseSvg","_ref2","colors","strokeElement","document","createElementNS","setAttribute","fillElement","getEllipseStrokeOptions","size","thinning","end","taper","start","streamline","smoothing","simulatePressure","getEllipseStrokePoints","width","height","getRandom","rx","ry","perimeter","points","length","Math","abs","count","max","i","t","r","c","cos","s","sin","push","min","easeInOutSine","easeInExpo","options"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/geo/components/DrawStyleEllipse.tsx"],"sourcesContent":["import {\n\tEASINGS,\n\tgetStrokeOutlinePoints,\n\tgetStrokePoints,\n\tperimeterOfEllipse,\n\tPI2,\n\tsetStrokePointRadii,\n\tTAU,\n\tVec2d,\n} from '@tldraw/primitives'\nimport { TLGeoShape, TLShapeId } from '@tldraw/tlschema'\nimport { rng } from '@tldraw/utils'\nimport * as React from 'react'\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from '../../../../utils/svg'\nimport { getShapeFillSvg, getSvgWithShapeFill, ShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\n\nexport const DrawStyleEllipse = React.memo(function DrawStyleEllipse({\n\tid,\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n}) {\n\tconst innerPath = getEllipseIndicatorPath(id, w, h, sw)\n\tconst outerPath = getEllipsePath(id, w, h, sw)\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={innerPath} color={color} fill={fill} />\n\t\t\t<path d={outerPath} fill={`var(--palette-${color})`} strokeWidth={0} pointerEvents=\"all\" />\n\t\t</>\n\t)\n})\n\nexport function DrawStyleEllipseSvg({\n\tid,\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n\tcolors,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n\tcolors: TLExportColors\n}) {\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', getEllipsePath(id, w, h, sw))\n\tstrokeElement.setAttribute('fill', colors.fill[color])\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td: getEllipseIndicatorPath(id, w, h, sw),\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n\nexport function getEllipseStrokeOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: 1 + strokeWidth,\n\t\tthinning: 0.25,\n\t\tend: { taper: strokeWidth },\n\t\tstart: { taper: strokeWidth },\n\t\tstreamline: 0,\n\t\tsmoothing: 1,\n\t\tsimulatePressure: false,\n\t}\n}\n\nexport function getEllipseStrokePoints(\n\tid: string,\n\twidth: number,\n\theight: number,\n\tstrokeWidth: number\n) {\n\tconst getRandom = rng(id)\n\n\tconst rx = width / 2\n\tconst ry = height / 2\n\tconst perimeter = perimeterOfEllipse(rx, ry)\n\n\tconst points: Vec2d[] = []\n\n\tconst start = PI2 * getRandom()\n\tconst length = PI2 + TAU / 2 + Math.abs(getRandom()) * TAU\n\tconst count = Math.max(16, perimeter / 10)\n\n\tfor (let i = 0; i < count; i++) {\n\t\tconst t = i / (count - 1)\n\t\tconst r = start + t * length\n\t\tconst c = Math.cos(r)\n\t\tconst s = Math.sin(r)\n\t\tpoints.push(\n\t\t\tnew Vec2d(\n\t\t\t\trx * c + width * 0.5 + 0.05 * getRandom(),\n\t\t\t\try * s + height / 2 + 0.05 * getRandom(),\n\t\t\t\tMath.min(\n\t\t\t\t\t1,\n\t\t\t\t\t0.5 +\n\t\t\t\t\t\tMath.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t) : EASINGS.easeInExpo(t))) / 2\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t}\n\n\treturn getStrokePoints(points, getEllipseStrokeOptions(strokeWidth))\n}\n\nexport function getEllipsePath(id: string, width: number, height: number, strokeWidth: number) {\n\tconst options = getEllipseStrokeOptions(strokeWidth)\n\treturn getSvgPathFromStroke(\n\t\tgetStrokeOutlinePoints(\n\t\t\tsetStrokePointRadii(getEllipseStrokePoints(id, width, height, strokeWidth), options),\n\t\t\toptions\n\t\t)\n\t)\n}\n\nexport function getEllipseIndicatorPath(\n\tid: string,\n\twidth: number,\n\theight: number,\n\tstrokeWidth: number\n) {\n\treturn getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}