{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EASINGS } from \"./easings.mjs\";\nvar Vec2d = /*#__PURE__*/function () {\n  function Vec2d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    _classCallCheck(this, Vec2d);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  _createClass(Vec2d, [{\n    key: \"pressure\",\n    get: function get() {\n      return this.z;\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.x;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.y;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.z;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n  }, {\n    key: \"setTo\",\n    value: function setTo(_ref) {\n      var _ref$x = _ref.x,\n        x = _ref$x === void 0 ? 0 : _ref$x,\n        _ref$y = _ref.y,\n        y = _ref$y === void 0 ? 0 : _ref$y,\n        _ref$z = _ref.z,\n        z = _ref$z === void 0 ? 1 : _ref$z;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n  }, {\n    key: \"rot\",\n    value: function rot(r) {\n      if (r === 0) return this;\n      var x = this.x,\n        y = this.y;\n      var s = Math.sin(r);\n      var c = Math.cos(r);\n      this.x = x * c - y * s;\n      this.y = x * s + y * c;\n      return this;\n    }\n  }, {\n    key: \"rotWith\",\n    value: function rotWith(C, r) {\n      if (r === 0) return this;\n      var x = this.x - C.x;\n      var y = this.y - C.y;\n      var s = Math.sin(r);\n      var c = Math.cos(r);\n      this.x = C.x + (x * c - y * s);\n      this.y = C.y + (x * s + y * c);\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var x = this.x,\n        y = this.y,\n        z = this.z;\n      return new Vec2d(x, y, z);\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(V) {\n      this.x -= V.x;\n      this.y -= V.y;\n      return this;\n    }\n  }, {\n    key: \"subXY\",\n    value: function subXY(x, y) {\n      this.x -= x;\n      this.y -= y;\n      return this;\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(n) {\n      this.x -= n;\n      this.y -= n;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(V) {\n      this.x += V.x;\n      this.y += V.y;\n      return this;\n    }\n  }, {\n    key: \"addXY\",\n    value: function addXY(x, y) {\n      this.x += x;\n      this.y += y;\n      return this;\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(n) {\n      this.x += n;\n      this.y += n;\n      return this;\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(min, max) {\n      this.x = Math.max(this.x, min);\n      this.y = Math.max(this.y, min);\n      if (max !== void 0) {\n        this.x = Math.min(this.x, max);\n        this.y = Math.min(this.y, max);\n      }\n      return this;\n    }\n  }, {\n    key: \"div\",\n    value: function div(t) {\n      this.x /= t;\n      this.y /= t;\n      return this;\n    }\n  }, {\n    key: \"divV\",\n    value: function divV(V) {\n      this.x /= V.x;\n      this.y /= V.y;\n      return this;\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(t) {\n      this.x *= t;\n      this.y *= t;\n      return this;\n    }\n  }, {\n    key: \"mulV\",\n    value: function mulV(V) {\n      this.x *= V.x;\n      this.y *= V.y;\n      return this;\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      this.x = Math.abs(this.x);\n      this.y = Math.abs(this.y);\n      return this;\n    }\n  }, {\n    key: \"nudge\",\n    value: function nudge(B, distance) {\n      var tan = Vec2d.Tan(B, this);\n      return this.add(tan.mul(distance));\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      this.x *= -1;\n      this.y *= -1;\n      return this;\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(V) {\n      this.x = this.y * V.z - this.z * V.y;\n      this.y = this.z * V.x - this.x * V.z;\n      return this;\n    }\n  }, {\n    key: \"dpr\",\n    value: function dpr(V) {\n      return Vec2d.Dpr(this, V);\n    }\n  }, {\n    key: \"cpr\",\n    value: function cpr(V) {\n      return Vec2d.Cpr(this, V);\n    }\n  }, {\n    key: \"len2\",\n    value: function len2() {\n      return Vec2d.Len2(this);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return Vec2d.Len(this);\n    }\n  }, {\n    key: \"pry\",\n    value: function pry(V) {\n      return Vec2d.Pry(this, V);\n    }\n  }, {\n    key: \"per\",\n    value: function per() {\n      var x = this.x,\n        y = this.y;\n      this.x = y;\n      this.y = -x;\n      return this;\n    }\n  }, {\n    key: \"uni\",\n    value: function uni() {\n      return Vec2d.Uni(this);\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(V) {\n      return Vec2d.Tan(this, V);\n    }\n  }, {\n    key: \"dist\",\n    value: function dist(V) {\n      return Vec2d.Dist(this, V);\n    }\n  }, {\n    key: \"distanceToLineSegment\",\n    value: function distanceToLineSegment(A, B) {\n      return Vec2d.DistanceToLineSegment(A, B, this);\n    }\n  }, {\n    key: \"slope\",\n    value: function slope(B) {\n      return Vec2d.Slope(this, B);\n    }\n  }, {\n    key: \"snapToGrid\",\n    value: function snapToGrid(gridSize) {\n      this.x = Math.round(this.x / gridSize) * gridSize;\n      this.y = Math.round(this.y / gridSize) * gridSize;\n      return this;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle(B) {\n      return Vec2d.Angle(this, B);\n    }\n  }, {\n    key: \"toAngle\",\n    value: function toAngle() {\n      return Vec2d.ToAngle(this);\n    }\n  }, {\n    key: \"lrp\",\n    value: function lrp(B, t) {\n      this.x = this.x + (B.x - this.x) * t;\n      this.y = this.y + (B.y - this.y) * t;\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(B) {\n      return Vec2d.Equals(this, B);\n    }\n  }, {\n    key: \"equalsXY\",\n    value: function equalsXY(x, y) {\n      return Vec2d.EqualsXY(this, x, y);\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      var l = this.len();\n      this.x = l === 0 ? 0 : this.x / l;\n      this.y = l === 0 ? 0 : this.y / l;\n      return this;\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed() {\n      return Vec2d.ToFixed(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return Vec2d.ToString(Vec2d.ToFixed(this));\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      return Vec2d.ToJson(this);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return Vec2d.ToArray(this);\n    }\n  }], [{\n    key: \"Add\",\n    value: function Add(A, B) {\n      return new Vec2d(A.x + B.x, A.y + B.y);\n    }\n  }, {\n    key: \"AddXY\",\n    value: function AddXY(A, x, y) {\n      return new Vec2d(A.x + x, A.y + y);\n    }\n  }, {\n    key: \"Sub\",\n    value: function Sub(A, B) {\n      return new Vec2d(A.x - B.x, A.y - B.y);\n    }\n  }, {\n    key: \"SubXY\",\n    value: function SubXY(A, x, y) {\n      return new Vec2d(A.x - x, A.y - y);\n    }\n  }, {\n    key: \"AddScalar\",\n    value: function AddScalar(A, n) {\n      return new Vec2d(A.x + n, A.y + n);\n    }\n  }, {\n    key: \"SubScalar\",\n    value: function SubScalar(A, n) {\n      return new Vec2d(A.x - n, A.y - n);\n    }\n  }, {\n    key: \"Div\",\n    value: function Div(A, t) {\n      return new Vec2d(A.x / t, A.y / t);\n    }\n  }, {\n    key: \"Mul\",\n    value: function Mul(A, t) {\n      return new Vec2d(A.x * t, A.y * t);\n    }\n  }, {\n    key: \"DivV\",\n    value: function DivV(A, B) {\n      return new Vec2d(A.x / B.x, A.y / B.y);\n    }\n  }, {\n    key: \"MulV\",\n    value: function MulV(A, B) {\n      return new Vec2d(A.x * B.x, A.y * B.y);\n    }\n  }, {\n    key: \"Neg\",\n    value: function Neg(A) {\n      return new Vec2d(-A.x, -A.y);\n    }\n  }, {\n    key: \"Per\",\n    value: function Per(A) {\n      return new Vec2d(A.y, -A.x);\n    }\n  }, {\n    key: \"Dist2\",\n    value: function Dist2(A, B) {\n      return Vec2d.Sub(A, B).len2();\n    }\n  }, {\n    key: \"Abs\",\n    value: function Abs(A) {\n      return new Vec2d(Math.abs(A.x), Math.abs(A.y));\n    }\n  }, {\n    key: \"Dist\",\n    value: function Dist(A, B) {\n      return Math.hypot(A.y - B.y, A.x - B.x);\n    }\n  }, {\n    key: \"Dpr\",\n    value: function Dpr(A, B) {\n      return A.x * B.x + A.y * B.y;\n    }\n  }, {\n    key: \"Cross\",\n    value: function Cross(A, V) {\n      return new Vec2d(A.y * V.z - A.z * V.y, A.z * V.x - A.x * V.z\n      // A.z = A.x * V.y - A.y * V.x\n      );\n    }\n  }, {\n    key: \"Cpr\",\n    value: function Cpr(A, B) {\n      return A.x * B.y - B.x * A.y;\n    }\n  }, {\n    key: \"Len2\",\n    value: function Len2(A) {\n      return A.x * A.x + A.y * A.y;\n    }\n  }, {\n    key: \"Len\",\n    value: function Len(A) {\n      return Math.sqrt(Vec2d.Len2(A));\n    }\n  }, {\n    key: \"Pry\",\n    value: function Pry(A, B) {\n      return Vec2d.Dpr(A, B) / Vec2d.Len(B);\n    }\n  }, {\n    key: \"Uni\",\n    value: function Uni(A) {\n      return Vec2d.Div(A, Vec2d.Len(A));\n    }\n  }, {\n    key: \"Tan\",\n    value: function Tan(A, B) {\n      return Vec2d.Uni(Vec2d.Sub(A, B));\n    }\n  }, {\n    key: \"Min\",\n    value: function Min(A, B) {\n      return new Vec2d(Math.min(A.x, B.x), Math.min(A.y, B.y));\n    }\n  }, {\n    key: \"Max\",\n    value: function Max(A, B) {\n      return new Vec2d(Math.max(A.x, B.x), Math.max(A.y, B.y));\n    }\n  }, {\n    key: \"From\",\n    value: function From(_ref2) {\n      var x = _ref2.x,\n        y = _ref2.y,\n        _ref2$z = _ref2.z,\n        z = _ref2$z === void 0 ? 1 : _ref2$z;\n      return new Vec2d(x, y, z);\n    }\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(v) {\n      return new Vec2d(v[0], v[1]);\n    }\n  }, {\n    key: \"Rot\",\n    value: function Rot(A) {\n      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var s = Math.sin(r);\n      var c = Math.cos(r);\n      return new Vec2d(A.x * c - A.y * s, A.x * s + A.y * c);\n    }\n  }, {\n    key: \"RotWith\",\n    value: function RotWith(A, C, r) {\n      var x = A.x - C.x;\n      var y = A.y - C.y;\n      var s = Math.sin(r);\n      var c = Math.cos(r);\n      return new Vec2d(C.x + (x * c - y * s), C.y + (x * s + y * c));\n    }\n    /**\n     * Get the nearest point on a line with a known unit vector that passes through point A\n     *\n     * ```ts\n     * Vec.nearestPointOnLineThroughPoint(A, u, Point)\n     * ```\n     *\n     * @param A - Any point on the line\n     * @param u - The unit vector for the line.\n     * @param P - A point not on the line to test.\n     */\n  }, {\n    key: \"NearestPointOnLineThroughPoint\",\n    value: function NearestPointOnLineThroughPoint(A, u, P) {\n      return Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)).add(A);\n    }\n  }, {\n    key: \"NearestPointOnLineSegment\",\n    value: function NearestPointOnLineSegment(A, B, P) {\n      var clamp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var u = Vec2d.Tan(B, A);\n      var C = Vec2d.Add(A, Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)));\n      if (clamp) {\n        if (C.x < Math.min(A.x, B.x)) return Vec2d.Cast(A.x < B.x ? A : B);\n        if (C.x > Math.max(A.x, B.x)) return Vec2d.Cast(A.x > B.x ? A : B);\n        if (C.y < Math.min(A.y, B.y)) return Vec2d.Cast(A.y < B.y ? A : B);\n        if (C.y > Math.max(A.y, B.y)) return Vec2d.Cast(A.y > B.y ? A : B);\n      }\n      return C;\n    }\n  }, {\n    key: \"DistanceToLineThroughPoint\",\n    value: function DistanceToLineThroughPoint(A, u, P) {\n      return Vec2d.Dist(P, Vec2d.NearestPointOnLineThroughPoint(A, u, P));\n    }\n  }, {\n    key: \"DistanceToLineSegment\",\n    value: function DistanceToLineSegment(A, B, P) {\n      var clamp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return Vec2d.Dist(P, Vec2d.NearestPointOnLineSegment(A, B, P, clamp));\n    }\n  }, {\n    key: \"Snap\",\n    value: function Snap(A) {\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return new Vec2d(Math.round(A.x / step) * step, Math.round(A.y / step) * step);\n    }\n  }, {\n    key: \"Cast\",\n    value: function Cast(A) {\n      if (A instanceof Vec2d) return A;\n      return Vec2d.From(A);\n    }\n  }, {\n    key: \"Slope\",\n    value: function Slope(A, B) {\n      if (A.x === B.y) return NaN;\n      return (A.y - B.y) / (A.x - B.x);\n    }\n  }, {\n    key: \"Angle\",\n    value: function Angle(A, B) {\n      return Math.atan2(B.y - A.y, B.x - A.x);\n    }\n  }, {\n    key: \"Lrp\",\n    value: function Lrp(A, B, t) {\n      return Vec2d.Sub(B, A).mul(t).add(A);\n    }\n  }, {\n    key: \"Med\",\n    value: function Med(A, B) {\n      return new Vec2d((A.x + B.x) / 2, (A.y + B.y) / 2);\n    }\n  }, {\n    key: \"Equals\",\n    value: function Equals(A, B) {\n      return Math.abs(A.x - B.x) < 1e-4 && Math.abs(A.y - B.y) < 1e-4;\n    }\n  }, {\n    key: \"EqualsXY\",\n    value: function EqualsXY(A, x, y) {\n      return A.x === x && A.y === y;\n    }\n  }, {\n    key: \"Clockwise\",\n    value: function Clockwise(A, B, C) {\n      return (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0;\n    }\n  }, {\n    key: \"Rescale\",\n    value: function Rescale(A, n) {\n      var l = Vec2d.Len(A);\n      return new Vec2d(n * A.x / l, n * A.y / l);\n    }\n  }, {\n    key: \"ScaleWithOrigin\",\n    value: function ScaleWithOrigin(A, scale, origin) {\n      return Vec2d.Sub(A, origin).mul(scale).add(origin);\n    }\n  }, {\n    key: \"ToFixed\",\n    value: function ToFixed(A) {\n      var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      return new Vec2d(+A.x.toFixed(n), +A.y.toFixed(n), +A.z.toFixed(n));\n    }\n  }, {\n    key: \"Nudge\",\n    value: function Nudge(A, B, distance) {\n      return Vec2d.Add(A, Vec2d.Tan(B, A).mul(distance));\n    }\n  }, {\n    key: \"ToString\",\n    value: function ToString(A) {\n      return \"\".concat(A.x, \", \").concat(A.y);\n    }\n  }, {\n    key: \"ToAngle\",\n    value: function ToAngle(A) {\n      var r = Math.atan2(A.y, A.x);\n      if (r < 0) r += Math.PI * 2;\n      return r;\n    }\n  }, {\n    key: \"ToArray\",\n    value: function ToArray(A) {\n      return [A.x, A.y, A.z];\n    }\n  }, {\n    key: \"ToJson\",\n    value: function ToJson(A) {\n      var x = A.x,\n        y = A.y,\n        z = A.z;\n      return {\n        x: x,\n        y: y,\n        z: z\n      };\n    }\n  }, {\n    key: \"Average\",\n    value: function Average(arr) {\n      var len = arr.length;\n      var avg = new Vec2d(0, 0);\n      for (var i = 0; i < len; i++) {\n        avg.add(arr[i]);\n      }\n      return avg.div(len);\n    }\n  }, {\n    key: \"Clamp\",\n    value: function Clamp(A, min, max) {\n      if (max === void 0) {\n        return new Vec2d(Math.min(Math.max(A.x, min)), Math.min(Math.max(A.y, min)));\n      }\n      return new Vec2d(Math.min(Math.max(A.x, min), max), Math.min(Math.max(A.y, min), max));\n    }\n    /**\n     * Get an array of points (with simulated pressure) between two points.\n     *\n     * @param A - The first point.\n     * @param B - The second point.\n     * @param steps - The number of points to return.\n     */\n  }, {\n    key: \"PointsBetween\",\n    value: function PointsBetween(A, B) {\n      var steps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n      var results = [];\n      for (var i = 0; i < steps; i++) {\n        var t = EASINGS.easeInQuad(i / (steps - 1));\n        var point = Vec2d.Lrp(A, B, t);\n        point.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t)) * 0.65);\n        results.push(point);\n      }\n      return results;\n    }\n  }, {\n    key: \"SnapToGrid\",\n    value: function SnapToGrid(A) {\n      var gridSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      return new Vec2d(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize);\n    }\n  }]);\n  return Vec2d;\n}();\nvar ease = function ease(t) {\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n};\nexport { Vec2d };","map":{"version":3,"names":["EASINGS","Vec2d","x","arguments","length","undefined","y","z","_classCallCheck","_createClass","key","get","value","set","setTo","_ref","_ref$x","_ref$y","_ref$z","rot","r","s","Math","sin","c","cos","rotWith","C","clone","sub","V","subXY","subScalar","n","add","addXY","addScalar","clamp","min","max","div","t","divV","mul","mulV","abs","nudge","B","distance","tan","Tan","neg","cross","dpr","Dpr","cpr","Cpr","len2","Len2","len","Len","pry","Pry","per","uni","Uni","dist","Dist","distanceToLineSegment","A","DistanceToLineSegment","slope","Slope","snapToGrid","gridSize","round","angle","Angle","toAngle","ToAngle","lrp","equals","Equals","equalsXY","EqualsXY","norm","l","toFixed","ToFixed","toString","ToString","toJson","ToJson","toArray","ToArray","Add","AddXY","Sub","SubXY","AddScalar","SubScalar","Div","Mul","DivV","MulV","Neg","Per","Dist2","Abs","hypot","Cross","sqrt","Min","Max","From","_ref2","_ref2$z","FromArray","v","Rot","RotWith","NearestPointOnLineThroughPoint","u","P","NearestPointOnLineSegment","Cast","DistanceToLineThroughPoint","Snap","step","NaN","atan2","Lrp","Med","Clockwise","Rescale","ScaleWithOrigin","scale","origin","Nudge","concat","PI","Average","arr","avg","i","Clamp","PointsBetween","steps","results","easeInQuad","point","ease","push","SnapToGrid"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/primitives/src/lib/Vec2d.ts"],"sourcesContent":["import { Vec2dModel } from '@tldraw/tlschema'\nimport { EASINGS } from './easings'\n\n/** @public */\nexport type VecLike = Vec2d | Vec2dModel\n\n/** @public */\nexport class Vec2d {\n\tconstructor(public x = 0, public y = 0, public z = 1) {}\n\n\tget pressure() {\n\t\treturn this.z\n\t}\n\n\tset(x = this.x, y = this.y, z = this.z) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\tsetTo({ x = 0, y = 0, z = 1 }: VecLike) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\trot(r: number) {\n\t\tif (r === 0) return this\n\t\tconst { x, y } = this\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = x * c - y * s\n\t\tthis.y = x * s + y * c\n\t\treturn this\n\t}\n\n\trotWith(C: VecLike, r: number) {\n\t\tif (r === 0) return this\n\t\tconst x = this.x - C.x\n\t\tconst y = this.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = C.x + (x * c - y * s)\n\t\tthis.y = C.y + (x * s + y * c)\n\t\treturn this\n\t}\n\n\tclone(): Vec2d {\n\t\tconst { x, y, z } = this\n\t\treturn new Vec2d(x, y, z)\n\t}\n\n\tsub(V: VecLike) {\n\t\tthis.x -= V.x\n\t\tthis.y -= V.y\n\t\treturn this\n\t}\n\n\tsubXY(x: number, y: number) {\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t\treturn this\n\t}\n\n\tsubScalar(n: number) {\n\t\tthis.x -= n\n\t\tthis.y -= n\n\t\t// this.z -= n\n\n\t\treturn this\n\t}\n\n\tadd(V: VecLike) {\n\t\tthis.x += V.x\n\t\tthis.y += V.y\n\t\treturn this\n\t}\n\n\taddXY(x: number, y: number) {\n\t\tthis.x += x\n\t\tthis.y += y\n\t\treturn this\n\t}\n\n\taddScalar(n: number) {\n\t\tthis.x += n\n\t\tthis.y += n\n\t\t// this.z += n\n\n\t\treturn this\n\t}\n\n\tclamp(min: number, max?: number) {\n\t\tthis.x = Math.max(this.x, min)\n\t\tthis.y = Math.max(this.y, min)\n\t\tif (max !== undefined) {\n\t\t\tthis.x = Math.min(this.x, max)\n\t\t\tthis.y = Math.min(this.y, max)\n\t\t}\n\t\treturn this\n\t}\n\n\tdiv(t: number) {\n\t\tthis.x /= t\n\t\tthis.y /= t\n\t\t// this.z /= t\n\t\treturn this\n\t}\n\n\tdivV(V: VecLike) {\n\t\tthis.x /= V.x\n\t\tthis.y /= V.y\n\t\t// this.z /= V.z\n\t\treturn this\n\t}\n\n\tmul(t: number) {\n\t\tthis.x *= t\n\t\tthis.y *= t\n\t\t// this.z *= t\n\t\treturn this\n\t}\n\n\tmulV(V: VecLike) {\n\t\tthis.x *= V.x\n\t\tthis.y *= V.y\n\t\t// this.z *= V.z\n\t\treturn this\n\t}\n\n\tabs() {\n\t\tthis.x = Math.abs(this.x)\n\t\tthis.y = Math.abs(this.y)\n\t\treturn this\n\t}\n\n\tnudge(B: VecLike, distance: number) {\n\t\tconst tan = Vec2d.Tan(B, this)\n\t\treturn this.add(tan.mul(distance))\n\t}\n\n\tneg() {\n\t\tthis.x *= -1\n\t\tthis.y *= -1\n\t\t// this.z *= -1\n\t\treturn this\n\t}\n\n\tcross(V: VecLike) {\n\t\tthis.x = this.y * V.z! - this.z * V.y\n\t\tthis.y = this.z * V.x - this.x * V.z!\n\t\t// this.z = this.x * V.y - this.y * V.x\n\t\treturn this\n\t}\n\n\tdpr(V: VecLike): number {\n\t\treturn Vec2d.Dpr(this, V)\n\t}\n\n\tcpr(V: VecLike) {\n\t\treturn Vec2d.Cpr(this, V)\n\t}\n\n\tlen2(): number {\n\t\treturn Vec2d.Len2(this)\n\t}\n\n\tlen(): number {\n\t\treturn Vec2d.Len(this)\n\t}\n\n\tpry(V: VecLike): number {\n\t\treturn Vec2d.Pry(this, V)\n\t}\n\n\tper() {\n\t\tconst { x, y } = this\n\t\tthis.x = y\n\t\tthis.y = -x\n\t\treturn this\n\t}\n\n\tuni() {\n\t\treturn Vec2d.Uni(this)\n\t}\n\n\ttan(V: VecLike): Vec2d {\n\t\treturn Vec2d.Tan(this, V)\n\t}\n\n\tdist(V: VecLike): number {\n\t\treturn Vec2d.Dist(this, V)\n\t}\n\n\tdistanceToLineSegment(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.DistanceToLineSegment(A, B, this)\n\t}\n\n\tslope(B: VecLike): number {\n\t\treturn Vec2d.Slope(this, B)\n\t}\n\n\tsnapToGrid(gridSize: number) {\n\t\tthis.x = Math.round(this.x / gridSize) * gridSize\n\t\tthis.y = Math.round(this.y / gridSize) * gridSize\n\t\treturn this\n\t}\n\n\tangle(B: VecLike): number {\n\t\treturn Vec2d.Angle(this, B)\n\t}\n\n\ttoAngle() {\n\t\treturn Vec2d.ToAngle(this)\n\t}\n\n\tlrp(B: VecLike, t: number): Vec2d {\n\t\tthis.x = this.x + (B.x - this.x) * t\n\t\tthis.y = this.y + (B.y - this.y) * t\n\t\treturn this\n\t}\n\n\tequals(B: VecLike) {\n\t\treturn Vec2d.Equals(this, B)\n\t}\n\n\tequalsXY(x: number, y: number) {\n\t\treturn Vec2d.EqualsXY(this, x, y)\n\t}\n\n\tnorm() {\n\t\tconst l = this.len()\n\t\tthis.x = l === 0 ? 0 : this.x / l\n\t\tthis.y = l === 0 ? 0 : this.y / l\n\t\treturn this\n\t}\n\n\ttoFixed() {\n\t\treturn Vec2d.ToFixed(this)\n\t}\n\n\ttoString() {\n\t\treturn Vec2d.ToString(Vec2d.ToFixed(this))\n\t}\n\n\ttoJson(): Vec2dModel {\n\t\treturn Vec2d.ToJson(this)\n\t}\n\n\ttoArray(): number[] {\n\t\treturn Vec2d.ToArray(this)\n\t}\n\n\tstatic Add(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x + B.x, A.y + B.y)\n\t}\n\n\tstatic AddXY(A: VecLike, x: number, y: number): Vec2d {\n\t\treturn new Vec2d(A.x + x, A.y + y)\n\t}\n\n\tstatic Sub(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x - B.x, A.y - B.y)\n\t}\n\n\tstatic SubXY(A: VecLike, x: number, y: number): Vec2d {\n\t\treturn new Vec2d(A.x - x, A.y - y)\n\t}\n\n\tstatic AddScalar(A: VecLike, n: number): Vec2d {\n\t\treturn new Vec2d(A.x + n, A.y + n)\n\t}\n\n\tstatic SubScalar(A: VecLike, n: number): Vec2d {\n\t\treturn new Vec2d(A.x - n, A.y - n)\n\t}\n\n\tstatic Div(A: VecLike, t: number): Vec2d {\n\t\treturn new Vec2d(A.x / t, A.y / t)\n\t}\n\n\tstatic Mul(A: VecLike, t: number): Vec2d {\n\t\treturn new Vec2d(A.x * t, A.y * t)\n\t}\n\n\tstatic DivV(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x / B.x, A.y / B.y)\n\t}\n\n\tstatic MulV(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x * B.x, A.y * B.y)\n\t}\n\n\tstatic Neg(A: VecLike): Vec2d {\n\t\treturn new Vec2d(-A.x, -A.y)\n\t}\n\n\tstatic Per(A: VecLike): Vec2d {\n\t\treturn new Vec2d(A.y, -A.x)\n\t}\n\n\tstatic Dist2(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.Sub(A, B).len2()\n\t}\n\n\tstatic Abs(A: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.abs(A.x), Math.abs(A.y))\n\t}\n\n\tstatic Dist(A: VecLike, B: VecLike): number {\n\t\treturn Math.hypot(A.y - B.y, A.x - B.x)\n\t}\n\n\tstatic Dpr(A: VecLike, B: VecLike): number {\n\t\treturn A.x * B.x + A.y * B.y\n\t}\n\n\tstatic Cross(A: VecLike, V: VecLike) {\n\t\treturn new Vec2d(\n\t\t\tA.y * V.z! - A.z! * V.y,\n\t\t\tA.z! * V.x - A.x * V.z!\n\t\t\t// A.z = A.x * V.y - A.y * V.x\n\t\t)\n\t}\n\n\tstatic Cpr(A: VecLike, B: VecLike) {\n\t\treturn A.x * B.y - B.x * A.y\n\t}\n\n\tstatic Len2(A: VecLike): number {\n\t\treturn A.x * A.x + A.y * A.y\n\t}\n\n\tstatic Len(A: VecLike): number {\n\t\treturn Math.sqrt(Vec2d.Len2(A))\n\t}\n\n\tstatic Pry(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.Dpr(A, B) / Vec2d.Len(B)\n\t}\n\n\tstatic Uni(A: VecLike) {\n\t\treturn Vec2d.Div(A, Vec2d.Len(A))\n\t}\n\n\tstatic Tan(A: VecLike, B: VecLike): Vec2d {\n\t\treturn Vec2d.Uni(Vec2d.Sub(A, B))\n\t}\n\n\tstatic Min(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.min(A.x, B.x), Math.min(A.y, B.y))\n\t}\n\n\tstatic Max(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.max(A.x, B.x), Math.max(A.y, B.y))\n\t}\n\n\tstatic From({ x, y, z = 1 }: Vec2dModel) {\n\t\treturn new Vec2d(x, y, z)\n\t}\n\n\tstatic FromArray(v: number[]): Vec2d {\n\t\treturn new Vec2d(v[0], v[1])\n\t}\n\n\tstatic Rot(A: VecLike, r = 0): Vec2d {\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec2d(A.x * c - A.y * s, A.x * s + A.y * c)\n\t}\n\n\tstatic RotWith(A: VecLike, C: VecLike, r: number): Vec2d {\n\t\tconst x = A.x - C.x\n\t\tconst y = A.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec2d(C.x + (x * c - y * s), C.y + (x * s + y * c))\n\t}\n\n\t/**\n\t * Get the nearest point on a line with a known unit vector that passes through point A\n\t *\n\t * ```ts\n\t * Vec.nearestPointOnLineThroughPoint(A, u, Point)\n\t * ```\n\t *\n\t * @param A - Any point on the line\n\t * @param u - The unit vector for the line.\n\t * @param P - A point not on the line to test.\n\t */\n\tstatic NearestPointOnLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): Vec2d {\n\t\treturn Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)).add(A)\n\t}\n\n\tstatic NearestPointOnLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): Vec2d {\n\t\tconst u = Vec2d.Tan(B, A)\n\t\tconst C = Vec2d.Add(A, Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)))\n\n\t\t// todo: fix error P is B or A, which leads to a NaN value\n\n\t\tif (clamp) {\n\t\t\tif (C.x < Math.min(A.x, B.x)) return Vec2d.Cast(A.x < B.x ? A : B)\n\t\t\tif (C.x > Math.max(A.x, B.x)) return Vec2d.Cast(A.x > B.x ? A : B)\n\t\t\tif (C.y < Math.min(A.y, B.y)) return Vec2d.Cast(A.y < B.y ? A : B)\n\t\t\tif (C.y > Math.max(A.y, B.y)) return Vec2d.Cast(A.y > B.y ? A : B)\n\t\t}\n\n\t\treturn C\n\t}\n\n\tstatic DistanceToLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): number {\n\t\treturn Vec2d.Dist(P, Vec2d.NearestPointOnLineThroughPoint(A, u, P))\n\t}\n\n\tstatic DistanceToLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): number {\n\t\treturn Vec2d.Dist(P, Vec2d.NearestPointOnLineSegment(A, B, P, clamp))\n\t}\n\n\tstatic Snap(A: VecLike, step = 1) {\n\t\treturn new Vec2d(Math.round(A.x / step) * step, Math.round(A.y / step) * step)\n\t}\n\n\tstatic Cast(A: VecLike): Vec2d {\n\t\tif (A instanceof Vec2d) return A\n\t\treturn Vec2d.From(A)\n\t}\n\n\tstatic Slope(A: VecLike, B: VecLike): number {\n\t\tif (A.x === B.y) return NaN\n\t\treturn (A.y - B.y) / (A.x - B.x)\n\t}\n\n\tstatic Angle(A: VecLike, B: VecLike): number {\n\t\treturn Math.atan2(B.y - A.y, B.x - A.x)\n\t}\n\n\tstatic Lrp(A: VecLike, B: VecLike, t: number): Vec2d {\n\t\treturn Vec2d.Sub(B, A).mul(t).add(A)\n\t}\n\n\tstatic Med(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d((A.x + B.x) / 2, (A.y + B.y) / 2)\n\t}\n\n\tstatic Equals(A: VecLike, B: VecLike): boolean {\n\t\treturn Math.abs(A.x - B.x) < 0.0001 && Math.abs(A.y - B.y) < 0.0001\n\t}\n\n\tstatic EqualsXY(A: VecLike, x: number, y: number): boolean {\n\t\treturn A.x === x && A.y === y\n\t}\n\n\tstatic Clockwise(A: VecLike, B: VecLike, C: VecLike): boolean {\n\t\treturn (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0\n\t}\n\n\tstatic Rescale(A: VecLike, n: number) {\n\t\tconst l = Vec2d.Len(A)\n\t\treturn new Vec2d((n * A.x) / l, (n * A.y) / l)\n\t}\n\n\tstatic ScaleWithOrigin(A: VecLike, scale: number, origin: VecLike) {\n\t\treturn Vec2d.Sub(A, origin).mul(scale).add(origin)\n\t}\n\n\tstatic ToFixed(A: VecLike, n = 2) {\n\t\treturn new Vec2d(+A.x.toFixed(n), +A.y.toFixed(n), +A.z!.toFixed(n))\n\t}\n\n\tstatic Nudge(A: VecLike, B: VecLike, distance: number) {\n\t\treturn Vec2d.Add(A, Vec2d.Tan(B, A).mul(distance))\n\t}\n\n\tstatic ToString(A: VecLike) {\n\t\treturn `${A.x}, ${A.y}`\n\t}\n\n\tstatic ToAngle(A: VecLike) {\n\t\tlet r = Math.atan2(A.y, A.x)\n\t\tif (r < 0) r += Math.PI * 2\n\n\t\treturn r\n\t}\n\n\tstatic ToArray(A: VecLike) {\n\t\treturn [A.x, A.y, A.z!]\n\t}\n\n\tstatic ToJson(A: VecLike) {\n\t\tconst { x, y, z } = A\n\t\treturn { x, y, z }\n\t}\n\n\tstatic Average(arr: VecLike[]) {\n\t\tconst len = arr.length\n\t\tconst avg = new Vec2d(0, 0)\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tavg.add(arr[i])\n\t\t}\n\t\treturn avg.div(len)\n\t}\n\n\tstatic Clamp(A: Vec2d, min: number, max?: number) {\n\t\tif (max === undefined) {\n\t\t\treturn new Vec2d(Math.min(Math.max(A.x, min)), Math.min(Math.max(A.y, min)))\n\t\t}\n\n\t\treturn new Vec2d(Math.min(Math.max(A.x, min), max), Math.min(Math.max(A.y, min), max))\n\t}\n\n\t/**\n\t * Get an array of points (with simulated pressure) between two points.\n\t *\n\t * @param A - The first point.\n\t * @param B - The second point.\n\t * @param steps - The number of points to return.\n\t */\n\tstatic PointsBetween(A: Vec2dModel, B: Vec2dModel, steps = 6): Vec2d[] {\n\t\tconst results: Vec2d[] = []\n\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\tconst t = EASINGS.easeInQuad(i / (steps - 1))\n\t\t\tconst point = Vec2d.Lrp(A, B, t)\n\t\t\tpoint.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t)) * 0.65)\n\t\t\tresults.push(point)\n\t\t}\n\n\t\treturn results\n\t}\n\n\tstatic SnapToGrid(A: VecLike, gridSize = 8) {\n\t\treturn new Vec2d(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize)\n\t}\n}\n\nconst ease = (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}