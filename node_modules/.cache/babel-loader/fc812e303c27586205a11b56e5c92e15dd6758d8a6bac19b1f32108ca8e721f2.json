{"ast":null,"code":"import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { getShapeFillSvg, getSvgWithShapeFill, ShapeFill } from \"../../shared/ShapeFill.mjs\";\nvar SolidStyleOval = React.memo(function SolidStyleOval2(_ref) {\n  var w = _ref.w,\n    h = _ref.h,\n    sw = _ref.strokeWidth,\n    fill = _ref.fill,\n    color = _ref.color;\n  var d = getOvalIndicatorPath(w, h);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ShapeFill, {\n      d: d,\n      color: color,\n      fill: fill\n    }), /* @__PURE__ */jsx(\"path\", {\n      d: d,\n      stroke: \"var(--palette-\".concat(color, \")\"),\n      strokeWidth: sw,\n      fill: \"none\"\n    })]\n  });\n});\nfunction SolidStyleOvalSvg(_ref2) {\n  var w = _ref2.w,\n    h = _ref2.h,\n    sw = _ref2.strokeWidth,\n    fill = _ref2.fill,\n    color = _ref2.color,\n    colors = _ref2.colors;\n  var d = getOvalIndicatorPath(w, h);\n  var strokeElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  strokeElement.setAttribute(\"d\", d);\n  strokeElement.setAttribute(\"stroke-width\", sw.toString());\n  strokeElement.setAttribute(\"width\", w.toString());\n  strokeElement.setAttribute(\"height\", h.toString());\n  strokeElement.setAttribute(\"fill\", \"none\");\n  strokeElement.setAttribute(\"stroke\", colors.fill[color]);\n  var fillElement = getShapeFillSvg({\n    d: d,\n    fill: fill,\n    color: color,\n    colors: colors\n  });\n  return getSvgWithShapeFill(strokeElement, fillElement);\n}\nfunction getOvalIndicatorPath(w, h) {\n  var d;\n  if (h > w) {\n    var offset = w / 2;\n    d = \"\\n    M0,\".concat(offset, \"\\n    a\").concat(offset, \",\").concat(offset, \",0,1,1,\").concat(offset * 2, \",0\\n    L\").concat(w, \",\").concat(h - offset, \"\\n    a\").concat(offset, \",\").concat(offset, \",0,1,1,-\").concat(offset * 2, \",0\\n    Z\");\n  } else {\n    var _offset = h / 2;\n    d = \"\\n    M\".concat(_offset, \",0\\n    L\").concat(w - _offset, \",0\\n    a\").concat(_offset, \",\").concat(_offset, \",0,1,1,0,\").concat(_offset * 2, \"\\n    L\").concat(_offset, \",\").concat(h, \"\\n    a\").concat(_offset, \",\").concat(_offset, \",0,1,1,0,\").concat(-_offset * 2, \"\\n    Z\");\n  }\n  return d;\n}\nexport { SolidStyleOval, SolidStyleOvalSvg, getOvalIndicatorPath };","map":{"version":3,"names":["Fragment","jsx","jsxs","React","getShapeFillSvg","getSvgWithShapeFill","ShapeFill","SolidStyleOval","memo","SolidStyleOval2","_ref","w","h","sw","strokeWidth","fill","color","d","getOvalIndicatorPath","children","stroke","concat","SolidStyleOvalSvg","_ref2","colors","strokeElement","document","createElementNS","setAttribute","toString","fillElement","offset"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/geo/components/SolidStyleOval.tsx"],"sourcesContent":["import { TLGeoShape } from '@tldraw/tlschema'\nimport * as React from 'react'\nimport { getShapeFillSvg, getSvgWithShapeFill, ShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\n\nexport const SolidStyleOval = React.memo(function SolidStyleOval({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n}) {\n\tconst d = getOvalIndicatorPath(w, h)\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={d} color={color} fill={fill} />\n\t\t\t<path d={d} stroke={`var(--palette-${color})`} strokeWidth={sw} fill=\"none\" />\n\t\t</>\n\t)\n})\n\nexport function SolidStyleOvalSvg({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n\tcolors,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\tcolors: TLExportColors\n}) {\n\tconst d = getOvalIndicatorPath(w, h)\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', d)\n\tstrokeElement.setAttribute('stroke-width', sw.toString())\n\tstrokeElement.setAttribute('width', w.toString())\n\tstrokeElement.setAttribute('height', h.toString())\n\tstrokeElement.setAttribute('fill', 'none')\n\tstrokeElement.setAttribute('stroke', colors.fill[color])\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td,\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n\nexport function getOvalIndicatorPath(w: number, h: number) {\n\tlet d: string\n\n\tif (h > w) {\n\t\tconst offset = w / 2\n\t\td = `\n    M0,${offset}\n    a${offset},${offset},0,1,1,${offset * 2},0\n    L${w},${h - offset}\n    a${offset},${offset},0,1,1,-${offset * 2},0\n    Z`\n\t} else {\n\t\tconst offset = h / 2\n\t\td = `\n    M${offset},0\n    L${w - offset},0\n    a${offset},${offset},0,1,1,0,${offset * 2}\n    L${offset},${h}\n    a${offset},${offset},0,1,1,0,${-offset * 2}\n    Z`\n\t}\n\n\treturn d\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}