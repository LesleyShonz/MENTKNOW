{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/shapes/geo/components/DrawStyleEllipse.tsx"],
  "sourcesContent": ["import {\n\tEASINGS,\n\tgetStrokeOutlinePoints,\n\tgetStrokePoints,\n\tperimeterOfEllipse,\n\tPI2,\n\tsetStrokePointRadii,\n\tTAU,\n\tVec2d,\n} from '@tldraw/primitives'\nimport { TLGeoShape, TLShapeId } from '@tldraw/tlschema'\nimport { rng } from '@tldraw/utils'\nimport * as React from 'react'\nimport { getSvgPathFromStroke, getSvgPathFromStrokePoints } from '../../../../utils/svg'\nimport { getShapeFillSvg, getSvgWithShapeFill, ShapeFill } from '../../shared/ShapeFill'\nimport { TLExportColors } from '../../shared/TLExportColors'\n\nexport const DrawStyleEllipse = React.memo(function DrawStyleEllipse({\n\tid,\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n}) {\n\tconst innerPath = getEllipseIndicatorPath(id, w, h, sw)\n\tconst outerPath = getEllipsePath(id, w, h, sw)\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={innerPath} color={color} fill={fill} />\n\t\t\t<path d={outerPath} fill={`var(--palette-${color})`} strokeWidth={0} pointerEvents=\"all\" />\n\t\t</>\n\t)\n})\n\nexport function DrawStyleEllipseSvg({\n\tid,\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n\tcolors,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n\tcolors: TLExportColors\n}) {\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', getEllipsePath(id, w, h, sw))\n\tstrokeElement.setAttribute('fill', colors.fill[color])\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td: getEllipseIndicatorPath(id, w, h, sw),\n\t\tfill,\n\t\tcolor,\n\t\tcolors,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n\nexport function getEllipseStrokeOptions(strokeWidth: number) {\n\treturn {\n\t\tsize: 1 + strokeWidth,\n\t\tthinning: 0.25,\n\t\tend: { taper: strokeWidth },\n\t\tstart: { taper: strokeWidth },\n\t\tstreamline: 0,\n\t\tsmoothing: 1,\n\t\tsimulatePressure: false,\n\t}\n}\n\nexport function getEllipseStrokePoints(\n\tid: string,\n\twidth: number,\n\theight: number,\n\tstrokeWidth: number\n) {\n\tconst getRandom = rng(id)\n\n\tconst rx = width / 2\n\tconst ry = height / 2\n\tconst perimeter = perimeterOfEllipse(rx, ry)\n\n\tconst points: Vec2d[] = []\n\n\tconst start = PI2 * getRandom()\n\tconst length = PI2 + TAU / 2 + Math.abs(getRandom()) * TAU\n\tconst count = Math.max(16, perimeter / 10)\n\n\tfor (let i = 0; i < count; i++) {\n\t\tconst t = i / (count - 1)\n\t\tconst r = start + t * length\n\t\tconst c = Math.cos(r)\n\t\tconst s = Math.sin(r)\n\t\tpoints.push(\n\t\t\tnew Vec2d(\n\t\t\t\trx * c + width * 0.5 + 0.05 * getRandom(),\n\t\t\t\try * s + height / 2 + 0.05 * getRandom(),\n\t\t\t\tMath.min(\n\t\t\t\t\t1,\n\t\t\t\t\t0.5 +\n\t\t\t\t\t\tMath.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t) : EASINGS.easeInExpo(t))) / 2\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t}\n\n\treturn getStrokePoints(points, getEllipseStrokeOptions(strokeWidth))\n}\n\nexport function getEllipsePath(id: string, width: number, height: number, strokeWidth: number) {\n\tconst options = getEllipseStrokeOptions(strokeWidth)\n\treturn getSvgPathFromStroke(\n\t\tgetStrokeOutlinePoints(\n\t\t\tsetStrokePointRadii(getEllipseStrokePoints(id, width, height, strokeWidth), options),\n\t\t\toptions\n\t\t)\n\t)\n}\n\nexport function getEllipseIndicatorPath(\n\tid: string,\n\twidth: number,\n\theight: number,\n\tstrokeWidth: number\n) {\n\treturn getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth))\n}\n"],
  "mappings": "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",
  "names": ["DrawStyleEllipse"]
}
