"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var EditingShape_exports = {};
__export(EditingShape_exports, {
  EditingShape: () => EditingShape
});
module.exports = __toCommonJS(EditingShape_exports);
var import_StateNode = require("../../StateNode");
class EditingShape extends import_StateNode.StateNode {
  static id = "editing_shape";
  onPointerEnter = (info) => {
    switch (info.target) {
      case "shape": {
        const { selectedIds, focusLayerId } = this.editor;
        const hoveringShape = this.editor.getOutermostSelectableShape(
          info.shape,
          (parent) => !selectedIds.includes(parent.id)
        );
        if (hoveringShape.id !== focusLayerId) {
          this.editor.setHoveredId(hoveringShape.id);
        }
        break;
      }
    }
  };
  onPointerLeave = (info) => {
    switch (info.target) {
      case "shape": {
        this.editor.setHoveredId(null);
        break;
      }
    }
  };
  onExit = () => {
    if (!this.editor.pageState.editingId)
      return;
    const { editingId } = this.editor.pageState;
    if (!editingId)
      return;
    this.editor.setEditingId(null);
    const shape = this.editor.getShapeById(editingId);
    const util = this.editor.getShapeUtil(shape);
    util.onEditEnd?.(shape);
  };
  onPointerDown = (info) => {
    switch (info.target) {
      case "shape": {
        const { shape } = info;
        const { editingId } = this.editor.pageState;
        if (editingId) {
          if (shape.id === editingId) {
            return;
          }
          const editingShape = this.editor.getShapeById(editingId);
          if (editingShape) {
            const editingShapeUtil = this.editor.getShapeUtil(editingShape);
            editingShapeUtil.onEditEnd?.(editingShape);
            const util = this.editor.getShapeUtil(shape);
            if (shape.type === editingShape.type && util.canEdit?.(shape) && !this.editor.isShapeOrAncestorLocked(shape)) {
              this.editor.setEditingId(shape.id);
              this.editor.setHoveredId(shape.id);
              this.editor.setSelectedIds([shape.id]);
              return;
            }
          }
        }
      }
    }
    this.parent.transition("idle", info);
    this.parent.current.value?.onPointerDown?.(info);
  };
  onComplete = (info) => {
    this.parent.transition("idle", info);
  };
  onCancel = (info) => {
    this.parent.transition("idle", info);
  };
}
//# sourceMappingURL=EditingShape.js.map
