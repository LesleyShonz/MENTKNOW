{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { atom, computed } from \"signia\";\nimport { EVENT_NAME_MAP } from \"../types/event-types.mjs\";\nvar StateNode = /*#__PURE__*/function () {\n  function StateNode(editor, parent) {\n    var _this = this;\n    _classCallCheck(this, StateNode);\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"current\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"shapeType\", void 0);\n    _defineProperty(this, \"initial\", void 0);\n    _defineProperty(this, \"children\", void 0);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"isActive\", false);\n    _defineProperty(this, \"onWheel\", void 0);\n    _defineProperty(this, \"onPointerEnter\", void 0);\n    _defineProperty(this, \"onPointerLeave\", void 0);\n    _defineProperty(this, \"onPointerDown\", void 0);\n    _defineProperty(this, \"onPointerMove\", void 0);\n    _defineProperty(this, \"onPointerUp\", void 0);\n    _defineProperty(this, \"onDoubleClick\", void 0);\n    _defineProperty(this, \"onTripleClick\", void 0);\n    _defineProperty(this, \"onQuadrupleClick\", void 0);\n    _defineProperty(this, \"onRightClick\", void 0);\n    _defineProperty(this, \"onMiddleClick\", void 0);\n    _defineProperty(this, \"onKeyDown\", void 0);\n    _defineProperty(this, \"onKeyUp\", void 0);\n    _defineProperty(this, \"onKeyRepeat\", void 0);\n    _defineProperty(this, \"onCancel\", void 0);\n    _defineProperty(this, \"onComplete\", void 0);\n    _defineProperty(this, \"onInterrupt\", void 0);\n    _defineProperty(this, \"onEnter\", void 0);\n    _defineProperty(this, \"onExit\", void 0);\n    this.editor = editor;\n    var _this$constructor = this.constructor,\n      id = _this$constructor.id,\n      children = _this$constructor.children,\n      initial = _this$constructor.initial;\n    this.id = id;\n    this.current = atom(\"toolState\" + this.id, void 0);\n    this.path = computed(\"toolPath\" + this.id, function () {\n      var current = _this.current.value;\n      return _this.id + (current ? \".\".concat(current.path.value) : \"\");\n    });\n    this.parent = parent !== null && parent !== void 0 ? parent : {};\n    if (this.parent) {\n      if (children && initial) {\n        this.type = \"branch\";\n        this.initial = initial;\n        this.children = Object.fromEntries(children().map(function (Ctor) {\n          return [Ctor.id, new Ctor(_this.editor, _this)];\n        }));\n        this.current.set(this.children[this.initial]);\n      } else {\n        this.type = \"leaf\";\n      }\n    } else {\n      this.type = \"root\";\n      if (children && initial) {\n        this.initial = initial;\n        this.children = Object.fromEntries(children().map(function (Ctor) {\n          return [Ctor.id, new Ctor(_this.editor, _this)];\n        }));\n        this.current.set(this.children[this.initial]);\n      }\n    }\n  }\n  _createClass(StateNode, [{\n    key: \"transition\",\n    value: function transition(id, info) {\n      var path = id.split(\".\");\n      var currState = this;\n      for (var i = 0; i < path.length; i++) {\n        var _currState$children;\n        var id2 = path[i];\n        var prevChildState = currState.current.value;\n        var nextChildState = (_currState$children = currState.children) === null || _currState$children === void 0 ? void 0 : _currState$children[id2];\n        if (!nextChildState) {\n          throw Error(\"\".concat(currState.id, \" - no child state exists with the id \").concat(id2, \".\"));\n        }\n        if ((prevChildState === null || prevChildState === void 0 ? void 0 : prevChildState.id) !== nextChildState.id) {\n          prevChildState === null || prevChildState === void 0 || prevChildState.exit(info, id2);\n          currState.current.set(nextChildState);\n          nextChildState.enter(info, (prevChildState === null || prevChildState === void 0 ? void 0 : prevChildState.id) || \"initial\");\n          if (!nextChildState.isActive) break;\n        }\n        currState = nextChildState;\n      }\n      return this;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(info) {\n      var _this$cbName;\n      var cbName = EVENT_NAME_MAP[info.name];\n      var x = this.current.value;\n      (_this$cbName = this[cbName]) === null || _this$cbName === void 0 || _this$cbName.call(this, info);\n      if (this.current.value === x && this.isActive) {\n        x === null || x === void 0 || x.handleEvent(info);\n      }\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(info, from) {\n      var _this$onEnter;\n      this.isActive = true;\n      (_this$onEnter = this.onEnter) === null || _this$onEnter === void 0 || _this$onEnter.call(this, info, from);\n      if (this.children && this.initial && this.isActive) {\n        var initial = this.children[this.initial];\n        this.current.set(initial);\n        initial.enter(info, from);\n      }\n    }\n  }, {\n    key: \"exit\",\n    value: function exit(info, from) {\n      var _this$onExit;\n      this.isActive = false;\n      (_this$onExit = this.onExit) === null || _this$onExit === void 0 || _this$onExit.call(this, info, from);\n      if (!this.isActive) {\n        var _this$current$value;\n        (_this$current$value = this.current.value) === null || _this$current$value === void 0 || _this$current$value.exit(info, from);\n      }\n    }\n  }]);\n  return StateNode;\n}();\n_defineProperty(StateNode, \"id\", void 0);\n_defineProperty(StateNode, \"initial\", void 0);\n_defineProperty(StateNode, \"children\", void 0);\nexport { StateNode };","map":{"version":3,"names":["atom","computed","EVENT_NAME_MAP","StateNode","editor","parent","_this","_classCallCheck","_defineProperty","_this$constructor","constructor","id","children","initial","current","path","value","concat","type","Object","fromEntries","map","Ctor","set","_createClass","key","transition","info","split","currState","i","length","_currState$children","id2","prevChildState","nextChildState","Error","exit","enter","isActive","handleEvent","_this$cbName","cbName","name","x","call","from","_this$onEnter","onEnter","_this$onExit","onExit","_this$current$value"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/StateNode.ts"],"sourcesContent":["import { TLBaseShape } from '@tldraw/tlschema'\nimport { Atom, Computed, atom, computed } from 'signia'\nimport type { Editor } from '../Editor'\nimport { TLShapeUtilConstructor } from '../shapes/ShapeUtil'\nimport {\n\tEVENT_NAME_MAP,\n\tTLEnterEventHandler,\n\tTLEventHandlers,\n\tTLEventInfo,\n\tTLExitEventHandler,\n\tTLPinchEventInfo,\n} from '../types/event-types'\n\ntype TLStateNodeType = 'branch' | 'leaf' | 'root'\n\n/** @public */\nexport interface TLStateNodeConstructor {\n\tnew (editor: Editor, parent?: StateNode): StateNode\n\tid: string\n\tinitial?: string\n\tchildren?: () => TLStateNodeConstructor[]\n}\n\n/** @public */\nexport abstract class StateNode implements Partial<TLEventHandlers> {\n\tconstructor(public editor: Editor, parent?: StateNode) {\n\t\tconst { id, children, initial } = this.constructor as TLStateNodeConstructor\n\n\t\tthis.id = id\n\t\tthis.current = atom<StateNode | undefined>('toolState' + this.id, undefined)\n\n\t\tthis.path = computed('toolPath' + this.id, () => {\n\t\t\tconst current = this.current.value\n\t\t\treturn this.id + (current ? `.${current.path.value}` : '')\n\t\t})\n\n\t\tthis.parent = parent ?? ({} as any)\n\n\t\tif (this.parent) {\n\t\t\tif (children && initial) {\n\t\t\t\tthis.type = 'branch'\n\t\t\t\tthis.initial = initial\n\t\t\t\tthis.children = Object.fromEntries(\n\t\t\t\t\tchildren().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])\n\t\t\t\t)\n\t\t\t\tthis.current.set(this.children[this.initial])\n\t\t\t} else {\n\t\t\t\tthis.type = 'leaf'\n\t\t\t}\n\t\t} else {\n\t\t\tthis.type = 'root'\n\n\t\t\tif (children && initial) {\n\t\t\t\tthis.initial = initial\n\t\t\t\tthis.children = Object.fromEntries(\n\t\t\t\t\tchildren().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])\n\t\t\t\t)\n\t\t\t\tthis.current.set(this.children[this.initial])\n\t\t\t}\n\t\t}\n\t}\n\n\tpath: Computed<string>\n\n\tstatic id: string\n\tstatic initial?: string\n\tstatic children?: () => TLStateNodeConstructor[]\n\n\tid: string\n\tcurrent: Atom<StateNode | undefined>\n\ttype: TLStateNodeType\n\tshapeType?: TLShapeUtilConstructor<TLBaseShape<any, any>>\n\tinitial?: string\n\tchildren?: Record<string, StateNode>\n\tparent: StateNode\n\n\tisActive = false\n\n\ttransition(id: string, info: any) {\n\t\tconst path = id.split('.')\n\n\t\tlet currState = this as StateNode\n\n\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\tconst id = path[i]\n\t\t\tconst prevChildState = currState.current.value\n\t\t\tconst nextChildState = currState.children?.[id]\n\n\t\t\tif (!nextChildState) {\n\t\t\t\tthrow Error(`${currState.id} - no child state exists with the id ${id}.`)\n\t\t\t}\n\n\t\t\tif (prevChildState?.id !== nextChildState.id) {\n\t\t\t\tprevChildState?.exit(info, id)\n\t\t\t\tcurrState.current.set(nextChildState)\n\t\t\t\tnextChildState.enter(info, prevChildState?.id || 'initial')\n\t\t\t\tif (!nextChildState.isActive) break\n\t\t\t}\n\n\t\t\tcurrState = nextChildState\n\t\t}\n\n\t\treturn this\n\t}\n\n\thandleEvent(info: Exclude<TLEventInfo, TLPinchEventInfo>) {\n\t\tconst cbName = EVENT_NAME_MAP[info.name]\n\t\tconst x = this.current.value\n\t\tthis[cbName]?.(info as any)\n\t\tif (this.current.value === x && this.isActive) {\n\t\t\tx?.handleEvent(info)\n\t\t}\n\t}\n\n\tenter(info: any, from: string) {\n\t\tthis.isActive = true\n\t\tthis.onEnter?.(info, from)\n\t\tif (this.children && this.initial && this.isActive) {\n\t\t\tconst initial = this.children[this.initial]\n\t\t\tthis.current.set(initial)\n\t\t\tinitial.enter(info, from)\n\t\t}\n\t}\n\n\texit(info: any, from: string) {\n\t\tthis.isActive = false\n\t\tthis.onExit?.(info, from)\n\t\tif (!this.isActive) {\n\t\t\tthis.current.value?.exit(info, from)\n\t\t}\n\t}\n\n\tonWheel?: TLEventHandlers['onWheel']\n\tonPointerEnter?: TLEventHandlers['onPointerEnter']\n\tonPointerLeave?: TLEventHandlers['onPointerLeave']\n\tonPointerDown?: TLEventHandlers['onPointerDown']\n\tonPointerMove?: TLEventHandlers['onPointerMove']\n\tonPointerUp?: TLEventHandlers['onPointerUp']\n\tonDoubleClick?: TLEventHandlers['onDoubleClick']\n\tonTripleClick?: TLEventHandlers['onTripleClick']\n\tonQuadrupleClick?: TLEventHandlers['onQuadrupleClick']\n\tonRightClick?: TLEventHandlers['onRightClick']\n\tonMiddleClick?: TLEventHandlers['onMiddleClick']\n\tonKeyDown?: TLEventHandlers['onKeyDown']\n\tonKeyUp?: TLEventHandlers['onKeyUp']\n\tonKeyRepeat?: TLEventHandlers['onKeyRepeat']\n\tonCancel?: TLEventHandlers['onCancel']\n\tonComplete?: TLEventHandlers['onComplete']\n\tonInterrupt?: TLEventHandlers['onInterrupt']\n\n\tonEnter?: TLEnterEventHandler\n\tonExit?: TLExitEventHandler\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}