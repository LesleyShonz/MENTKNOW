import { jsx } from "react/jsx-runtime";
import { createContext, useContext } from "react";
import { DefaultBackground } from "../components/DefaultBackground.mjs";
import { DefaultBrush } from "../components/DefaultBrush.mjs";
import {
  DefaultCollaboratorHint
} from "../components/DefaultCollaboratorHint.mjs";
import { DefaultCursor } from "../components/DefaultCursor.mjs";
import { DefaultErrorFallback } from "../components/DefaultErrorFallback.mjs";
import { DefaultGrid } from "../components/DefaultGrid.mjs";
import { DefaultHandle } from "../components/DefaultHandle.mjs";
import { DefaultScribble } from "../components/DefaultScribble.mjs";
import {
  DefaultShapeErrorFallback
} from "../components/DefaultShapeErrorFallback.mjs";
import {
  DefaultShapeIndicatorErrorFallback
} from "../components/DefaultShapeIndicatorErrorFallback.mjs";
import { DefaultSnapLine } from "../components/DefaultSnapLine.mjs";
import { DefaultSpinner } from "../components/DefaultSpinner.mjs";
import { DefaultSvgDefs } from "../components/DefaultSvgDefs.mjs";
import { ShapeIndicator } from "../components/ShapeIndicator.mjs";
const EditorComponentsContext = createContext({});
function EditorComponentsProvider({ overrides, children }) {
  return /* @__PURE__ */ jsx(
    EditorComponentsContext.Provider,
    {
      value: {
        Background: DefaultBackground,
        SvgDefs: DefaultSvgDefs,
        Brush: DefaultBrush,
        ZoomBrush: DefaultBrush,
        CollaboratorBrush: DefaultBrush,
        Cursor: DefaultCursor,
        CollaboratorCursor: DefaultCursor,
        CollaboratorHint: DefaultCollaboratorHint,
        CollaboratorShapeIndicator: ShapeIndicator,
        Grid: DefaultGrid,
        Scribble: DefaultScribble,
        SnapLine: DefaultSnapLine,
        Handle: DefaultHandle,
        CollaboratorScribble: DefaultScribble,
        ErrorFallback: DefaultErrorFallback,
        ShapeErrorFallback: DefaultShapeErrorFallback,
        ShapeIndicatorErrorFallback: DefaultShapeIndicatorErrorFallback,
        Spinner: DefaultSpinner,
        ...overrides
      },
      children
    }
  );
}
function useEditorComponents() {
  return useContext(EditorComponentsContext);
}
export {
  EditorComponentsContext,
  EditorComponentsProvider,
  useEditorComponents
};
//# sourceMappingURL=useEditorComponents.mjs.map
