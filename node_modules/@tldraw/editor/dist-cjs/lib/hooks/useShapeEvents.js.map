{
  "version": 3,
  "sources": ["../../../src/lib/hooks/useShapeEvents.ts"],
  "sourcesContent": ["import { TLShapeId } from '@tldraw/tlschema'\nimport React from 'react'\nimport { Editor } from '../editor/Editor'\nimport { TLPointerEventName } from '../editor/types/event-types'\nimport { preventDefault, releasePointerCapture, setPointerCapture } from '../utils/dom'\nimport { getPointerInfo } from '../utils/svg'\nimport { useEditor } from './useEditor'\n\nconst pointerEventHandler = (editor: Editor, shapeId: TLShapeId, name: TLPointerEventName) => {\n\treturn (e: React.PointerEvent) => {\n\t\tif (name !== 'pointer_move' && editor.pageState.editingId === shapeId)\n\t\t\t(e as any).isKilled = true\n\t\tif ((e as any).isKilled) return\n\n\t\tswitch (name) {\n\t\t\tcase 'pointer_down': {\n\t\t\t\tif (e.button !== 0 && e.button !== 1 && e.button !== 2) return\n\t\t\t\tsetPointerCapture(e.currentTarget, e)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'pointer_up': {\n\t\t\t\treleasePointerCapture(e.currentTarget, e)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst shape = editor.getShapeById(shapeId)\n\n\t\tif (!shape) {\n\t\t\tconsole.error('Shape not found', shapeId)\n\t\t\treturn\n\t\t}\n\n\t\teditor.dispatch({\n\t\t\ttype: 'pointer',\n\t\t\ttarget: 'shape',\n\t\t\tshape,\n\t\t\tname,\n\t\t\t...getPointerInfo(e, editor.getContainer()),\n\t\t})\n\t}\n}\n\nexport function useShapeEvents(id: TLShapeId) {\n\tconst editor = useEditor()\n\n\treturn React.useMemo(() => {\n\t\tfunction onTouchStart(e: React.TouchEvent) {\n\t\t\t;(e as any).isKilled = true\n\t\t\tpreventDefault(e)\n\t\t}\n\n\t\tfunction onTouchEnd(e: React.TouchEvent) {\n\t\t\t;(e as any).isKilled = true\n\t\t\tpreventDefault(e)\n\t\t}\n\n\t\tconst handlePointerMove = pointerEventHandler(editor, id, 'pointer_move')\n\n\t\t// Track the last screen point\n\t\tlet lastX: number, lastY: number\n\n\t\tfunction onPointerMove(e: React.PointerEvent) {\n\t\t\tif ((e as any).isKilled) return\n\t\t\tif (e.clientX === lastX && e.clientY === lastY) return\n\t\t\tlastX = e.clientX\n\t\t\tlastY = e.clientY\n\n\t\t\treturn handlePointerMove(e)\n\t\t}\n\n\t\treturn {\n\t\t\tonPointerDown: pointerEventHandler(editor, id, 'pointer_down'),\n\t\t\tonPointerUp: pointerEventHandler(editor, id, 'pointer_up'),\n\t\t\tonPointerEnter: pointerEventHandler(editor, id, 'pointer_enter'),\n\t\t\tonPointerLeave: pointerEventHandler(editor, id, 'pointer_leave'),\n\t\t\tonPointerMove,\n\t\t\tonTouchStart,\n\t\t\tonTouchEnd,\n\t\t}\n\t}, [editor, id])\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAGlB,iBAAyE;AACzE,iBAA+B;AAC/B,uBAA0B;AAE1B,MAAM,sBAAsB,CAAC,QAAgB,SAAoB,SAA6B;AAC7F,SAAO,CAAC,MAA0B;AACjC,QAAI,SAAS,kBAAkB,OAAO,UAAU,cAAc;AAC7D,MAAC,EAAU,WAAW;AACvB,QAAK,EAAU;AAAU;AAEzB,YAAQ,MAAM;AAAA,MACb,KAAK,gBAAgB;AACpB,YAAI,EAAE,WAAW,KAAK,EAAE,WAAW,KAAK,EAAE,WAAW;AAAG;AACxD,0CAAkB,EAAE,eAAe,CAAC;AACpC;AAAA,MACD;AAAA,MACA,KAAK,cAAc;AAClB,8CAAsB,EAAE,eAAe,CAAC;AACxC;AAAA,MACD;AAAA,IACD;AAEA,UAAM,QAAQ,OAAO,aAAa,OAAO;AAEzC,QAAI,CAAC,OAAO;AACX,cAAQ,MAAM,mBAAmB,OAAO;AACxC;AAAA,IACD;AAEA,WAAO,SAAS;AAAA,MACf,MAAM;AAAA,MACN,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA,OAAG,2BAAe,GAAG,OAAO,aAAa,CAAC;AAAA,IAC3C,CAAC;AAAA,EACF;AACD;AAEO,SAAS,eAAe,IAAe;AAC7C,QAAM,aAAS,4BAAU;AAEzB,SAAO,aAAAA,QAAM,QAAQ,MAAM;AAC1B,aAAS,aAAa,GAAqB;AAC1C;AAAC,MAAC,EAAU,WAAW;AACvB,qCAAe,CAAC;AAAA,IACjB;AAEA,aAAS,WAAW,GAAqB;AACxC;AAAC,MAAC,EAAU,WAAW;AACvB,qCAAe,CAAC;AAAA,IACjB;AAEA,UAAM,oBAAoB,oBAAoB,QAAQ,IAAI,cAAc;AAGxE,QAAI,OAAe;AAEnB,aAAS,cAAc,GAAuB;AAC7C,UAAK,EAAU;AAAU;AACzB,UAAI,EAAE,YAAY,SAAS,EAAE,YAAY;AAAO;AAChD,cAAQ,EAAE;AACV,cAAQ,EAAE;AAEV,aAAO,kBAAkB,CAAC;AAAA,IAC3B;AAEA,WAAO;AAAA,MACN,eAAe,oBAAoB,QAAQ,IAAI,cAAc;AAAA,MAC7D,aAAa,oBAAoB,QAAQ,IAAI,YAAY;AAAA,MACzD,gBAAgB,oBAAoB,QAAQ,IAAI,eAAe;AAAA,MAC/D,gBAAgB,oBAAoB,QAAQ,IAAI,eAAe;AAAA,MAC/D;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD,GAAG,CAAC,QAAQ,EAAE,CAAC;AAChB;",
  "names": ["React"]
}
