"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Brushing_exports = {};
__export(Brushing_exports, {
  Brushing: () => Brushing
});
module.exports = __toCommonJS(Brushing_exports);
var import_primitives = require("@tldraw/primitives");
var import_FrameShapeUtil = require("../../../shapes/frame/FrameShapeUtil");
var import_GroupShapeUtil = require("../../../shapes/group/GroupShapeUtil");
var import_StateNode = require("../../StateNode");
class Brushing extends import_StateNode.StateNode {
  static id = "brushing";
  info = {};
  brush = new import_primitives.Box2d();
  initialSelectedIds = [];
  excludedShapeIds = /* @__PURE__ */ new Set();
  // The shape that the brush started on
  initialStartShape = null;
  onEnter = (info) => {
    const { altKey, currentPagePoint } = this.editor.inputs;
    if (altKey) {
      this.parent.transition("scribble_brushing", info);
      return;
    }
    this.excludedShapeIds = new Set(
      this.editor.shapesArray.filter(
        (shape) => this.editor.isShapeOfType(shape, import_GroupShapeUtil.GroupShapeUtil) || this.editor.isShapeOrAncestorLocked(shape)
      ).map((shape) => shape.id)
    );
    this.info = info;
    this.initialSelectedIds = this.editor.selectedIds.slice();
    this.initialStartShape = this.editor.getShapesAtPoint(currentPagePoint)[0];
    this.onPointerMove();
  };
  onExit = () => {
    this.initialSelectedIds = [];
    this.editor.setBrush(null);
  };
  onPointerMove = () => {
    this.hitTestShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = (info) => {
    this.editor.setSelectedIds(this.initialSelectedIds, true);
    this.parent.transition("idle", info);
  };
  onKeyDown = (info) => {
    if (this.editor.inputs.altKey) {
      this.parent.transition("scribble_brushing", info);
    } else {
      this.hitTestShapes();
    }
  };
  onKeyUp = () => {
    this.hitTestShapes();
  };
  complete() {
    this.parent.transition("idle", {});
  }
  hitTestShapes() {
    const {
      currentPageId,
      shapesArray,
      inputs: { originPagePoint, currentPagePoint, shiftKey, ctrlKey }
    } = this.editor;
    this.brush.setTo(import_primitives.Box2d.FromPoints([originPagePoint, currentPagePoint]));
    const results = new Set(shiftKey ? this.initialSelectedIds : []);
    let A, B, shape, util, pageBounds, pageTransform, localCorners;
    const { corners } = this.brush;
    const { excludedShapeIds } = this;
    testAllShapes:
      for (let i = 0, n = shapesArray.length; i < n; i++) {
        shape = shapesArray[i];
        if (excludedShapeIds.has(shape.id))
          continue testAllShapes;
        if (results.has(shape.id))
          continue testAllShapes;
        pageBounds = this.editor.getPageBounds(shape);
        if (!pageBounds)
          continue testAllShapes;
        if (this.brush.contains(pageBounds)) {
          this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
          continue testAllShapes;
        }
        if (ctrlKey || this.editor.isShapeOfType(shape, import_FrameShapeUtil.FrameShapeUtil)) {
          continue testAllShapes;
        }
        if (this.brush.collides(pageBounds)) {
          util = this.editor.getShapeUtil(shape);
          pageTransform = this.editor.getPageTransform(shape);
          if (!pageTransform) {
            continue testAllShapes;
          }
          localCorners = import_primitives.Matrix2d.applyToPoints(import_primitives.Matrix2d.Inverse(pageTransform), corners);
          hitTestBrushEdges:
            for (let i2 = 0; i2 < localCorners.length; i2++) {
              A = localCorners[i2];
              B = localCorners[(i2 + 1) % localCorners.length];
              if (util.hitTestLineSegment(shape, A, B)) {
                this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
                break hitTestBrushEdges;
              }
            }
        }
      }
    this.editor.setBrush({ ...this.brush.toJson() });
    this.editor.setSelectedIds(Array.from(results), true);
  }
  onInterrupt = () => {
    this.editor.setBrush(null);
  };
  handleHit(shape, currentPagePoint, currentPageId, results, corners) {
    if (shape.parentId === currentPageId) {
      results.add(shape.id);
      return;
    }
    const selectedShape = this.editor.getOutermostSelectableShape(shape);
    const pageMask = this.editor.getPageMaskById(selectedShape.id);
    if (pageMask && (0, import_primitives.polygonsIntersect)(pageMask, corners) !== null && !(0, import_primitives.pointInPolygon)(currentPagePoint, pageMask)) {
      return;
    }
    results.add(selectedShape.id);
  }
}
//# sourceMappingURL=Brushing.js.map
