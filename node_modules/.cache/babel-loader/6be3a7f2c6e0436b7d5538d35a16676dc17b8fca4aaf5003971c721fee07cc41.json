{"ast":null,"code":"function getPerfectDashProps(totalLength, strokeWidth) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _opts$closed = opts.closed,\n    closed = _opts$closed === void 0 ? false : _opts$closed,\n    _opts$snap = opts.snap,\n    snap = _opts$snap === void 0 ? 1 : _opts$snap,\n    _opts$start = opts.start,\n    start = _opts$start === void 0 ? \"outset\" : _opts$start,\n    _opts$end = opts.end,\n    end = _opts$end === void 0 ? \"outset\" : _opts$end,\n    _opts$lengthRatio = opts.lengthRatio,\n    lengthRatio = _opts$lengthRatio === void 0 ? 2 : _opts$lengthRatio,\n    _opts$style = opts.style,\n    style = _opts$style === void 0 ? \"dashed\" : _opts$style;\n  var dashLength = 0;\n  var dashCount = 0;\n  var ratio = 1;\n  var gapLength = 0;\n  var strokeDashoffset = 0;\n  switch (style) {\n    case \"dashed\":\n      {\n        ratio = 1;\n        dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);\n        break;\n      }\n    case \"dotted\":\n      {\n        ratio = 100;\n        dashLength = strokeWidth / ratio;\n        break;\n      }\n    default:\n      {\n        return {\n          strokeDasharray: \"none\",\n          strokeDashoffset: \"none\"\n        };\n      }\n  }\n  if (!closed) {\n    if (start === \"outset\") {\n      totalLength += dashLength / 2;\n      strokeDashoffset += dashLength / 2;\n    } else if (start === \"skip\") {\n      totalLength -= dashLength;\n      strokeDashoffset -= dashLength;\n    }\n    if (end === \"outset\") {\n      totalLength += dashLength / 2;\n    } else if (end === \"skip\") {\n      totalLength -= dashLength;\n    }\n  }\n  dashCount = Math.floor(totalLength / dashLength / (2 * ratio));\n  dashCount -= dashCount % snap;\n  if (dashCount < 3 && style === \"dashed\") {\n    if (totalLength / strokeWidth < 5) {\n      dashLength = totalLength;\n      dashCount = 1;\n      gapLength = 0;\n    } else {\n      dashLength = totalLength * 0.333;\n      gapLength = totalLength * 0.333;\n    }\n  } else {\n    dashCount = Math.max(dashCount, 3);\n    dashLength = totalLength / dashCount / (2 * ratio);\n    if (closed) {\n      strokeDashoffset = dashLength / 2;\n      gapLength = (totalLength - dashCount * dashLength) / dashCount;\n    } else {\n      gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);\n    }\n  }\n  return {\n    strokeDasharray: [dashLength, gapLength].join(\" \"),\n    strokeDashoffset: strokeDashoffset.toString()\n  };\n}\nexport { getPerfectDashProps };","map":{"version":3,"names":["getPerfectDashProps","totalLength","strokeWidth","opts","arguments","length","undefined","_opts$closed","closed","_opts$snap","snap","_opts$start","start","_opts$end","end","_opts$lengthRatio","lengthRatio","_opts$style","style","dashLength","dashCount","ratio","gapLength","strokeDashoffset","Math","min","strokeDasharray","floor","max","join","toString"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/shared/getPerfectDashProps.ts"],"sourcesContent":["import { TLDefaultDashStyle } from '@tldraw/tlschema'\n\nexport function getPerfectDashProps(\n\ttotalLength: number,\n\tstrokeWidth: number,\n\topts = {} as Partial<{\n\t\tstyle: TLDefaultDashStyle\n\t\tsnap: number\n\t\tend: 'skip' | 'outset' | 'none'\n\t\tstart: 'skip' | 'outset' | 'none'\n\t\tlengthRatio: number\n\t\tclosed: boolean\n\t}>\n): {\n\tstrokeDasharray: string\n\tstrokeDashoffset: string\n} {\n\tconst {\n\t\tclosed = false,\n\t\tsnap = 1,\n\t\tstart = 'outset',\n\t\tend = 'outset',\n\t\tlengthRatio = 2,\n\t\tstyle = 'dashed',\n\t} = opts\n\n\tlet dashLength = 0\n\tlet dashCount = 0\n\tlet ratio = 1\n\tlet gapLength = 0\n\tlet strokeDashoffset = 0\n\n\tswitch (style) {\n\t\tcase 'dashed': {\n\t\t\tratio = 1\n\t\t\tdashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4)\n\t\t\tbreak\n\t\t}\n\t\tcase 'dotted': {\n\t\t\tratio = 100\n\t\t\tdashLength = strokeWidth / ratio\n\t\t\tbreak\n\t\t}\n\t\tdefault: {\n\t\t\treturn {\n\t\t\t\tstrokeDasharray: 'none',\n\t\t\t\tstrokeDashoffset: 'none',\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!closed) {\n\t\tif (start === 'outset') {\n\t\t\ttotalLength += dashLength / 2\n\t\t\tstrokeDashoffset += dashLength / 2\n\t\t} else if (start === 'skip') {\n\t\t\ttotalLength -= dashLength\n\t\t\tstrokeDashoffset -= dashLength\n\t\t}\n\n\t\tif (end === 'outset') {\n\t\t\ttotalLength += dashLength / 2\n\t\t} else if (end === 'skip') {\n\t\t\ttotalLength -= dashLength\n\t\t}\n\t}\n\n\tdashCount = Math.floor(totalLength / dashLength / (2 * ratio))\n\tdashCount -= dashCount % snap\n\n\tif (dashCount < 3 && style === 'dashed') {\n\t\tif (totalLength / strokeWidth < 5) {\n\t\t\tdashLength = totalLength\n\t\t\tdashCount = 1\n\t\t\tgapLength = 0\n\t\t} else {\n\t\t\tdashLength = totalLength * 0.333\n\t\t\tgapLength = totalLength * 0.333\n\t\t}\n\t} else {\n\t\tdashCount = Math.max(dashCount, 3)\n\t\tdashLength = totalLength / dashCount / (2 * ratio)\n\n\t\tif (closed) {\n\t\t\tstrokeDashoffset = dashLength / 2\n\t\t\tgapLength = (totalLength - dashCount * dashLength) / dashCount\n\t\t} else {\n\t\t\tgapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1)\n\t\t}\n\t}\n\n\treturn {\n\t\tstrokeDasharray: [dashLength, gapLength].join(' '),\n\t\tstrokeDashoffset: strokeDashoffset.toString(),\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}