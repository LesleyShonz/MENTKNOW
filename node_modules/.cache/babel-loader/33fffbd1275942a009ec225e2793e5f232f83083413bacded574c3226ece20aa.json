{"ast":null,"code":"import { useEffect } from \"react\";\nimport { preventDefault } from \"../utils/dom.mjs\";\nimport { useEditor } from \"./useEditor.mjs\";\nvar IGNORED_TAGS = [\"textarea\", \"input\"];\nfunction useFixSafariDoubleTapZoomPencilEvents(ref) {\n  var editor = useEditor();\n  useEffect(function () {\n    var elm = ref.current;\n    if (!elm) return;\n    var handleEvent = function handleEvent(e) {\n      if (e instanceof PointerEvent && e.pointerType === \"pen\") {\n        var _target$tagName;\n        ;\n        e.isKilled = true;\n        var target = e.target;\n        if (IGNORED_TAGS.includes((_target$tagName = target.tagName) === null || _target$tagName === void 0 ? void 0 : _target$tagName.toLocaleLowerCase()) || editor.isIn(\"select.editing_shape\")) {\n          return;\n        }\n        preventDefault(e);\n      }\n    };\n    elm.addEventListener(\"touchstart\", handleEvent);\n    elm.addEventListener(\"touchend\", handleEvent);\n    return function () {\n      elm.removeEventListener(\"touchstart\", handleEvent);\n      elm.addEventListener(\"touchend\", handleEvent);\n    };\n  }, [editor, ref]);\n}\nexport { useFixSafariDoubleTapZoomPencilEvents };","map":{"version":3,"names":["useEffect","preventDefault","useEditor","IGNORED_TAGS","useFixSafariDoubleTapZoomPencilEvents","ref","editor","elm","current","handleEvent","e","PointerEvent","pointerType","_target$tagName","isKilled","target","includes","tagName","toLocaleLowerCase","isIn","addEventListener","removeEventListener"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/hooks/useFixSafariDoubleTapZoomPencilEvents.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport { preventDefault } from '../utils/dom'\nimport { useEditor } from './useEditor'\n\nconst IGNORED_TAGS = ['textarea', 'input']\n\n/**\n * When double tapping with the pencil in iOS, it enables a little zoom window in the UI. We don't\n * want this for drawing operations and can disable it by setting 'disableDoubleTapZoom' in the main\n * editor.\n */\nexport function useFixSafariDoubleTapZoomPencilEvents(ref: React.RefObject<HTMLElement>) {\n\tconst editor = useEditor()\n\n\tuseEffect(() => {\n\t\tconst elm = ref.current\n\n\t\tif (!elm) return\n\n\t\tconst handleEvent = (e: PointerEvent | TouchEvent) => {\n\t\t\tif (e instanceof PointerEvent && e.pointerType === 'pen') {\n\t\t\t\t;(e as any).isKilled = true\n\t\t\t\tconst { target } = e\n\n\t\t\t\t// Allow events to propagate if the app is editing a shape, or if the event is occuring in a text area or input\n\t\t\t\tif (\n\t\t\t\t\tIGNORED_TAGS.includes((target as Element).tagName?.toLocaleLowerCase()) ||\n\t\t\t\t\teditor.isIn('select.editing_shape')\n\t\t\t\t) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tpreventDefault(e)\n\t\t\t}\n\t\t}\n\n\t\telm.addEventListener('touchstart', handleEvent)\n\t\telm.addEventListener('touchend', handleEvent)\n\t\treturn () => {\n\t\t\telm.removeEventListener('touchstart', handleEvent)\n\t\t\telm.addEventListener('touchend', handleEvent)\n\t\t}\n\t}, [editor, ref])\n}\n"],"mappings":"AAAA,SAASA,SAAA,QAAiB;AAC1B,SAASC,cAAA,QAAsB;AAC/B,SAASC,SAAA,QAAiB;AAE1B,IAAMC,YAAA,GAAe,CAAC,YAAY,OAAO;AAOlC,SAASC,sCAAsCC,GAAA,EAAmC;EACxF,IAAMC,MAAA,GAASJ,SAAA,CAAU;EAEzBF,SAAA,CAAU,YAAM;IACf,IAAMO,GAAA,GAAMF,GAAA,CAAIG,OAAA;IAEhB,IAAI,CAACD,GAAA,EAAK;IAEV,IAAME,WAAA,GAAc,SAAdA,YAAeC,CAAA,EAAiC;MACrD,IAAIA,CAAA,YAAaC,YAAA,IAAgBD,CAAA,CAAEE,WAAA,KAAgB,OAAO;QAAA,IAAAC,eAAA;QACzD;QAAEH,CAAA,CAAUI,QAAA,GAAW;QACvB,IAAQC,MAAA,GAAWL,CAAA,CAAXK,MAAA;QAGR,IACCZ,YAAA,CAAaa,QAAA,EAAAH,eAAA,GAAUE,MAAA,CAAmBE,OAAA,cAAAJ,eAAA,uBAAnBA,eAAA,CAA4BK,iBAAA,CAAkB,CAAC,KACtEZ,MAAA,CAAOa,IAAA,CAAK,sBAAsB,GACjC;UACD;QACD;QAEAlB,cAAA,CAAeS,CAAC;MACjB;IACD;IAEAH,GAAA,CAAIa,gBAAA,CAAiB,cAAcX,WAAW;IAC9CF,GAAA,CAAIa,gBAAA,CAAiB,YAAYX,WAAW;IAC5C,OAAO,YAAM;MACZF,GAAA,CAAIc,mBAAA,CAAoB,cAAcZ,WAAW;MACjDF,GAAA,CAAIa,gBAAA,CAAiB,YAAYX,WAAW;IAC7C;EACD,GAAG,CAACH,MAAA,EAAQD,GAAG,CAAC;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}