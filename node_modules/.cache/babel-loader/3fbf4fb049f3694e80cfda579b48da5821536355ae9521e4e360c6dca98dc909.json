{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { LANGUAGES } from \"./languages.mjs\";\nfunction getDefaultTranslationLocale() {\n  var _window$navigator$lan;\n  var locales = typeof window !== \"undefined\" ? (_window$navigator$lan = window.navigator.languages) !== null && _window$navigator$lan !== void 0 ? _window$navigator$lan : [\"en\"] : [\"en\"];\n  return _getDefaultTranslationLocale(locales);\n}\nfunction _getDefaultTranslationLocale(locales) {\n  var _iterator = _createForOfIteratorHelper(locales),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var locale = _step.value;\n      var supportedLocale = getSupportedLocale(locale);\n      if (supportedLocale) {\n        return supportedLocale;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return \"en\";\n}\nvar DEFAULT_LOCALE_REGIONS = {\n  zh: \"zh-cn\",\n  pt: \"pt-br\",\n  ko: \"ko-kr\",\n  hi: \"hi-in\"\n};\nfunction getSupportedLocale(locale) {\n  var exactMatch = LANGUAGES.find(function (t) {\n    return t.locale === locale.toLowerCase();\n  });\n  if (exactMatch) {\n    return exactMatch.locale;\n  }\n  var _locale$split$map = locale.split(/[-_]/).map(function (s) {\n      return s.toLowerCase();\n    }),\n    _locale$split$map2 = _slicedToArray(_locale$split$map, 2),\n    language = _locale$split$map2[0],\n    region = _locale$split$map2[1];\n  if (region) {\n    var languageMatch = LANGUAGES.find(function (t) {\n      return t.locale === language;\n    });\n    if (languageMatch) {\n      return languageMatch.locale;\n    }\n  }\n  if (language in DEFAULT_LOCALE_REGIONS) {\n    return DEFAULT_LOCALE_REGIONS[language];\n  }\n  return null;\n}\nexport { LANGUAGES, _getDefaultTranslationLocale, getDefaultTranslationLocale };","map":{"version":3,"names":["LANGUAGES","getDefaultTranslationLocale","_window$navigator$lan","locales","window","navigator","languages","_getDefaultTranslationLocale","_iterator","_createForOfIteratorHelper","_step","s","n","done","locale","value","supportedLocale","getSupportedLocale","err","e","f","DEFAULT_LOCALE_REGIONS","zh","pt","ko","hi","exactMatch","find","t","toLowerCase","_locale$split$map","split","map","_locale$split$map2","_slicedToArray","language","region","languageMatch"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/translations/translations.ts"],"sourcesContent":["import { LANGUAGES } from './languages'\n\n/** @public */\nexport { LANGUAGES }\n\n/** @public */\nexport type TLLanguage = (typeof LANGUAGES)[number]\n// {\n// \treadonly locale: string\n// \treadonly label: string\n// }\n\n/** @public */\nexport function getDefaultTranslationLocale(): TLLanguage['locale'] {\n\tconst locales = typeof window !== 'undefined' ? window.navigator.languages ?? ['en'] : ['en']\n\treturn _getDefaultTranslationLocale(locales)\n}\n\n/** @internal */\nexport function _getDefaultTranslationLocale(locales: readonly string[]): TLLanguage['locale'] {\n\tfor (const locale of locales) {\n\t\tconst supportedLocale = getSupportedLocale(locale)\n\t\tif (supportedLocale) {\n\t\t\treturn supportedLocale\n\t\t}\n\t}\n\treturn 'en'\n}\n\n/** @public */\nconst DEFAULT_LOCALE_REGIONS: { [locale: string]: TLLanguage['locale'] } = {\n\tzh: 'zh-cn',\n\tpt: 'pt-br',\n\tko: 'ko-kr',\n\thi: 'hi-in',\n}\n\n/** @public */\nfunction getSupportedLocale(locale: string): TLLanguage['locale'] | null {\n\t// If we have an exact match, return it!\n\t// (e.g. if the user has 'fr' and we have 'fr')\n\t// (or if the user has 'pt-BR' and we have 'pt-br')\n\tconst exactMatch = LANGUAGES.find((t) => t.locale === locale.toLowerCase())\n\tif (exactMatch) {\n\t\treturn exactMatch.locale\n\t}\n\n\t// Otherwise, we need to be more flexible...\n\tconst [language, region] = locale.split(/[-_]/).map((s) => s.toLowerCase())\n\n\t// If the user's language has a region...\n\t// let's try to find non-region-specific locale for them\n\t// (e.g. if they have 'fr-CA' but we only have 'fr')\n\tif (region) {\n\t\tconst languageMatch = LANGUAGES.find((t) => t.locale === language)\n\t\tif (languageMatch) {\n\t\t\treturn languageMatch.locale\n\t\t}\n\t}\n\n\t// If the user's language doesn't have a region...\n\t// let's try to find a region-specific locale for them\n\t// (e.g. if they have 'pt' but we only have 'pt-pt' or 'pt-br')\n\t//\n\t// In this case, we choose the hard-coded default region for that language\n\tif (language in DEFAULT_LOCALE_REGIONS) {\n\t\treturn DEFAULT_LOCALE_REGIONS[language]\n\t}\n\n\t// Oh no! We don't have a translation for this language!\n\t// Let's give up...\n\treturn null\n}\n"],"mappings":";;AAAA,SAASA,SAAA,QAAiB;AAanB,SAASC,4BAAA,EAAoD;EAAA,IAAAC,qBAAA;EACnE,IAAMC,OAAA,GAAU,OAAOC,MAAA,KAAW,eAAAF,qBAAA,GAAcE,MAAA,CAAOC,SAAA,CAAUC,SAAA,cAAAJ,qBAAA,cAAAA,qBAAA,GAAa,CAAC,IAAI,IAAI,CAAC,IAAI;EAC5F,OAAOK,4BAAA,CAA6BJ,OAAO;AAC5C;AAGO,SAASI,6BAA6BJ,OAAA,EAAkD;EAAA,IAAAK,SAAA,GAAAC,0BAAA,CACzEN,OAAA;IAAAO,KAAA;EAAA;IAArB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;MAAA,IAAnBC,MAAA,GAAAJ,KAAA,CAAAK,KAAA;MACV,IAAMC,eAAA,GAAkBC,kBAAA,CAAmBH,MAAM;MACjD,IAAIE,eAAA,EAAiB;QACpB,OAAOA,eAAA;MACR;IACD;EAAA,SAAAE,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EACA,OAAO;AACR;AAGA,IAAMC,sBAAA,GAAqE;EAC1EC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;AACL;AAGA,SAASR,mBAAmBH,MAAA,EAA6C;EAIxE,IAAMY,UAAA,GAAa1B,SAAA,CAAU2B,IAAA,CAAK,UAACC,CAAA;IAAA,OAAMA,CAAA,CAAEd,MAAA,KAAWA,MAAA,CAAOe,WAAA,CAAY,CAAC;EAAA;EAC1E,IAAIH,UAAA,EAAY;IACf,OAAOA,UAAA,CAAWZ,MAAA;EACnB;EAGA,IAAAgB,iBAAA,GAA2BhB,MAAA,CAAOiB,KAAA,CAAM,MAAM,EAAEC,GAAA,CAAI,UAACrB,CAAA;MAAA,OAAMA,CAAA,CAAEkB,WAAA,CAAY,CAAC;IAAA;IAAAI,kBAAA,GAAAC,cAAA,CAAAJ,iBAAA;IAAnEK,QAAA,GAAAF,kBAAA;IAAUG,MAAM,GAAAH,kBAAA;EAKvB,IAAIG,MAAA,EAAQ;IACX,IAAMC,aAAA,GAAgBrC,SAAA,CAAU2B,IAAA,CAAK,UAACC,CAAA;MAAA,OAAMA,CAAA,CAAEd,MAAA,KAAWqB,QAAQ;IAAA;IACjE,IAAIE,aAAA,EAAe;MAClB,OAAOA,aAAA,CAAcvB,MAAA;IACtB;EACD;EAOA,IAAIqB,QAAA,IAAYd,sBAAA,EAAwB;IACvC,OAAOA,sBAAA,CAAuBc,QAAQ;EACvC;EAIA,OAAO;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}