{
  "version": 3,
  "sources": ["../../../src/lib/config/defaultShapes.ts"],
  "sourcesContent": ["import { ArrowShape } from '../editor/shapes/arrow/ArrowShape'\nimport { BookmarkShape } from '../editor/shapes/bookmark/BookmarkShape'\nimport { DrawShape } from '../editor/shapes/draw/DrawShape'\nimport { EmbedShape } from '../editor/shapes/embed/EmbedShape'\nimport { FrameShape } from '../editor/shapes/frame/FrameShape'\nimport { GeoShape } from '../editor/shapes/geo/GeoShape'\nimport { GroupShape } from '../editor/shapes/group/GroupShape'\nimport { HighlightShape } from '../editor/shapes/highlight/HighlightShape'\nimport { ImageShape } from '../editor/shapes/image/ImageShape'\nimport { LineShape } from '../editor/shapes/line/LineShape'\nimport { NoteShape } from '../editor/shapes/note/NoteShape'\nimport { TextShape } from '../editor/shapes/text/TextShape'\nimport { VideoShape } from '../editor/shapes/video/VideoShape'\nimport { AnyTLShapeInfo, TLShapeInfo } from './defineShape'\n\n/** @public */\nexport const coreShapes = [\n\t// created by grouping interactions, probably the corest core shape that we have\n\tGroupShape,\n\t// created by embed menu / url drop\n\tEmbedShape,\n\t// created by copy and paste / url drop\n\tBookmarkShape,\n\t// created by copy and paste / file drop\n\tImageShape,\n\t// created by copy and paste\n\tTextShape,\n] as const\n\n/** @public */\nexport const defaultShapes = [\n\tDrawShape,\n\tGeoShape,\n\tLineShape,\n\tNoteShape,\n\tFrameShape,\n\tArrowShape,\n\tHighlightShape,\n\tVideoShape,\n] as const\n\nconst coreShapeTypes = new Set<string>(coreShapes.map((s) => s.type))\nexport function checkShapesAndAddCore(customShapes: readonly TLShapeInfo[]) {\n\tconst shapes: AnyTLShapeInfo[] = [...coreShapes]\n\n\tconst addedCustomShapeTypes = new Set<string>()\n\tfor (const customShape of customShapes) {\n\t\tif (coreShapeTypes.has(customShape.type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Shape type \"${customShape.type}\" is a core shapes type and cannot be overridden`\n\t\t\t)\n\t\t}\n\t\tif (addedCustomShapeTypes.has(customShape.type)) {\n\t\t\tthrow new Error(`Shape type \"${customShape.type}\" is defined more than once`)\n\t\t}\n\t\tshapes.push(customShape)\n\t\taddedCustomShapeTypes.add(customShape.type)\n\t}\n\n\treturn shapes\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA2B;AAC3B,2BAA8B;AAC9B,uBAA0B;AAC1B,wBAA2B;AAC3B,wBAA2B;AAC3B,sBAAyB;AACzB,wBAA2B;AAC3B,4BAA+B;AAC/B,wBAA2B;AAC3B,uBAA0B;AAC1B,uBAA0B;AAC1B,uBAA0B;AAC1B,wBAA2B;AAIpB,MAAM,aAAa;AAAA;AAAA,EAEzB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AACD;AAGO,MAAM,gBAAgB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB,IAAI,IAAY,WAAW,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;AAC7D,SAAS,sBAAsB,cAAsC;AAC3E,QAAM,SAA2B,CAAC,GAAG,UAAU;AAE/C,QAAM,wBAAwB,oBAAI,IAAY;AAC9C,aAAW,eAAe,cAAc;AACvC,QAAI,eAAe,IAAI,YAAY,IAAI,GAAG;AACzC,YAAM,IAAI;AAAA,QACT,eAAe,YAAY;AAAA,MAC5B;AAAA,IACD;AACA,QAAI,sBAAsB,IAAI,YAAY,IAAI,GAAG;AAChD,YAAM,IAAI,MAAM,eAAe,YAAY,iCAAiC;AAAA,IAC7E;AACA,WAAO,KAAK,WAAW;AACvB,0BAAsB,IAAI,YAAY,IAAI;AAAA,EAC3C;AAEA,SAAO;AACR;",
  "names": []
}
