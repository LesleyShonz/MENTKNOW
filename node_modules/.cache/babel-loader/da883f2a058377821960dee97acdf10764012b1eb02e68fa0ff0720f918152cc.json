{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Box2d } from \"@tldraw/primitives\";\nimport { correctSpacesToNbsp } from \"../../../utils/string.mjs\";\nfunction createTextSvgElementFromSpans(editor, spans, opts) {\n  var _opts$offsetX, _opts$offsetY;\n  var _opts$padding = opts.padding,\n    padding = _opts$padding === void 0 ? 0 : _opts$padding;\n  var textElm = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  textElm.setAttribute(\"font-size\", opts.fontSize + \"px\");\n  textElm.setAttribute(\"font-family\", opts.fontFamily);\n  textElm.setAttribute(\"font-style\", opts.fontStyle);\n  textElm.setAttribute(\"font-weight\", opts.fontWeight);\n  textElm.setAttribute(\"line-height\", opts.lineHeight * opts.fontSize + \"px\");\n  textElm.setAttribute(\"dominant-baseline\", \"mathematical\");\n  textElm.setAttribute(\"alignment-baseline\", \"mathematical\");\n  if (spans.length === 0) return textElm;\n  var bounds = Box2d.From(spans[0].box);\n  var _iterator = _createForOfIteratorHelper(spans),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var box = _step.value.box;\n      bounds.union(box);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var offsetX = padding + ((_opts$offsetX = opts.offsetX) !== null && _opts$offsetX !== void 0 ? _opts$offsetX : 0);\n  var offsetY = ((_opts$offsetY = opts.offsetY) !== null && _opts$offsetY !== void 0 ? _opts$offsetY : 0) + opts.fontSize / 2 + (opts.verticalTextAlign === \"start\" ? padding : opts.verticalTextAlign === \"end\" ? opts.height - padding - bounds.height : (Math.ceil(opts.height) - bounds.height) / 2);\n  var currentLineTop = null;\n  var _iterator2 = _createForOfIteratorHelper(spans),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _step2.value,\n        text = _step2$value.text,\n        _box = _step2$value.box;\n      var didBreakLine = currentLineTop !== null && _box.y > currentLineTop;\n      if (didBreakLine) {\n        var lineBreakTspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n        lineBreakTspan.setAttribute(\"alignment-baseline\", \"mathematical\");\n        lineBreakTspan.setAttribute(\"x\", offsetX + \"px\");\n        lineBreakTspan.setAttribute(\"y\", _box.y + offsetY + \"px\");\n        lineBreakTspan.textContent = \"\\n\";\n        textElm.appendChild(lineBreakTspan);\n      }\n      var tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n      tspan.setAttribute(\"alignment-baseline\", \"mathematical\");\n      tspan.setAttribute(\"x\", _box.x + offsetX + \"px\");\n      tspan.setAttribute(\"y\", _box.y + offsetY + \"px\");\n      var cleanText = correctSpacesToNbsp(text);\n      tspan.textContent = cleanText;\n      textElm.appendChild(tspan);\n      currentLineTop = _box.y;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (opts.stroke && opts.strokeWidth) {\n    textElm.setAttribute(\"stroke\", opts.stroke);\n    textElm.setAttribute(\"stroke-width\", opts.strokeWidth + \"px\");\n  }\n  if (opts.fill) {\n    textElm.setAttribute(\"fill\", opts.fill);\n  }\n  return textElm;\n}\nexport { createTextSvgElementFromSpans };","map":{"version":3,"names":["Box2d","correctSpacesToNbsp","createTextSvgElementFromSpans","editor","spans","opts","_opts$offsetX","_opts$offsetY","_opts$padding","padding","textElm","document","createElementNS","setAttribute","fontSize","fontFamily","fontStyle","fontWeight","lineHeight","length","bounds","From","box","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","union","err","e","f","offsetX","offsetY","verticalTextAlign","height","Math","ceil","currentLineTop","_iterator2","_step2","_step2$value","text","didBreakLine","y","lineBreakTspan","textContent","appendChild","tspan","x","cleanText","stroke","strokeWidth","fill"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/shapes/shared/createTextSvgElementFromSpans.ts"],"sourcesContent":["import { Box2d } from '@tldraw/primitives'\nimport {\n\tBox2dModel,\n\tTLDefaultHorizontalAlignStyle,\n\tTLDefaultVerticalAlignStyle,\n} from '@tldraw/tlschema'\nimport { correctSpacesToNbsp } from '../../../utils/string'\nimport { Editor } from '../../Editor'\n\n/** Get an SVG element for a text shape. */\nexport function createTextSvgElementFromSpans(\n\teditor: Editor,\n\tspans: { text: string; box: Box2dModel }[],\n\topts: {\n\t\tfontSize: number\n\t\tfontFamily: string\n\t\ttextAlign: TLDefaultHorizontalAlignStyle\n\t\tverticalTextAlign: TLDefaultVerticalAlignStyle\n\t\tfontWeight: string\n\t\tfontStyle: string\n\t\tlineHeight: number\n\t\twidth: number\n\t\theight: number\n\t\tstroke?: string\n\t\tstrokeWidth?: number\n\t\tfill?: string\n\t\tpadding?: number\n\t\toffsetX?: number\n\t\toffsetY?: number\n\t}\n) {\n\tconst { padding = 0 } = opts\n\n\t// Create the text element\n\tconst textElm = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n\ttextElm.setAttribute('font-size', opts.fontSize + 'px')\n\ttextElm.setAttribute('font-family', opts.fontFamily)\n\ttextElm.setAttribute('font-style', opts.fontStyle)\n\ttextElm.setAttribute('font-weight', opts.fontWeight)\n\ttextElm.setAttribute('line-height', opts.lineHeight * opts.fontSize + 'px')\n\ttextElm.setAttribute('dominant-baseline', 'mathematical')\n\ttextElm.setAttribute('alignment-baseline', 'mathematical')\n\n\tif (spans.length === 0) return textElm\n\n\tconst bounds = Box2d.From(spans[0].box)\n\tfor (const { box } of spans) {\n\t\tbounds.union(box)\n\t}\n\n\tconst offsetX = padding + (opts.offsetX ?? 0)\n\t// const offsetY = (Math.ceil(opts.height) - bounds.height + opts.fontSize) / 2 + (opts.offsetY ?? 0)\n\tconst offsetY =\n\t\t(opts.offsetY ?? 0) +\n\t\topts.fontSize / 2 +\n\t\t(opts.verticalTextAlign === 'start'\n\t\t\t? padding\n\t\t\t: opts.verticalTextAlign === 'end'\n\t\t\t? opts.height - padding - bounds.height\n\t\t\t: (Math.ceil(opts.height) - bounds.height) / 2)\n\n\t// Create text span elements for each word\n\tlet currentLineTop = null\n\tfor (const { text, box } of spans) {\n\t\t// if we broke a line, add a line break span. This helps tools like\n\t\t// figma import our exported svg correctly\n\t\tconst didBreakLine = currentLineTop !== null && box.y > currentLineTop\n\t\tif (didBreakLine) {\n\t\t\tconst lineBreakTspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan')\n\t\t\tlineBreakTspan.setAttribute('alignment-baseline', 'mathematical')\n\t\t\tlineBreakTspan.setAttribute('x', offsetX + 'px')\n\t\t\tlineBreakTspan.setAttribute('y', box.y + offsetY + 'px')\n\t\t\tlineBreakTspan.textContent = '\\n'\n\t\t\ttextElm.appendChild(lineBreakTspan)\n\t\t}\n\n\t\tconst tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan')\n\t\ttspan.setAttribute('alignment-baseline', 'mathematical')\n\t\ttspan.setAttribute('x', box.x + offsetX + 'px')\n\t\ttspan.setAttribute('y', box.y + offsetY + 'px')\n\t\tconst cleanText = correctSpacesToNbsp(text)\n\t\ttspan.textContent = cleanText\n\t\ttextElm.appendChild(tspan)\n\n\t\tcurrentLineTop = box.y\n\t}\n\n\tif (opts.stroke && opts.strokeWidth) {\n\t\ttextElm.setAttribute('stroke', opts.stroke)\n\t\ttextElm.setAttribute('stroke-width', opts.strokeWidth + 'px')\n\t}\n\n\tif (opts.fill) {\n\t\ttextElm.setAttribute('fill', opts.fill)\n\t}\n\n\treturn textElm\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}