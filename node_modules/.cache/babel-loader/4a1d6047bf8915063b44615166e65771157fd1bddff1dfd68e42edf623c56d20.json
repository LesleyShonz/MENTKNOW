{"ast":null,"code":"/**! \n * hotkeys-js v3.12.0 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2023 kenny wong <wowohoo@qq.com> \n * https://jaywcjlove.github.io/hotkeys-js \n * Licensed under the MIT license \n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n  for (var i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n  var index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nvar _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {};\n\n// F1~F12 special key\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\nvar _downKeys = []; // 记录摁下的绑定键\nvar winListendFocus = false; // window是否已经监听了focus事件\nvar _scope = 'all'; // 默认热键范围\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n\n// 返回键码\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n};\nvar getKey = function getKey(x) {\n  return Object.keys(_keyMap).find(function (k) {\n    return _keyMap[k] === x;\n  });\n};\nvar getModifier = function getModifier(x) {\n  return Object.keys(_modifier).find(function (k) {\n    return _modifier[k] === x;\n  });\n};\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(function (c) {\n    return getKey(c) || getModifier(c) || String.fromCharCode(c);\n  });\n}\nfunction getAllKeyCodes() {\n  var result = [];\n  Object.keys(_handlers).forEach(function (k) {\n    _handlers[k].forEach(function (_ref) {\n      var key = _ref.key,\n        scope = _ref.scope,\n        mods = _ref.mods,\n        shortcut = _ref.shortcut;\n      result.push({\n        scope: scope,\n        shortcut: shortcut,\n        mods: mods,\n        keys: key.split('+').map(function (v) {\n          return code(v);\n        })\n      });\n    });\n  });\n  return result;\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true;\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n  var i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (var k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n      method = args[1];\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nvar eachUnbind = function eachUnbind(_ref2) {\n  var key = _ref2.key,\n    scope = _ref2.scope,\n    method = _ref2.method,\n    _ref2$splitKey = _ref2.splitKey,\n    splitKey = _ref2$splitKey === void 0 ? '+' : _ref2$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].filter(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n      return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));\n    });\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  var modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  var scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\n\n// 判断 element 是否已经绑定事件\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n  var element = document; // 快捷键事件绑定节点\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+';\n  var capture = false;\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option;\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey,\n      element: element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e, element);\n    }, capture);\n    if (!winListendFocus) {\n      winListendFocus = true;\n      addEvent(window, 'focus', function () {\n        _downKeys = [];\n      }, capture);\n    }\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e, element);\n      clearModifier(e);\n    }, capture);\n  }\n}\nfunction trigger(shortcut) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(function (key) {\n    var dataList = _handlers[key].filter(function (item) {\n      return item.scope === scope && item.shortcut === shortcut;\n    });\n    dataList.forEach(function (data) {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\nvar _api = {\n  getPressedKeyString: getPressedKeyString,\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  getAllKeyCodes: getAllKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  trigger: trigger,\n  unbind: unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap: modifierMap\n};\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\nexport { hotkeys as default };","map":{"version":3,"names":["isff","navigator","userAgent","toLowerCase","indexOf","addEvent","object","event","method","useCapture","addEventListener","attachEvent","concat","window","getMods","modifier","key","mods","slice","length","i","getKeys","replace","keys","split","index","lastIndexOf","splice","compareArray","a1","a2","arr1","arr2","isIndex","_keyMap","backspace","tab","clear","enter","return","esc","escape","space","left","up","right","down","del","delete","ins","insert","home","end","pageup","pagedown","capslock","num_0","num_1","num_2","num_3","num_4","num_5","num_6","num_7","num_8","num_9","num_multiply","num_add","num_enter","num_subtract","num_decimal","num_divide","_modifier","shift","alt","option","ctrl","control","cmd","command","modifierMap","shiftKey","ctrlKey","altKey","metaKey","_mods","_handlers","k","_downKeys","winListendFocus","_scope","elementHasBindEvent","code","x","toUpperCase","charCodeAt","getKey","Object","find","getModifier","setScope","scope","getScope","getPressedKeyCodes","getPressedKeyString","map","c","String","fromCharCode","getAllKeyCodes","result","forEach","_ref","shortcut","push","v","filter","target","srcElement","tagName","flag","isContentEditable","readOnly","isPressed","keyCode","deleteScope","newScope","handlers","prototype","hasOwnProperty","call","clearModifier","which","charCode","hotkeys","unbind","keysInfo","Array","isArray","info","eachUnbind","_len","arguments","args","_key","splitKey","_ref2","_ref2$splitKey","multipleKeys","originKey","unbindKeys","len","lastKey","record","isMatchingMethod","eventHandler","handler","element","modifiersMatch","y","preventDefault","returnValue","stopPropagation","cancelBubble","dispatch","asterisk","keyName","keyNum","e","getModifierState","type","keydown","keyup","_i","keyShortcut","_downKeysCurrent","a","sort","join","isElementBind","document","capture","undefined","toString","trigger","dataList","item","data","_api","keyMap","_hotkeys","noConflict","deep","default"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/hotkeys-js/dist/hotkeys.esm.js"],"sourcesContent":["/**! \n * hotkeys-js v3.12.0 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2023 kenny wong <wowohoo@qq.com> \n * https://jaywcjlove.github.io/hotkeys-js \n * Licensed under the MIT license \n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n  for (var i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n  var index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nvar _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {};\n\n// F1~F12 special key\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // 记录摁下的绑定键\nvar winListendFocus = false; // window是否已经监听了focus事件\nvar _scope = 'all'; // 默认热键范围\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n\n// 返回键码\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n};\nvar getKey = function getKey(x) {\n  return Object.keys(_keyMap).find(function (k) {\n    return _keyMap[k] === x;\n  });\n};\nvar getModifier = function getModifier(x) {\n  return Object.keys(_modifier).find(function (k) {\n    return _modifier[k] === x;\n  });\n};\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(function (c) {\n    return getKey(c) || getModifier(c) || String.fromCharCode(c);\n  });\n}\nfunction getAllKeyCodes() {\n  var result = [];\n  Object.keys(_handlers).forEach(function (k) {\n    _handlers[k].forEach(function (_ref) {\n      var key = _ref.key,\n        scope = _ref.scope,\n        mods = _ref.mods,\n        shortcut = _ref.shortcut;\n      result.push({\n        scope: scope,\n        shortcut: shortcut,\n        mods: mods,\n        keys: key.split('+').map(function (v) {\n          return code(v);\n        })\n      });\n    });\n  });\n  return result;\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true;\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n  var i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (var k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n      method = args[1];\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nvar eachUnbind = function eachUnbind(_ref2) {\n  var key = _ref2.key,\n    scope = _ref2.scope,\n    method = _ref2.method,\n    _ref2$splitKey = _ref2.splitKey,\n    splitKey = _ref2$splitKey === void 0 ? '+' : _ref2$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].filter(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n      return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));\n    });\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  var modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  var scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\n\n// 判断 element 是否已经绑定事件\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n  var element = document; // 快捷键事件绑定节点\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+';\n  var capture = false;\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option;\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey,\n      element: element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e, element);\n    }, capture);\n    if (!winListendFocus) {\n      winListendFocus = true;\n      addEvent(window, 'focus', function () {\n        _downKeys = [];\n      }, capture);\n    }\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e, element);\n      clearModifier(e);\n    }, capture);\n  }\n}\nfunction trigger(shortcut) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(function (key) {\n    var dataList = _handlers[key].filter(function (item) {\n      return item.scope === scope && item.shortcut === shortcut;\n    });\n    dataList.forEach(function (data) {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\nvar _api = {\n  getPressedKeyString: getPressedKeyString,\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  getAllKeyCodes: getAllKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  trigger: trigger,\n  unbind: unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap: modifierMap\n};\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\n\nexport { hotkeys as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}