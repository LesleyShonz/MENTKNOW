{"ast":null,"code":"import _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _Symbol$iterator;\nimport { exhaustiveSwitchError } from \"@tldraw/utils\";\nfunction sharedStyleEquals(a, b) {\n  if (!b) return false;\n  switch (a.type) {\n    case \"mixed\":\n      return b.type === \"mixed\";\n    case \"shared\":\n      return b.type === \"shared\" && a.value === b.value;\n    default:\n      throw exhaustiveSwitchError(a);\n  }\n}\n_Symbol$iterator = Symbol.iterator;\nvar ReadonlySharedStyleMap = /*#__PURE__*/function () {\n  function ReadonlySharedStyleMap(entries) {\n    _classCallCheck(this, ReadonlySharedStyleMap);\n    _defineProperty(this, \"map\", void 0);\n    this.map = new Map(entries);\n  }\n  _createClass(ReadonlySharedStyleMap, [{\n    key: \"get\",\n    value: function get(prop) {\n      return this.map.get(prop);\n    }\n  }, {\n    key: \"getAsKnownValue\",\n    value: function getAsKnownValue(prop) {\n      var value = this.get(prop);\n      if (!value) return void 0;\n      if (value.type === \"mixed\") return void 0;\n      return value.value;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.map.size;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (this.size !== other.size) return false;\n      var checkedKeys = /* @__PURE__ */new Set();\n      var _iterator = _createForOfIteratorHelper(this),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            styleProp = _step$value[0],\n            value = _step$value[1];\n          if (!sharedStyleEquals(value, other.get(styleProp))) return false;\n          checkedKeys.add(styleProp);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(other),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            _styleProp = _step2$value[0],\n            _value = _step2$value[1];\n          if (checkedKeys.has(_styleProp)) continue;\n          if (!sharedStyleEquals(_value, this.get(_styleProp))) return false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this.map.values();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this.map.entries();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.map[Symbol.iterator]();\n    }\n  }]);\n  return ReadonlySharedStyleMap;\n}();\nvar SharedStyleMap = /*#__PURE__*/function (_ReadonlySharedStyleM) {\n  _inherits(SharedStyleMap, _ReadonlySharedStyleM);\n  var _super = _createSuper(SharedStyleMap);\n  function SharedStyleMap() {\n    _classCallCheck(this, SharedStyleMap);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SharedStyleMap, [{\n    key: \"set\",\n    value: function set(prop, value) {\n      this.map.set(prop, value);\n    }\n  }, {\n    key: \"applyValue\",\n    value: function applyValue(prop, value) {\n      var existingValue = this.get(prop);\n      if (!existingValue) {\n        this.set(prop, {\n          type: \"shared\",\n          value: value\n        });\n        return;\n      }\n      switch (existingValue.type) {\n        case \"mixed\":\n          return;\n        case \"shared\":\n          if (existingValue.value !== value) {\n            this.set(prop, {\n              type: \"mixed\"\n            });\n          }\n          return;\n        default:\n          exhaustiveSwitchError(existingValue, \"type\");\n      }\n    }\n  }]);\n  return SharedStyleMap;\n}(ReadonlySharedStyleMap);\nexport { ReadonlySharedStyleMap, SharedStyleMap };","map":{"version":3,"names":["exhaustiveSwitchError","sharedStyleEquals","a","b","type","value","_Symbol$iterator","Symbol","iterator","ReadonlySharedStyleMap","entries","_classCallCheck","_defineProperty","map","Map","_createClass","key","get","prop","getAsKnownValue","size","equals","other","checkedKeys","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","styleProp","add","err","e","f","_iterator2","_step2","_step2$value","has","keys","values","SharedStyleMap","_ReadonlySharedStyleM","_inherits","_super","_createSuper","apply","arguments","set","applyValue","existingValue"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/SharedStylesMap.ts"],"sourcesContent":["import { StyleProp } from '@tldraw/tlschema'\nimport { exhaustiveSwitchError } from '@tldraw/utils'\n\n/** @public */\nexport type SharedStyle<T> =\n\t| { readonly type: 'mixed' }\n\t| { readonly type: 'shared'; readonly value: T }\n\nfunction sharedStyleEquals<T>(a: SharedStyle<T>, b: SharedStyle<T> | undefined) {\n\tif (!b) return false\n\tswitch (a.type) {\n\t\tcase 'mixed':\n\t\t\treturn b.type === 'mixed'\n\t\tcase 'shared':\n\t\t\treturn b.type === 'shared' && a.value === b.value\n\t\tdefault:\n\t\t\tthrow exhaustiveSwitchError(a)\n\t}\n}\n\n/** @public */\nexport class ReadonlySharedStyleMap {\n\tprotected map: Map<StyleProp<unknown>, SharedStyle<unknown>>\n\tconstructor(entries?: Iterable<[StyleProp<unknown>, SharedStyle<unknown>]>) {\n\t\tthis.map = new Map(entries)\n\t}\n\n\tget<T>(prop: StyleProp<T>): SharedStyle<T> | undefined {\n\t\treturn this.map.get(prop) as SharedStyle<T> | undefined\n\t}\n\n\tgetAsKnownValue<T>(prop: StyleProp<T>): T | undefined {\n\t\tconst value = this.get(prop)\n\t\tif (!value) return undefined\n\t\tif (value.type === 'mixed') return undefined\n\t\treturn value.value\n\t}\n\n\tget size() {\n\t\treturn this.map.size\n\t}\n\n\tequals(other: ReadonlySharedStyleMap) {\n\t\tif (this.size !== other.size) return false\n\n\t\tconst checkedKeys = new Set()\n\t\tfor (const [styleProp, value] of this) {\n\t\t\tif (!sharedStyleEquals(value, other.get(styleProp))) return false\n\t\t\tcheckedKeys.add(styleProp)\n\t\t}\n\t\tfor (const [styleProp, value] of other) {\n\t\t\tif (checkedKeys.has(styleProp)) continue\n\t\t\tif (!sharedStyleEquals(value, this.get(styleProp))) return false\n\t\t}\n\n\t\treturn true\n\t}\n\n\tkeys() {\n\t\treturn this.map.keys()\n\t}\n\n\tvalues() {\n\t\treturn this.map.values()\n\t}\n\n\tentries() {\n\t\treturn this.map.entries()\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.map[Symbol.iterator]()\n\t}\n}\n\n/** @internal */\nexport class SharedStyleMap extends ReadonlySharedStyleMap {\n\tset<T>(prop: StyleProp<T>, value: SharedStyle<T>) {\n\t\tthis.map.set(prop, value)\n\t}\n\n\tapplyValue<T>(prop: StyleProp<T>, value: T) {\n\t\tconst existingValue = this.get(prop)\n\n\t\t// if we don't have a value yet, set it\n\t\tif (!existingValue) {\n\t\t\tthis.set(prop, { type: 'shared', value })\n\t\t\treturn\n\t\t}\n\n\t\tswitch (existingValue.type) {\n\t\t\tcase 'mixed':\n\t\t\t\t// we're already mixed, adding new values won't help\n\t\t\t\treturn\n\t\t\tcase 'shared':\n\t\t\t\tif (existingValue.value !== value) {\n\t\t\t\t\t// if the value is different, we're now mixed:\n\t\t\t\t\tthis.set(prop, { type: 'mixed' })\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\texhaustiveSwitchError(existingValue, 'type')\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}