{"ast":null,"code":"import { canolicalizeRotation, Matrix2d, Vec2d } from \"@tldraw/primitives\";\nimport { isShapeId } from \"@tldraw/tlschema\";\nimport { structuredClone } from \"@tldraw/utils\";\nfunction getRotationSnapshot(_ref) {\n  var editor = _ref.editor;\n  var selectionRotation = editor.selectionRotation,\n    selectionPageCenter = editor.selectionPageCenter,\n    originPagePoint = editor.inputs.originPagePoint,\n    selectedShapes = editor.selectedShapes;\n  return {\n    selectionPageCenter: selectionPageCenter,\n    initialCursorAngle: selectionPageCenter.angle(originPagePoint),\n    initialSelectionRotation: selectionRotation,\n    shapeSnapshots: selectedShapes.map(function (shape) {\n      return {\n        shape: structuredClone(shape),\n        initialPagePoint: editor.getPagePointById(shape.id)\n      };\n    })\n  };\n}\nfunction applyRotationToSnapshotShapes(_ref2) {\n  var delta = _ref2.delta,\n    editor = _ref2.editor,\n    snapshot = _ref2.snapshot,\n    stage = _ref2.stage;\n  var selectionPageCenter = snapshot.selectionPageCenter,\n    shapeSnapshots = snapshot.shapeSnapshots;\n  editor.updateShapes(shapeSnapshots.map(function (_ref3) {\n    var shape = _ref3.shape,\n      initialPagePoint = _ref3.initialPagePoint;\n    var parentTransform = isShapeId(shape.parentId) ? editor.getPageTransformById(shape.parentId) : Matrix2d.Identity();\n    var newPagePoint = Vec2d.RotWith(initialPagePoint, selectionPageCenter, delta);\n    var newLocalPoint = Matrix2d.applyToPoint(\n    // use the current parent transform in case it has moved/resized since the start\n    // (e.g. if rotating a shape at the edge of a group)\n    Matrix2d.Inverse(parentTransform), newPagePoint);\n    var newRotation = canolicalizeRotation(shape.rotation + delta);\n    return {\n      id: shape.id,\n      type: shape.type,\n      x: newLocalPoint.x,\n      y: newLocalPoint.y,\n      rotation: newRotation\n    };\n  }));\n  var changes = [];\n  shapeSnapshots.forEach(function (_ref4) {\n    var _util$onRotate;\n    var shape = _ref4.shape;\n    var current = editor.getShapeById(shape.id);\n    if (!current) return;\n    var util = editor.getShapeUtil(shape);\n    if (stage === \"start\" || stage === \"one-off\") {\n      var _util$onRotateStart;\n      var changeStart = (_util$onRotateStart = util.onRotateStart) === null || _util$onRotateStart === void 0 ? void 0 : _util$onRotateStart.call(util, shape);\n      if (changeStart) changes.push(changeStart);\n    }\n    var changeUpdate = (_util$onRotate = util.onRotate) === null || _util$onRotate === void 0 ? void 0 : _util$onRotate.call(util, shape, current);\n    if (changeUpdate) changes.push(changeUpdate);\n    if (stage === \"end\" || stage === \"one-off\") {\n      var _util$onRotateEnd;\n      var changeEnd = (_util$onRotateEnd = util.onRotateEnd) === null || _util$onRotateEnd === void 0 ? void 0 : _util$onRotateEnd.call(util, shape, current);\n      if (changeEnd) changes.push(changeEnd);\n    }\n  });\n  if (changes.length > 0) {\n    editor.updateShapes(changes);\n  }\n}\nexport { applyRotationToSnapshotShapes, getRotationSnapshot };","map":{"version":3,"names":["canolicalizeRotation","Matrix2d","Vec2d","isShapeId","structuredClone","getRotationSnapshot","_ref","editor","selectionRotation","selectionPageCenter","originPagePoint","inputs","selectedShapes","initialCursorAngle","angle","initialSelectionRotation","shapeSnapshots","map","shape","initialPagePoint","getPagePointById","id","applyRotationToSnapshotShapes","_ref2","delta","snapshot","stage","updateShapes","_ref3","parentTransform","parentId","getPageTransformById","Identity","newPagePoint","RotWith","newLocalPoint","applyToPoint","Inverse","newRotation","rotation","type","x","y","changes","forEach","_ref4","_util$onRotate","current","getShapeById","util","getShapeUtil","_util$onRotateStart","changeStart","onRotateStart","call","push","changeUpdate","onRotate","_util$onRotateEnd","changeEnd","onRotateEnd","length"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/utils/rotation.ts"],"sourcesContent":["import { canolicalizeRotation, Matrix2d, Vec2d } from '@tldraw/primitives'\nimport { isShapeId, TLShapePartial } from '@tldraw/tlschema'\nimport { structuredClone } from '@tldraw/utils'\nimport { Editor } from '../editor/Editor'\n\n/** @internal */\nexport function getRotationSnapshot({ editor }: { editor: Editor }) {\n\tconst {\n\t\tselectionRotation,\n\t\tselectionPageCenter,\n\t\tinputs: { originPagePoint },\n\t\tselectedShapes,\n\t} = editor\n\n\t// todo: this assumes we're rotating the selected shapes\n\t// if we try to rotate shapes that aren't selected, this\n\t// will produce the wrong results if there are other shapes\n\t// selected or else break if there are none.\n\n\treturn {\n\t\tselectionPageCenter: selectionPageCenter!,\n\t\tinitialCursorAngle: selectionPageCenter!.angle(originPagePoint),\n\t\tinitialSelectionRotation: selectionRotation,\n\t\tshapeSnapshots: selectedShapes.map((shape) => ({\n\t\t\tshape: structuredClone(shape),\n\t\t\tinitialPagePoint: editor.getPagePointById(shape.id)!,\n\t\t})),\n\t}\n}\n\n/** @internal */\nexport type TLRotationSnapshot = ReturnType<typeof getRotationSnapshot>\n\n/** @internal */\nexport function applyRotationToSnapshotShapes({\n\tdelta,\n\teditor,\n\tsnapshot,\n\tstage,\n}: {\n\tdelta: number\n\tsnapshot: TLRotationSnapshot\n\teditor: Editor\n\tstage: 'start' | 'update' | 'end' | 'one-off'\n}) {\n\tconst { selectionPageCenter, shapeSnapshots } = snapshot\n\n\teditor.updateShapes(\n\t\tshapeSnapshots.map(({ shape, initialPagePoint }) => {\n\t\t\t// We need to both rotate each shape individually and rotate the shapes\n\t\t\t// around the pivot point (the average center of all rotating shapes.)\n\n\t\t\tconst parentTransform = isShapeId(shape.parentId)\n\t\t\t\t? editor.getPageTransformById(shape.parentId)!\n\t\t\t\t: Matrix2d.Identity()\n\n\t\t\tconst newPagePoint = Vec2d.RotWith(initialPagePoint, selectionPageCenter, delta)\n\n\t\t\tconst newLocalPoint = Matrix2d.applyToPoint(\n\t\t\t\t// use the current parent transform in case it has moved/resized since the start\n\t\t\t\t// (e.g. if rotating a shape at the edge of a group)\n\t\t\t\tMatrix2d.Inverse(parentTransform),\n\t\t\t\tnewPagePoint\n\t\t\t)\n\t\t\tconst newRotation = canolicalizeRotation(shape.rotation + delta)\n\n\t\t\treturn {\n\t\t\t\tid: shape.id,\n\t\t\t\ttype: shape.type,\n\t\t\t\tx: newLocalPoint.x,\n\t\t\t\ty: newLocalPoint.y,\n\t\t\t\trotation: newRotation,\n\t\t\t}\n\t\t})\n\t)\n\n\t// Handle change\n\n\tconst changes: TLShapePartial[] = []\n\n\tshapeSnapshots.forEach(({ shape }) => {\n\t\tconst current = editor.getShapeById(shape.id)\n\t\tif (!current) return\n\t\tconst util = editor.getShapeUtil(shape)\n\n\t\tif (stage === 'start' || stage === 'one-off') {\n\t\t\tconst changeStart = util.onRotateStart?.(shape)\n\t\t\tif (changeStart) changes.push(changeStart)\n\t\t}\n\n\t\tconst changeUpdate = util.onRotate?.(shape, current)\n\t\tif (changeUpdate) changes.push(changeUpdate)\n\n\t\tif (stage === 'end' || stage === 'one-off') {\n\t\t\tconst changeEnd = util.onRotateEnd?.(shape, current)\n\t\t\tif (changeEnd) changes.push(changeEnd)\n\t\t}\n\t})\n\n\tif (changes.length > 0) {\n\t\teditor.updateShapes(changes)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}