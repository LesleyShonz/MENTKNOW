{
  "version": 3,
  "sources": ["../../src/lib/BaseSegment2d.ts"],
  "sourcesContent": ["import { Box2d } from './Box2d'\nimport { Vec2d, VecLike } from './Vec2d'\n\n/**\n * A base segment used for cubic and quadradic curves.\n *\n * @public\n */\nexport abstract class BaseSegment2d<T extends { p: number }> {\n\tconstructor(values: T) {\n\t\tthis._values = values\n\t}\n\n\t/**\n\t * The segment's values. Do not modify these directly. Instead, use the `values` setter or\n\t * `update` method.\n\t *\n\t * @internal\n\t */\n\tprotected _values: T\n\n\t/**\n\t * A private set of cached values, used for lookups and computations. Changing any of the\n\t * segment's values will clear this object.\n\t *\n\t * @internal\n\t */\n\tprotected _computed: {\n\t\tlength?: number\n\t\tbounds?: Box2d\n\t\tpath?: string\n\t\tlut?: Vec2d[]\n\t\tmidPoint?: Vec2d\n\t} = {}\n\n\t/**\n\t * The values for the curve segment.\n\t *\n\t * @public\n\t */\n\tget values() {\n\t\treturn this._values\n\t}\n\n\tset values(values: T) {\n\t\tthis._values = values\n\t\tthis._computed = {}\n\t}\n\n\t/**\n\t * The length of the curve segment.\n\t *\n\t * @public\n\t */\n\tget length(): number {\n\t\tif (this._computed.length !== undefined) {\n\t\t\treturn this._computed.length\n\t\t}\n\n\t\tconst { lut } = this\n\n\t\tlet prev = lut[0]\n\t\tlet result = 0\n\n\t\tfor (let i = 1; i < lut.length; i++) {\n\t\t\tconst curr = lut[i]\n\t\t\tresult += prev.dist(curr)\n\t\t\tprev = curr\n\t\t}\n\n\t\tthis._computed.length = result\n\n\t\treturn result\n\t}\n\n\t/**\n\t * The bounding box containing the curve segment.\n\t *\n\t * @public\n\t */\n\tget bounds(): Box2d {\n\t\tif (this._computed.bounds !== undefined) {\n\t\t\treturn this._computed.bounds\n\t\t}\n\n\t\tlet minX = Infinity\n\t\tlet minY = Infinity\n\t\tlet maxX = -Infinity\n\t\tlet maxY = -Infinity\n\n\t\tconst { lut } = this\n\n\t\tfor (const pt of lut) {\n\t\t\tminX = Math.min(pt.x, minX)\n\t\t\tminY = Math.min(pt.y, minY)\n\t\t\tmaxX = Math.max(pt.x, maxX)\n\t\t\tmaxY = Math.max(pt.y, maxY)\n\t\t}\n\n\t\tconst result = new Box2d(minX, minY, maxX - minX, maxY - minY)\n\n\t\tthis._computed.bounds = result\n\n\t\treturn result\n\t}\n\n\t/**\n\t * A lookup table consisting of values.p points along the segment. Used to compute lengths,\n\t * closest points, etc. This should only be _computed once (when first requested) per set of\n\t * values.\n\t *\n\t * @public\n\t */\n\tget lut() {\n\t\tif (this._computed.lut) {\n\t\t\treturn this._computed.lut\n\t\t}\n\n\t\tconst { p } = this.values\n\n\t\tconst result: Vec2d[] = []\n\n\t\tfor (let i = 0; i < p + 1; i++) {\n\t\t\tresult.push(this.getPoint(i / p))\n\t\t}\n\n\t\tthis._computed.lut = result\n\n\t\treturn result\n\t}\n\n\t/**\n\t * A point half-way along the length of the segment.\n\t *\n\t * @public\n\t */\n\tget midPoint() {\n\t\tif (this._computed.midPoint) {\n\t\t\treturn this._computed.midPoint\n\t\t}\n\n\t\tconst result = this.getPoint(0.5)\n\n\t\tthis._computed.midPoint = result\n\n\t\treturn result\n\t}\n\n\t/**\n\t * An SVG path for the segment.\n\t *\n\t * @public\n\t */\n\tget path() {\n\t\tif (this._computed.path) {\n\t\t\treturn this._computed.path\n\t\t}\n\n\t\tconst result = this.getPath()\n\n\t\tthis._computed.path = result\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Evaluate a point at a length along the curve segment.\n\t *\n\t * @param length - The length to find the point value.\n\t * @public\n\t */\n\tgetPointAtLength(length: number) {\n\t\tconst t = Math.max(0, Math.min(1, length / this.length))\n\n\t\treturn this.getPoint(t)\n\t}\n\n\t/**\n\t * Get the normal at distance t along the curve segment.\n\t *\n\t * @param t - The distance (0-1) to find the normal.\n\t * @public\n\t */\n\tgetNormal(t: number) {\n\t\treturn this.getPoint(t - 0.0025)\n\t\t\t.tan(this.getPoint(t + 0.0025))\n\t\t\t.per()\n\t\t\t.uni()\n\t\t\t.toFixed()\n\t}\n\n\t/**\n\t * Get the normal at a length along the curve segment.\n\t *\n\t * @param length - The length to find the normal.\n\t * @public\n\t */\n\tgetNormalAtLength(length: number) {\n\t\treturn this.getNormal(length / this.length)\n\t}\n\n\t/**\n\t * Get the closest point on the segment to an arbitrary point.\n\t *\n\t * @param point - The arbitrary point.\n\t * @public\n\t */\n\tgetClosestPointTo(point: VecLike) {\n\t\tconst { lut } = this\n\n\t\tlet closestT = 0\n\t\tlet closestPoint = lut[0]\n\t\tlet closestDistance = lut[0].dist(point)\n\n\t\t// Find the closest\n\t\tfor (let i = 1; i < lut.length; i++) {\n\t\t\tconst distance = Vec2d.Dist(lut[i], point)\n\t\t\tif (distance < closestDistance) {\n\t\t\t\tclosestDistance = distance\n\t\t\t\tclosestPoint = lut[i]\n\t\t\t\tclosestT = i / lut.length\n\t\t\t}\n\t\t}\n\n\t\t// Solve again for the closest point on the segment\n\t\tconst step = 1 / this.values.p\n\n\t\tfor (\n\t\t\tlet t = Math.max(0, closestT - step / 2);\n\t\t\tt < Math.min(1, closestT + step / 2);\n\t\t\tt += step / 10\n\t\t) {\n\t\t\tconst pt = this.getPoint(t)\n\t\t\tconst distance = Vec2d.Dist(pt, point)\n\t\t\tif (distance < closestDistance) {\n\t\t\t\tclosestDistance = distance\n\t\t\t\tclosestPoint = pt\n\t\t\t}\n\t\t}\n\n\t\treturn { point: closestPoint, distance: closestDistance }\n\t}\n\n\t/**\n\t * Set one or more values. Updating the segment will clear cached values.\n\t *\n\t * @param values - A partial of the segment's values object.\n\t * @public\n\t */\n\tupdate(values: Partial<T>) {\n\t\tthis._computed = {}\n\t\tthis.values = { ...this.values, ...values }\n\t}\n\n\t/**\n\t * Get the SVG path data for the segment.\n\t *\n\t * @public\n\t */\n\tabstract getPath(head?: boolean): string\n\n\t/**\n\t * Evaluate a point at distance t along the curve segment.\n\t *\n\t * @param t - The distance (0-1) to find the point.\n\t * @public\n\t */\n\tabstract getPoint(t: number): Vec2d\n\n\t/**\n\t * Evaluate a x value at distance t along the curve segment.\n\t *\n\t * @param t - The distance (0-1) to find the x value.\n\t * @public\n\t */\n\tabstract getX(t: number): number\n\n\t/**\n\t * Evaluate a y value at distance t along the curve segment.\n\t *\n\t * @param t - The distance (0-1) to find the y value.\n\t * @public\n\t */\n\tabstract getY(t: number): number\n}\n"],
  "mappings": "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",
  "names": []
}
