{
  "version": 3,
  "sources": ["../../../src/lib/utils/assets.ts"],
  "sourcesContent": ["import { AssetRecordType, TLAsset, TLAssetId } from '@tldraw/tlschema'\nimport { getHashForString } from '@tldraw/utils'\nimport uniq from 'lodash.uniq'\nimport { MAX_ASSET_HEIGHT, MAX_ASSET_WIDTH } from '../constants'\nimport { isAnimated } from './is-gif-animated'\nimport { findChunk, isPng, parsePhys } from './png'\n\n/** @public */\nexport const ACCEPTED_IMG_TYPE = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml']\n/** @public */\nexport const ACCEPTED_VID_TYPE = ['video/mp4', 'video/quicktime']\n/** @public */\nexport const ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(', ')\n\n/** @public */\nexport const isImage = (ext: string) => ACCEPTED_IMG_TYPE.includes(ext)\n\n/**\n * Get the size of a video from its source.\n *\n * @param src - The source of the video.\n * @public\n */\nexport async function getVideoSizeFromSrc(src: string): Promise<{ w: number; h: number }> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst video = document.createElement('video')\n\t\tvideo.onloadeddata = () => resolve({ w: video.videoWidth, h: video.videoHeight })\n\t\tvideo.onerror = (e) => {\n\t\t\tconsole.error(e)\n\t\t\treject(new Error('Could not get video size'))\n\t\t}\n\t\tvideo.crossOrigin = 'anonymous'\n\t\tvideo.src = src\n\t})\n}\n\n/**\n * @param dataURL - The file as a string.\n * @internal\n *\n * from https://stackoverflow.com/a/53817185\n */\nexport async function base64ToFile(dataURL: string) {\n\treturn fetch(dataURL).then(function (result) {\n\t\treturn result.arrayBuffer()\n\t})\n}\n\n/**\n * Get the size of an image from its source.\n *\n * @param dataURL - The file as a string.\n * @public\n */\nexport async function getImageSizeFromSrc(dataURL: string): Promise<{ w: number; h: number }> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst img = new Image()\n\t\timg.onload = async () => {\n\t\t\ttry {\n\t\t\t\tconst blob = await base64ToFile(dataURL)\n\t\t\t\tconst view = new DataView(blob)\n\t\t\t\tif (isPng(view, 0)) {\n\t\t\t\t\tconst physChunk = findChunk(view, 'pHYs')\n\t\t\t\t\tif (physChunk) {\n\t\t\t\t\t\tconst physData = parsePhys(view, physChunk.dataOffset)\n\t\t\t\t\t\tif (physData.unit === 0 && physData.ppux === physData.ppuy) {\n\t\t\t\t\t\t\tconst pixelRatio = Math.round(physData.ppux / 2834.5)\n\t\t\t\t\t\t\tresolve({ w: img.width / pixelRatio, h: img.height / pixelRatio })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err)\n\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t}\n\t\t}\n\t\timg.onerror = (err) => {\n\t\t\tconsole.error(err)\n\t\t\treject(new Error('Could not get image size'))\n\t\t}\n\t\timg.crossOrigin = 'anonymous'\n\t\timg.src = dataURL\n\t})\n}\n\n/**\n * Get the size of an image from its source.\n *\n * @param dataURLForImage - The image file as a string.\n * @param width - The desired width.\n * @param height - The desired height.\n * @public\n */\nexport async function getResizedImageDataUrl(\n\tdataURLForImage: string,\n\twidth: number,\n\theight: number\n): Promise<string> {\n\treturn await new Promise((resolve) => {\n\t\tconst img = new Image()\n\t\timg.onload = () => {\n\t\t\t// Initialize the canvas and it's size\n\t\t\tconst canvas = document.createElement('canvas')\n\t\t\tconst ctx = canvas.getContext('2d')\n\n\t\t\tif (!ctx) return\n\n\t\t\t// Set width and height\n\t\t\tcanvas.width = width * 2\n\t\t\tcanvas.height = height * 2\n\n\t\t\t// Draw image and export to a data-uri\n\t\t\tctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n\t\t\tconst newDataURL = canvas.toDataURL()\n\n\t\t\t// Do something with the result, like overwrite original\n\t\t\tresolve(newDataURL)\n\t\t}\n\t\timg.crossOrigin = 'anonymous'\n\t\timg.src = dataURLForImage\n\t})\n}\n\n/**\n * Get an asset from a file.\n *\n * @param file - The file.\n * @returns An image or video asset partial.\n * @public\n */\nexport async function getMediaAssetFromFile(file: File): Promise<TLAsset> {\n\treturn await new Promise((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.onerror = () => reject(reader.error)\n\t\treader.onload = async () => {\n\t\t\tlet dataUrl = reader.result as string\n\n\t\t\tconst isImageType = isImage(file.type)\n\t\t\tconst sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc\n\n\t\t\t// Hack to make .mov videos work via dataURL.\n\t\t\tif (file.type === 'video/quicktime' && dataUrl.includes('video/quicktime')) {\n\t\t\t\tdataUrl = dataUrl.replace('video/quicktime', 'video/mp4')\n\t\t\t}\n\n\t\t\tconst originalSize = await sizeFn(dataUrl)\n\t\t\tconst size = containBoxSize(originalSize, { w: MAX_ASSET_WIDTH, h: MAX_ASSET_HEIGHT })\n\n\t\t\tif (size !== originalSize && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n\t\t\t\t// If we created a new size and the type is an image, rescale the image\n\t\t\t\tdataUrl = await getResizedImageDataUrl(dataUrl, size.w, size.h)\n\t\t\t}\n\n\t\t\tconst assetId: TLAssetId = AssetRecordType.createId(getHashForString(dataUrl))\n\n\t\t\tconst metadata = await getFileMetaData(file)\n\n\t\t\tconst asset: TLAsset = {\n\t\t\t\tid: assetId,\n\t\t\t\ttype: isImageType ? 'image' : 'video',\n\t\t\t\ttypeName: 'asset',\n\t\t\t\tprops: {\n\t\t\t\t\tname: file.name,\n\t\t\t\t\tsrc: dataUrl,\n\t\t\t\t\tw: size.w,\n\t\t\t\t\th: size.h,\n\t\t\t\t\tmimeType: file.type,\n\t\t\t\t\tisAnimated: metadata.isAnimated,\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tresolve(asset)\n\t\t}\n\n\t\treader.readAsDataURL(file)\n\t})\n}\n\n/**\n * Get some metadata about the file\n *\n * @param file - The file.\n * @public\n */\nexport async function getFileMetaData(file: File): Promise<{ isAnimated: boolean }> {\n\tif (file.type === 'image/gif') {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.onerror = () => reject(reader.error)\n\t\t\treader.onload = () => {\n\t\t\t\tresolve({\n\t\t\t\t\tisAnimated: reader.result ? isAnimated(reader.result as ArrayBuffer) : false,\n\t\t\t\t})\n\t\t\t}\n\t\t\treader.readAsArrayBuffer(file)\n\t\t})\n\t}\n\n\treturn {\n\t\tisAnimated: isImage(file.type) ? false : true,\n\t}\n}\n\ntype BoxWidthHeight = {\n\tw: number\n\th: number\n}\n\n/**\n * Contains the size within the given box size\n *\n * @param originalSize - The size of the asset\n * @param containBoxSize - The container size\n * @returns Adjusted size\n * @public\n */\nexport function containBoxSize(\n\toriginalSize: BoxWidthHeight,\n\tcontainBoxSize: BoxWidthHeight\n): BoxWidthHeight {\n\tconst overByXScale = originalSize.w / containBoxSize.w\n\tconst overByYScale = originalSize.h / containBoxSize.h\n\n\tif (overByXScale <= 1 && overByYScale <= 1) {\n\t\treturn originalSize\n\t} else if (overByXScale > overByYScale) {\n\t\treturn {\n\t\t\tw: originalSize.w / overByXScale,\n\t\t\th: originalSize.h / overByXScale,\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tw: originalSize.w / overByYScale,\n\t\t\th: originalSize.h / overByYScale,\n\t\t}\n\t}\n}\n\n/** @public */\nexport const isValidHttpURL = (url: string) => {\n\ttry {\n\t\tconst u = new URL(url)\n\t\treturn u.protocol === 'http:' || u.protocol === 'https:'\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\n/** @public */\nexport const getValidHttpURLList = (url: string) => {\n\tconst urls = url.split(/[\\n\\s]/)\n\tfor (const url of urls) {\n\t\ttry {\n\t\t\tconst u = new URL(url)\n\t\t\tif (!(u.protocol === 'http:' || u.protocol === 'https:')) {\n\t\t\t\treturn\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn\n\t\t}\n\t}\n\treturn uniq(urls)\n}\n\n/** @public */\nexport const isSvgText = (text: string) => {\n\treturn /^<svg/.test(text)\n}\n\n/** @public */\nexport function dataUrlToFile(url: string, filename: string, mimeType: string) {\n\treturn fetch(url)\n\t\t.then(function (res) {\n\t\t\treturn res.arrayBuffer()\n\t\t})\n\t\t.then(function (buf) {\n\t\t\treturn new File([buf], filename, { type: mimeType })\n\t\t})\n}\n"],
  "mappings": "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",
  "names": ["containBoxSize", "url", "uniq"]
}
