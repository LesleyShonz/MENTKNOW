{"ast":null,"code":"import _toConsumableArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { intersectLineSegmentPolyline, pointInPolygon } from \"@tldraw/primitives\";\nimport { ScribbleManager } from \"../../../managers/ScribbleManager.mjs\";\nimport { FrameShapeUtil } from \"../../../shapes/frame/FrameShapeUtil.mjs\";\nimport { GroupShapeUtil } from \"../../../shapes/group/GroupShapeUtil.mjs\";\nimport { StateNode } from \"../../StateNode.mjs\";\nvar ScribbleBrushing = /*#__PURE__*/function (_StateNode) {\n  _inherits(ScribbleBrushing, _StateNode);\n  var _super = _createSuper(ScribbleBrushing);\n  function ScribbleBrushing() {\n    var _this;\n    _classCallCheck(this, ScribbleBrushing);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"hits\", /* @__PURE__ */new Set());\n    _defineProperty(_assertThisInitialized(_this), \"size\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"scribble\", {});\n    _defineProperty(_assertThisInitialized(_this), \"initialSelectedIds\", /* @__PURE__ */new Set());\n    _defineProperty(_assertThisInitialized(_this), \"newlySelectedIds\", /* @__PURE__ */new Set());\n    _defineProperty(_assertThisInitialized(_this), \"onEnter\", function () {\n      _this.initialSelectedIds = new Set(_this.editor.inputs.shiftKey ? _this.editor.selectedIds : []);\n      _this.newlySelectedIds = /* @__PURE__ */new Set();\n      _this.size = 0;\n      _this.hits.clear();\n      _this.startScribble();\n      _this.updateBrushSelection();\n      requestAnimationFrame(function () {\n        _this.editor.setBrush(null);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onExit\", function () {\n      _this.editor.setErasingIds([]);\n      _this.scribble.stop();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function () {\n      _this.updateBrushSelection();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function () {\n      _this.complete();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function () {\n      _this.updateBrushSelection();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function () {\n      if (!_this.editor.inputs.altKey) {\n        _this.parent.transition(\"brushing\", {});\n      } else {\n        _this.updateBrushSelection();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"startScribble\", function () {\n      if (_this.scribble.tick) {\n        var _this$scribble;\n        _this.editor.off(\"tick\", (_this$scribble = _this.scribble) === null || _this$scribble === void 0 ? void 0 : _this$scribble.tick);\n      }\n      _this.scribble = new ScribbleManager({\n        onUpdate: _this.onScribbleUpdate,\n        onComplete: _this.onScribbleComplete,\n        color: \"selection-stroke\",\n        opacity: 0.32,\n        size: 12\n      });\n      _this.editor.on(\"tick\", _this.scribble.tick);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pushPointToScribble\", function () {\n      var _this$editor$inputs$c = _this.editor.inputs.currentPagePoint,\n        x = _this$editor$inputs$c.x,\n        y = _this$editor$inputs$c.y;\n      _this.scribble.addPoint(x, y);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onScribbleUpdate\", function (scribble) {\n      _this.editor.setScribble(scribble);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onScribbleComplete\", function () {\n      _this.editor.off(\"tick\", _this.scribble.tick);\n      _this.editor.setScribble(null);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.cancel();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onComplete\", function () {\n      _this.complete();\n    });\n    return _this;\n  }\n  _createClass(ScribbleBrushing, [{\n    key: \"updateBrushSelection\",\n    value: function updateBrushSelection() {\n      var _this$editor = this.editor,\n        shapesArray = _this$editor.shapesArray,\n        _this$editor$inputs = _this$editor.inputs,\n        originPagePoint = _this$editor$inputs.originPagePoint,\n        previousPagePoint = _this$editor$inputs.previousPagePoint,\n        currentPagePoint = _this$editor$inputs.currentPagePoint;\n      this.pushPointToScribble();\n      var shapes = shapesArray;\n      var shape, util;\n      for (var i = 0, n = shapes.length; i < n; i++) {\n        shape = shapes[i];\n        util = this.editor.getShapeUtil(shape);\n        if (this.editor.isShapeOfType(shape, GroupShapeUtil) || this.newlySelectedIds.has(shape.id) || this.editor.isShapeOfType(shape, FrameShapeUtil) && util.hitTestPoint(shape, this.editor.getPointInShapeSpace(shape, originPagePoint)) || this.editor.isShapeOrAncestorLocked(shape)) {\n          continue;\n        }\n        if (util.hitTestLineSegment(shape, this.editor.getPointInShapeSpace(shape, previousPagePoint), this.editor.getPointInShapeSpace(shape, currentPagePoint))) {\n          var outermostShape = this.editor.getOutermostSelectableShape(shape);\n          var pageMask = this.editor.getPageMaskById(outermostShape.id);\n          if (pageMask) {\n            var intersection = intersectLineSegmentPolyline(previousPagePoint, currentPagePoint, pageMask);\n            if (intersection !== null) {\n              var isInMask = pointInPolygon(currentPagePoint, pageMask);\n              if (!isInMask) continue;\n            }\n          }\n          this.newlySelectedIds.add(outermostShape.id);\n        }\n      }\n      this.editor.setSelectedIds(_toConsumableArray( /* @__PURE__ */new Set([].concat(_toConsumableArray(this.newlySelectedIds), _toConsumableArray(this.initialSelectedIds)))), true);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.parent.transition(\"idle\", {});\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.editor.setSelectedIds(_toConsumableArray(this.initialSelectedIds), true);\n      this.parent.transition(\"idle\", {});\n    }\n  }]);\n  return ScribbleBrushing;\n}(StateNode);\n_defineProperty(ScribbleBrushing, \"id\", \"scribble_brushing\");\nexport { ScribbleBrushing };","map":{"version":3,"names":["intersectLineSegmentPolyline","pointInPolygon","ScribbleManager","FrameShapeUtil","GroupShapeUtil","StateNode","ScribbleBrushing","_StateNode","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","Set","initialSelectedIds","editor","inputs","shiftKey","selectedIds","newlySelectedIds","size","hits","clear","startScribble","updateBrushSelection","requestAnimationFrame","setBrush","setErasingIds","scribble","stop","complete","altKey","parent","transition","tick","_this$scribble","off","onUpdate","onScribbleUpdate","onComplete","onScribbleComplete","color","opacity","on","_this$editor$inputs$c","currentPagePoint","x","y","addPoint","setScribble","cancel","_createClass","key","value","_this$editor","shapesArray","_this$editor$inputs","originPagePoint","previousPagePoint","pushPointToScribble","shapes","shape","util","i","n","getShapeUtil","isShapeOfType","has","id","hitTestPoint","getPointInShapeSpace","isShapeOrAncestorLocked","hitTestLineSegment","outermostShape","getOutermostSelectableShape","pageMask","getPageMaskById","intersection","isInMask","add","setSelectedIds","_toConsumableArray"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/tools/SelectTool/children/ScribbleBrushing.ts"],"sourcesContent":["import { intersectLineSegmentPolyline, pointInPolygon } from '@tldraw/primitives'\nimport { TLScribble, TLShape, TLShapeId } from '@tldraw/tlschema'\nimport { ScribbleManager } from '../../../managers/ScribbleManager'\nimport { ShapeUtil } from '../../../shapes/ShapeUtil'\nimport { FrameShapeUtil } from '../../../shapes/frame/FrameShapeUtil'\nimport { GroupShapeUtil } from '../../../shapes/group/GroupShapeUtil'\nimport { TLEventHandlers } from '../../../types/event-types'\nimport { StateNode } from '../../StateNode'\n\nexport class ScribbleBrushing extends StateNode {\n\tstatic override id = 'scribble_brushing'\n\n\thits = new Set<TLShapeId>()\n\n\tsize = 0\n\n\tscribble = {} as ScribbleManager\n\n\tinitialSelectedIds = new Set<TLShapeId>()\n\tnewlySelectedIds = new Set<TLShapeId>()\n\n\toverride onEnter = () => {\n\t\tthis.initialSelectedIds = new Set<TLShapeId>(\n\t\t\tthis.editor.inputs.shiftKey ? this.editor.selectedIds : []\n\t\t)\n\t\tthis.newlySelectedIds = new Set<TLShapeId>()\n\t\tthis.size = 0\n\t\tthis.hits.clear()\n\n\t\tthis.startScribble()\n\n\t\tthis.updateBrushSelection()\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.editor.setBrush(null)\n\t\t})\n\t}\n\n\toverride onExit = () => {\n\t\tthis.editor.setErasingIds([])\n\t\tthis.scribble.stop()\n\t}\n\n\toverride onPointerMove = () => {\n\t\tthis.updateBrushSelection()\n\t}\n\n\toverride onPointerUp = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onKeyDown = () => {\n\t\tthis.updateBrushSelection()\n\t}\n\n\toverride onKeyUp = () => {\n\t\tif (!this.editor.inputs.altKey) {\n\t\t\tthis.parent.transition('brushing', {})\n\t\t} else {\n\t\t\tthis.updateBrushSelection()\n\t\t}\n\t}\n\n\tprivate startScribble = () => {\n\t\tif (this.scribble.tick) {\n\t\t\tthis.editor.off('tick', this.scribble?.tick)\n\t\t}\n\n\t\tthis.scribble = new ScribbleManager({\n\t\t\tonUpdate: this.onScribbleUpdate,\n\t\t\tonComplete: this.onScribbleComplete,\n\t\t\tcolor: 'selection-stroke',\n\t\t\topacity: 0.32,\n\t\t\tsize: 12,\n\t\t})\n\n\t\tthis.editor.on('tick', this.scribble.tick)\n\t}\n\n\tprivate pushPointToScribble = () => {\n\t\tconst { x, y } = this.editor.inputs.currentPagePoint\n\t\tthis.scribble.addPoint(x, y)\n\t}\n\n\tprivate onScribbleUpdate = (scribble: TLScribble) => {\n\t\tthis.editor.setScribble(scribble)\n\t}\n\n\tprivate onScribbleComplete = () => {\n\t\tthis.editor.off('tick', this.scribble.tick)\n\t\tthis.editor.setScribble(null)\n\t}\n\n\tprivate updateBrushSelection() {\n\t\tconst {\n\t\t\tshapesArray,\n\t\t\tinputs: { originPagePoint, previousPagePoint, currentPagePoint },\n\t\t} = this.editor\n\n\t\tthis.pushPointToScribble()\n\n\t\tconst shapes = shapesArray\n\t\tlet shape: TLShape, util: ShapeUtil<TLShape>\n\n\t\tfor (let i = 0, n = shapes.length; i < n; i++) {\n\t\t\tshape = shapes[i]\n\t\t\tutil = this.editor.getShapeUtil(shape)\n\n\t\t\tif (\n\t\t\t\tthis.editor.isShapeOfType(shape, GroupShapeUtil) ||\n\t\t\t\tthis.newlySelectedIds.has(shape.id) ||\n\t\t\t\t(this.editor.isShapeOfType(shape, FrameShapeUtil) &&\n\t\t\t\t\tutil.hitTestPoint(shape, this.editor.getPointInShapeSpace(shape, originPagePoint))) ||\n\t\t\t\tthis.editor.isShapeOrAncestorLocked(shape)\n\t\t\t) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tutil.hitTestLineSegment(\n\t\t\t\t\tshape,\n\t\t\t\t\tthis.editor.getPointInShapeSpace(shape, previousPagePoint),\n\t\t\t\t\tthis.editor.getPointInShapeSpace(shape, currentPagePoint)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst outermostShape = this.editor.getOutermostSelectableShape(shape)\n\n\t\t\t\tconst pageMask = this.editor.getPageMaskById(outermostShape.id)\n\n\t\t\t\tif (pageMask) {\n\t\t\t\t\tconst intersection = intersectLineSegmentPolyline(\n\t\t\t\t\t\tpreviousPagePoint,\n\t\t\t\t\t\tcurrentPagePoint,\n\t\t\t\t\t\tpageMask\n\t\t\t\t\t)\n\n\t\t\t\t\tif (intersection !== null) {\n\t\t\t\t\t\tconst isInMask = pointInPolygon(currentPagePoint, pageMask)\n\t\t\t\t\t\tif (!isInMask) continue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.newlySelectedIds.add(outermostShape.id)\n\t\t\t}\n\t\t}\n\n\t\tthis.editor.setSelectedIds(\n\t\t\t[...new Set<TLShapeId>([...this.newlySelectedIds, ...this.initialSelectedIds])],\n\t\t\ttrue\n\t\t)\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\tprivate complete() {\n\t\tthis.parent.transition('idle', {})\n\t}\n\n\tprivate cancel() {\n\t\tthis.editor.setSelectedIds([...this.initialSelectedIds], true)\n\t\tthis.parent.transition('idle', {})\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}