{"ast":null,"code":"import _slicedToArray from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { structuredClone } from \"@tldraw/utils\";\nimport { nanoid } from \"nanoid\";\nvar RecordType = /*#__PURE__*/function () {\n  function RecordType(typeName, config) {\n    var _this = this,\n      _config$validator,\n      _config$scope;\n    _classCallCheck(this, RecordType);\n    _defineProperty(this, \"createDefaultProperties\", void 0);\n    _defineProperty(this, \"migrations\", void 0);\n    _defineProperty(this, \"validator\", void 0);\n    _defineProperty(this, \"scope\", void 0);\n    /**\n     * Check whether a record is an instance of this record type.\n     *\n     * @example\n     *\n     * ```ts\n     * const result = recordType.isInstance(someRecord)\n     * ```\n     *\n     * @param record - The record to check.\n     * @returns Whether the record is an instance of this record type.\n     */\n    _defineProperty(this, \"isInstance\", function (record) {\n      return (record === null || record === void 0 ? void 0 : record.typeName) === _this.typeName;\n    });\n    this.typeName = typeName;\n    this.createDefaultProperties = config.createDefaultProperties;\n    this.migrations = config.migrations;\n    this.validator = (_config$validator = config.validator) !== null && _config$validator !== void 0 ? _config$validator : {\n      validate: function validate(r) {\n        return r;\n      }\n    };\n    this.scope = (_config$scope = config.scope) !== null && _config$scope !== void 0 ? _config$scope : \"document\";\n  }\n  _createClass(RecordType, [{\n    key: \"create\",\n    value:\n    /**\n     * Create a new record of this type.\n     *\n     * @param properties - The properties of the record.\n     * @returns The new record.\n     */\n    function create(properties) {\n      var result = _objectSpread(_objectSpread({}, this.createDefaultProperties()), {}, {\n        id: this.createId()\n      });\n      for (var _i = 0, _Object$entries = Object.entries(properties); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        if (v !== void 0) {\n          result[k] = v;\n        }\n      }\n      result.typeName = this.typeName;\n      return result;\n    }\n    /**\n     * Clone a record of this type.\n     *\n     * @param record - The record to clone.\n     * @returns The cloned record.\n     * @public\n     */\n  }, {\n    key: \"clone\",\n    value: function clone(record) {\n      return _objectSpread(_objectSpread({}, structuredClone(record)), {}, {\n        id: this.createId()\n      });\n    }\n    /**\n     * Create a new ID for this record type.\n     *\n     * @example\n     *\n     * ```ts\n     * const id = recordType.createId()\n     * ```\n     *\n     * @returns The new ID.\n     * @public\n     */\n  }, {\n    key: \"createId\",\n    value: function createId(customUniquePart) {\n      return this.typeName + \":\" + (customUniquePart !== null && customUniquePart !== void 0 ? customUniquePart : nanoid());\n    }\n    /**\n     * Create a new ID for this record type based on the given ID.\n     *\n     * @example\n     *\n     * ```ts\n     * const id = recordType.createCustomId('myId')\n     * ```\n     *\n     * @deprecated - Use `createId` instead.\n     * @param id - The ID to base the new ID on.\n     * @returns The new ID.\n     */\n  }, {\n    key: \"createCustomId\",\n    value: function createCustomId(id) {\n      return this.typeName + \":\" + id;\n    }\n    /**\n     * Takes an id like `user:123` and returns the part after the colon `123`\n     *\n     * @param id - The id\n     * @returns\n     */\n  }, {\n    key: \"parseId\",\n    value: function parseId(id) {\n      if (!this.isId(id)) {\n        throw new Error(\"ID \\\"\".concat(id, \"\\\" is not a valid ID for type \\\"\").concat(this.typeName, \"\\\"\"));\n      }\n      return id.slice(this.typeName.length + 1);\n    }\n  }, {\n    key: \"isId\",\n    value:\n    /**\n     * Check whether an id is an id of this type.\n     *\n     * @example\n     *\n     * ```ts\n     * const result = recordType.isIn('someId')\n     * ```\n     *\n     * @param id - The id to check.\n     * @returns Whether the id is an id of this type.\n     */\n    function isId(id) {\n      if (!id) return false;\n      for (var i = 0; i < this.typeName.length; i++) {\n        if (id[i] !== this.typeName[i]) return false;\n      }\n      return id[this.typeName.length] === \":\";\n    }\n    /**\n     * Create a new RecordType that has the same type name as this RecordType and includes the given\n     * default properties.\n     *\n     * @example\n     *\n     * ```ts\n     * const authorType = createRecordType('author', () => ({ living: true }))\n     * const deadAuthorType = authorType.withDefaultProperties({ living: false })\n     * ```\n     *\n     * @param fn - A function that returns the default properties of the new RecordType.\n     * @returns The new RecordType.\n     */\n  }, {\n    key: \"withDefaultProperties\",\n    value: function withDefaultProperties(createDefaultProperties) {\n      return new RecordType(this.typeName, {\n        createDefaultProperties: createDefaultProperties,\n        migrations: this.migrations,\n        validator: this.validator,\n        scope: this.scope\n      });\n    }\n    /**\n     * Check that the passed in record passes the validations for this type. Returns its input\n     * correctly typed if it does, but throws an error otherwise.\n     */\n  }, {\n    key: \"validate\",\n    value: function validate(record) {\n      return this.validator.validate(record);\n    }\n  }]);\n  return RecordType;\n}();\nfunction createRecordType(typeName, config) {\n  var _config$migrations;\n  return new RecordType(typeName, {\n    createDefaultProperties: function createDefaultProperties() {\n      return {};\n    },\n    migrations: (_config$migrations = config.migrations) !== null && _config$migrations !== void 0 ? _config$migrations : {\n      currentVersion: 0,\n      firstVersion: 0,\n      migrators: {}\n    },\n    validator: config.validator,\n    scope: config.scope\n  });\n}\nfunction assertIdType(id, type) {\n  if (!id || !type.isId(id)) {\n    throw new Error(\"string \".concat(JSON.stringify(id), \" is not a valid \").concat(type.typeName, \" id\"));\n  }\n}\nexport { RecordType, assertIdType, createRecordType };","map":{"version":3,"names":["structuredClone","nanoid","RecordType","typeName","config","_this","_config$validator","_config$scope","_classCallCheck","_defineProperty","record","createDefaultProperties","migrations","validator","validate","r","scope","_createClass","key","value","create","properties","result","_objectSpread","id","createId","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","k","v","clone","customUniquePart","createCustomId","parseId","isId","Error","concat","slice","i","withDefaultProperties","createRecordType","_config$migrations","currentVersion","firstVersion","migrators","assertIdType","type","JSON","stringify"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/store/src/lib/RecordType.ts"],"sourcesContent":["import { structuredClone } from '@tldraw/utils'\nimport { nanoid } from 'nanoid'\nimport { IdOf, OmitMeta, UnknownRecord } from './BaseRecord'\nimport { StoreValidator } from './Store'\nimport { Migrations } from './migrate'\n\nexport type RecordTypeRecord<R extends RecordType<any, any>> = ReturnType<R['create']>\n\n/**\n * Defines the scope of the record\n *\n * instance: The record belongs to a single instance of the store. It should not be synced, and any persistence logic should 'de-instance-ize' the record before persisting it, and apply the reverse when rehydrating.\n * document: The record is persisted and synced. It is available to all store instances.\n * presence: The record belongs to a single instance of the store. It may be synced to other instances, but other instances should not make changes to it. It should not be persisted.\n *\n * @public\n * */\nexport type RecordScope = 'session' | 'document' | 'presence'\n\n/**\n * A record type is a type that can be stored in a record store. It is created with\n * `createRecordType`.\n *\n * @public\n */\nexport class RecordType<\n\tR extends UnknownRecord,\n\tRequiredProperties extends keyof Omit<R, 'id' | 'typeName'>\n> {\n\treadonly createDefaultProperties: () => Exclude<OmitMeta<R>, RequiredProperties>\n\treadonly migrations: Migrations\n\treadonly validator: StoreValidator<R> | { validate: (r: unknown) => R }\n\n\treadonly scope: RecordScope\n\n\tconstructor(\n\t\t/**\n\t\t * The unique type associated with this record.\n\t\t *\n\t\t * @public\n\t\t * @readonly\n\t\t */\n\t\tpublic readonly typeName: R['typeName'],\n\t\tconfig: {\n\t\t\treadonly createDefaultProperties: () => Exclude<OmitMeta<R>, RequiredProperties>\n\t\t\treadonly migrations: Migrations\n\t\t\treadonly validator?: StoreValidator<R> | { validate: (r: unknown) => R }\n\t\t\treadonly scope?: RecordScope\n\t\t}\n\t) {\n\t\tthis.createDefaultProperties = config.createDefaultProperties\n\t\tthis.migrations = config.migrations\n\t\tthis.validator = config.validator ?? { validate: (r: unknown) => r as R }\n\t\tthis.scope = config.scope ?? 'document'\n\t}\n\n\t/**\n\t * Create a new record of this type.\n\t *\n\t * @param properties - The properties of the record.\n\t * @returns The new record.\n\t */\n\tcreate(properties: Pick<R, RequiredProperties> & Omit<Partial<R>, RequiredProperties>): R {\n\t\tconst result = { ...this.createDefaultProperties(), id: this.createId() } as any\n\n\t\tfor (const [k, v] of Object.entries(properties)) {\n\t\t\tif (v !== undefined) {\n\t\t\t\tresult[k] = v\n\t\t\t}\n\t\t}\n\n\t\tresult.typeName = this.typeName\n\n\t\treturn result as R\n\t}\n\n\t/**\n\t * Clone a record of this type.\n\t *\n\t * @param record - The record to clone.\n\t * @returns The cloned record.\n\t * @public\n\t */\n\tclone(record: R): R {\n\t\treturn { ...structuredClone(record), id: this.createId() }\n\t}\n\n\t/**\n\t * Create a new ID for this record type.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const id = recordType.createId()\n\t * ```\n\t *\n\t * @returns The new ID.\n\t * @public\n\t */\n\tcreateId(customUniquePart?: string): IdOf<R> {\n\t\treturn (this.typeName + ':' + (customUniquePart ?? nanoid())) as IdOf<R>\n\t}\n\n\t/**\n\t * Create a new ID for this record type based on the given ID.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const id = recordType.createCustomId('myId')\n\t * ```\n\t *\n\t * @deprecated - Use `createId` instead.\n\t * @param id - The ID to base the new ID on.\n\t * @returns The new ID.\n\t */\n\tcreateCustomId(id: string): IdOf<R> {\n\t\treturn (this.typeName + ':' + id) as IdOf<R>\n\t}\n\n\t/**\n\t * Takes an id like `user:123` and returns the part after the colon `123`\n\t *\n\t * @param id - The id\n\t * @returns\n\t */\n\tparseId(id: IdOf<R>): string {\n\t\tif (!this.isId(id)) {\n\t\t\tthrow new Error(`ID \"${id}\" is not a valid ID for type \"${this.typeName}\"`)\n\t\t}\n\n\t\treturn id.slice(this.typeName.length + 1)\n\t}\n\n\t/**\n\t * Check whether a record is an instance of this record type.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const result = recordType.isInstance(someRecord)\n\t * ```\n\t *\n\t * @param record - The record to check.\n\t * @returns Whether the record is an instance of this record type.\n\t */\n\tisInstance = (record?: UnknownRecord): record is R => {\n\t\treturn record?.typeName === this.typeName\n\t}\n\n\t/**\n\t * Check whether an id is an id of this type.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const result = recordType.isIn('someId')\n\t * ```\n\t *\n\t * @param id - The id to check.\n\t * @returns Whether the id is an id of this type.\n\t */\n\tisId(id?: string): id is IdOf<R> {\n\t\tif (!id) return false\n\t\tfor (let i = 0; i < this.typeName.length; i++) {\n\t\t\tif (id[i] !== this.typeName[i]) return false\n\t\t}\n\n\t\treturn id[this.typeName.length] === ':'\n\t}\n\n\t/**\n\t * Create a new RecordType that has the same type name as this RecordType and includes the given\n\t * default properties.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const authorType = createRecordType('author', () => ({ living: true }))\n\t * const deadAuthorType = authorType.withDefaultProperties({ living: false })\n\t * ```\n\t *\n\t * @param fn - A function that returns the default properties of the new RecordType.\n\t * @returns The new RecordType.\n\t */\n\twithDefaultProperties<DefaultProps extends Omit<Partial<R>, 'typeName' | 'id'>>(\n\t\tcreateDefaultProperties: () => DefaultProps\n\t): RecordType<R, Exclude<RequiredProperties, keyof DefaultProps>> {\n\t\treturn new RecordType<R, Exclude<RequiredProperties, keyof DefaultProps>>(this.typeName, {\n\t\t\tcreateDefaultProperties: createDefaultProperties as any,\n\t\t\tmigrations: this.migrations,\n\t\t\tvalidator: this.validator,\n\t\t\tscope: this.scope,\n\t\t})\n\t}\n\n\t/**\n\t * Check that the passed in record passes the validations for this type. Returns its input\n\t * correctly typed if it does, but throws an error otherwise.\n\t */\n\tvalidate(record: unknown): R {\n\t\treturn this.validator.validate(record)\n\t}\n}\n\n/**\n * Create a record type.\n *\n * @example\n *\n * ```ts\n * const Book = createRecordType<Book>('book')\n * ```\n *\n * @param typeName - The name of the type to create.\n * @public\n */\nexport function createRecordType<R extends UnknownRecord>(\n\ttypeName: R['typeName'],\n\tconfig: {\n\t\tmigrations?: Migrations\n\t\tvalidator?: StoreValidator<R>\n\t\tscope: RecordScope\n\t}\n): RecordType<R, keyof Omit<R, 'id' | 'typeName'>> {\n\treturn new RecordType<R, keyof Omit<R, 'id' | 'typeName'>>(typeName, {\n\t\tcreateDefaultProperties: () => ({} as any),\n\t\tmigrations: config.migrations ?? { currentVersion: 0, firstVersion: 0, migrators: {} },\n\t\tvalidator: config.validator,\n\t\tscope: config.scope,\n\t})\n}\n\n/**\n * Assert whether an id correspond to a record type.\n *\n * @example\n *\n * ```ts\n * assertIdType(myId, \"shape\")\n * ```\n *\n * @param id - The id to check.\n * @param type - The type of the record.\n * @public\n */\nexport function assertIdType<R extends UnknownRecord>(\n\tid: string | undefined,\n\ttype: RecordType<R, any>\n): asserts id is IdOf<R> {\n\tif (!id || !type.isId(id)) {\n\t\tthrow new Error(`string ${JSON.stringify(id)} is not a valid ${type.typeName} id`)\n\t}\n}\n"],"mappings":";;;;;AAAA,SAASA,eAAA,QAAuB;AAChC,SAASC,MAAA,QAAc;AAAA,IAwBVC,UAAA;EAUZ,SAAAA,WAOiBC,QAAA,EAChBC,MAAA,EAMC;IAAA,IAAAC,KAAA;MAAAC,iBAAA;MAAAC,aAAA;IAAAC,eAAA,OAAAN,UAAA;IAAAO,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAmFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAAA,eAAA,qBAca,UAACC,MAAA,EAAwC;MACrD,OAAO,CAAAA,MAAA,aAAAA,MAAA,uBAAAA,MAAA,CAAQP,QAAA,MAAaE,KAAA,CAAKF,QAAA;IAClC;IA1GiB,KAAAA,QAAA,GAAAA,QAAA;IAQhB,KAAKQ,uBAAA,GAA0BP,MAAA,CAAOO,uBAAA;IACtC,KAAKC,UAAA,GAAaR,MAAA,CAAOQ,UAAA;IACzB,KAAKC,SAAA,IAAAP,iBAAA,GAAYF,MAAA,CAAOS,SAAA,cAAAP,iBAAA,cAAAA,iBAAA,GAAa;MAAEQ,QAAA,EAAU,SAAAA,SAACC,CAAA;QAAA,OAAeA,CAAA;MAAA;IAAO;IACxE,KAAKC,KAAA,IAAAT,aAAA,GAAQH,MAAA,CAAOY,KAAA,cAAAT,aAAA,cAAAA,aAAA,GAAS;EAC9B;EAAAU,YAAA,CAAAf,UAAA;IAAAgB,GAAA;IAAAC,KAAA;IArBS;AAAA;AAAA;AAAA;AAAA;AAAA;IA6BT,SAAAC,OAAOC,UAAA,EAAmF;MACzF,IAAMC,MAAA,GAAAC,aAAA,CAAAA,aAAA,KAAc,KAAKZ,uBAAA,CAAwB;QAAGa,EAAA,EAAI,KAAKC,QAAA,CAAS;MAAA,EAAE;MAExE,SAAAC,EAAA,MAAAC,eAAA,GAAqBC,MAAA,CAAOC,OAAA,CAAQR,UAAU,GAAAK,EAAA,GAAAC,eAAA,CAAAG,MAAA,EAAAJ,EAAA,IAAG;QAAjD,IAAAK,kBAAA,GAAAC,cAAA,CAAAL,eAAA,CAAAD,EAAA;UAAYO,CAAA,GAAAF,kBAAA;UAAGG,CAAC,GAAAH,kBAAA;QACf,IAAIG,CAAA,KAAM,QAAW;UACpBZ,MAAA,CAAOW,CAAC,IAAIC,CAAA;QACb;MACD;MAEAZ,MAAA,CAAOnB,QAAA,GAAW,KAAKA,QAAA;MAEvB,OAAOmB,MAAA;IACR;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EASA,SAAAgB,MAAMzB,MAAA,EAAc;MACnB,OAAAa,aAAA,CAAAA,aAAA,KAAYvB,eAAA,CAAgBU,MAAM;QAAGc,EAAA,EAAI,KAAKC,QAAA,CAAS;MAAA;IACxD;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAcA,SAAAM,SAASW,gBAAA,EAAoC;MAC5C,OAAQ,KAAKjC,QAAA,GAAW,OAAOiC,gBAAA,aAAAA,gBAAA,cAAAA,gBAAA,GAAoBnC,MAAA,CAAO;IAC3D;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAiB,GAAA;IAAAC,KAAA,EAeA,SAAAkB,eAAeb,EAAA,EAAqB;MACnC,OAAQ,KAAKrB,QAAA,GAAW,MAAMqB,EAAA;IAC/B;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAQA,SAAAmB,QAAQd,EAAA,EAAqB;MAC5B,IAAI,CAAC,KAAKe,IAAA,CAAKf,EAAE,GAAG;QACnB,MAAM,IAAIgB,KAAA,SAAAC,MAAA,CAAajB,EAAA,sCAAAiB,MAAA,CAAmC,KAAKtC,QAAA,OAAW;MAC3E;MAEA,OAAOqB,EAAA,CAAGkB,KAAA,CAAM,KAAKvC,QAAA,CAAS2B,MAAA,GAAS,CAAC;IACzC;EAAA;IAAAZ,GAAA;IAAAC,KAAA;IAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAcA,SAAAoB,KAAKf,EAAA,EAA4B;MAChC,IAAI,CAACA,EAAA,EAAI,OAAO;MAChB,SAASmB,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKxC,QAAA,CAAS2B,MAAA,EAAQa,CAAA,IAAK;QAC9C,IAAInB,EAAA,CAAGmB,CAAC,MAAM,KAAKxC,QAAA,CAASwC,CAAC,GAAG,OAAO;MACxC;MAEA,OAAOnB,EAAA,CAAG,KAAKrB,QAAA,CAAS2B,MAAM,MAAM;IACrC;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAgBA,SAAAyB,sBACCjC,uBAAA,EACiE;MACjE,OAAO,IAAIT,UAAA,CAA+D,KAAKC,QAAA,EAAU;QACxFQ,uBAAA,EAAAA,uBAAA;QACAC,UAAA,EAAY,KAAKA,UAAA;QACjBC,SAAA,EAAW,KAAKA,SAAA;QAChBG,KAAA,EAAO,KAAKA;MACb,CAAC;IACF;IAAA;AAAA;AAAA;AAAA;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAMA,SAAAL,SAASJ,MAAA,EAAoB;MAC5B,OAAO,KAAKG,SAAA,CAAUC,QAAA,CAASJ,MAAM;IACtC;EAAA;EAAA,OAAAR,UAAA;AAAA;AAeM,SAAS2C,iBACf1C,QAAA,EACAC,MAAA,EAKkD;EAAA,IAAA0C,kBAAA;EAClD,OAAO,IAAI5C,UAAA,CAAgDC,QAAA,EAAU;IACpEQ,uBAAA,EAAyB,SAAAA,wBAAA;MAAA,OAAO,CAAC;IAAA;IACjCC,UAAA,GAAAkC,kBAAA,GAAY1C,MAAA,CAAOQ,UAAA,cAAAkC,kBAAA,cAAAA,kBAAA,GAAc;MAAEC,cAAA,EAAgB;MAAGC,YAAA,EAAc;MAAGC,SAAA,EAAW,CAAC;IAAE;IACrFpC,SAAA,EAAWT,MAAA,CAAOS,SAAA;IAClBG,KAAA,EAAOZ,MAAA,CAAOY;EACf,CAAC;AACF;AAeO,SAASkC,aACf1B,EAAA,EACA2B,IAAA,EACwB;EACxB,IAAI,CAAC3B,EAAA,IAAM,CAAC2B,IAAA,CAAKZ,IAAA,CAAKf,EAAE,GAAG;IAC1B,MAAM,IAAIgB,KAAA,WAAAC,MAAA,CAAgBW,IAAA,CAAKC,SAAA,CAAU7B,EAAE,uBAAAiB,MAAA,CAAoBU,IAAA,CAAKhD,QAAA,QAAa;EAClF;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}