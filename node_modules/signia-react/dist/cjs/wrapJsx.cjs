"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/wrapJsx.ts
var wrapJsx_exports = {};
__export(wrapJsx_exports, {
  wrapJsx: () => wrapJsx
});
module.exports = __toCommonJS(wrapJsx_exports);
var import_react = require("react");
var import_track = require("./track.cjs");
var ReactMemoType = Symbol.for("react.memo");
var ReactForwardRefType = Symbol.for("react.forward_ref");
var ProxyInstance = /* @__PURE__ */ new WeakMap();
function proxyFunctionalComponent(Component2) {
  const existing = ProxyInstance.get(Component2);
  if (existing)
    return existing;
  const tracked = (0, import_track.track)(Component2);
  ProxyInstance.set(Component2, tracked);
  return tracked;
}
function wrapJsx(jsx) {
  if (typeof jsx !== "function")
    return jsx;
  return function(type, props, ...rest) {
    if (typeof type === "function" && !(type instanceof import_react.Component)) {
      type = proxyFunctionalComponent(type);
    } else if (type && typeof type === "object") {
      if (type.$$typeof === ReactMemoType) {
        type = proxyFunctionalComponent(type.type);
      } else if (type.$$typeof === ReactForwardRefType) {
        type = proxyFunctionalComponent(type);
      }
    }
    return jsx.call(jsx, type, props, ...rest);
  };
}
//# sourceMappingURL=wrapJsx.cjs.map
