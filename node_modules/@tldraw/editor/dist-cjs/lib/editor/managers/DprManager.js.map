{
  "version": 3,
  "sources": ["../../../../src/lib/editor/managers/DprManager.ts"],
  "sourcesContent": ["import { atom } from 'signia'\nimport { Editor } from '../Editor'\n\nexport class DprManager {\n\tprivate _currentMM: MediaQueryList | undefined\n\n\tconstructor(public editor: Editor) {\n\t\tthis.rebind()\n\t\t// Add this class's dispose method (cancel the listener) to the app's disposables\n\t\tthis.editor.disposables.add(this.dispose)\n\t}\n\n\t// Set a listener to update the dpr when the device pixel ratio changes\n\trebind() {\n\t\tthis.dispose()\n\t\tthis._currentMM = this.getMedia()\n\t\tthis._currentMM?.addEventListener('change', this.updateDevicePixelRatio)\n\t}\n\n\tdpr = atom<number>(\n\t\t'devicePixelRatio',\n\t\ttypeof window === 'undefined' ? 1 : window.devicePixelRatio\n\t)\n\n\t// Get the media query list for the device pixel ratio\n\tgetMedia() {\n\t\t// NOTE: This ignore is only for the test environment.\n\t\t/* @ts-ignore */\n\t\tif (window.matchMedia) {\n\t\t\treturn matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`)\n\t\t}\n\t}\n\n\t// Update the device pixel ratio atom\n\tupdateDevicePixelRatio = () => {\n\t\tthis.dpr.set(window.devicePixelRatio)\n\n\t\tthis.rebind()\n\t}\n\n\t// Clear the listener\n\tdispose = () => {\n\t\tthis._currentMM?.removeEventListener('change', this.updateDevicePixelRatio)\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqB;AAGd,MAAM,WAAW;AAAA,EAGvB,YAAmB,QAAgB;AAAhB;AAClB,SAAK,OAAO;AAEZ,SAAK,OAAO,YAAY,IAAI,KAAK,OAAO;AAAA,EACzC;AAAA,EANQ;AAAA;AAAA,EASR,SAAS;AACR,SAAK,QAAQ;AACb,SAAK,aAAa,KAAK,SAAS;AAChC,SAAK,YAAY,iBAAiB,UAAU,KAAK,sBAAsB;AAAA,EACxE;AAAA,EAEA,UAAM;AAAA,IACL;AAAA,IACA,OAAO,WAAW,cAAc,IAAI,OAAO;AAAA,EAC5C;AAAA;AAAA,EAGA,WAAW;AAGV,QAAI,OAAO,YAAY;AACtB,aAAO,WAAW,gBAAgB,OAAO,uBAAuB;AAAA,IACjE;AAAA,EACD;AAAA;AAAA,EAGA,yBAAyB,MAAM;AAC9B,SAAK,IAAI,IAAI,OAAO,gBAAgB;AAEpC,SAAK,OAAO;AAAA,EACb;AAAA;AAAA,EAGA,UAAU,MAAM;AACf,SAAK,YAAY,oBAAoB,UAAU,KAAK,sBAAsB;AAAA,EAC3E;AACD;",
  "names": []
}
