{"ast":null,"code":"import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { DefaultColorStyle, useEditor } from \"@tldraw/editor\";\nimport { useCallback } from \"react\";\nimport { useValue } from \"signia-react\";\nimport { useTranslation } from \"../hooks/useTranslation/useTranslation.mjs\";\nimport { StylePanel } from \"./StylePanel/StylePanel.mjs\";\nimport { Button } from \"./primitives/Button.mjs\";\nimport { Icon } from \"./primitives/Icon.mjs\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./primitives/Popover.mjs\";\nfunction MobileStylePanel() {\n  var editor = useEditor();\n  var msg = useTranslation();\n  var currentColor = useValue(\"current color\", function () {\n    var color = editor.sharedStyles.get(DefaultColorStyle);\n    if (!color) return \"var(--color-muted-1)\";\n    if (color.type === \"mixed\") return null;\n    return \"var(--palette-\".concat(color, \")\");\n  }, [editor]);\n  var disableStylePanel = useValue(\"isHandOrEraserToolActive\", function () {\n    return editor.isInAny(\"hand\", \"zoom\", \"eraser\");\n  }, [editor]);\n  var handleStylesOpenChange = useCallback(function (isOpen) {\n    if (!isOpen) {\n      editor.isChangingStyle = false;\n    }\n  }, [editor]);\n  return /* @__PURE__ */jsxs(Popover, {\n    id: \"style menu\",\n    onOpenChange: handleStylesOpenChange,\n    children: [/* @__PURE__ */jsx(PopoverTrigger, {\n      disabled: disableStylePanel,\n      children: /* @__PURE__ */jsx(Button, {\n        className: \"tlui-toolbar__tools__button tlui-toolbar__styles__button\",\n        \"data-testid\": \"mobile.styles\",\n        style: {\n          color: currentColor !== null && currentColor !== void 0 ? currentColor : \"var(--color-text)\"\n        },\n        title: msg(\"style-panel.title\"),\n        children: /* @__PURE__ */jsx(Icon, {\n          icon: currentColor ? \"blob\" : \"mixed\"\n        })\n      })\n    }), /* @__PURE__ */jsx(PopoverContent, {\n      side: \"top\",\n      align: \"end\",\n      children: /* @__PURE__ */jsx(StylePanel, {\n        isMobile: true\n      })\n    })]\n  });\n}\nexport { MobileStylePanel };","map":{"version":3,"names":["jsx","jsxs","DefaultColorStyle","useEditor","useCallback","useValue","useTranslation","StylePanel","Button","Icon","Popover","PopoverContent","PopoverTrigger","MobileStylePanel","editor","msg","currentColor","color","sharedStyles","get","type","concat","disableStylePanel","isInAny","handleStylesOpenChange","isOpen","isChangingStyle","id","onOpenChange","children","disabled","className","style","title","icon","side","align","isMobile"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/ui/src/lib/components/MobileStylePanel.tsx"],"sourcesContent":["import { DefaultColorStyle, useEditor } from '@tldraw/editor'\nimport { useCallback } from 'react'\nimport { useValue } from 'signia-react'\nimport { useTranslation } from '../hooks/useTranslation/useTranslation'\nimport { StylePanel } from './StylePanel/StylePanel'\nimport { Button } from './primitives/Button'\nimport { Icon } from './primitives/Icon'\nimport { Popover, PopoverContent, PopoverTrigger } from './primitives/Popover'\n\nexport function MobileStylePanel() {\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\n\tconst currentColor = useValue(\n\t\t'current color',\n\t\t() => {\n\t\t\tconst color = editor.sharedStyles.get(DefaultColorStyle)\n\t\t\tif (!color) return 'var(--color-muted-1)'\n\t\t\tif (color.type === 'mixed') return null\n\t\t\treturn `var(--palette-${color})`\n\t\t},\n\t\t[editor]\n\t)\n\n\tconst disableStylePanel = useValue(\n\t\t'isHandOrEraserToolActive',\n\t\t() => editor.isInAny('hand', 'zoom', 'eraser'),\n\t\t[editor]\n\t)\n\n\tconst handleStylesOpenChange = useCallback(\n\t\t(isOpen: boolean) => {\n\t\t\tif (!isOpen) {\n\t\t\t\teditor.isChangingStyle = false\n\t\t\t}\n\t\t},\n\t\t[editor]\n\t)\n\n\treturn (\n\t\t<Popover id=\"style menu\" onOpenChange={handleStylesOpenChange}>\n\t\t\t<PopoverTrigger disabled={disableStylePanel}>\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"tlui-toolbar__tools__button tlui-toolbar__styles__button\"\n\t\t\t\t\tdata-testid=\"mobile.styles\"\n\t\t\t\t\tstyle={{ color: currentColor ?? 'var(--color-text)' }}\n\t\t\t\t\ttitle={msg('style-panel.title')}\n\t\t\t\t>\n\t\t\t\t\t<Icon icon={currentColor ? 'blob' : 'mixed'} />\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent side=\"top\" align=\"end\">\n\t\t\t\t<StylePanel isMobile />\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t)\n}\n"],"mappings":"AAwCE,SAQGA,GAAA,EARHC,IAAA;AAxCF,SAASC,iBAAA,EAAmBC,SAAA,QAAiB;AAC7C,SAASC,WAAA,QAAmB;AAC5B,SAASC,QAAA,QAAgB;AACzB,SAASC,cAAA,QAAsB;AAC/B,SAASC,UAAA,QAAkB;AAC3B,SAASC,MAAA,QAAc;AACvB,SAASC,IAAA,QAAY;AACrB,SAASC,OAAA,EAASC,cAAA,EAAgBC,cAAA,QAAsB;AAEjD,SAASC,iBAAA,EAAmB;EAClC,IAAMC,MAAA,GAASX,SAAA,CAAU;EACzB,IAAMY,GAAA,GAAMT,cAAA,CAAe;EAE3B,IAAMU,YAAA,GAAeX,QAAA,CACpB,iBACA,YAAM;IACL,IAAMY,KAAA,GAAQH,MAAA,CAAOI,YAAA,CAAaC,GAAA,CAAIjB,iBAAiB;IACvD,IAAI,CAACe,KAAA,EAAO,OAAO;IACnB,IAAIA,KAAA,CAAMG,IAAA,KAAS,SAAS,OAAO;IACnC,wBAAAC,MAAA,CAAwBJ,KAAA;EACzB,GACA,CAACH,MAAM,CACR;EAEA,IAAMQ,iBAAA,GAAoBjB,QAAA,CACzB,4BACA;IAAA,OAAMS,MAAA,CAAOS,OAAA,CAAQ,QAAQ,QAAQ,QAAQ;EAAA,GAC7C,CAACT,MAAM,CACR;EAEA,IAAMU,sBAAA,GAAyBpB,WAAA,CAC9B,UAACqB,MAAA,EAAoB;IACpB,IAAI,CAACA,MAAA,EAAQ;MACZX,MAAA,CAAOY,eAAA,GAAkB;IAC1B;EACD,GACA,CAACZ,MAAM,CACR;EAEA,OACC,eAAAb,IAAA,CAACS,OAAA;IAAQiB,EAAA,EAAG;IAAaC,YAAA,EAAcJ,sBAAA;IACtCK,QAAA,kBAAA7B,GAAA,CAACY,cAAA;MAAekB,QAAA,EAAUR,iBAAA;MACzBO,QAAA,iBAAA7B,GAAA,CAACQ,MAAA;QACAuB,SAAA,EAAU;QACV,eAAY;QACZC,KAAA,EAAO;UAAEf,KAAA,EAAOD,YAAA,aAAAA,YAAA,cAAAA,YAAA,GAAgB;QAAoB;QACpDiB,KAAA,EAAOlB,GAAA,CAAI,mBAAmB;QAE9Bc,QAAA,iBAAA7B,GAAA,CAACS,IAAA;UAAKyB,IAAA,EAAMlB,YAAA,GAAe,SAAS;QAAA,CAAS;MAAA,CAC9C;IAAA,CACD,GACA,eAAAhB,GAAA,CAACW,cAAA;MAAewB,IAAA,EAAK;MAAMC,KAAA,EAAM;MAChCP,QAAA,iBAAA7B,GAAA,CAACO,UAAA;QAAW8B,QAAA,EAAQ;MAAA,CAAC;IAAA,CACtB;EAAA,CACD;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}