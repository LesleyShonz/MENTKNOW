import { pointInPolygon } from "@tldraw/primitives";
import { ScribbleManager } from "../../../managers/ScribbleManager.mjs";
import { FrameShapeUtil } from "../../../shapes/frame/FrameShapeUtil.mjs";
import { GroupShapeUtil } from "../../../shapes/group/GroupShapeUtil.mjs";
import { StateNode } from "../../StateNode.mjs";
class Erasing extends StateNode {
  static id = "erasing";
  info = {};
  scribble = {};
  markId = "";
  excludedShapeIds = /* @__PURE__ */ new Set();
  onEnter = (info) => {
    this.markId = this.editor.mark("erase scribble begin");
    this.info = info;
    const { originPagePoint } = this.editor.inputs;
    this.excludedShapeIds = new Set(
      this.editor.shapesArray.filter(
        (shape) => this.editor.isShapeOrAncestorLocked(shape) || (this.editor.isShapeOfType(shape, GroupShapeUtil) || this.editor.isShapeOfType(shape, FrameShapeUtil)) && this.editor.isPointInShape(originPagePoint, shape)
      ).map((shape) => shape.id)
    );
    this.startScribble();
    this.update();
  };
  startScribble = () => {
    if (this.scribble.tick) {
      this.editor.off("tick", this.scribble?.tick);
    }
    this.scribble = new ScribbleManager({
      onUpdate: this.onScribbleUpdate,
      onComplete: this.onScribbleComplete,
      color: "muted-1",
      size: 12
    });
    this.editor.on("tick", this.scribble.tick);
  };
  pushPointToScribble = () => {
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.scribble.addPoint(x, y);
  };
  onScribbleUpdate = (scribble) => {
    this.editor.setScribble(scribble);
  };
  onScribbleComplete = () => {
    this.editor.off("tick", this.scribble.tick);
    this.editor.setScribble(null);
  };
  onExit = () => {
    this.scribble.stop();
  };
  onPointerMove = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  update() {
    const {
      shapesArray,
      erasingIdsSet,
      inputs: { currentPagePoint, previousPagePoint }
    } = this.editor;
    const { excludedShapeIds } = this;
    this.pushPointToScribble();
    const erasing = new Set(erasingIdsSet);
    for (const shape of shapesArray) {
      if (this.editor.isShapeOfType(shape, GroupShapeUtil))
        continue;
      const pageMask = this.editor.getPageMaskById(shape.id);
      if (pageMask && !pointInPolygon(currentPagePoint, pageMask)) {
        continue;
      }
      const util = this.editor.getShapeUtil(shape);
      const A = this.editor.getPointInShapeSpace(shape, previousPagePoint);
      const B = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      if (util.hitTestLineSegment(shape, A, B)) {
        erasing.add(this.editor.getOutermostSelectableShape(shape).id);
      }
    }
    this.editor.setErasingIds([...erasing].filter((id) => !excludedShapeIds.has(id)));
  }
  complete() {
    this.editor.deleteShapes(this.editor.pageState.erasingIds);
    this.editor.setErasingIds([]);
    this.parent.transition("idle", {});
  }
  cancel() {
    this.editor.setErasingIds([]);
    this.editor.bailToMark(this.markId);
    this.parent.transition("idle", this.info);
  }
}
export {
  Erasing
};
//# sourceMappingURL=Erasing.mjs.map
