"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DprManager_exports = {};
__export(DprManager_exports, {
  DprManager: () => DprManager
});
module.exports = __toCommonJS(DprManager_exports);
var import_signia = require("signia");
class DprManager {
  constructor(editor) {
    this.editor = editor;
    this.rebind();
    this.editor.disposables.add(this.dispose);
  }
  _currentMM;
  // Set a listener to update the dpr when the device pixel ratio changes
  rebind() {
    this.dispose();
    this._currentMM = this.getMedia();
    this._currentMM?.addEventListener("change", this.updateDevicePixelRatio);
  }
  dpr = (0, import_signia.atom)(
    "devicePixelRatio",
    typeof window === "undefined" ? 1 : window.devicePixelRatio
  );
  // Get the media query list for the device pixel ratio
  getMedia() {
    if (window.matchMedia) {
      return matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
    }
  }
  // Update the device pixel ratio atom
  updateDevicePixelRatio = () => {
    this.dpr.set(window.devicePixelRatio);
    this.rebind();
  };
  // Clear the listener
  dispose = () => {
    this._currentMM?.removeEventListener("change", this.updateDevicePixelRatio);
  };
}
//# sourceMappingURL=DprManager.js.map
