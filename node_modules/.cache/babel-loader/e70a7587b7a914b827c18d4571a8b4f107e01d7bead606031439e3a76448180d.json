{"ast":null,"code":"import { Vec2d } from \"./Vec2d.mjs\";\nimport { toDomPrecision } from \"./utils.mjs\";\nfunction precise(A) {\n  return \"\".concat(toDomPrecision(A.x), \",\").concat(toDomPrecision(A.y), \" \");\n}\nfunction rng() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var w = 0;\n  function next() {\n    var t = x ^ x << 11;\n    x = y;\n    y = z;\n    z = w;\n    w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;\n    return w / 4294967296 * 2;\n  }\n  for (var k = 0; k < seed.length + 64; k++) {\n    x ^= seed.charCodeAt(k) | 0;\n    next();\n  }\n  return next;\n}\nfunction getRoundedInkyPolygonPath(points) {\n  var polylineA = \"M\";\n  var len = points.length;\n  var p0;\n  var p1;\n  var p2;\n  for (var i = 0, n = len; i < n; i += 3) {\n    p0 = points[i];\n    p1 = points[i + 1];\n    p2 = points[i + 2];\n    polylineA += \"\".concat(precise(p0), \"L\").concat(precise(p1), \"Q\").concat(precise(p2));\n  }\n  polylineA += \"\".concat(precise(points[0]));\n  return polylineA;\n}\nfunction getRoundedPolygonPoints(id, outline, offset, roundness, passes) {\n  var results = [];\n  var random = rng(id);\n  var p0 = outline[0];\n  var p1;\n  var len = outline.length;\n  for (var i = 0, n = len * passes; i < n; i++) {\n    p1 = Vec2d.AddXY(outline[(i + 1) % len], random() * offset, random() * offset);\n    var delta = Vec2d.Sub(p1, p0);\n    var distance = Vec2d.Len(delta);\n    var vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness));\n    results.push(Vec2d.Add(p0, vector), Vec2d.Add(p1, vector.neg()), p1);\n    p0 = p1;\n  }\n  return results;\n}\nfunction getDrawLinePathData(id, outline, strokeWidth) {\n  var innerPathData = \"M\".concat(precise(outline[0]), \"L\");\n  var outerPathData1 = \"M\".concat(precise(outline[0]), \"L\");\n  var outerPathData2 = \"M\".concat(precise(outline[0]), \"L\");\n  var offset = strokeWidth / 3;\n  var roundness = strokeWidth * 2;\n  var random = rng(id);\n  var p0 = outline[0];\n  var p1;\n  var s0 = outline[0];\n  var s1;\n  var len = outline.length;\n  for (var i = 0, n = len - 1; i < n; i++) {\n    p1 = Vec2d.AddXY(outline[i + 1], random() * offset, random() * offset);\n    s1 = Vec2d.AddXY(outline[i + 1], random(), random() * offset);\n    var delta = Vec2d.Sub(p1, p0);\n    var distance = Vec2d.Len(delta);\n    var vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness));\n    var q0 = Vec2d.Add(p0, vector);\n    var q1 = Vec2d.Add(p1, vector.neg());\n    var sDelta = Vec2d.Sub(s1, s0);\n    var sDistance = Vec2d.Len(sDelta);\n    var sVector = Vec2d.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness));\n    var sq0 = Vec2d.Add(s0, sVector);\n    var sq1 = Vec2d.Add(s1, sVector.neg());\n    if (i === n - 1) {\n      innerPathData += \"\".concat(precise(q0), \" L \").concat(precise(p1));\n      outerPathData1 += \"\".concat(precise(q0), \" L \").concat(precise(p1));\n      outerPathData2 += \"\".concat(precise(sq0), \" L \").concat(precise(s1));\n    } else {\n      innerPathData += \"\".concat(precise(q0), \"L \").concat(precise(q1), \"Q \").concat(precise(p1));\n      outerPathData1 += \"\".concat(precise(q0), \"L \").concat(precise(q1), \"Q \").concat(precise(p1));\n      outerPathData2 += \"\".concat(precise(sq0), \"L \").concat(precise(sq1), \"Q \").concat(precise(s1));\n      p0 = p1;\n      s0 = s1;\n    }\n  }\n  return [innerPathData, outerPathData1 + outerPathData2];\n}\nexport { getDrawLinePathData, getRoundedInkyPolygonPath, getRoundedPolygonPoints };","map":{"version":3,"names":["Vec2d","toDomPrecision","precise","A","concat","x","y","rng","seed","arguments","length","undefined","z","w","next","t","k","charCodeAt","getRoundedInkyPolygonPath","points","polylineA","len","p0","p1","p2","i","n","getRoundedPolygonPoints","id","outline","offset","roundness","passes","results","random","AddXY","delta","Sub","distance","Len","vector","Div","mul","Math","min","push","Add","neg","getDrawLinePathData","strokeWidth","innerPathData","outerPathData1","outerPathData2","s0","s1","q0","q1","sDelta","sDistance","sVector","sq0","sq1"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/primitives/src/lib/polygon-helpers.ts"],"sourcesContent":["import { Vec2d, VecLike } from './Vec2d'\nimport { toDomPrecision } from './utils'\n\nfunction precise(A: VecLike) {\n\treturn `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `\n}\n\nfunction rng(seed = '') {\n\tlet x = 0\n\tlet y = 0\n\tlet z = 0\n\tlet w = 0\n\n\tfunction next() {\n\t\tconst t = x ^ (x << 11)\n\t\tx = y\n\t\ty = z\n\t\tz = w\n\t\tw ^= ((w >>> 19) ^ t ^ (t >>> 8)) >>> 0\n\t\treturn (w / 0x100000000) * 2\n\t}\n\n\tfor (let k = 0; k < seed.length + 64; k++) {\n\t\tx ^= seed.charCodeAt(k) | 0\n\t\tnext()\n\t}\n\n\treturn next\n}\n\n/** @public */\nexport function getRoundedInkyPolygonPath(points: VecLike[]) {\n\tlet polylineA = `M`\n\n\tconst len = points.length\n\n\tlet p0: VecLike\n\tlet p1: VecLike\n\tlet p2: VecLike\n\n\tfor (let i = 0, n = len; i < n; i += 3) {\n\t\tp0 = points[i]\n\t\tp1 = points[i + 1]\n\t\tp2 = points[i + 2]\n\n\t\tpolylineA += `${precise(p0)}L${precise(p1)}Q${precise(p2)}`\n\t}\n\n\tpolylineA += `${precise(points[0])}`\n\n\treturn polylineA\n}\n\n/** @public */\nexport function getRoundedPolygonPoints(\n\tid: string,\n\toutline: VecLike[],\n\toffset: number,\n\troundness: number,\n\tpasses: number\n) {\n\tconst results: VecLike[] = []\n\n\tconst random = rng(id)\n\tlet p0 = outline[0]\n\tlet p1: VecLike\n\n\tconst len = outline.length\n\n\tfor (let i = 0, n = len * passes; i < n; i++) {\n\t\tp1 = Vec2d.AddXY(outline[(i + 1) % len], random() * offset, random() * offset)\n\n\t\tconst delta = Vec2d.Sub(p1, p0)\n\t\tconst distance = Vec2d.Len(delta)\n\t\tconst vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness))\n\t\tresults.push(Vec2d.Add(p0, vector), Vec2d.Add(p1, vector.neg()), p1)\n\n\t\tp0 = p1\n\t}\n\n\treturn results\n}\n\n/** @public */\nexport function getDrawLinePathData(id: string, outline: VecLike[], strokeWidth: number) {\n\tlet innerPathData = `M${precise(outline[0])}L`\n\tlet outerPathData1 = `M${precise(outline[0])}L`\n\tlet outerPathData2 = `M${precise(outline[0])}L`\n\n\tconst offset = strokeWidth / 3\n\tconst roundness = strokeWidth * 2\n\n\tconst random = rng(id)\n\tlet p0 = outline[0]\n\tlet p1: VecLike\n\n\tlet s0 = outline[0]\n\tlet s1: VecLike\n\n\tconst len = outline.length\n\n\tfor (let i = 0, n = len - 1; i < n; i++) {\n\t\tp1 = Vec2d.AddXY(outline[i + 1], random() * offset, random() * offset)\n\t\ts1 = Vec2d.AddXY(outline[i + 1], random(), random() * offset)\n\n\t\tconst delta = Vec2d.Sub(p1, p0)\n\t\tconst distance = Vec2d.Len(delta)\n\t\tconst vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness))\n\n\t\tconst q0 = Vec2d.Add(p0, vector)\n\t\tconst q1 = Vec2d.Add(p1, vector.neg())\n\n\t\tconst sDelta = Vec2d.Sub(s1, s0)\n\t\tconst sDistance = Vec2d.Len(sDelta)\n\t\tconst sVector = Vec2d.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness))\n\n\t\tconst sq0 = Vec2d.Add(s0, sVector)\n\t\tconst sq1 = Vec2d.Add(s1, sVector.neg())\n\n\t\tif (i === n - 1) {\n\t\t\tinnerPathData += `${precise(q0)} L ${precise(p1)}`\n\t\t\touterPathData1 += `${precise(q0)} L ${precise(p1)}`\n\t\t\touterPathData2 += `${precise(sq0)} L ${precise(s1)}`\n\t\t} else {\n\t\t\tinnerPathData += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`\n\t\t\touterPathData1 += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`\n\t\t\touterPathData2 += `${precise(sq0)}L ${precise(sq1)}Q ${precise(s1)}`\n\n\t\t\tp0 = p1\n\t\t\ts0 = s1\n\t\t}\n\t}\n\n\treturn [innerPathData, outerPathData1 + outerPathData2]\n}\n"],"mappings":"AAAA,SAASA,KAAA,QAAsB;AAC/B,SAASC,cAAA,QAAsB;AAE/B,SAASC,QAAQC,CAAA,EAAY;EAC5B,UAAAC,MAAA,CAAUH,cAAA,CAAeE,CAAA,CAAEE,CAAC,QAAAD,MAAA,CAAKH,cAAA,CAAeE,CAAA,CAAEG,CAAC;AACpD;AAEA,SAASC,IAAA,EAAe;EAAA,IAAXC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO;EACnB,IAAIJ,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EACR,IAAIM,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EAER,SAASC,KAAA,EAAO;IACf,IAAMC,CAAA,GAAIV,CAAA,GAAKA,CAAA,IAAK;IACpBA,CAAA,GAAIC,CAAA;IACJA,CAAA,GAAIM,CAAA;IACJA,CAAA,GAAIC,CAAA;IACJA,CAAA,KAAOA,CAAA,KAAM,KAAME,CAAA,GAAKA,CAAA,KAAM,OAAQ;IACtC,OAAQF,CAAA,GAAI,aAAe;EAC5B;EAEA,SAASG,CAAA,GAAI,GAAGA,CAAA,GAAIR,IAAA,CAAKE,MAAA,GAAS,IAAIM,CAAA,IAAK;IAC1CX,CAAA,IAAKG,IAAA,CAAKS,UAAA,CAAWD,CAAC,IAAI;IAC1BF,IAAA,CAAK;EACN;EAEA,OAAOA,IAAA;AACR;AAGO,SAASI,0BAA0BC,MAAA,EAAmB;EAC5D,IAAIC,SAAA,MAAY;EAEhB,IAAMC,GAAA,GAAMF,MAAA,CAAOT,MAAA;EAEnB,IAAIY,EAAA;EACJ,IAAIC,EAAA;EACJ,IAAIC,EAAA;EAEJ,SAASC,CAAA,GAAI,GAAGC,CAAA,GAAIL,GAAA,EAAKI,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK,GAAG;IACvCH,EAAA,GAAKH,MAAA,CAAOM,CAAC;IACbF,EAAA,GAAKJ,MAAA,CAAOM,CAAA,GAAI,CAAC;IACjBD,EAAA,GAAKL,MAAA,CAAOM,CAAA,GAAI,CAAC;IAEjBL,SAAA,OAAAhB,MAAA,CAAgBF,OAAA,CAAQoB,EAAE,QAAAlB,MAAA,CAAKF,OAAA,CAAQqB,EAAE,QAAAnB,MAAA,CAAKF,OAAA,CAAQsB,EAAE;EACzD;EAEAJ,SAAA,OAAAhB,MAAA,CAAgBF,OAAA,CAAQiB,MAAA,CAAO,CAAC,CAAC;EAEjC,OAAOC,SAAA;AACR;AAGO,SAASO,wBACfC,EAAA,EACAC,OAAA,EACAC,MAAA,EACAC,SAAA,EACAC,MAAA,EACC;EACD,IAAMC,OAAA,GAAqB,EAAC;EAE5B,IAAMC,MAAA,GAAS3B,GAAA,CAAIqB,EAAE;EACrB,IAAIN,EAAA,GAAKO,OAAA,CAAQ,CAAC;EAClB,IAAIN,EAAA;EAEJ,IAAMF,GAAA,GAAMQ,OAAA,CAAQnB,MAAA;EAEpB,SAASe,CAAA,GAAI,GAAGC,CAAA,GAAIL,GAAA,GAAMW,MAAA,EAAQP,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;IAC7CF,EAAA,GAAKvB,KAAA,CAAMmC,KAAA,CAAMN,OAAA,EAASJ,CAAA,GAAI,KAAKJ,GAAG,GAAGa,MAAA,CAAO,IAAIJ,MAAA,EAAQI,MAAA,CAAO,IAAIJ,MAAM;IAE7E,IAAMM,KAAA,GAAQpC,KAAA,CAAMqC,GAAA,CAAId,EAAA,EAAID,EAAE;IAC9B,IAAMgB,QAAA,GAAWtC,KAAA,CAAMuC,GAAA,CAAIH,KAAK;IAChC,IAAMI,MAAA,GAASxC,KAAA,CAAMyC,GAAA,CAAIL,KAAA,EAAOE,QAAQ,EAAEI,GAAA,CAAIC,IAAA,CAAKC,GAAA,CAAIN,QAAA,GAAW,GAAGP,SAAS,CAAC;IAC/EE,OAAA,CAAQY,IAAA,CAAK7C,KAAA,CAAM8C,GAAA,CAAIxB,EAAA,EAAIkB,MAAM,GAAGxC,KAAA,CAAM8C,GAAA,CAAIvB,EAAA,EAAIiB,MAAA,CAAOO,GAAA,CAAI,CAAC,GAAGxB,EAAE;IAEnED,EAAA,GAAKC,EAAA;EACN;EAEA,OAAOU,OAAA;AACR;AAGO,SAASe,oBAAoBpB,EAAA,EAAYC,OAAA,EAAoBoB,WAAA,EAAqB;EACxF,IAAIC,aAAA,OAAA9C,MAAA,CAAoBF,OAAA,CAAQ2B,OAAA,CAAQ,CAAC,CAAC;EAC1C,IAAIsB,cAAA,OAAA/C,MAAA,CAAqBF,OAAA,CAAQ2B,OAAA,CAAQ,CAAC,CAAC;EAC3C,IAAIuB,cAAA,OAAAhD,MAAA,CAAqBF,OAAA,CAAQ2B,OAAA,CAAQ,CAAC,CAAC;EAE3C,IAAMC,MAAA,GAASmB,WAAA,GAAc;EAC7B,IAAMlB,SAAA,GAAYkB,WAAA,GAAc;EAEhC,IAAMf,MAAA,GAAS3B,GAAA,CAAIqB,EAAE;EACrB,IAAIN,EAAA,GAAKO,OAAA,CAAQ,CAAC;EAClB,IAAIN,EAAA;EAEJ,IAAI8B,EAAA,GAAKxB,OAAA,CAAQ,CAAC;EAClB,IAAIyB,EAAA;EAEJ,IAAMjC,GAAA,GAAMQ,OAAA,CAAQnB,MAAA;EAEpB,SAASe,CAAA,GAAI,GAAGC,CAAA,GAAIL,GAAA,GAAM,GAAGI,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;IACxCF,EAAA,GAAKvB,KAAA,CAAMmC,KAAA,CAAMN,OAAA,CAAQJ,CAAA,GAAI,CAAC,GAAGS,MAAA,CAAO,IAAIJ,MAAA,EAAQI,MAAA,CAAO,IAAIJ,MAAM;IACrEwB,EAAA,GAAKtD,KAAA,CAAMmC,KAAA,CAAMN,OAAA,CAAQJ,CAAA,GAAI,CAAC,GAAGS,MAAA,CAAO,GAAGA,MAAA,CAAO,IAAIJ,MAAM;IAE5D,IAAMM,KAAA,GAAQpC,KAAA,CAAMqC,GAAA,CAAId,EAAA,EAAID,EAAE;IAC9B,IAAMgB,QAAA,GAAWtC,KAAA,CAAMuC,GAAA,CAAIH,KAAK;IAChC,IAAMI,MAAA,GAASxC,KAAA,CAAMyC,GAAA,CAAIL,KAAA,EAAOE,QAAQ,EAAEI,GAAA,CAAIC,IAAA,CAAKC,GAAA,CAAIN,QAAA,GAAW,GAAGP,SAAS,CAAC;IAE/E,IAAMwB,EAAA,GAAKvD,KAAA,CAAM8C,GAAA,CAAIxB,EAAA,EAAIkB,MAAM;IAC/B,IAAMgB,EAAA,GAAKxD,KAAA,CAAM8C,GAAA,CAAIvB,EAAA,EAAIiB,MAAA,CAAOO,GAAA,CAAI,CAAC;IAErC,IAAMU,MAAA,GAASzD,KAAA,CAAMqC,GAAA,CAAIiB,EAAA,EAAID,EAAE;IAC/B,IAAMK,SAAA,GAAY1D,KAAA,CAAMuC,GAAA,CAAIkB,MAAM;IAClC,IAAME,OAAA,GAAU3D,KAAA,CAAMyC,GAAA,CAAIgB,MAAA,EAAQC,SAAS,EAAEhB,GAAA,CAAIC,IAAA,CAAKC,GAAA,CAAIc,SAAA,GAAY,GAAG3B,SAAS,CAAC;IAEnF,IAAM6B,GAAA,GAAM5D,KAAA,CAAM8C,GAAA,CAAIO,EAAA,EAAIM,OAAO;IACjC,IAAME,GAAA,GAAM7D,KAAA,CAAM8C,GAAA,CAAIQ,EAAA,EAAIK,OAAA,CAAQZ,GAAA,CAAI,CAAC;IAEvC,IAAItB,CAAA,KAAMC,CAAA,GAAI,GAAG;MAChBwB,aAAA,OAAA9C,MAAA,CAAoBF,OAAA,CAAQqD,EAAE,UAAAnD,MAAA,CAAOF,OAAA,CAAQqB,EAAE;MAC/C4B,cAAA,OAAA/C,MAAA,CAAqBF,OAAA,CAAQqD,EAAE,UAAAnD,MAAA,CAAOF,OAAA,CAAQqB,EAAE;MAChD6B,cAAA,OAAAhD,MAAA,CAAqBF,OAAA,CAAQ0D,GAAG,UAAAxD,MAAA,CAAOF,OAAA,CAAQoD,EAAE;IAClD,OAAO;MACNJ,aAAA,OAAA9C,MAAA,CAAoBF,OAAA,CAAQqD,EAAE,SAAAnD,MAAA,CAAMF,OAAA,CAAQsD,EAAE,SAAApD,MAAA,CAAMF,OAAA,CAAQqB,EAAE;MAC9D4B,cAAA,OAAA/C,MAAA,CAAqBF,OAAA,CAAQqD,EAAE,SAAAnD,MAAA,CAAMF,OAAA,CAAQsD,EAAE,SAAApD,MAAA,CAAMF,OAAA,CAAQqB,EAAE;MAC/D6B,cAAA,OAAAhD,MAAA,CAAqBF,OAAA,CAAQ0D,GAAG,SAAAxD,MAAA,CAAMF,OAAA,CAAQ2D,GAAG,SAAAzD,MAAA,CAAMF,OAAA,CAAQoD,EAAE;MAEjEhC,EAAA,GAAKC,EAAA;MACL8B,EAAA,GAAKC,EAAA;IACN;EACD;EAEA,OAAO,CAACJ,aAAA,EAAeC,cAAA,GAAiBC,cAAc;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}