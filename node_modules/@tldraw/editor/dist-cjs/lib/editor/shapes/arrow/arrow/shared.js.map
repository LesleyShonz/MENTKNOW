{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/shapes/arrow/arrow/shared.ts"],
  "sourcesContent": ["import { Matrix2d, Vec2d } from '@tldraw/primitives'\nimport { TLArrowShape, TLArrowShapeTerminal, TLShape } from '@tldraw/tlschema'\nimport { Editor } from '../../../Editor'\nimport { ShapeUtil } from '../../ShapeUtil'\n\nexport function getIsArrowStraight(shape: TLArrowShape) {\n\treturn Math.abs(shape.props.bend) < 8 // snap to +-8px\n}\n\nexport type BoundShapeInfo<T extends TLShape = TLShape> = {\n\tshape: T\n\tutil: ShapeUtil<T>\n\tdidIntersect: boolean\n\tisExact: boolean\n\ttransform: Matrix2d\n}\n\nexport function getBoundShapeInfoForTerminal(\n\teditor: Editor,\n\tterminal: TLArrowShapeTerminal\n): BoundShapeInfo | undefined {\n\tif (terminal.type === 'point') {\n\t\treturn\n\t}\n\n\tconst shape = editor.getShapeById(terminal.boundShapeId)!\n\tconst util = editor.getShapeUtil(shape)\n\tconst transform = editor.getPageTransform(shape)!\n\n\treturn {\n\t\tshape,\n\t\tutil,\n\t\ttransform,\n\t\tisExact: terminal.isExact,\n\t\tdidIntersect: false,\n\t}\n}\n\nexport function getArrowTerminalInArrowSpace(\n\teditor: Editor,\n\tarrowPageTransform: Matrix2d,\n\tterminal: TLArrowShapeTerminal\n) {\n\tif (terminal.type === 'point') {\n\t\treturn Vec2d.From(terminal)\n\t}\n\n\tconst boundShape = editor.getShapeById(terminal.boundShapeId)\n\n\tif (!boundShape) {\n\t\t// this can happen in multiplayer contexts where the shape is being deleted\n\t\treturn new Vec2d(0, 0)\n\t} else {\n\t\t// Find the actual local point of the normalized terminal on\n\t\t// the bound shape and transform it to page space, then transform\n\t\t// it to arrow space\n\t\tconst { point, size } = editor.getBounds(boundShape)\n\t\tconst shapePoint = Vec2d.Add(point, Vec2d.MulV(terminal.normalizedAnchor, size))\n\t\tconst pagePoint = Matrix2d.applyToPoint(editor.getPageTransform(boundShape)!, shapePoint)\n\t\tconst arrowPoint = Matrix2d.applyToPoint(Matrix2d.Inverse(arrowPageTransform), pagePoint)\n\t\treturn arrowPoint\n\t}\n}\n\nexport function getArrowTerminalsInArrowSpace(editor: Editor, shape: TLArrowShape) {\n\tconst arrowPageTransform = editor.getPageTransform(shape)!\n\n\tconst start = getArrowTerminalInArrowSpace(editor, arrowPageTransform, shape.props.start)\n\tconst end = getArrowTerminalInArrowSpace(editor, arrowPageTransform, shape.props.end)\n\n\treturn { start, end }\n}\n\n/** @internal */\nexport const MIN_ARROW_LENGTH = 48\n/** @internal */\nexport const BOUND_ARROW_OFFSET = 10\n/** @internal */\nexport const WAY_TOO_BIG_ARROW_BEND_FACTOR = 10\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAgC;AAKzB,SAAS,mBAAmB,OAAqB;AACvD,SAAO,KAAK,IAAI,MAAM,MAAM,IAAI,IAAI;AACrC;AAUO,SAAS,6BACf,QACA,UAC6B;AAC7B,MAAI,SAAS,SAAS,SAAS;AAC9B;AAAA,EACD;AAEA,QAAM,QAAQ,OAAO,aAAa,SAAS,YAAY;AACvD,QAAM,OAAO,OAAO,aAAa,KAAK;AACtC,QAAM,YAAY,OAAO,iBAAiB,KAAK;AAE/C,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS,SAAS;AAAA,IAClB,cAAc;AAAA,EACf;AACD;AAEO,SAAS,6BACf,QACA,oBACA,UACC;AACD,MAAI,SAAS,SAAS,SAAS;AAC9B,WAAO,wBAAM,KAAK,QAAQ;AAAA,EAC3B;AAEA,QAAM,aAAa,OAAO,aAAa,SAAS,YAAY;AAE5D,MAAI,CAAC,YAAY;AAEhB,WAAO,IAAI,wBAAM,GAAG,CAAC;AAAA,EACtB,OAAO;AAIN,UAAM,EAAE,OAAO,KAAK,IAAI,OAAO,UAAU,UAAU;AACnD,UAAM,aAAa,wBAAM,IAAI,OAAO,wBAAM,KAAK,SAAS,kBAAkB,IAAI,CAAC;AAC/E,UAAM,YAAY,2BAAS,aAAa,OAAO,iBAAiB,UAAU,GAAI,UAAU;AACxF,UAAM,aAAa,2BAAS,aAAa,2BAAS,QAAQ,kBAAkB,GAAG,SAAS;AACxF,WAAO;AAAA,EACR;AACD;AAEO,SAAS,8BAA8B,QAAgB,OAAqB;AAClF,QAAM,qBAAqB,OAAO,iBAAiB,KAAK;AAExD,QAAM,QAAQ,6BAA6B,QAAQ,oBAAoB,MAAM,MAAM,KAAK;AACxF,QAAM,MAAM,6BAA6B,QAAQ,oBAAoB,MAAM,MAAM,GAAG;AAEpF,SAAO,EAAE,OAAO,IAAI;AACrB;AAGO,MAAM,mBAAmB;AAEzB,MAAM,qBAAqB;AAE3B,MAAM,gCAAgC;",
  "names": []
}
