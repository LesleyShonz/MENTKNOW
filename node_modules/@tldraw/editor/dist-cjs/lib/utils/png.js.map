{
  "version": 3,
  "sources": ["../../../src/lib/utils/png.ts"],
  "sourcesContent": ["import crc32 from 'crc/crc32'\n\nexport function isPng(view: DataView, offset: number) {\n\tif (\n\t\tview.getUint8(offset + 0) === 0x89 &&\n\t\tview.getUint8(offset + 1) === 0x50 &&\n\t\tview.getUint8(offset + 2) === 0x4e &&\n\t\tview.getUint8(offset + 3) === 0x47 &&\n\t\tview.getUint8(offset + 4) === 0x0d &&\n\t\tview.getUint8(offset + 5) === 0x0a &&\n\t\tview.getUint8(offset + 6) === 0x1a &&\n\t\tview.getUint8(offset + 7) === 0x0a\n\t) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunction getChunkType(view: DataView, offset: number) {\n\treturn [\n\t\tString.fromCharCode(view.getUint8(offset)),\n\t\tString.fromCharCode(view.getUint8(offset + 1)),\n\t\tString.fromCharCode(view.getUint8(offset + 2)),\n\t\tString.fromCharCode(view.getUint8(offset + 3)),\n\t].join('')\n}\n\nexport function crc(arrayBuffer: ArrayBuffer) {\n\treturn crc32(arrayBuffer)\n}\n\nconst LEN_SIZE = 4\nconst CRC_SIZE = 4\n\nexport function readChunks(view: DataView, offset = 0) {\n\tconst chunks: Record<string, { dataOffset: number; size: number; start: number }> = {}\n\tif (!isPng(view, offset)) {\n\t\tthrow new Error('Not a PNG')\n\t}\n\toffset += 8\n\n\twhile (offset <= view.buffer.byteLength) {\n\t\tconst start = offset\n\t\tconst len = view.getInt32(offset)\n\t\toffset += 4\n\t\tconst chunkType = getChunkType(view, offset)\n\n\t\tif (chunkType === 'IDAT' && chunks[chunkType]) {\n\t\t\toffset += len + LEN_SIZE + CRC_SIZE\n\t\t\tcontinue\n\t\t}\n\n\t\tif (chunkType === 'IEND') {\n\t\t\tbreak\n\t\t}\n\n\t\tchunks[chunkType] = {\n\t\t\tstart,\n\t\t\tdataOffset: offset + 4,\n\t\t\tsize: len,\n\t\t}\n\t\toffset += len + LEN_SIZE + CRC_SIZE\n\t}\n\n\treturn chunks\n}\n\nexport function parsePhys(view: DataView, offset: number) {\n\treturn {\n\t\tppux: view.getUint32(offset),\n\t\tppuy: view.getUint32(offset + 4),\n\t\tunit: view.getUint8(offset + 4),\n\t}\n}\n\nexport function findChunk(view: DataView, type: string) {\n\tconst chunks = readChunks(view)\n\treturn chunks[type]\n}\n\nexport function setPhysChunk(view: DataView, dpr = 1, options?: BlobPropertyBag) {\n\tlet offset = 46\n\tlet size = 0\n\tconst res1 = findChunk(view, 'pHYs')\n\tif (res1) {\n\t\toffset = res1.start\n\t\tsize = res1.size\n\t}\n\n\tconst res2 = findChunk(view, 'IDAT')\n\tif (res2) {\n\t\toffset = res2.start\n\t\tsize = 0\n\t}\n\n\tconst pHYsData = new ArrayBuffer(21)\n\tconst pHYsDataView = new DataView(pHYsData)\n\n\tpHYsDataView.setUint32(0, 9)\n\n\tpHYsDataView.setUint8(4, 'p'.charCodeAt(0))\n\tpHYsDataView.setUint8(5, 'H'.charCodeAt(0))\n\tpHYsDataView.setUint8(6, 'Y'.charCodeAt(0))\n\tpHYsDataView.setUint8(7, 's'.charCodeAt(0))\n\n\tconst DPI_96 = 2835.5\n\n\tpHYsDataView.setInt32(8, DPI_96 * dpr)\n\tpHYsDataView.setInt32(12, DPI_96 * dpr)\n\tpHYsDataView.setInt8(16, 1)\n\n\tconst crcBit = new Uint8Array(pHYsData.slice(4, 17))\n\tpHYsDataView.setInt32(17, crc(crcBit))\n\n\tconst startBuf = view.buffer.slice(0, offset)\n\tconst endBuf = view.buffer.slice(offset + size)\n\n\treturn new Blob([startBuf, pHYsData, endBuf], options)\n}\n"],
  "mappings": "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",
  "names": ["crc32"]
}
