import {
  YPartyKitStorage
} from "./chunk-ARTVM53B.mjs";

// src/index.ts
import * as Y from "yjs";
import * as syncProtocol from "y-protocols/sync";
import * as awarenessProtocol from "y-protocols/awareness";
import * as encoding from "lib0/encoding";
import * as decoding from "lib0/decoding";
import debounce from "lodash.debounce";
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}
var wsReadyStateConnecting = 0;
var wsReadyStateOpen = 1;
var docs = /* @__PURE__ */ new Map();
var messageSync = 0;
var messageAwareness = 1;
function updateHandler(update, origin, doc) {
  const encoder = encoding.createEncoder();
  encoding.writeVarUint(encoder, messageSync);
  syncProtocol.writeUpdate(encoder, update);
  const message = encoding.toUint8Array(encoder);
  doc.conns.forEach((_, conn) => send(doc, conn, message));
}
var WSSharedDoc = class extends Y.Doc {
  name;
  conns;
  awareness;
  storage;
  persist;
  constructor(room, options) {
    super({ gc: options.gc || false });
    this.name = room.id;
    this.persist = options.persist || false;
    if (options.persist) {
      this.storage = new YPartyKitStorage(room.storage);
    }
    this.conns = /* @__PURE__ */ new Map();
    this.awareness = new awarenessProtocol.Awareness(this);
    this.awareness.setLocalState(null);
    const awarenessChangeHandler = ({
      added,
      updated,
      removed
    }, conn) => {
      const changedClients = added.concat(updated, removed);
      if (conn !== null) {
        const connControlledIDs = (
          /** @type {Set<number>} */
          this.conns.get(conn)
        );
        if (connControlledIDs !== void 0) {
          added.forEach((clientID) => {
            connControlledIDs.add(clientID);
          });
          removed.forEach((clientID) => {
            connControlledIDs.delete(clientID);
          });
        }
      }
      const encoder = encoding.createEncoder();
      encoding.writeVarUint(encoder, messageAwareness);
      encoding.writeVarUint8Array(
        encoder,
        awarenessProtocol.encodeAwarenessUpdate(this.awareness, changedClients)
      );
      const buff = encoding.toUint8Array(encoder);
      this.conns.forEach((_, c) => {
        send(this, c, buff);
      });
    };
    this.awareness.on("update", awarenessChangeHandler);
    this.on("update", updateHandler);
  }
  async bindState() {
    assert(this.storage, "Storage not set");
    const persistedYdoc = await this.storage.getYDoc(this.name);
    const newUpdates = Y.encodeStateAsUpdate(this);
    await this.storage.storeUpdate(this.name, newUpdates);
    Y.applyUpdate(this, Y.encodeStateAsUpdate(persistedYdoc));
    this.on("update", (update) => {
      assert(this.storage, "Storage not set");
      this.storage.storeUpdate(this.name, update).catch((e) => {
        console.error("Error storing update", e);
      });
    });
  }
  async writeState() {
    assert(this.storage, "Storage not set");
    const newUpdates = Y.encodeStateAsUpdate(this);
    await this.storage.storeUpdate(this.name, newUpdates);
  }
};
var CALLBACK_DEFAULTS = {
  debounceWait: 2e3,
  debounceMaxWait: 1e4,
  timeout: 5e3,
  objects: {}
};
function getContent(objName, objType, doc) {
  switch (objType) {
    case "Array":
      return doc.getArray(objName);
    case "Map":
      return doc.getMap(objName);
    case "Text":
      return doc.getText(objName);
    case "XmlFragment":
      return doc.getXmlFragment(objName);
    case "XmlElement":
      return doc.getXmlElement(objName);
    default:
      return {};
  }
}
async function getYDoc(room, options) {
  let doc = docs.get(room.id);
  if (doc) {
    return doc;
  }
  doc = new WSSharedDoc(room, options);
  const { callback, load } = options;
  if (load) {
    const src = await load();
    const state = Y.encodeStateAsUpdate(src);
    Y.applyUpdate(doc, state);
  }
  doc.gc = options.gc || false;
  if (callback !== void 0) {
    doc.on(
      "update",
      debounce(
        (update, origin, doc2) => {
          const dataToSend = {
            room: doc2.name,
            data: {}
          };
          const callbackObjects = callback.objects || CALLBACK_DEFAULTS.objects;
          const sharedObjectList = Object.keys(callbackObjects);
          sharedObjectList.forEach((sharedObjectName) => {
            const sharedObjectType = callbackObjects[sharedObjectName];
            dataToSend.data[sharedObjectName] = {
              type: sharedObjectType,
              content: getContent(
                sharedObjectName,
                sharedObjectType,
                doc2
              ).toJSON()
            };
          });
          if (callback.url) {
            fetch(callback.url, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(dataToSend),
              signal: AbortSignal.timeout(
                callback.timeout || CALLBACK_DEFAULTS.timeout
              )
            }).catch((err) => {
              console.error("failed to persist", err);
            });
          }
          if (callback.handler) {
            callback.handler(doc2);
          }
        },
        callback.debounceWait || CALLBACK_DEFAULTS.debounceWait,
        {
          maxWait: callback.debounceMaxWait || CALLBACK_DEFAULTS.debounceMaxWait
        }
      )
    );
  }
  if (doc.persist) {
    await doc.bindState();
  }
  docs.set(room.id, doc);
  return doc;
}
function messageListener(conn, doc, message) {
  try {
    const encoder = encoding.createEncoder();
    const decoder = decoding.createDecoder(message);
    const messageType = decoding.readVarUint(decoder);
    switch (messageType) {
      case messageSync:
        encoding.writeVarUint(encoder, messageSync);
        syncProtocol.readSyncMessage(decoder, encoder, doc, conn);
        if (encoding.length(encoder) > 1) {
          send(doc, conn, encoding.toUint8Array(encoder));
        }
        break;
      case messageAwareness: {
        awarenessProtocol.applyAwarenessUpdate(
          doc.awareness,
          decoding.readVarUint8Array(decoder),
          conn
        );
        break;
      }
    }
  } catch (err) {
    console.error(err);
    doc.emit("error", [err]);
  }
}
function closeConn(doc, conn) {
  if (doc.conns.has(conn)) {
    const controlledIds = doc.conns.get(conn);
    doc.conns.delete(conn);
    awarenessProtocol.removeAwarenessStates(
      doc.awareness,
      Array.from(controlledIds),
      null
    );
    if (doc.conns.size === 0 && doc.persist) {
      doc.writeState().then(
        () => {
          doc.destroy();
        },
        (err) => {
          doc.emit("error", [err]);
        }
      );
      docs.delete(doc.name);
    }
  }
  try {
    conn.close();
  } catch (e) {
    console.warn("failed to close connection", e);
  }
}
function send(doc, conn, m) {
  if (conn.readyState !== void 0 && conn.readyState !== wsReadyStateConnecting && conn.readyState !== wsReadyStateOpen) {
    closeConn(doc, conn);
  }
  try {
    conn.send(
      m
      // /** @param {any} err */ (err) => {
      //   err != null && closeConn(doc, conn);
      // }
    );
  } catch (e) {
    closeConn(doc, conn);
  }
}
var pingTimeout = 3e4;
async function onConnect(conn, room, options = {}) {
  const doc = await getYDoc(room, options);
  doc.conns.set(conn, /* @__PURE__ */ new Set());
  conn.addEventListener("message", (message) => {
    if (typeof message.data !== "string") {
      return messageListener(conn, doc, new Uint8Array(message.data));
    } else {
    }
  });
  let pongReceived = true;
  const pingInterval = setInterval(() => {
    if (!pongReceived) {
      if (doc.conns.has(conn)) {
        closeConn(doc, conn);
      }
      clearInterval(pingInterval);
    } else if (doc.conns.has(conn)) {
      pongReceived = false;
      try {
        conn.send("ping");
      } catch (e) {
        closeConn(doc, conn);
        clearInterval(pingInterval);
      }
    }
  }, pingTimeout);
  conn.addEventListener("close", () => {
    closeConn(doc, conn);
    clearInterval(pingInterval);
  });
  conn.addEventListener("message", (message) => {
    if (message.data === "pong") {
      pongReceived = true;
    }
  });
  {
    const encoder = encoding.createEncoder();
    encoding.writeVarUint(encoder, messageSync);
    syncProtocol.writeSyncStep1(encoder, doc);
    send(doc, conn, encoding.toUint8Array(encoder));
    const awarenessStates = doc.awareness.getStates();
    if (awarenessStates.size > 0) {
      const encoder2 = encoding.createEncoder();
      encoding.writeVarUint(encoder2, messageAwareness);
      encoding.writeVarUint8Array(
        encoder2,
        awarenessProtocol.encodeAwarenessUpdate(
          doc.awareness,
          Array.from(awarenessStates.keys())
        )
      );
      send(doc, conn, encoding.toUint8Array(encoder2));
    }
  }
}
export {
  onConnect
};
