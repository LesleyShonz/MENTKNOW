{
  "version": 3,
  "sources": ["../../../../../src/lib/editor/shapes/shared/useEditableText.ts"],
  "sourcesContent": ["/* eslint-disable no-inner-declarations */\nimport { TLShape, TLUnknownShape } from '@tldraw/tlschema'\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport { useValue } from 'signia-react'\nimport { useEditor } from '../../../hooks/useEditor'\nimport { preventDefault, stopEventPropagation } from '../../../utils/dom'\nimport { INDENT, TextHelpers } from '../text/TextHelpers'\n\nexport function useEditableText<T extends Extract<TLShape, { props: { text: string } }>>(\n\tid: T['id'],\n\ttype: T['type'],\n\ttext: string\n) {\n\tconst editor = useEditor()\n\n\tconst rInput = useRef<HTMLTextAreaElement>(null)\n\n\tconst isEditing = useValue('isEditing', () => editor.pageState.editingId === id, [editor, id])\n\n\tconst rSkipSelectOnFocus = useRef(false)\n\tconst rSelectionRanges = useRef<Range[] | null>()\n\n\tconst isEditableFromHover = useValue(\n\t\t'is editable hovering',\n\t\t() => {\n\t\t\tif (type === 'text' && editor.isIn('text') && editor.hoveredId === id) {\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tif (editor.isIn('select.editing_shape')) {\n\t\t\t\tconst { editingShape } = editor\n\t\t\t\tif (!editingShape) return false\n\t\t\t\treturn (\n\t\t\t\t\t// The shape must be hovered\n\t\t\t\t\teditor.hoveredId === id &&\n\t\t\t\t\t// the editing shape must be the same type as this shape\n\t\t\t\t\teditingShape.type === type &&\n\t\t\t\t\t// and this shape must be capable of being editing in its current form\n\t\t\t\t\teditor.getShapeUtil(editingShape).canEdit(editingShape)\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treturn false\n\t\t},\n\t\t[type, id]\n\t)\n\n\t// When the label receives focus, set the value to the most\n\t// recent text value and select all of the text\n\tconst handleFocus = useCallback(() => {\n\t\tif (isEditableFromHover) return\n\n\t\trequestAnimationFrame(() => {\n\t\t\tconst elm = rInput.current\n\n\t\t\tif (!elm) return\n\n\t\t\tconst shape = editor.getShapeById<TLShape & { props: { text: string } }>(id)\n\t\t\tif (shape) {\n\t\t\t\telm.value = shape.props.text\n\t\t\t\tif (elm.value.length && !rSkipSelectOnFocus.current) {\n\t\t\t\t\telm.select()\n\t\t\t\t}\n\n\t\t\t\trSkipSelectOnFocus.current = false\n\t\t\t}\n\t\t})\n\t}, [editor, id, isEditableFromHover])\n\n\t// When the label blurs, deselect all of the text and complete.\n\t// This makes it so that the canvas does not have to be focused\n\t// in order to exit the editing state and complete the editing state\n\tconst handleBlur = useCallback(() => {\n\t\tconst ranges = rSelectionRanges.current\n\n\t\trequestAnimationFrame(() => {\n\t\t\tconst elm = rInput.current\n\t\t\tif (editor.isIn('select.editing_shape') && elm) {\n\t\t\t\tif (ranges) {\n\t\t\t\t\tif (!ranges.length) {\n\t\t\t\t\t\t// If we don't have any ranges, restore selection\n\t\t\t\t\t\t// and select all of the text\n\t\t\t\t\t\telm.focus()\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, skip the select-all-on-focus behavior\n\t\t\t\t\t\t// and restore the selection\n\t\t\t\t\t\trSkipSelectOnFocus.current = true\n\t\t\t\t\t\telm.focus()\n\t\t\t\t\t\tconst selection = window.getSelection()\n\t\t\t\t\t\tif (selection) {\n\t\t\t\t\t\t\tranges.forEach((range) => selection.addRange(range))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\telm.focus()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twindow.getSelection()?.removeAllRanges()\n\t\t\t\teditor.complete()\n\t\t\t}\n\t\t})\n\t}, [editor])\n\n\t// When the user presses ctrl / meta enter, complete the editing state.\n\t// When the user presses tab, indent or unindent the text.\n\tconst handleKeyDown = useCallback(\n\t\t(e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n\t\t\tif (e.ctrlKey || e.metaKey) stopEventPropagation(e)\n\n\t\t\tswitch (e.key) {\n\t\t\t\tcase 'Enter': {\n\t\t\t\t\tif (e.ctrlKey || e.metaKey) {\n\t\t\t\t\t\teditor.complete()\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'Tab': {\n\t\t\t\t\tpreventDefault(e)\n\t\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\t\tTextHelpers.unindent(e.currentTarget)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTextHelpers.indent(e.currentTarget)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[editor]\n\t)\n\n\t// When the text changes, update the text value.\n\tconst handleChange = useCallback(\n\t\t(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\t\tlet text = TextHelpers.normalizeText(e.currentTarget.value)\n\n\t\t\t// ------- Bug fix ------------\n\t\t\t// Replace tabs with spaces when pasting\n\t\t\tconst untabbedText = text.replace(/\\t/g, INDENT)\n\t\t\tif (untabbedText !== text) {\n\t\t\t\tconst selectionStart = e.currentTarget.selectionStart\n\t\t\t\te.currentTarget.value = untabbedText\n\t\t\t\te.currentTarget.selectionStart = selectionStart + (untabbedText.length - text.length)\n\t\t\t\te.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text.length)\n\t\t\t\ttext = untabbedText\n\t\t\t}\n\t\t\t// ----------------------------\n\n\t\t\teditor.updateShapes<TLUnknownShape & { props: { text: string } }>([\n\t\t\t\t{ id, type, props: { text } },\n\t\t\t])\n\t\t},\n\t\t[editor, id, type]\n\t)\n\n\tconst isEmpty = text.trim().length === 0\n\n\tuseEffect(() => {\n\t\tconst elm = rInput.current\n\t\tif (elm) {\n\t\t\tfunction updateSelection() {\n\t\t\t\tconst selection = window.getSelection?.()\n\t\t\t\tif (selection && selection.type !== 'None') {\n\t\t\t\t\tconst ranges: Range[] = []\n\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tfor (let i = 0; i < selection.rangeCount; i++) {\n\t\t\t\t\t\t\tranges.push(selection.getRangeAt?.(i))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\trSelectionRanges.current = ranges\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdocument.addEventListener('selectionchange', updateSelection)\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener('selectionchange', updateSelection)\n\t\t\t}\n\t\t}\n\t})\n\n\treturn {\n\t\trInput,\n\t\tisEditing,\n\t\tisEditableFromHover,\n\t\thandleFocus,\n\t\thandleBlur,\n\t\thandleKeyDown,\n\t\thandleChange,\n\t\tisEmpty,\n\t}\n}\n"],
  "mappings": "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",
  "names": ["text", "updateSelection"]
}
