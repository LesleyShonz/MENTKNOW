{
  "version": 3,
  "sources": ["../../src/records/TLPageState.ts"],
  "sourcesContent": ["import { BaseRecord, createRecordType, defineMigrations, RecordId } from '@tldraw/store'\nimport { T } from '@tldraw/validate'\nimport { idValidator } from '../misc/id-validator'\nimport { shapeIdValidator } from '../shapes/TLBaseShape'\nimport { CameraRecordType } from './TLCamera'\nimport { TLINSTANCE_ID } from './TLInstance'\nimport { pageIdValidator, TLPage } from './TLPage'\nimport { TLShapeId } from './TLShape'\n\n/**\n * TLInstancePageState\n *\n * State that is unique to a particular page of the document in a particular browser tab\n *\n * @public\n */\nexport interface TLInstancePageState\n\textends BaseRecord<'instance_page_state', TLInstancePageStateId> {\n\tpageId: RecordId<TLPage>\n\tselectedIds: TLShapeId[]\n\thintingIds: TLShapeId[]\n\terasingIds: TLShapeId[]\n\thoveredId: TLShapeId | null\n\teditingId: TLShapeId | null\n\tcroppingId: TLShapeId | null\n\tfocusLayerId: TLShapeId | null\n}\n\n/** @internal */\nexport const instancePageStateValidator: T.Validator<TLInstancePageState> = T.model(\n\t'instance_page_state',\n\tT.object({\n\t\ttypeName: T.literal('instance_page_state'),\n\t\tid: idValidator<TLInstancePageStateId>('instance_page_state'),\n\t\tpageId: pageIdValidator,\n\t\tselectedIds: T.arrayOf(shapeIdValidator),\n\t\thintingIds: T.arrayOf(shapeIdValidator),\n\t\terasingIds: T.arrayOf(shapeIdValidator),\n\t\thoveredId: shapeIdValidator.nullable(),\n\t\teditingId: shapeIdValidator.nullable(),\n\t\tcroppingId: shapeIdValidator.nullable(),\n\t\tfocusLayerId: shapeIdValidator.nullable(),\n\t})\n)\n\nconst Versions = {\n\tAddCroppingId: 1,\n\tRemoveInstanceIdAndCameraId: 2,\n} as const\n\n/** @internal */\nexport { Versions as instancePageStateVersions }\n\n/** @public */\nexport const instancePageStateMigrations = defineMigrations({\n\tcurrentVersion: Versions.RemoveInstanceIdAndCameraId,\n\tmigrators: {\n\t\t[Versions.AddCroppingId]: {\n\t\t\tup(instance) {\n\t\t\t\treturn { ...instance, croppingId: null }\n\t\t\t},\n\t\t\tdown({ croppingId: _croppingId, ...instance }) {\n\t\t\t\treturn instance\n\t\t\t},\n\t\t},\n\t\t[Versions.RemoveInstanceIdAndCameraId]: {\n\t\t\tup({ instanceId: _, cameraId: __, ...instance }) {\n\t\t\t\treturn instance\n\t\t\t},\n\t\t\tdown(instance) {\n\t\t\t\t// this should never be called since we bump the schema version\n\t\t\t\treturn {\n\t\t\t\t\t...instance,\n\t\t\t\t\tinstanceId: TLINSTANCE_ID,\n\t\t\t\t\tcameraId: CameraRecordType.createId('void'),\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\n\n/** @public */\nexport const InstancePageStateRecordType = createRecordType<TLInstancePageState>(\n\t'instance_page_state',\n\t{\n\t\tmigrations: instancePageStateMigrations,\n\t\tvalidator: instancePageStateValidator,\n\t\tscope: 'session',\n\t}\n).withDefaultProperties(\n\t(): Omit<TLInstancePageState, 'id' | 'typeName' | 'pageId'> => ({\n\t\teditingId: null,\n\t\tcroppingId: null,\n\t\tselectedIds: [],\n\t\thoveredId: null,\n\t\terasingIds: [],\n\t\thintingIds: [],\n\t\tfocusLayerId: null,\n\t})\n)\n\n/** @public */\nexport type TLInstancePageStateId = RecordId<TLInstancePageState>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyE;AACzE,sBAAkB;AAClB,0BAA4B;AAC5B,yBAAiC;AACjC,sBAAiC;AACjC,wBAA8B;AAC9B,oBAAwC;AAuBjC,MAAM,6BAA+D,kBAAE;AAAA,EAC7E;AAAA,EACA,kBAAE,OAAO;AAAA,IACR,UAAU,kBAAE,QAAQ,qBAAqB;AAAA,IACzC,QAAI,iCAAmC,qBAAqB;AAAA,IAC5D,QAAQ;AAAA,IACR,aAAa,kBAAE,QAAQ,mCAAgB;AAAA,IACvC,YAAY,kBAAE,QAAQ,mCAAgB;AAAA,IACtC,YAAY,kBAAE,QAAQ,mCAAgB;AAAA,IACtC,WAAW,oCAAiB,SAAS;AAAA,IACrC,WAAW,oCAAiB,SAAS;AAAA,IACrC,YAAY,oCAAiB,SAAS;AAAA,IACtC,cAAc,oCAAiB,SAAS;AAAA,EACzC,CAAC;AACF;AAEA,MAAM,WAAW;AAAA,EAChB,eAAe;AAAA,EACf,6BAA6B;AAC9B;AAMO,MAAM,kCAA8B,+BAAiB;AAAA,EAC3D,gBAAgB,SAAS;AAAA,EACzB,WAAW;AAAA,IACV,CAAC,SAAS,aAAa,GAAG;AAAA,MACzB,GAAG,UAAU;AACZ,eAAO,EAAE,GAAG,UAAU,YAAY,KAAK;AAAA,MACxC;AAAA,MACA,KAAK,EAAE,YAAY,aAAa,GAAG,SAAS,GAAG;AAC9C,eAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,CAAC,SAAS,2BAA2B,GAAG;AAAA,MACvC,GAAG,EAAE,YAAY,GAAG,UAAU,IAAI,GAAG,SAAS,GAAG;AAChD,eAAO;AAAA,MACR;AAAA,MACA,KAAK,UAAU;AAEd,eAAO;AAAA,UACN,GAAG;AAAA,UACH,YAAY;AAAA,UACZ,UAAU,iCAAiB,SAAS,MAAM;AAAA,QAC3C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;AAGM,MAAM,kCAA8B;AAAA,EAC1C;AAAA,EACA;AAAA,IACC,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,OAAO;AAAA,EACR;AACD,EAAE;AAAA,EACD,OAAgE;AAAA,IAC/D,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,aAAa,CAAC;AAAA,IACd,WAAW;AAAA,IACX,YAAY,CAAC;AAAA,IACb,YAAY,CAAC;AAAA,IACb,cAAc;AAAA,EACf;AACD;",
  "names": []
}
