{"ast":null,"code":"import { T } from \"@tldraw/validate\";\nvar TL_HANDLE_TYPES = /* @__PURE__ */new Set([\"vertex\", \"virtual\", \"create\"]);\nvar handleValidator = T.object({\n  id: T.string,\n  type: T.setEnum(TL_HANDLE_TYPES),\n  canBind: T.boolean.optional(),\n  index: T.string,\n  x: T.number,\n  y: T.number\n});\nexport { TL_HANDLE_TYPES, handleValidator };","map":{"version":3,"names":["T","TL_HANDLE_TYPES","Set","handleValidator","object","id","string","type","setEnum","canBind","boolean","optional","index","x","number","y"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/misc/TLHandle.ts"],"sourcesContent":["import { T } from '@tldraw/validate'\nimport { SetValue } from '../util-types'\n\n/**\n * The handle types used by tldraw's default shapes.\n *\n * @public */\nexport const TL_HANDLE_TYPES = new Set(['vertex', 'virtual', 'create'] as const)\n\n/**\n * A type for the handle types used by tldraw's default shapes.\n *\n * @public */\nexport type TLHandleType = SetValue<typeof TL_HANDLE_TYPES>\n\n/**\n * A base interface for a shape's handles.\n *\n * @public\n */\nexport interface TLHandle {\n\t/** A unique identifier for the handle. */\n\tid: string\n\ttype: TLHandleType\n\tcanBind?: boolean\n\tindex: string\n\tx: number\n\ty: number\n}\n\n/** @internal */\nexport const handleValidator: T.Validator<TLHandle> = T.object({\n\tid: T.string,\n\ttype: T.setEnum(TL_HANDLE_TYPES),\n\tcanBind: T.boolean.optional(),\n\tindex: T.string,\n\tx: T.number,\n\ty: T.number,\n})\n"],"mappings":"AAAA,SAASA,CAAA,QAAS;AAOX,IAAMC,eAAA,GAAkB,mBAAIC,GAAA,CAAI,CAAC,UAAU,WAAW,QAAQ,CAAU;AAwBxE,IAAMC,eAAA,GAAyCH,CAAA,CAAEI,MAAA,CAAO;EAC9DC,EAAA,EAAIL,CAAA,CAAEM,MAAA;EACNC,IAAA,EAAMP,CAAA,CAAEQ,OAAA,CAAQP,eAAe;EAC/BQ,OAAA,EAAST,CAAA,CAAEU,OAAA,CAAQC,QAAA,CAAS;EAC5BC,KAAA,EAAOZ,CAAA,CAAEM,MAAA;EACTO,CAAA,EAAGb,CAAA,CAAEc,MAAA;EACLC,CAAA,EAAGf,CAAA,CAAEc;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}