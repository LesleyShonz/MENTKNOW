"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Idle_exports = {};
__export(Idle_exports, {
  Idle: () => Idle
});
module.exports = __toCommonJS(Idle_exports);
var import_StateNode = require("../../../tools/StateNode");
var import_GeoShapeUtil = require("../../geo/GeoShapeUtil");
var import_TextShapeUtil = require("../TextShapeUtil");
class Idle extends import_StateNode.StateNode {
  static id = "idle";
  onPointerEnter = (info) => {
    switch (info.target) {
      case "canvas": {
        break;
      }
      case "shape": {
        const { selectedIds, focusLayerId } = this.editor;
        const hoveringShape = this.editor.getOutermostSelectableShape(
          info.shape,
          (parent) => !selectedIds.includes(parent.id)
        );
        if (hoveringShape.id !== focusLayerId) {
          if (this.editor.isShapeOfType(hoveringShape, import_TextShapeUtil.TextShapeUtil)) {
            this.editor.setHoveredId(hoveringShape.id);
          }
        }
        break;
      }
    }
  };
  onPointerLeave = (info) => {
    switch (info.target) {
      case "shape": {
        this.editor.setHoveredId(null);
        break;
      }
    }
  };
  onPointerDown = (info) => {
    const { hoveredId } = this.editor;
    if (hoveredId) {
      const shape = this.editor.getShapeById(hoveredId);
      if (this.editor.isShapeOfType(shape, import_TextShapeUtil.TextShapeUtil)) {
        requestAnimationFrame(() => {
          this.editor.setSelectedIds([shape.id]);
          this.editor.setEditingId(shape.id);
          this.editor.setSelectedTool("select.editing_shape", {
            ...info,
            target: "shape",
            shape
          });
        });
        return;
      }
    }
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross" });
  };
  onKeyDown = (info) => {
    if (info.key === "Enter") {
      const shape = this.editor.selectedShapes[0];
      if (shape && this.editor.isShapeOfType(shape, import_GeoShapeUtil.GeoShapeUtil)) {
        this.editor.setSelectedTool("select");
        this.editor.setEditingId(shape.id);
        this.editor.root.current.value.transition("editing_shape", {
          ...info,
          target: "shape",
          shape
        });
      }
    }
  };
  onCancel = () => {
    this.editor.setSelectedTool("select");
  };
}
//# sourceMappingURL=Idle.js.map
