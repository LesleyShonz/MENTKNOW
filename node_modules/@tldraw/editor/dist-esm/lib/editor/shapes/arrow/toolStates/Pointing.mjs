import { createShapeId } from "@tldraw/tlschema";
import { ArrowShapeUtil } from "../../../shapes/arrow/ArrowShapeUtil.mjs";
import { StateNode } from "../../../tools/StateNode.mjs";
class Pointing extends StateNode {
  static id = "pointing";
  shape;
  preciseTimeout = -1;
  didTimeout = false;
  startPreciseTimeout() {
    this.preciseTimeout = window.setTimeout(() => {
      if (!this.isActive)
        return;
      if (!this.shape)
        return;
      this.didTimeout = true;
    }, 300);
  }
  clearPreciseTimeout() {
    clearTimeout(this.preciseTimeout);
  }
  onEnter = () => {
    const {
      inputs: { currentPagePoint }
    } = this.editor;
    this.didTimeout = false;
    this.editor.mark("creating");
    const id = createShapeId();
    this.editor.createShapes([
      {
        id,
        type: "arrow",
        x: currentPagePoint.x,
        y: currentPagePoint.y
      }
    ]);
    const util = this.editor.getShapeUtil(ArrowShapeUtil);
    const shape = this.editor.getShapeById(id);
    if (!shape)
      return;
    const handles = util.handles?.(shape);
    if (handles) {
      const point = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      const change = util.onHandleChange?.(shape, {
        handle: { ...handles[0], x: point.x, y: point.y },
        isPrecise: true
      });
      if (change) {
        const startTerminal = change.props?.start;
        if (startTerminal?.type === "binding") {
          this.editor.setHintingIds([startTerminal.boundShapeId]);
        }
        this.editor.updateShapes([change], true);
      }
    }
    this.editor.select(id);
    this.shape = this.editor.getShapeById(id);
    this.startPreciseTimeout();
  };
  onExit = () => {
    this.clearPreciseTimeout();
  };
  onPointerMove = () => {
    if (!this.shape)
      return;
    if (this.editor.inputs.isDragging) {
      const util = this.editor.getShapeUtil(this.shape);
      const handles = util.handles?.(this.shape);
      if (!handles) {
        this.editor.bailToMark("creating");
        throw Error("No handles found");
      }
      if (!this.didTimeout) {
        const util2 = this.editor.getShapeUtil(ArrowShapeUtil);
        const shape = this.editor.getShapeById(this.shape.id);
        if (!shape)
          return;
        const handles2 = util2.handles(shape);
        if (handles2) {
          const { x, y } = this.editor.getPointInShapeSpace(
            shape,
            this.editor.inputs.originPagePoint
          );
          const change = util2.onHandleChange?.(shape, {
            handle: {
              ...handles2[0],
              x,
              y
            },
            isPrecise: false
          });
          if (change) {
            this.editor.updateShapes([change], true);
          }
        }
      }
      this.editor.setSelectedTool("select.dragging_handle", {
        shape: this.shape,
        handle: handles.find((h) => h.id === "end"),
        isCreating: true,
        onInteractionEnd: "arrow"
      });
    }
  };
  onPointerUp = () => {
    this.cancel();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    this.editor.bailToMark("creating");
    this.editor.setHintingIds([]);
    this.parent.transition("idle", {});
  }
}
export {
  Pointing
};
//# sourceMappingURL=Pointing.mjs.map
