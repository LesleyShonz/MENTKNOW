"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/storage.ts
var storage_exports = {};
__export(storage_exports, {
  YPartyKitStorage: () => YPartyKitStorage,
  clearRange: () => clearRange,
  getLevelBulkData: () => getLevelBulkData,
  levelGet: () => levelGet,
  levelPut: () => levelPut
});
module.exports = __toCommonJS(storage_exports);
var Y = __toESM(require("yjs"));
var encoding = __toESM(require("lib0/encoding"));
var decoding = __toESM(require("lib0/decoding"));
var PREFERRED_TRIM_SIZE = 300;
var BINARY_BITS_32 = 4294967295;
var keyEncoding = {
  encode(arr) {
    const resultArr = [];
    for (const item of arr) {
      resultArr.push(
        // TODO: This is a bit hacky, but it works
        typeof item === "string" ? `"${item}"` : `${item}`.padStart(9, "0")
      );
    }
    return resultArr.join("#");
  },
  decode(str) {
    return str.split("#").map(
      (el) => el.startsWith('"') ? JSON.parse(el) : parseInt(el, 10)
    );
  }
};
async function levelGet(db, key) {
  const prefix = keyEncoding.encode(key);
  const res = await db.list({
    start: prefix,
    end: `${prefix}#zzzzz`
  });
  if (res.size === 0) {
    return null;
  }
  const finalArrayLength = Array.from(res.values()).reduce(
    (acc, val) => acc + val.length,
    0
  );
  const finalArray = new Uint8Array(finalArrayLength);
  let offset = 0;
  for (const val of res.values()) {
    finalArray.set(val, offset);
    offset += val.length;
  }
  return finalArray;
}
async function levelPut(db, key, val) {
  const chunks = [];
  for (let i = 0; i < val.length; i += 128 * 1024) {
    chunks.push(val.slice(i, i + 128 * 1024));
  }
  const keyPrefix = keyEncoding.encode(key);
  for (let i = 0; i < chunks.length; i++) {
    await db.put(`${keyPrefix}#${i}`, chunks[i]);
  }
}
function groupBy(arr, fn) {
  const map = /* @__PURE__ */ new Map();
  for (const el of arr) {
    const key = fn(el);
    if (!map.has(key)) {
      map.set(key, []);
    }
    map.get(key).push(el);
  }
  return map;
}
async function getLevelBulkData(db, opts) {
  const res = await db.list({
    start: keyEncoding.encode(opts.gte),
    end: keyEncoding.encode(opts.lt),
    reverse: opts.reverse,
    limit: opts.limit
  });
  const grouped = groupBy(
    Array.from(res.entries()),
    ([key]) => key.split("#").slice(0, -1).join("#")
  );
  const result = [];
  for (const [key, values] of grouped.entries()) {
    const finalArrayLength = values.reduce(
      (acc, val) => acc + val[1].length,
      0
    );
    const finalArray = new Uint8Array(finalArrayLength);
    let offset = 0;
    for (const [, val] of values) {
      finalArray.set(val, offset);
      offset += val.length;
    }
    result.push({
      key: keyEncoding.decode(key),
      value: finalArray
    });
  }
  return result;
}
async function getLevelUpdates(db, docName, opts = {
  values: true,
  keys: false
}) {
  return getLevelBulkData(db, {
    gte: createDocumentUpdateKey(docName, 0),
    lt: createDocumentUpdateKey(docName, BINARY_BITS_32),
    ...opts
  });
}
async function getCurrentUpdateClock(db, docName) {
  return getLevelUpdates(db, docName, {
    keys: true,
    values: false,
    reverse: true,
    limit: 1
  }).then((datums) => {
    if (datums.length === 0) {
      return -1;
    } else {
      const ret = datums[0].key[3];
      if (typeof ret !== "number") {
        throw new Error("Expected number, got " + typeof ret);
      }
      return ret;
    }
  });
}
async function clearRange(db, gte, lt) {
  const datums = await getLevelBulkData(db, {
    values: false,
    keys: true,
    gte,
    lt
  });
  const arr = [];
  for (const [index, datum] of datums.entries()) {
    arr.push(keyEncoding.encode(datum.key));
    if (arr.length === 128 || index === datums.length - 1) {
      await db.delete(arr);
      arr.length = 0;
    }
  }
}
async function clearUpdatesRange(db, docName, from, to) {
  return clearRange(
    db,
    createDocumentUpdateKey(docName, from),
    createDocumentUpdateKey(docName, to)
  );
}
function createDocumentUpdateKey(docName, clock) {
  return ["v1", docName, "update", clock];
}
function createDocumentStateVectorKey(docName) {
  return ["v1_sv", docName];
}
function mergeUpdates(updates) {
  const ydoc = new Y.Doc();
  ydoc.transact(() => {
    for (let i = 0; i < updates.length; i++) {
      Y.applyUpdate(ydoc, updates[i]);
    }
  });
  return { update: Y.encodeStateAsUpdate(ydoc), sv: Y.encodeStateVector(ydoc) };
}
async function writeStateVector(db, docName, sv, clock) {
  const encoder = encoding.createEncoder();
  encoding.writeVarUint(encoder, clock);
  encoding.writeVarUint8Array(encoder, sv);
  await levelPut(
    db,
    createDocumentStateVectorKey(docName),
    encoding.toUint8Array(encoder)
  );
}
function decodeLeveldbStateVector(buf) {
  const decoder = decoding.createDecoder(buf);
  const clock = decoding.readVarUint(decoder);
  const sv = decoding.readVarUint8Array(decoder);
  return { sv, clock };
}
async function readStateVector(db, docName) {
  const buf = await levelGet(db, createDocumentStateVectorKey(docName));
  if (buf === null) {
    return { sv: null, clock: -1 };
  }
  return decodeLeveldbStateVector(buf);
}
async function flushDocument(db, docName, stateAsUpdate, stateVector) {
  const clock = await storeUpdate(db, docName, stateAsUpdate);
  await writeStateVector(db, docName, stateVector, clock);
  await clearUpdatesRange(db, docName, 0, clock);
  return clock;
}
async function storeUpdate(db, docName, update) {
  const clock = await getCurrentUpdateClock(db, docName);
  if (clock === -1) {
    const ydoc = new Y.Doc();
    Y.applyUpdate(ydoc, update);
    const sv = Y.encodeStateVector(ydoc);
    await writeStateVector(db, docName, sv, 0);
  }
  await levelPut(db, createDocumentUpdateKey(docName, clock + 1), update);
  return clock + 1;
}
var YPartyKitStorage = class {
  db;
  tr;
  _transact(fn) {
    throw Error("implement _transact");
    return fn(this.db);
  }
  constructor(storage) {
    const db = this.db = storage;
    this.tr = Promise.resolve();
    this._transact = (f) => {
      const currTr = this.tr;
      this.tr = (async () => {
        await currTr;
        let res = (
          /** @type {any} */
          null
        );
        try {
          res = await f(db);
        } catch (err) {
          console.warn("Error during y-partykit-storage transaction", err);
        }
        return res;
      })();
      return this.tr;
    };
  }
  async flushDocument(docName) {
    return this._transact(async (db) => {
      const updates = await getLevelUpdates(db, docName);
      const { update, sv } = mergeUpdates(updates.map((u) => u.value));
      await flushDocument(db, docName, update, sv);
    });
  }
  async getYDoc(docName) {
    return this._transact(async (db) => {
      const updates = await getLevelUpdates(db, docName);
      const ydoc = new Y.Doc();
      ydoc.transact(() => {
        for (let i = 0; i < updates.length; i++) {
          Y.applyUpdate(ydoc, updates[i].value);
        }
      });
      if (updates.length > PREFERRED_TRIM_SIZE) {
        await flushDocument(
          db,
          docName,
          Y.encodeStateAsUpdate(ydoc),
          Y.encodeStateVector(ydoc)
        );
      }
      return ydoc;
    });
  }
  async getStateVector(docName) {
    return this._transact(async (db) => {
      const { clock, sv } = await readStateVector(db, docName);
      let curClock = -1;
      if (sv !== null) {
        curClock = await getCurrentUpdateClock(db, docName);
      }
      if (sv !== null && clock === curClock) {
        return sv;
      } else {
        const updates = await getLevelUpdates(db, docName);
        const { update, sv: sv2 } = mergeUpdates(updates.map((u) => u.value));
        await flushDocument(db, docName, update, sv2);
        return sv2;
      }
    });
  }
  async storeUpdate(docName, update) {
    return this._transact((db) => storeUpdate(db, docName, update));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  YPartyKitStorage,
  clearRange,
  getLevelBulkData,
  levelGet,
  levelPut
});
