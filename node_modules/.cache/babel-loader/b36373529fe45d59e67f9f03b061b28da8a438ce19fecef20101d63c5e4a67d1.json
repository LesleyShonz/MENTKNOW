{"ast":null,"code":"import { T } from \"@tldraw/validate\";\nimport { opacityValidator } from \"../misc/TLOpacity.mjs\";\nimport { idValidator } from \"../misc/id-validator.mjs\";\nvar parentIdValidator = T.string.refine(function (id) {\n  if (!id.startsWith(\"page:\") && !id.startsWith(\"shape:\")) {\n    throw new Error('Parent ID must start with \"page:\" or \"shape:\"');\n  }\n  return id;\n});\nvar shapeIdValidator = idValidator(\"shape\");\nfunction createShapeValidator(type, props) {\n  return T.object({\n    id: shapeIdValidator,\n    typeName: T.literal(\"shape\"),\n    x: T.number,\n    y: T.number,\n    rotation: T.number,\n    index: T.string,\n    parentId: parentIdValidator,\n    type: T.literal(type),\n    isLocked: T.boolean,\n    opacity: opacityValidator,\n    props: props ? T.object(props) : T.unknownObject\n  });\n}\nexport { createShapeValidator, parentIdValidator, shapeIdValidator };","map":{"version":3,"names":["T","opacityValidator","idValidator","parentIdValidator","string","refine","id","startsWith","Error","shapeIdValidator","createShapeValidator","type","props","object","typeName","literal","x","number","y","rotation","index","parentId","isLocked","boolean","opacity","unknownObject"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/shapes/TLBaseShape.ts"],"sourcesContent":["import { BaseRecord } from '@tldraw/store'\nimport { Expand } from '@tldraw/utils'\nimport { T } from '@tldraw/validate'\nimport { TLOpacityType, opacityValidator } from '../misc/TLOpacity'\nimport { idValidator } from '../misc/id-validator'\nimport { TLParentId, TLShapeId } from '../records/TLShape'\n\n/** @public */\nexport interface TLBaseShape<Type extends string, Props extends object>\n\textends BaseRecord<'shape', TLShapeId> {\n\ttype: Type\n\tx: number\n\ty: number\n\trotation: number\n\tindex: string\n\tparentId: TLParentId\n\tisLocked: boolean\n\topacity: TLOpacityType\n\tprops: Props\n}\n\n/** @public */\nexport const parentIdValidator = T.string.refine((id) => {\n\tif (!id.startsWith('page:') && !id.startsWith('shape:')) {\n\t\tthrow new Error('Parent ID must start with \"page:\" or \"shape:\"')\n\t}\n\treturn id as TLParentId\n})\n\n/** @public */\nexport const shapeIdValidator = idValidator<TLShapeId>('shape')\n\n/** @public */\nexport function createShapeValidator<Type extends string, Props extends object>(\n\ttype: Type,\n\tprops?: { [K in keyof Props]: T.Validatable<Props[K]> }\n) {\n\treturn T.object({\n\t\tid: shapeIdValidator,\n\t\ttypeName: T.literal('shape'),\n\t\tx: T.number,\n\t\ty: T.number,\n\t\trotation: T.number,\n\t\tindex: T.string,\n\t\tparentId: parentIdValidator,\n\t\ttype: T.literal(type),\n\t\tisLocked: T.boolean,\n\t\topacity: opacityValidator,\n\t\tprops: props ? T.object(props) : T.unknownObject,\n\t})\n}\n\n/** @public */\nexport type ShapeProps<Shape extends TLBaseShape<any, any>> = {\n\t[K in keyof Shape['props']]: T.Validatable<Shape['props'][K]>\n}\n\nexport type ShapePropsType<Config extends Record<string, T.Validatable<any>>> = Expand<{\n\t[K in keyof Config]: T.TypeOf<Config[K]>\n}>\n"],"mappings":"AAEA,SAASA,CAAA,QAAS;AAClB,SAAwBC,gBAAA,QAAwB;AAChD,SAASC,WAAA,QAAmB;AAkBrB,IAAMC,iBAAA,GAAoBH,CAAA,CAAEI,MAAA,CAAOC,MAAA,CAAO,UAACC,EAAA,EAAO;EACxD,IAAI,CAACA,EAAA,CAAGC,UAAA,CAAW,OAAO,KAAK,CAACD,EAAA,CAAGC,UAAA,CAAW,QAAQ,GAAG;IACxD,MAAM,IAAIC,KAAA,CAAM,+CAA+C;EAChE;EACA,OAAOF,EAAA;AACR,CAAC;AAGM,IAAMG,gBAAA,GAAmBP,WAAA,CAAuB,OAAO;AAGvD,SAASQ,qBACfC,IAAA,EACAC,KAAA,EACC;EACD,OAAOZ,CAAA,CAAEa,MAAA,CAAO;IACfP,EAAA,EAAIG,gBAAA;IACJK,QAAA,EAAUd,CAAA,CAAEe,OAAA,CAAQ,OAAO;IAC3BC,CAAA,EAAGhB,CAAA,CAAEiB,MAAA;IACLC,CAAA,EAAGlB,CAAA,CAAEiB,MAAA;IACLE,QAAA,EAAUnB,CAAA,CAAEiB,MAAA;IACZG,KAAA,EAAOpB,CAAA,CAAEI,MAAA;IACTiB,QAAA,EAAUlB,iBAAA;IACVQ,IAAA,EAAMX,CAAA,CAAEe,OAAA,CAAQJ,IAAI;IACpBW,QAAA,EAAUtB,CAAA,CAAEuB,OAAA;IACZC,OAAA,EAASvB,gBAAA;IACTW,KAAA,EAAOA,KAAA,GAAQZ,CAAA,CAAEa,MAAA,CAAOD,KAAK,IAAIZ,CAAA,CAAEyB;EACpC,CAAC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}