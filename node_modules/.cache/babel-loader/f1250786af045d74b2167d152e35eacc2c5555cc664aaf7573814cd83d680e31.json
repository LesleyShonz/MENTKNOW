{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { compact } from \"@tldraw/utils\";\nvar LAG_DURATION = 100;\nvar DragAndDropManager = /*#__PURE__*/function () {\n  function DragAndDropManager(editor) {\n    var _this = this;\n    _classCallCheck(this, DragAndDropManager);\n    _defineProperty(this, \"prevDroppingShapeId\", null);\n    _defineProperty(this, \"currDroppingShapeId\", null);\n    _defineProperty(this, \"droppingNodeTimer\", null);\n    _defineProperty(this, \"dispose\", function () {\n      _this.clear();\n    });\n    this.editor = editor;\n    editor.disposables.add(this.dispose);\n  }\n  _createClass(DragAndDropManager, [{\n    key: \"updateDroppingNode\",\n    value: function updateDroppingNode(movingShapes, cb) {\n      if (this.droppingNodeTimer === null) {\n        var _this$editor$getDropp, _this$editor$getDropp2;\n        var currentPagePoint = this.editor.inputs.currentPagePoint;\n        this.currDroppingShapeId = (_this$editor$getDropp = (_this$editor$getDropp2 = this.editor.getDroppingShape(currentPagePoint, movingShapes)) === null || _this$editor$getDropp2 === void 0 ? void 0 : _this$editor$getDropp2.id) !== null && _this$editor$getDropp !== void 0 ? _this$editor$getDropp : null;\n        this.setDragTimer(movingShapes, LAG_DURATION * 10, cb);\n      } else if (this.editor.inputs.pointerVelocity.len() > 0.5) {\n        clearInterval(this.droppingNodeTimer);\n        this.setDragTimer(movingShapes, LAG_DURATION, cb);\n      }\n    }\n  }, {\n    key: \"setDragTimer\",\n    value: function setDragTimer(movingShapes, duration, cb) {\n      var _this2 = this;\n      this.droppingNodeTimer = setTimeout(function () {\n        _this2.editor.batch(function () {\n          _this2.handleDrag(movingShapes, cb);\n        });\n        _this2.droppingNodeTimer = null;\n      }, duration);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(movingShapes, cb) {\n      var _this3 = this,\n        _this$editor$getDropp3,\n        _this$editor$getDropp4;\n      var currentPagePoint = this.editor.inputs.currentPagePoint;\n      movingShapes = compact(movingShapes.map(function (shape) {\n        return _this3.editor.getShapeById(shape.id);\n      }));\n      var currDroppingShapeId = (_this$editor$getDropp3 = (_this$editor$getDropp4 = this.editor.getDroppingShape(currentPagePoint, movingShapes)) === null || _this$editor$getDropp4 === void 0 ? void 0 : _this$editor$getDropp4.id) !== null && _this$editor$getDropp3 !== void 0 ? _this$editor$getDropp3 : null;\n      if (currDroppingShapeId !== this.currDroppingShapeId) {\n        this.prevDroppingShapeId = this.currDroppingShapeId;\n        this.currDroppingShapeId = currDroppingShapeId;\n      }\n      var prevDroppingShapeId = this.prevDroppingShapeId;\n      if (currDroppingShapeId === prevDroppingShapeId) {\n        return;\n      }\n      var prevDroppingShape = prevDroppingShapeId && this.editor.getShapeById(prevDroppingShapeId);\n      var nextDroppingShape = currDroppingShapeId && this.editor.getShapeById(currDroppingShapeId);\n      this.prevDroppingShapeId = this.currDroppingShapeId;\n      if (prevDroppingShape) {\n        var _this$editor$getShape, _this$editor$getShape2;\n        (_this$editor$getShape = (_this$editor$getShape2 = this.editor.getShapeUtil(prevDroppingShape)).onDragShapesOut) === null || _this$editor$getShape === void 0 || _this$editor$getShape.call(_this$editor$getShape2, prevDroppingShape, movingShapes);\n      }\n      if (nextDroppingShape) {\n        var _this$editor$getShape3, _this$editor$getShape4;\n        var res = (_this$editor$getShape3 = (_this$editor$getShape4 = this.editor.getShapeUtil(nextDroppingShape)).onDragShapesOver) === null || _this$editor$getShape3 === void 0 ? void 0 : _this$editor$getShape3.call(_this$editor$getShape4, nextDroppingShape, movingShapes);\n        if (res && res.shouldHint) {\n          this.editor.setHintingIds([nextDroppingShape.id]);\n        }\n      } else {\n        this.editor.setHintingIds([]);\n      }\n      cb === null || cb === void 0 || cb();\n    }\n  }, {\n    key: \"dropShapes\",\n    value: function dropShapes(shapes) {\n      var currDroppingShapeId = this.currDroppingShapeId;\n      this.handleDrag(shapes);\n      if (currDroppingShapeId) {\n        var _this$editor$getShape5, _this$editor$getShape6;\n        var shape = this.editor.getShapeById(currDroppingShapeId);\n        if (!shape) return;\n        (_this$editor$getShape5 = (_this$editor$getShape6 = this.editor.getShapeUtil(shape)).onDropShapesOver) === null || _this$editor$getShape5 === void 0 || _this$editor$getShape5.call(_this$editor$getShape6, shape, shapes);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.prevDroppingShapeId = null;\n      this.currDroppingShapeId = null;\n      if (this.droppingNodeTimer !== null) {\n        clearInterval(this.droppingNodeTimer);\n      }\n      this.droppingNodeTimer = null;\n      this.editor.setHintingIds([]);\n    }\n  }]);\n  return DragAndDropManager;\n}();\nexport { DragAndDropManager };","map":{"version":3,"names":["compact","LAG_DURATION","DragAndDropManager","editor","_this","_classCallCheck","_defineProperty","clear","disposables","add","dispose","_createClass","key","value","updateDroppingNode","movingShapes","cb","droppingNodeTimer","_this$editor$getDropp","_this$editor$getDropp2","currentPagePoint","inputs","currDroppingShapeId","getDroppingShape","id","setDragTimer","pointerVelocity","len","clearInterval","duration","_this2","setTimeout","batch","handleDrag","_this3","_this$editor$getDropp3","_this$editor$getDropp4","map","shape","getShapeById","prevDroppingShapeId","prevDroppingShape","nextDroppingShape","_this$editor$getShape","_this$editor$getShape2","getShapeUtil","onDragShapesOut","call","_this$editor$getShape3","_this$editor$getShape4","res","onDragShapesOver","shouldHint","setHintingIds","dropShapes","shapes","_this$editor$getShape5","_this$editor$getShape6","onDropShapesOver"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/editor/src/lib/editor/managers/DragAndDropManager.ts"],"sourcesContent":["import { TLShape, TLShapeId } from '@tldraw/tlschema'\nimport { compact } from '@tldraw/utils'\nimport type { Editor } from '../Editor'\n\nconst LAG_DURATION = 100\n\nexport class DragAndDropManager {\n\tconstructor(public editor: Editor) {\n\t\teditor.disposables.add(this.dispose)\n\t}\n\n\tprevDroppingShapeId: TLShapeId | null = null\n\tcurrDroppingShapeId: TLShapeId | null = null\n\n\tdroppingNodeTimer: ReturnType<typeof setTimeout> | null = null\n\n\tupdateDroppingNode(movingShapes: TLShape[], cb: () => void) {\n\t\tif (this.droppingNodeTimer === null) {\n\t\t\tconst { currentPagePoint } = this.editor.inputs\n\t\t\tthis.currDroppingShapeId =\n\t\t\t\tthis.editor.getDroppingShape(currentPagePoint, movingShapes)?.id ?? null\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION * 10, cb)\n\t\t} else if (this.editor.inputs.pointerVelocity.len() > 0.5) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION, cb)\n\t\t}\n\t}\n\n\tprivate setDragTimer(movingShapes: TLShape[], duration: number, cb: () => void) {\n\t\tthis.droppingNodeTimer = setTimeout(() => {\n\t\t\tthis.editor.batch(() => {\n\t\t\t\tthis.handleDrag(movingShapes, cb)\n\t\t\t})\n\t\t\tthis.droppingNodeTimer = null\n\t\t}, duration)\n\t}\n\n\tprivate handleDrag(movingShapes: TLShape[], cb?: () => void) {\n\t\tconst { currentPagePoint } = this.editor.inputs\n\n\t\tmovingShapes = compact(movingShapes.map((shape) => this.editor.getShapeById(shape.id)))\n\n\t\tconst currDroppingShapeId =\n\t\t\tthis.editor.getDroppingShape(currentPagePoint, movingShapes)?.id ?? null\n\n\t\tif (currDroppingShapeId !== this.currDroppingShapeId) {\n\t\t\tthis.prevDroppingShapeId = this.currDroppingShapeId\n\t\t\tthis.currDroppingShapeId = currDroppingShapeId\n\t\t}\n\n\t\tconst { prevDroppingShapeId } = this\n\n\t\tif (currDroppingShapeId === prevDroppingShapeId) {\n\t\t\t// we already called onDragShapesOver on this node, no need to do it again\n\t\t\treturn\n\t\t}\n\n\t\tconst prevDroppingShape = prevDroppingShapeId && this.editor.getShapeById(prevDroppingShapeId)\n\t\tconst nextDroppingShape = currDroppingShapeId && this.editor.getShapeById(currDroppingShapeId)\n\n\t\t// Even if we don't have a next dropping shape id (i.e. if we're dropping\n\t\t// onto the page) set the prev to the current, to avoid repeat calls to\n\t\t// the previous parent's onDragShapesOut\n\t\tthis.prevDroppingShapeId = this.currDroppingShapeId\n\n\t\tif (prevDroppingShape) {\n\t\t\tthis.editor.getShapeUtil(prevDroppingShape).onDragShapesOut?.(prevDroppingShape, movingShapes)\n\t\t}\n\n\t\tif (nextDroppingShape) {\n\t\t\tconst res = this.editor\n\t\t\t\t.getShapeUtil(nextDroppingShape)\n\t\t\t\t.onDragShapesOver?.(nextDroppingShape, movingShapes)\n\n\t\t\tif (res && res.shouldHint) {\n\t\t\t\tthis.editor.setHintingIds([nextDroppingShape.id])\n\t\t\t}\n\t\t} else {\n\t\t\t// If we're dropping onto the page, then clear hinting ids\n\t\t\tthis.editor.setHintingIds([])\n\t\t}\n\n\t\tcb?.()\n\t}\n\n\tdropShapes(shapes: TLShape[]) {\n\t\tconst { currDroppingShapeId } = this\n\n\t\tthis.handleDrag(shapes)\n\n\t\tif (currDroppingShapeId) {\n\t\t\tconst shape = this.editor.getShapeById(currDroppingShapeId)\n\t\t\tif (!shape) return\n\t\t\tthis.editor.getShapeUtil(shape).onDropShapesOver?.(shape, shapes)\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.prevDroppingShapeId = null\n\t\tthis.currDroppingShapeId = null\n\n\t\tif (this.droppingNodeTimer !== null) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t}\n\n\t\tthis.droppingNodeTimer = null\n\t\tthis.editor.setHintingIds([])\n\t}\n\n\tdispose = () => {\n\t\tthis.clear()\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}