{
  "version": 3,
  "sources": ["../../../../src/lib/editor/derivations/parentsToChildrenWithIndexes.ts"],
  "sourcesContent": ["import { RecordsDiff } from '@tldraw/store'\nimport { isShape, TLParentId, TLRecord, TLShapeId, TLStore } from '@tldraw/tlschema'\nimport { computed, isUninitialized, RESET_VALUE } from 'signia'\n\ntype Parents2Children = Record<TLParentId, [id: TLShapeId, index: string][]>\n\nexport const parentsToChildrenWithIndexes = (store: TLStore) => {\n\tconst shapeIds = store.query.ids<'shape'>('shape')\n\tfunction fromScratch() {\n\t\tconst result: Parents2Children = {}\n\n\t\t// Populate the result object with an array for each parent.\n\t\tshapeIds.value.forEach((id) => {\n\t\t\tconst shape = store.get(id)!\n\n\t\t\tif (!result[shape.parentId]) {\n\t\t\t\tresult[shape.parentId] = []\n\t\t\t}\n\n\t\t\tresult[shape.parentId].push([id, shape.index])\n\t\t})\n\n\t\t// Sort the children by index\n\t\tObject.values(result).forEach((arr) => arr.sort((a, b) => (a[1] < b[1] ? -1 : 1)))\n\n\t\treturn result\n\t}\n\treturn computed<Parents2Children>(\n\t\t'parentsToChildrenWithIndexes',\n\t\t(lastValue, lastComputedEpoch) => {\n\t\t\tif (isUninitialized(lastValue)) {\n\t\t\t\treturn fromScratch()\n\t\t\t}\n\n\t\t\tconst diff = store.history.getDiffSince(lastComputedEpoch)\n\n\t\t\tif (diff === RESET_VALUE) {\n\t\t\t\treturn fromScratch()\n\t\t\t}\n\n\t\t\tif (diff.length === 0) return lastValue\n\n\t\t\tlet newValue: Record<TLParentId, [id: TLShapeId, index: string][]> | null = null\n\n\t\t\tconst ensureNewArray = (parentId: TLParentId) => {\n\t\t\t\tif (!newValue) {\n\t\t\t\t\tnewValue = { ...lastValue }\n\t\t\t\t}\n\t\t\t\tif (!newValue[parentId]) {\n\t\t\t\t\tnewValue[parentId] = []\n\t\t\t\t} else if (newValue[parentId] === lastValue[parentId]) {\n\t\t\t\t\tnewValue[parentId] = [...newValue[parentId]!]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst toSort = new Set<[id: TLShapeId, index: string][]>()\n\n\t\t\tlet changes: RecordsDiff<TLRecord>\n\n\t\t\tfor (let i = 0, n = diff.length; i < n; i++) {\n\t\t\t\tchanges = diff[i]\n\n\t\t\t\t// Iterate through the added shapes, add them to the new value and mark them for sorting\n\t\t\t\tfor (const record of Object.values(changes.added)) {\n\t\t\t\t\tif (!isShape(record)) continue\n\t\t\t\t\tensureNewArray(record.parentId)\n\t\t\t\t\tnewValue![record.parentId].push([record.id, record.index])\n\t\t\t\t\ttoSort.add(newValue![record.parentId])\n\t\t\t\t}\n\n\t\t\t\t// Iterate through the updated shapes, add them to their parents in the new value and mark them for sorting\n\t\t\t\tfor (const [from, to] of Object.values(changes.updated)) {\n\t\t\t\t\tif (!isShape(to)) continue\n\t\t\t\t\tif (!isShape(from)) continue\n\n\t\t\t\t\tif (from.parentId !== to.parentId) {\n\t\t\t\t\t\t// If the parents have changed, remove the new value from the old parent and add it to the new parent\n\t\t\t\t\t\tensureNewArray(from.parentId)\n\t\t\t\t\t\tensureNewArray(to.parentId)\n\t\t\t\t\t\tnewValue![from.parentId].splice(\n\t\t\t\t\t\t\tnewValue![from.parentId].findIndex((i) => i[0] === to.id),\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t)\n\t\t\t\t\t\tnewValue![to.parentId].push([to.id, to.index])\n\t\t\t\t\t\ttoSort.add(newValue![to.parentId])\n\t\t\t\t\t} else if (from.index !== to.index) {\n\t\t\t\t\t\t// If the parent is the same but the index has changed (e.g. if they've been reordered), update the parent's array at the new index\n\t\t\t\t\t\tensureNewArray(to.parentId)\n\t\t\t\t\t\tconst idx = newValue![to.parentId].findIndex((i) => i[0] === to.id)\n\t\t\t\t\t\tnewValue![to.parentId][idx] = [to.id, to.index]\n\t\t\t\t\t\ttoSort.add(newValue![to.parentId])\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Iterate through the removed shapes, remove them from their parents in new value\n\t\t\t\tfor (const record of Object.values(changes.removed)) {\n\t\t\t\t\tif (!isShape(record)) continue\n\t\t\t\t\tensureNewArray(record.parentId)\n\t\t\t\t\tnewValue![record.parentId].splice(\n\t\t\t\t\t\tnewValue![record.parentId].findIndex((i) => i[0] === record.id),\n\t\t\t\t\t\t1\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort the arrays that have been marked for sorting\n\t\t\tfor (const arr of toSort) {\n\t\t\t\tarr.sort((a, b) => (a[1] < b[1] ? -1 : 1))\n\t\t\t}\n\n\t\t\treturn newValue ?? lastValue\n\t\t}\n\t)\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
