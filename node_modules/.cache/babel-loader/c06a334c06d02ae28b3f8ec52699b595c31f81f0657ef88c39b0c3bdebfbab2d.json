{"ast":null,"code":"import _classCallCheck from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _class;\nimport { Vec2d } from \"./Vec2d.mjs\";\nimport { PI, PI2, toPrecision } from \"./utils.mjs\";\nvar Box2d = /*#__PURE__*/function () {\n  function Box2d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Box2d);\n    _defineProperty(this, \"x\", 0);\n    _defineProperty(this, \"y\", 0);\n    _defineProperty(this, \"w\", 0);\n    _defineProperty(this, \"h\", 0);\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  _createClass(Box2d, [{\n    key: \"point\",\n    get: function get() {\n      return new Vec2d(this.x, this.y);\n    },\n    set: function set(val) {\n      this.x = val.x;\n      this.y = val.y;\n    }\n  }, {\n    key: \"minX\",\n    get: function get() {\n      return this.x;\n    },\n    set: function set(n) {\n      this.x = n;\n    }\n  }, {\n    key: \"midX\",\n    get: function get() {\n      return this.x + this.w / 2;\n    }\n  }, {\n    key: \"maxX\",\n    get: function get() {\n      return this.x + this.w;\n    }\n  }, {\n    key: \"minY\",\n    get: function get() {\n      return this.y;\n    },\n    set: function set(n) {\n      this.y = n;\n    }\n  }, {\n    key: \"midY\",\n    get: function get() {\n      return this.y + this.h / 2;\n    }\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.h;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.w;\n    },\n    set: function set(n) {\n      this.w = n;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.h;\n    },\n    set: function set(n) {\n      this.h = n;\n    }\n  }, {\n    key: \"aspectRatio\",\n    get: function get() {\n      return this.width / this.height;\n    }\n  }, {\n    key: \"center\",\n    get: function get() {\n      return new Vec2d(this.midX, this.midY);\n    },\n    set: function set(v) {\n      this.minX = v.x - this.width / 2;\n      this.minY = v.y - this.height / 2;\n    }\n  }, {\n    key: \"corners\",\n    get: function get() {\n      return [new Vec2d(this.minX, this.minY), new Vec2d(this.maxX, this.minY), new Vec2d(this.maxX, this.maxY), new Vec2d(this.minX, this.maxY)];\n    }\n  }, {\n    key: \"snapPoints\",\n    get: function get() {\n      return [new Vec2d(this.minX, this.minY), new Vec2d(this.maxX, this.minY), new Vec2d(this.maxX, this.maxY), new Vec2d(this.minX, this.maxY), this.center];\n    }\n  }, {\n    key: \"sides\",\n    get: function get() {\n      var corners = this.corners;\n      return [[corners[0], corners[1]], [corners[1], corners[2]], [corners[2], corners[3]], [corners[3], corners[0]]];\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return new Vec2d(this.w, this.h);\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed() {\n      this.x = toPrecision(this.x);\n      this.y = toPrecision(this.y);\n      this.w = toPrecision(this.w);\n      this.h = toPrecision(this.h);\n      return this;\n    }\n  }, {\n    key: \"setTo\",\n    value: function setTo(B) {\n      this.x = B.x;\n      this.y = B.y;\n      this.w = B.w;\n      this.h = B.h;\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      this.x = x;\n      this.y = y;\n      this.w = w;\n      this.h = h;\n      return this;\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(A) {\n      var minX = Math.min(this.minX, A.minX);\n      var minY = Math.min(this.minY, A.minY);\n      var maxX = Math.max(this.maxX, A.maxX);\n      var maxY = Math.max(this.maxY, A.maxY);\n      this.x = minX;\n      this.y = minY;\n      this.w = maxX - minX;\n      this.h = maxY - minY;\n      return this;\n    }\n  }, {\n    key: \"expandBy\",\n    value: function expandBy(n) {\n      this.x -= n;\n      this.y -= n;\n      this.w += n * 2;\n      this.h += n * 2;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(n) {\n      this.x /= n;\n      this.y /= n;\n      this.w /= n;\n      this.h /= n;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var x = this.x,\n        y = this.y,\n        w = this.w,\n        h = this.h;\n      return new Box2d(x, y, w, h);\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(delta) {\n      this.x += delta.x;\n      this.y += delta.y;\n      return this;\n    }\n  }, {\n    key: \"snapToGrid\",\n    value: function snapToGrid(size) {\n      var minX = Math.round(this.minX / size) * size;\n      var minY = Math.round(this.minY / size) * size;\n      var maxX = Math.round(this.maxX / size) * size;\n      var maxY = Math.round(this.maxY / size) * size;\n      this.minX = minX;\n      this.minY = minY;\n      this.width = Math.max(1, maxX - minX);\n      this.height = Math.max(1, maxY - minY);\n    }\n  }, {\n    key: \"collides\",\n    value: function collides(B) {\n      return Box2d.Collides(this, B);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(B) {\n      return Box2d.Contains(this, B);\n    }\n  }, {\n    key: \"includes\",\n    value: function includes(B) {\n      return Box2d.Includes(this, B);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(V, y) {\n      return Box2d.ContainsPoint(this, V, y);\n    }\n  }, {\n    key: \"getHandlePoint\",\n    value: function getHandlePoint(handle) {\n      switch (handle) {\n        case \"top_left\":\n          return new Vec2d(this.minX, this.minY);\n        case \"top_right\":\n          return new Vec2d(this.maxX, this.minY);\n        case \"bottom_left\":\n          return new Vec2d(this.minX, this.maxY);\n        case \"bottom_right\":\n          return new Vec2d(this.maxX, this.maxY);\n        case \"top\":\n          return new Vec2d(this.midX, this.minY);\n        case \"right\":\n          return new Vec2d(this.maxX, this.midY);\n        case \"bottom\":\n          return new Vec2d(this.midX, this.maxY);\n        case \"left\":\n          return new Vec2d(this.minX, this.midY);\n      }\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      return {\n        x: this.minX,\n        y: this.minY,\n        w: this.w,\n        h: this.h\n      };\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(handle, dx, dy) {\n      var a0x = this.minX,\n        a0y = this.minY,\n        a1x = this.maxX,\n        a1y = this.maxY;\n      var b0x = this.minX,\n        b0y = this.minY,\n        b1x = this.maxX,\n        b1y = this.maxY;\n      switch (handle) {\n        case \"left\":\n        case \"top_left\":\n        case \"bottom_left\":\n          {\n            b0x += dx;\n            break;\n          }\n        case \"right\":\n        case \"top_right\":\n        case \"bottom_right\":\n          {\n            b1x += dx;\n            break;\n          }\n      }\n      switch (handle) {\n        case \"top\":\n        case \"top_left\":\n        case \"top_right\":\n          {\n            b0y += dy;\n            break;\n          }\n        case \"bottom\":\n        case \"bottom_left\":\n        case \"bottom_right\":\n          {\n            b1y += dy;\n            break;\n          }\n      }\n      var scaleX = (b1x - b0x) / (a1x - a0x);\n      var scaleY = (b1y - b0y) / (a1y - a0y);\n      var flipX = scaleX < 0;\n      var flipY = scaleY < 0;\n      if (flipX) {\n        var t = b1x;\n        b1x = b0x;\n        b0x = t;\n      }\n      if (flipY) {\n        var _t = b1y;\n        b1y = b0y;\n        b0y = _t;\n      }\n      this.minX = b0x;\n      this.minY = b0y;\n      this.width = Math.abs(b1x - b0x);\n      this.height = Math.abs(b1y - b0y);\n    }\n  }, {\n    key: \"union\",\n    value: function union(box) {\n      var minX = Math.min(this.minX, box.x);\n      var minY = Math.min(this.minY, box.y);\n      var maxX = Math.max(this.maxX, box.w + box.x);\n      var maxY = Math.max(this.maxY, box.h + box.y);\n      this.x = minX;\n      this.y = minY;\n      this.width = maxX - minX;\n      this.height = maxY - minY;\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return Box2d.Equals(this, other);\n    }\n  }], [{\n    key: \"From\",\n    value: function From(box) {\n      return new Box2d(box.x, box.y, box.w, box.h);\n    }\n  }, {\n    key: \"FromPoints\",\n    value: function FromPoints(points) {\n      if (points.length === 0) return new Box2d();\n      var minX = Infinity;\n      var minY = Infinity;\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n      var point;\n      for (var i = 0, n = points.length; i < n; i++) {\n        point = points[i];\n        minX = Math.min(point.x, minX);\n        minY = Math.min(point.y, minY);\n        maxX = Math.max(point.x, maxX);\n        maxY = Math.max(point.y, maxY);\n      }\n      return new Box2d(minX, minY, maxX - minX, maxY - minY);\n    }\n  }, {\n    key: \"Expand\",\n    value: function Expand(A, B) {\n      var minX = Math.min(B.minX, A.minX);\n      var minY = Math.min(B.minY, A.minY);\n      var maxX = Math.max(B.maxX, A.maxX);\n      var maxY = Math.max(B.maxY, A.maxY);\n      return new Box2d(minX, minY, maxX - minX, maxY - minY);\n    }\n  }, {\n    key: \"ExpandBy\",\n    value: function ExpandBy(A, n) {\n      return new Box2d(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2);\n    }\n  }, {\n    key: \"Resize\",\n    value: function Resize(box, handle, dx, dy) {\n      var isAspectRatioLocked = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var a0x = box.minX,\n        a0y = box.minY,\n        a1x = box.maxX,\n        a1y = box.maxY;\n      var b0x = box.minX,\n        b0y = box.minY,\n        b1x = box.maxX,\n        b1y = box.maxY;\n      switch (handle) {\n        case \"left\":\n        case \"top_left\":\n        case \"bottom_left\":\n          {\n            b0x += dx;\n            break;\n          }\n        case \"right\":\n        case \"top_right\":\n        case \"bottom_right\":\n          {\n            b1x += dx;\n            break;\n          }\n      }\n      switch (handle) {\n        case \"top\":\n        case \"top_left\":\n        case \"top_right\":\n          {\n            b0y += dy;\n            break;\n          }\n        case \"bottom\":\n        case \"bottom_left\":\n        case \"bottom_right\":\n          {\n            b1y += dy;\n            break;\n          }\n      }\n      var scaleX = (b1x - b0x) / (a1x - a0x);\n      var scaleY = (b1y - b0y) / (a1y - a0y);\n      var flipX = scaleX < 0;\n      var flipY = scaleY < 0;\n      if (isAspectRatioLocked) {\n        var aspectRatio = (a1x - a0x) / (a1y - a0y);\n        var bw = Math.abs(b1x - b0x);\n        var bh = Math.abs(b1y - b0y);\n        var tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio);\n        var th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio;\n        var isTall = aspectRatio < bw / bh;\n        switch (handle) {\n          case \"top_left\":\n            {\n              if (isTall) b0y = b1y + tw;else b0x = b1x + th;\n              break;\n            }\n          case \"top_right\":\n            {\n              if (isTall) b0y = b1y + tw;else b1x = b0x - th;\n              break;\n            }\n          case \"bottom_right\":\n            {\n              if (isTall) b1y = b0y - tw;else b1x = b0x - th;\n              break;\n            }\n          case \"bottom_left\":\n            {\n              if (isTall) b1y = b0y - tw;else b0x = b1x + th;\n              break;\n            }\n          case \"bottom\":\n          case \"top\":\n            {\n              var m = (b0x + b1x) / 2;\n              var w = bh * aspectRatio;\n              b0x = m - w / 2;\n              b1x = m + w / 2;\n              break;\n            }\n          case \"left\":\n          case \"right\":\n            {\n              var _m = (b0y + b1y) / 2;\n              var h = bw / aspectRatio;\n              b0y = _m - h / 2;\n              b1y = _m + h / 2;\n              break;\n            }\n        }\n      }\n      if (flipX) {\n        var t = b1x;\n        b1x = b0x;\n        b0x = t;\n      }\n      if (flipY) {\n        var _t2 = b1y;\n        b1y = b0y;\n        b0y = _t2;\n      }\n      var final = new Box2d(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y));\n      return {\n        box: final,\n        scaleX: +(final.width / box.width * (scaleX > 0 ? 1 : -1)).toFixed(5),\n        scaleY: +(final.height / box.height * (scaleY > 0 ? 1 : -1)).toFixed(5)\n      };\n    }\n  }, {\n    key: \"Equals\",\n    value: function Equals(a, b) {\n      return b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h;\n    }\n  }]);\n  return Box2d;\n}();\n_class = Box2d;\n_defineProperty(Box2d, \"Collides\", function (A, B) {\n  return !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY);\n});\n_defineProperty(Box2d, \"Contains\", function (A, B) {\n  return A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX;\n});\n_defineProperty(Box2d, \"Includes\", function (A, B) {\n  return _class.Collides(A, B) || _class.Contains(A, B);\n});\n_defineProperty(Box2d, \"ContainsPoint\", function (A, B, y) {\n  if (typeof B === \"number\") {\n    return !(B < A.minX || y < A.minY || B > A.maxX || y > A.maxY);\n  }\n  return !(B.x < A.minX || B.y < A.minY || B.x > A.maxX || B.y > A.maxY);\n});\n_defineProperty(Box2d, \"Common\", function (boxes) {\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  for (var i = 0; i < boxes.length; i++) {\n    var B = boxes[i];\n    minX = Math.min(minX, B.minX);\n    minY = Math.min(minY, B.minY);\n    maxX = Math.max(maxX, B.maxX);\n    maxY = Math.max(maxY, B.maxY);\n  }\n  return new _class(minX, minY, maxX - minX, maxY - minY);\n});\n_defineProperty(Box2d, \"Sides\", function (A) {\n  var inset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var corners = A.corners;\n  if (inset) {}\n  return [[corners[0], corners[1]], [corners[1], corners[2]], [corners[2], corners[3]], [corners[3], corners[0]]];\n});\nfunction flipSelectionHandleY(handle) {\n  switch (handle) {\n    case \"top\":\n      return \"bottom\";\n    case \"bottom\":\n      return \"top\";\n    case \"top_left\":\n      return \"bottom_left\";\n    case \"top_right\":\n      return \"bottom_right\";\n    case \"bottom_left\":\n      return \"top_left\";\n    case \"bottom_right\":\n      return \"top_right\";\n    default:\n      return handle;\n  }\n}\nfunction flipSelectionHandleX(handle) {\n  switch (handle) {\n    case \"left\":\n      return \"right\";\n    case \"right\":\n      return \"left\";\n    case \"top_left\":\n      return \"top_right\";\n    case \"top_right\":\n      return \"top_left\";\n    case \"bottom_left\":\n      return \"bottom_right\";\n    case \"bottom_right\":\n      return \"bottom_left\";\n    default:\n      return handle;\n  }\n}\nvar ORDERED_SELECTION_HANDLES = [\"top\", \"top_right\", \"right\", \"bottom_right\", \"bottom\", \"bottom_left\", \"left\", \"top_left\"];\nfunction rotateSelectionHandle(handle, rotation) {\n  rotation = rotation % PI2;\n  var numSteps = Math.round(rotation / (PI / 4));\n  var currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);\n  return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];\n}\nfunction isSelectionCorner(selection) {\n  return selection === \"top_left\" || selection === \"top_right\" || selection === \"bottom_right\" || selection === \"bottom_left\";\n}\nvar ROTATE_CORNER_TO_SELECTION_CORNER = {\n  top_left_rotate: \"top_left\",\n  top_right_rotate: \"top_right\",\n  bottom_right_rotate: \"bottom_right\",\n  bottom_left_rotate: \"bottom_left\",\n  mobile_rotate: \"top_left\"\n};\nexport { Box2d, ROTATE_CORNER_TO_SELECTION_CORNER, flipSelectionHandleX, flipSelectionHandleY, isSelectionCorner, rotateSelectionHandle };","map":{"version":3,"names":["Vec2d","PI","PI2","toPrecision","Box2d","x","arguments","length","undefined","y","w","h","_classCallCheck","_defineProperty","_createClass","key","get","set","val","n","width","height","midX","midY","v","minX","minY","maxX","maxY","center","corners","value","toFixed","setTo","B","expand","A","Math","min","max","expandBy","scale","clone","translate","delta","snapToGrid","size","round","collides","Collides","contains","Contains","includes","Includes","containsPoint","V","ContainsPoint","getHandlePoint","handle","toJson","resize","dx","dy","a0x","a0y","a1x","a1y","b0x","b0y","b1x","b1y","scaleX","scaleY","flipX","flipY","t","abs","union","box","equals","other","Equals","From","FromPoints","points","Infinity","point","i","Expand","ExpandBy","Resize","isAspectRatioLocked","aspectRatio","bw","bh","tw","th","isTall","m","final","a","b","_class","boxes","inset","flipSelectionHandleY","flipSelectionHandleX","ORDERED_SELECTION_HANDLES","rotateSelectionHandle","rotation","numSteps","currentIndex","indexOf","isSelectionCorner","selection","ROTATE_CORNER_TO_SELECTION_CORNER","top_left_rotate","top_right_rotate","bottom_right_rotate","bottom_left_rotate","mobile_rotate"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/primitives/src/lib/Box2d.ts"],"sourcesContent":["import { Box2dModel } from '@tldraw/tlschema'\nimport { Vec2d, VecLike } from './Vec2d'\nimport { PI, PI2, toPrecision } from './utils'\n\n/** @public */\nexport type SelectionEdge = 'top' | 'right' | 'bottom' | 'left'\n\n/** @public */\nexport type SelectionCorner = 'top_left' | 'top_right' | 'bottom_right' | 'bottom_left'\n\n/** @public */\nexport type SelectionHandle = SelectionEdge | SelectionCorner\n\n/** @public */\nexport type RotateCorner =\n\t| 'top_left_rotate'\n\t| 'top_right_rotate'\n\t| 'bottom_right_rotate'\n\t| 'bottom_left_rotate'\n\t| 'mobile_rotate'\n\n/** @public */\nexport class Box2d {\n\tconstructor(x = 0, y = 0, w = 0, h = 0) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.w = w\n\t\tthis.h = h\n\t}\n\n\tx = 0\n\ty = 0\n\tw = 0\n\th = 0\n\n\tget point() {\n\t\treturn new Vec2d(this.x, this.y)\n\t}\n\n\tset point(val: Vec2d) {\n\t\tthis.x = val.x\n\t\tthis.y = val.y\n\t}\n\n\tget minX() {\n\t\treturn this.x\n\t}\n\n\tset minX(n: number) {\n\t\tthis.x = n\n\t}\n\n\tget midX() {\n\t\treturn this.x + this.w / 2\n\t}\n\n\tget maxX() {\n\t\treturn this.x + this.w\n\t}\n\n\tget minY() {\n\t\treturn this.y\n\t}\n\n\tset minY(n: number) {\n\t\tthis.y = n\n\t}\n\n\tget midY() {\n\t\treturn this.y + this.h / 2\n\t}\n\n\tget maxY() {\n\t\treturn this.y + this.h\n\t}\n\n\tget width() {\n\t\treturn this.w\n\t}\n\n\tset width(n: number) {\n\t\tthis.w = n\n\t}\n\n\tget height() {\n\t\treturn this.h\n\t}\n\n\tset height(n: number) {\n\t\tthis.h = n\n\t}\n\n\tget aspectRatio() {\n\t\treturn this.width / this.height\n\t}\n\n\tget center() {\n\t\treturn new Vec2d(this.midX, this.midY)\n\t}\n\n\tset center(v: Vec2d) {\n\t\tthis.minX = v.x - this.width / 2\n\t\tthis.minY = v.y - this.height / 2\n\t}\n\n\tget corners() {\n\t\treturn [\n\t\t\tnew Vec2d(this.minX, this.minY),\n\t\t\tnew Vec2d(this.maxX, this.minY),\n\t\t\tnew Vec2d(this.maxX, this.maxY),\n\t\t\tnew Vec2d(this.minX, this.maxY),\n\t\t]\n\t}\n\n\tget snapPoints() {\n\t\treturn [\n\t\t\tnew Vec2d(this.minX, this.minY),\n\t\t\tnew Vec2d(this.maxX, this.minY),\n\t\t\tnew Vec2d(this.maxX, this.maxY),\n\t\t\tnew Vec2d(this.minX, this.maxY),\n\t\t\tthis.center,\n\t\t]\n\t}\n\n\tget sides(): Array<[Vec2d, Vec2d]> {\n\t\tconst { corners } = this\n\t\treturn [\n\t\t\t[corners[0], corners[1]],\n\t\t\t[corners[1], corners[2]],\n\t\t\t[corners[2], corners[3]],\n\t\t\t[corners[3], corners[0]],\n\t\t]\n\t}\n\n\tget size(): Vec2d {\n\t\treturn new Vec2d(this.w, this.h)\n\t}\n\n\ttoFixed() {\n\t\tthis.x = toPrecision(this.x)\n\t\tthis.y = toPrecision(this.y)\n\t\tthis.w = toPrecision(this.w)\n\t\tthis.h = toPrecision(this.h)\n\t\treturn this\n\t}\n\n\tsetTo(B: Box2d) {\n\t\tthis.x = B.x\n\t\tthis.y = B.y\n\t\tthis.w = B.w\n\t\tthis.h = B.h\n\t\treturn this\n\t}\n\n\tset(x = 0, y = 0, w = 0, h = 0) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.w = w\n\t\tthis.h = h\n\t\treturn this\n\t}\n\n\texpand(A: Box2d) {\n\t\tconst minX = Math.min(this.minX, A.minX)\n\t\tconst minY = Math.min(this.minY, A.minY)\n\t\tconst maxX = Math.max(this.maxX, A.maxX)\n\t\tconst maxY = Math.max(this.maxY, A.maxY)\n\n\t\tthis.x = minX\n\t\tthis.y = minY\n\t\tthis.w = maxX - minX\n\t\tthis.h = maxY - minY\n\t\treturn this\n\t}\n\n\texpandBy(n: number) {\n\t\tthis.x -= n\n\t\tthis.y -= n\n\t\tthis.w += n * 2\n\t\tthis.h += n * 2\n\t\treturn this\n\t}\n\n\tscale(n: number) {\n\t\tthis.x /= n\n\t\tthis.y /= n\n\t\tthis.w /= n\n\t\tthis.h /= n\n\t\treturn this\n\t}\n\n\tclone() {\n\t\tconst { x, y, w, h } = this\n\t\treturn new Box2d(x, y, w, h)\n\t}\n\n\ttranslate(delta: VecLike) {\n\t\tthis.x += delta.x\n\t\tthis.y += delta.y\n\t\treturn this\n\t}\n\n\tsnapToGrid(size: number) {\n\t\tconst minX = Math.round(this.minX / size) * size\n\t\tconst minY = Math.round(this.minY / size) * size\n\t\tconst maxX = Math.round(this.maxX / size) * size\n\t\tconst maxY = Math.round(this.maxY / size) * size\n\t\tthis.minX = minX\n\t\tthis.minY = minY\n\t\tthis.width = Math.max(1, maxX - minX)\n\t\tthis.height = Math.max(1, maxY - minY)\n\t}\n\n\tcollides(B: Box2d) {\n\t\treturn Box2d.Collides(this, B)\n\t}\n\n\tcontains(B: Box2d) {\n\t\treturn Box2d.Contains(this, B)\n\t}\n\n\tincludes(B: Box2d) {\n\t\treturn Box2d.Includes(this, B)\n\t}\n\n\tcontainsPoint(V: VecLike | number, y?: number) {\n\t\treturn Box2d.ContainsPoint(this, V, y)\n\t}\n\n\tgetHandlePoint(handle: SelectionCorner | SelectionEdge) {\n\t\tswitch (handle) {\n\t\t\tcase 'top_left':\n\t\t\t\treturn new Vec2d(this.minX, this.minY)\n\t\t\tcase 'top_right':\n\t\t\t\treturn new Vec2d(this.maxX, this.minY)\n\t\t\tcase 'bottom_left':\n\t\t\t\treturn new Vec2d(this.minX, this.maxY)\n\t\t\tcase 'bottom_right':\n\t\t\t\treturn new Vec2d(this.maxX, this.maxY)\n\t\t\tcase 'top':\n\t\t\t\treturn new Vec2d(this.midX, this.minY)\n\t\t\tcase 'right':\n\t\t\t\treturn new Vec2d(this.maxX, this.midY)\n\t\t\tcase 'bottom':\n\t\t\t\treturn new Vec2d(this.midX, this.maxY)\n\t\t\tcase 'left':\n\t\t\t\treturn new Vec2d(this.minX, this.midY)\n\t\t}\n\t}\n\n\ttoJson(): Box2dModel {\n\t\treturn { x: this.minX, y: this.minY, w: this.w, h: this.h }\n\t}\n\n\tresize(handle: SelectionCorner | SelectionEdge | string, dx: number, dy: number) {\n\t\tconst { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this\n\t\tlet { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this\n\n\t\t// Use the delta to adjust the new box by changing its corners.\n\t\t// The dragging handle (corner or edge) will determine which\n\t\t// corners should change.\n\t\tswitch (handle) {\n\t\t\tcase 'left':\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tb0x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'right':\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tswitch (handle) {\n\t\t\tcase 'top':\n\t\t\tcase 'top_left':\n\t\t\tcase 'top_right': {\n\t\t\t\tb0y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bottom':\n\t\t\tcase 'bottom_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst scaleX = (b1x - b0x) / (a1x - a0x)\n\t\tconst scaleY = (b1y - b0y) / (a1y - a0y)\n\n\t\tconst flipX = scaleX < 0\n\t\tconst flipY = scaleY < 0\n\n\t\tif (flipX) {\n\t\t\tconst t = b1x\n\t\t\tb1x = b0x\n\t\t\tb0x = t\n\t\t}\n\n\t\tif (flipY) {\n\t\t\tconst t = b1y\n\t\t\tb1y = b0y\n\t\t\tb0y = t\n\t\t}\n\n\t\tthis.minX = b0x\n\t\tthis.minY = b0y\n\t\tthis.width = Math.abs(b1x - b0x)\n\t\tthis.height = Math.abs(b1y - b0y)\n\t}\n\n\tunion(box: Box2dModel) {\n\t\tconst minX = Math.min(this.minX, box.x)\n\t\tconst minY = Math.min(this.minY, box.y)\n\t\tconst maxX = Math.max(this.maxX, box.w + box.x)\n\t\tconst maxY = Math.max(this.maxY, box.h + box.y)\n\n\t\tthis.x = minX\n\t\tthis.y = minY\n\t\tthis.width = maxX - minX\n\t\tthis.height = maxY - minY\n\n\t\treturn this\n\t}\n\n\tstatic From(box: Box2dModel) {\n\t\treturn new Box2d(box.x, box.y, box.w, box.h)\n\t}\n\n\tstatic FromPoints(points: VecLike[]) {\n\t\tif (points.length === 0) return new Box2d()\n\t\tlet minX = Infinity\n\t\tlet minY = Infinity\n\t\tlet maxX = -Infinity\n\t\tlet maxY = -Infinity\n\t\tlet point: VecLike\n\t\tfor (let i = 0, n = points.length; i < n; i++) {\n\t\t\tpoint = points[i]\n\t\t\tminX = Math.min(point.x, minX)\n\t\t\tminY = Math.min(point.y, minY)\n\t\t\tmaxX = Math.max(point.x, maxX)\n\t\t\tmaxY = Math.max(point.y, maxY)\n\t\t}\n\n\t\treturn new Box2d(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic Expand(A: Box2d, B: Box2d) {\n\t\tconst minX = Math.min(B.minX, A.minX)\n\t\tconst minY = Math.min(B.minY, A.minY)\n\t\tconst maxX = Math.max(B.maxX, A.maxX)\n\t\tconst maxY = Math.max(B.maxY, A.maxY)\n\n\t\treturn new Box2d(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic ExpandBy(A: Box2d, n: number) {\n\t\treturn new Box2d(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2)\n\t}\n\n\tstatic Collides = (A: Box2d, B: Box2d) => {\n\t\treturn !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY)\n\t}\n\n\tstatic Contains = (A: Box2d, B: Box2d) => {\n\t\treturn A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX\n\t}\n\n\tstatic Includes = (A: Box2d, B: Box2d) => {\n\t\treturn Box2d.Collides(A, B) || Box2d.Contains(A, B)\n\t}\n\n\tstatic ContainsPoint = (A: Box2d, B: VecLike | number, y?: number) => {\n\t\tif (typeof B === 'number') {\n\t\t\treturn !(B < A.minX || y! < A.minY || B > A.maxX || y! > A.maxY)\n\t\t}\n\t\treturn !(B.x < A.minX || B.y < A.minY || B.x > A.maxX || B.y > A.maxY)\n\t}\n\n\tstatic Common = (boxes: Box2d[]): Box2d => {\n\t\tlet minX = Infinity\n\t\tlet minY = Infinity\n\t\tlet maxX = -Infinity\n\t\tlet maxY = -Infinity\n\n\t\tfor (let i = 0; i < boxes.length; i++) {\n\t\t\tconst B = boxes[i]\n\t\t\tminX = Math.min(minX, B.minX)\n\t\t\tminY = Math.min(minY, B.minY)\n\t\t\tmaxX = Math.max(maxX, B.maxX)\n\t\t\tmaxY = Math.max(maxY, B.maxY)\n\t\t}\n\n\t\treturn new Box2d(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic Sides = (A: Box2d, inset = 0) => {\n\t\tconst { corners } = A\n\t\tif (inset) {\n\t\t\t// TODO: Inset the corners by the inset amount.\n\t\t}\n\n\t\treturn [\n\t\t\t[corners[0], corners[1]],\n\t\t\t[corners[1], corners[2]],\n\t\t\t[corners[2], corners[3]],\n\t\t\t[corners[3], corners[0]],\n\t\t]\n\t}\n\n\tstatic Resize(\n\t\tbox: Box2d,\n\t\thandle: SelectionCorner | SelectionEdge | string,\n\t\tdx: number,\n\t\tdy: number,\n\t\tisAspectRatioLocked = false\n\t) {\n\t\tconst { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box\n\t\tlet { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box\n\n\t\t// Use the delta to adjust the new box by changing its corners.\n\t\t// The dragging handle (corner or edge) will determine which\n\t\t// corners should change.\n\t\tswitch (handle) {\n\t\t\tcase 'left':\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tb0x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'right':\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tswitch (handle) {\n\t\t\tcase 'top':\n\t\t\tcase 'top_left':\n\t\t\tcase 'top_right': {\n\t\t\t\tb0y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bottom':\n\t\t\tcase 'bottom_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst scaleX = (b1x - b0x) / (a1x - a0x)\n\t\tconst scaleY = (b1y - b0y) / (a1y - a0y)\n\n\t\tconst flipX = scaleX < 0\n\t\tconst flipY = scaleY < 0\n\n\t\t/*\n    2. Aspect ratio\n    If the aspect ratio is locked, adjust the corners so that the\n    new box's aspect ratio matches the original aspect ratio.\n    */\n\t\tif (isAspectRatioLocked) {\n\t\t\tconst aspectRatio = (a1x - a0x) / (a1y - a0y)\n\t\t\tconst bw = Math.abs(b1x - b0x)\n\t\t\tconst bh = Math.abs(b1y - b0y)\n\t\t\tconst tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio)\n\t\t\tconst th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio\n\t\t\tconst isTall = aspectRatio < bw / bh\n\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left': {\n\t\t\t\t\tif (isTall) b0y = b1y + tw\n\t\t\t\t\telse b0x = b1x + th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'top_right': {\n\t\t\t\t\tif (isTall) b0y = b1y + tw\n\t\t\t\t\telse b1x = b0x - th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom_right': {\n\t\t\t\t\tif (isTall) b1y = b0y - tw\n\t\t\t\t\telse b1x = b0x - th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom_left': {\n\t\t\t\t\tif (isTall) b1y = b0y - tw\n\t\t\t\t\telse b0x = b1x + th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom':\n\t\t\t\tcase 'top': {\n\t\t\t\t\tconst m = (b0x + b1x) / 2\n\t\t\t\t\tconst w = bh * aspectRatio\n\t\t\t\t\tb0x = m - w / 2\n\t\t\t\t\tb1x = m + w / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'left':\n\t\t\t\tcase 'right': {\n\t\t\t\t\tconst m = (b0y + b1y) / 2\n\t\t\t\t\tconst h = bw / aspectRatio\n\t\t\t\t\tb0y = m - h / 2\n\t\t\t\t\tb1y = m + h / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (flipX) {\n\t\t\tconst t = b1x\n\t\t\tb1x = b0x\n\t\t\tb0x = t\n\t\t}\n\n\t\tif (flipY) {\n\t\t\tconst t = b1y\n\t\t\tb1y = b0y\n\t\t\tb0y = t\n\t\t}\n\n\t\tconst final = new Box2d(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y))\n\n\t\treturn {\n\t\t\tbox: final,\n\t\t\tscaleX: +((final.width / box.width) * (scaleX > 0 ? 1 : -1)).toFixed(5),\n\t\t\tscaleY: +((final.height / box.height) * (scaleY > 0 ? 1 : -1)).toFixed(5),\n\t\t}\n\t}\n\n\tequals(other: Box2d | Box2dModel) {\n\t\treturn Box2d.Equals(this, other)\n\t}\n\n\tstatic Equals(a: Box2d | Box2dModel, b: Box2d | Box2dModel) {\n\t\treturn b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h\n\t}\n}\n\n/** @public */\nexport function flipSelectionHandleY(handle: SelectionHandle) {\n\tswitch (handle) {\n\t\tcase 'top':\n\t\t\treturn 'bottom'\n\t\tcase 'bottom':\n\t\t\treturn 'top'\n\t\tcase 'top_left':\n\t\t\treturn 'bottom_left'\n\t\tcase 'top_right':\n\t\t\treturn 'bottom_right'\n\t\tcase 'bottom_left':\n\t\t\treturn 'top_left'\n\t\tcase 'bottom_right':\n\t\t\treturn 'top_right'\n\t\tdefault:\n\t\t\treturn handle\n\t}\n}\n\n/** @public */\nexport function flipSelectionHandleX(handle: SelectionHandle) {\n\tswitch (handle) {\n\t\tcase 'left':\n\t\t\treturn 'right'\n\t\tcase 'right':\n\t\t\treturn 'left'\n\t\tcase 'top_left':\n\t\t\treturn 'top_right'\n\t\tcase 'top_right':\n\t\t\treturn 'top_left'\n\t\tcase 'bottom_left':\n\t\t\treturn 'bottom_right'\n\t\tcase 'bottom_right':\n\t\t\treturn 'bottom_left'\n\t\tdefault:\n\t\t\treturn handle\n\t}\n}\n\nconst ORDERED_SELECTION_HANDLES = [\n\t'top',\n\t'top_right',\n\t'right',\n\t'bottom_right',\n\t'bottom',\n\t'bottom_left',\n\t'left',\n\t'top_left',\n] as const\n\n/** @public */\nexport function rotateSelectionHandle(handle: SelectionHandle, rotation: number): SelectionHandle {\n\t// first find out how many tau we need to rotate by\n\trotation = rotation % PI2\n\tconst numSteps = Math.round(rotation / (PI / 4))\n\n\tconst currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle)\n\treturn ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length]\n}\n\n/** @public */\nexport function isSelectionCorner(selection: string): selection is SelectionCorner {\n\treturn (\n\t\tselection === 'top_left' ||\n\t\tselection === 'top_right' ||\n\t\tselection === 'bottom_right' ||\n\t\tselection === 'bottom_left'\n\t)\n}\n\n/** @public */\nexport const ROTATE_CORNER_TO_SELECTION_CORNER = {\n\ttop_left_rotate: 'top_left',\n\ttop_right_rotate: 'top_right',\n\tbottom_right_rotate: 'bottom_right',\n\tbottom_left_rotate: 'bottom_left',\n\tmobile_rotate: 'top_left',\n} as const\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}