{
  "version": 3,
  "sources": ["../../../src/lib/utils/rotation.ts"],
  "sourcesContent": ["import { canolicalizeRotation, Matrix2d, Vec2d } from '@tldraw/primitives'\nimport { isShapeId, TLShapePartial } from '@tldraw/tlschema'\nimport { structuredClone } from '@tldraw/utils'\nimport { Editor } from '../editor/Editor'\n\n/** @internal */\nexport function getRotationSnapshot({ editor }: { editor: Editor }) {\n\tconst {\n\t\tselectionRotation,\n\t\tselectionPageCenter,\n\t\tinputs: { originPagePoint },\n\t\tselectedShapes,\n\t} = editor\n\n\t// todo: this assumes we're rotating the selected shapes\n\t// if we try to rotate shapes that aren't selected, this\n\t// will produce the wrong results if there are other shapes\n\t// selected or else break if there are none.\n\n\treturn {\n\t\tselectionPageCenter: selectionPageCenter!,\n\t\tinitialCursorAngle: selectionPageCenter!.angle(originPagePoint),\n\t\tinitialSelectionRotation: selectionRotation,\n\t\tshapeSnapshots: selectedShapes.map((shape) => ({\n\t\t\tshape: structuredClone(shape),\n\t\t\tinitialPagePoint: editor.getPagePointById(shape.id)!,\n\t\t})),\n\t}\n}\n\n/** @internal */\nexport type TLRotationSnapshot = ReturnType<typeof getRotationSnapshot>\n\n/** @internal */\nexport function applyRotationToSnapshotShapes({\n\tdelta,\n\teditor,\n\tsnapshot,\n\tstage,\n}: {\n\tdelta: number\n\tsnapshot: TLRotationSnapshot\n\teditor: Editor\n\tstage: 'start' | 'update' | 'end' | 'one-off'\n}) {\n\tconst { selectionPageCenter, shapeSnapshots } = snapshot\n\n\teditor.updateShapes(\n\t\tshapeSnapshots.map(({ shape, initialPagePoint }) => {\n\t\t\t// We need to both rotate each shape individually and rotate the shapes\n\t\t\t// around the pivot point (the average center of all rotating shapes.)\n\n\t\t\tconst parentTransform = isShapeId(shape.parentId)\n\t\t\t\t? editor.getPageTransformById(shape.parentId)!\n\t\t\t\t: Matrix2d.Identity()\n\n\t\t\tconst newPagePoint = Vec2d.RotWith(initialPagePoint, selectionPageCenter, delta)\n\n\t\t\tconst newLocalPoint = Matrix2d.applyToPoint(\n\t\t\t\t// use the current parent transform in case it has moved/resized since the start\n\t\t\t\t// (e.g. if rotating a shape at the edge of a group)\n\t\t\t\tMatrix2d.Inverse(parentTransform),\n\t\t\t\tnewPagePoint\n\t\t\t)\n\t\t\tconst newRotation = canolicalizeRotation(shape.rotation + delta)\n\n\t\t\treturn {\n\t\t\t\tid: shape.id,\n\t\t\t\ttype: shape.type,\n\t\t\t\tx: newLocalPoint.x,\n\t\t\t\ty: newLocalPoint.y,\n\t\t\t\trotation: newRotation,\n\t\t\t}\n\t\t})\n\t)\n\n\t// Handle change\n\n\tconst changes: TLShapePartial[] = []\n\n\tshapeSnapshots.forEach(({ shape }) => {\n\t\tconst current = editor.getShapeById(shape.id)\n\t\tif (!current) return\n\t\tconst util = editor.getShapeUtil(shape)\n\n\t\tif (stage === 'start' || stage === 'one-off') {\n\t\t\tconst changeStart = util.onRotateStart?.(shape)\n\t\t\tif (changeStart) changes.push(changeStart)\n\t\t}\n\n\t\tconst changeUpdate = util.onRotate?.(shape, current)\n\t\tif (changeUpdate) changes.push(changeUpdate)\n\n\t\tif (stage === 'end' || stage === 'one-off') {\n\t\t\tconst changeEnd = util.onRotateEnd?.(shape, current)\n\t\t\tif (changeEnd) changes.push(changeEnd)\n\t\t}\n\t})\n\n\tif (changes.length > 0) {\n\t\teditor.updateShapes(changes)\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,sBAAsB,UAAU,aAAa;AACtD,SAAS,iBAAiC;AAC1C,SAAS,uBAAuB;AAIzB,SAAS,oBAAoB,EAAE,OAAO,GAAuB;AACnE,QAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA,QAAQ,EAAE,gBAAgB;AAAA,IAC1B;AAAA,EACD,IAAI;AAOJ,SAAO;AAAA,IACN;AAAA,IACA,oBAAoB,oBAAqB,MAAM,eAAe;AAAA,IAC9D,0BAA0B;AAAA,IAC1B,gBAAgB,eAAe,IAAI,CAAC,WAAW;AAAA,MAC9C,OAAO,gBAAgB,KAAK;AAAA,MAC5B,kBAAkB,OAAO,iBAAiB,MAAM,EAAE;AAAA,IACnD,EAAE;AAAA,EACH;AACD;AAMO,SAAS,8BAA8B;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAKG;AACF,QAAM,EAAE,qBAAqB,eAAe,IAAI;AAEhD,SAAO;AAAA,IACN,eAAe,IAAI,CAAC,EAAE,OAAO,iBAAiB,MAAM;AAInD,YAAM,kBAAkB,UAAU,MAAM,QAAQ,IAC7C,OAAO,qBAAqB,MAAM,QAAQ,IAC1C,SAAS,SAAS;AAErB,YAAM,eAAe,MAAM,QAAQ,kBAAkB,qBAAqB,KAAK;AAE/E,YAAM,gBAAgB,SAAS;AAAA;AAAA;AAAA,QAG9B,SAAS,QAAQ,eAAe;AAAA,QAChC;AAAA,MACD;AACA,YAAM,cAAc,qBAAqB,MAAM,WAAW,KAAK;AAE/D,aAAO;AAAA,QACN,IAAI,MAAM;AAAA,QACV,MAAM,MAAM;AAAA,QACZ,GAAG,cAAc;AAAA,QACjB,GAAG,cAAc;AAAA,QACjB,UAAU;AAAA,MACX;AAAA,IACD,CAAC;AAAA,EACF;AAIA,QAAM,UAA4B,CAAC;AAEnC,iBAAe,QAAQ,CAAC,EAAE,MAAM,MAAM;AACrC,UAAM,UAAU,OAAO,aAAa,MAAM,EAAE;AAC5C,QAAI,CAAC;AAAS;AACd,UAAM,OAAO,OAAO,aAAa,KAAK;AAEtC,QAAI,UAAU,WAAW,UAAU,WAAW;AAC7C,YAAM,cAAc,KAAK,gBAAgB,KAAK;AAC9C,UAAI;AAAa,gBAAQ,KAAK,WAAW;AAAA,IAC1C;AAEA,UAAM,eAAe,KAAK,WAAW,OAAO,OAAO;AACnD,QAAI;AAAc,cAAQ,KAAK,YAAY;AAE3C,QAAI,UAAU,SAAS,UAAU,WAAW;AAC3C,YAAM,YAAY,KAAK,cAAc,OAAO,OAAO;AACnD,UAAI;AAAW,gBAAQ,KAAK,SAAS;AAAA,IACtC;AAAA,EACD,CAAC;AAED,MAAI,QAAQ,SAAS,GAAG;AACvB,WAAO,aAAa,OAAO;AAAA,EAC5B;AACD;",
  "names": []
}
