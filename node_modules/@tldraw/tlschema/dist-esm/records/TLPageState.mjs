import { createRecordType, defineMigrations } from "@tldraw/store";
import { T } from "@tldraw/validate";
import { idValidator } from "../misc/id-validator.mjs";
import { shapeIdValidator } from "../shapes/TLBaseShape.mjs";
import { CameraRecordType } from "./TLCamera.mjs";
import { TLINSTANCE_ID } from "./TLInstance.mjs";
import { pageIdValidator } from "./TLPage.mjs";
const instancePageStateValidator = T.model(
  "instance_page_state",
  T.object({
    typeName: T.literal("instance_page_state"),
    id: idValidator("instance_page_state"),
    pageId: pageIdValidator,
    selectedIds: T.arrayOf(shapeIdValidator),
    hintingIds: T.arrayOf(shapeIdValidator),
    erasingIds: T.arrayOf(shapeIdValidator),
    hoveredId: shapeIdValidator.nullable(),
    editingId: shapeIdValidator.nullable(),
    croppingId: shapeIdValidator.nullable(),
    focusLayerId: shapeIdValidator.nullable()
  })
);
const Versions = {
  AddCroppingId: 1,
  RemoveInstanceIdAndCameraId: 2
};
const instancePageStateMigrations = defineMigrations({
  currentVersion: Versions.RemoveInstanceIdAndCameraId,
  migrators: {
    [Versions.AddCroppingId]: {
      up(instance) {
        return { ...instance, croppingId: null };
      },
      down({ croppingId: _croppingId, ...instance }) {
        return instance;
      }
    },
    [Versions.RemoveInstanceIdAndCameraId]: {
      up({ instanceId: _, cameraId: __, ...instance }) {
        return instance;
      },
      down(instance) {
        return {
          ...instance,
          instanceId: TLINSTANCE_ID,
          cameraId: CameraRecordType.createId("void")
        };
      }
    }
  }
});
const InstancePageStateRecordType = createRecordType(
  "instance_page_state",
  {
    migrations: instancePageStateMigrations,
    validator: instancePageStateValidator,
    scope: "session"
  }
).withDefaultProperties(
  () => ({
    editingId: null,
    croppingId: null,
    selectedIds: [],
    hoveredId: null,
    erasingIds: [],
    hintingIds: [],
    focusLayerId: null
  })
);
export {
  InstancePageStateRecordType,
  instancePageStateMigrations,
  instancePageStateValidator,
  Versions as instancePageStateVersions
};
//# sourceMappingURL=TLPageState.mjs.map
