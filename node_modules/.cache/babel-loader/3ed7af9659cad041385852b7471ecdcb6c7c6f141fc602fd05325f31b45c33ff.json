{"ast":null,"code":"import _defineProperty from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"isPen\"];\nimport { defineMigrations } from \"@tldraw/store\";\nimport { T } from \"@tldraw/validate\";\nimport { vec2dModelValidator } from \"../misc/geometry-types.mjs\";\nimport { DefaultColorStyle } from \"../styles/TLColorStyle.mjs\";\nimport { DefaultDashStyle } from \"../styles/TLDashStyle.mjs\";\nimport { DefaultFillStyle } from \"../styles/TLFillStyle.mjs\";\nimport { DefaultSizeStyle } from \"../styles/TLSizeStyle.mjs\";\nvar DrawShapeSegment = T.object({\n  type: T.literalEnum(\"free\", \"straight\"),\n  points: T.arrayOf(vec2dModelValidator)\n});\nvar drawShapeProps = {\n  color: DefaultColorStyle,\n  fill: DefaultFillStyle,\n  dash: DefaultDashStyle,\n  size: DefaultSizeStyle,\n  segments: T.arrayOf(DrawShapeSegment),\n  isComplete: T.boolean,\n  isClosed: T.boolean,\n  isPen: T.boolean\n};\nvar Versions = {\n  AddInPen: 1\n};\nvar drawShapeMigrations = defineMigrations({\n  currentVersion: Versions.AddInPen,\n  migrators: _defineProperty({}, Versions.AddInPen, {\n    up: function up(shape) {\n      var points = shape.props.segments[0].points;\n      if (points.length === 0) {\n        return _objectSpread(_objectSpread({}, shape), {}, {\n          props: _objectSpread(_objectSpread({}, shape.props), {}, {\n            isPen: false\n          })\n        });\n      }\n      var isPen = !(points[0].z === 0 || points[0].z === 0.5);\n      if (points[1]) {\n        isPen = isPen && !(points[1].z === 0 || points[1].z === 0.5);\n      }\n      return _objectSpread(_objectSpread({}, shape), {}, {\n        props: _objectSpread(_objectSpread({}, shape.props), {}, {\n          isPen: isPen\n        })\n      });\n    },\n    down: function down(shape) {\n      var _shape$props = shape.props,\n        _isPen = _shape$props.isPen,\n        propsWithOutIsPen = _objectWithoutProperties(_shape$props, _excluded);\n      return _objectSpread(_objectSpread({}, shape), {}, {\n        props: _objectSpread({}, propsWithOutIsPen)\n      });\n    }\n  })\n});\nexport { DrawShapeSegment, drawShapeMigrations, drawShapeProps };","map":{"version":3,"names":["defineMigrations","T","vec2dModelValidator","DefaultColorStyle","DefaultDashStyle","DefaultFillStyle","DefaultSizeStyle","DrawShapeSegment","object","type","literalEnum","points","arrayOf","drawShapeProps","color","fill","dash","size","segments","isComplete","boolean","isClosed","isPen","Versions","AddInPen","drawShapeMigrations","currentVersion","migrators","_defineProperty","up","shape","props","length","_objectSpread","z","down","_shape$props","_isPen","propsWithOutIsPen","_objectWithoutProperties","_excluded"],"sources":["/Users/lesleyshinhiwa/Downloads/tldraw-partykit-example-2/Co/node_modules/@tldraw/tlschema/src/shapes/TLDrawShape.ts"],"sourcesContent":["import { defineMigrations } from '@tldraw/store'\nimport { T } from '@tldraw/validate'\nimport { vec2dModelValidator } from '../misc/geometry-types'\nimport { DefaultColorStyle } from '../styles/TLColorStyle'\nimport { DefaultDashStyle } from '../styles/TLDashStyle'\nimport { DefaultFillStyle } from '../styles/TLFillStyle'\nimport { DefaultSizeStyle } from '../styles/TLSizeStyle'\nimport { ShapePropsType, TLBaseShape } from './TLBaseShape'\n\nexport const DrawShapeSegment = T.object({\n\ttype: T.literalEnum('free', 'straight'),\n\tpoints: T.arrayOf(vec2dModelValidator),\n})\n\n/** @public */\nexport type TLDrawShapeSegment = T.TypeOf<typeof DrawShapeSegment>\n\n/** @public */\nexport const drawShapeProps = {\n\tcolor: DefaultColorStyle,\n\tfill: DefaultFillStyle,\n\tdash: DefaultDashStyle,\n\tsize: DefaultSizeStyle,\n\tsegments: T.arrayOf(DrawShapeSegment),\n\tisComplete: T.boolean,\n\tisClosed: T.boolean,\n\tisPen: T.boolean,\n}\n\n/** @public */\nexport type TLDrawShapeProps = ShapePropsType<typeof drawShapeProps>\n\n/** @public */\nexport type TLDrawShape = TLBaseShape<'draw', TLDrawShapeProps>\n\nconst Versions = {\n\tAddInPen: 1,\n} as const\n\n/** @internal */\nexport const drawShapeMigrations = defineMigrations({\n\tcurrentVersion: Versions.AddInPen,\n\tmigrators: {\n\t\t[Versions.AddInPen]: {\n\t\t\tup: (shape) => {\n\t\t\t\t// Rather than checking to see whether the shape is a pen at runtime,\n\t\t\t\t// from now on we're going to use the type of device reported to us\n\t\t\t\t// as well as the pressure data received; but for existing shapes we\n\t\t\t\t// need to check the pressure data to see if it's a pen or not.\n\n\t\t\t\tconst { points } = shape.props.segments[0]\n\n\t\t\t\tif (points.length === 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...shape,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\t\tisPen: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet isPen = !(points[0].z === 0 || points[0].z === 0.5)\n\n\t\t\t\tif (points[1]) {\n\t\t\t\t\t// Double check if we have a second point (we probably should)\n\t\t\t\t\tisPen = isPen && !(points[1].z === 0 || points[1].z === 0.5)\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...shape,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\tisPen,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: (shape) => {\n\t\t\t\tconst { isPen: _isPen, ...propsWithOutIsPen } = shape.props\n\t\t\t\treturn {\n\t\t\t\t\t...shape,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...propsWithOutIsPen,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\n"],"mappings":";;;;AAAA,SAASA,gBAAA,QAAwB;AACjC,SAASC,CAAA,QAAS;AAClB,SAASC,mBAAA,QAA2B;AACpC,SAASC,iBAAA,QAAyB;AAClC,SAASC,gBAAA,QAAwB;AACjC,SAASC,gBAAA,QAAwB;AACjC,SAASC,gBAAA,QAAwB;AAG1B,IAAMC,gBAAA,GAAmBN,CAAA,CAAEO,MAAA,CAAO;EACxCC,IAAA,EAAMR,CAAA,CAAES,WAAA,CAAY,QAAQ,UAAU;EACtCC,MAAA,EAAQV,CAAA,CAAEW,OAAA,CAAQV,mBAAmB;AACtC,CAAC;AAMM,IAAMW,cAAA,GAAiB;EAC7BC,KAAA,EAAOX,iBAAA;EACPY,IAAA,EAAMV,gBAAA;EACNW,IAAA,EAAMZ,gBAAA;EACNa,IAAA,EAAMX,gBAAA;EACNY,QAAA,EAAUjB,CAAA,CAAEW,OAAA,CAAQL,gBAAgB;EACpCY,UAAA,EAAYlB,CAAA,CAAEmB,OAAA;EACdC,QAAA,EAAUpB,CAAA,CAAEmB,OAAA;EACZE,KAAA,EAAOrB,CAAA,CAAEmB;AACV;AAQA,IAAMG,QAAA,GAAW;EAChBC,QAAA,EAAU;AACX;AAGO,IAAMC,mBAAA,GAAsBzB,gBAAA,CAAiB;EACnD0B,cAAA,EAAgBH,QAAA,CAASC,QAAA;EACzBG,SAAA,EAAAC,eAAA,KACEL,QAAA,CAASC,QAAQ,EAAG;IACpBK,EAAA,EAAI,SAAAA,GAACC,KAAA,EAAU;MAMd,IAAQnB,MAAA,GAAWmB,KAAA,CAAMC,KAAA,CAAMb,QAAA,CAAS,CAAC,EAAjCP,MAAA;MAER,IAAIA,MAAA,CAAOqB,MAAA,KAAW,GAAG;QACxB,OAAAC,aAAA,CAAAA,aAAA,KACIH,KAAA;UACHC,KAAA,EAAAE,aAAA,CAAAA,aAAA,KACIH,KAAA,CAAMC,KAAA;YACTT,KAAA,EAAO;UAAA;QACR;MAEF;MAEA,IAAIA,KAAA,GAAQ,EAAEX,MAAA,CAAO,CAAC,EAAEuB,CAAA,KAAM,KAAKvB,MAAA,CAAO,CAAC,EAAEuB,CAAA,KAAM;MAEnD,IAAIvB,MAAA,CAAO,CAAC,GAAG;QAEdW,KAAA,GAAQA,KAAA,IAAS,EAAEX,MAAA,CAAO,CAAC,EAAEuB,CAAA,KAAM,KAAKvB,MAAA,CAAO,CAAC,EAAEuB,CAAA,KAAM;MACzD;MAEA,OAAAD,aAAA,CAAAA,aAAA,KACIH,KAAA;QACHC,KAAA,EAAAE,aAAA,CAAAA,aAAA,KACIH,KAAA,CAAMC,KAAA;UACTT,KAAA,EAAAA;QAAA;MACD;IAEF;IACAa,IAAA,EAAM,SAAAA,KAACL,KAAA,EAAU;MAChB,IAAAM,YAAA,GAAgDN,KAAA,CAAMC,KAAA;QAAvCM,MAAA,GAAAD,YAAA,CAAPd,KAAA;QAAkBgB,iBAAA,GAAAC,wBAAA,CAAAH,YAAA,EAAAI,SAAA;MAC1B,OAAAP,aAAA,CAAAA,aAAA,KACIH,KAAA;QACHC,KAAA,EAAAE,aAAA,KACIK,iBAAA;MACJ;IAEF;EACD;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}